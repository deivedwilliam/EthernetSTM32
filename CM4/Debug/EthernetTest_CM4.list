
EthernetTest_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000a20  08100298  08100298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08100cb8  08100cb8  00010cb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08100cc8  08100cc8  00010cc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08100ccc  08100ccc  00010ccc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  10000000  08100cd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  10000010  08100ce0  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000800  10000030  08100ce0  00020030  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000c9d9  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001a53  00000000  00000000  0002ca19  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000788  00000000  00000000  0002e470  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000006e0  00000000  00000000  0002ebf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003657c  00000000  00000000  0002f2d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000068ce  00000000  00000000  00065854  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0016aec2  00000000  00000000  0006c122  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007b  00000000  00000000  001d6fe4  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001cec  00000000  00000000  001d7060  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	; (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	; (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	; (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	10000010 	.word	0x10000010
 81002b4:	00000000 	.word	0x00000000
 81002b8:	08100ca0 	.word	0x08100ca0

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	; (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	; (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	; (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	10000014 	.word	0x10000014
 81002d4:	08100ca0 	.word	0x08100ca0

081002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81002d8:	b480      	push	{r7}
 81002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81002dc:	4b0b      	ldr	r3, [pc, #44]	; (810030c <SystemInit+0x34>)
 81002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81002e2:	4a0a      	ldr	r2, [pc, #40]	; (810030c <SystemInit+0x34>)
 81002e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 81002e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Pos;
 81002ec:	4b07      	ldr	r3, [pc, #28]	; (810030c <SystemInit+0x34>)
 81002ee:	691b      	ldr	r3, [r3, #16]
 81002f0:	4a06      	ldr	r2, [pc, #24]	; (810030c <SystemInit+0x34>)
 81002f2:	f043 0304 	orr.w	r3, r3, #4
 81002f6:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AHBSRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 81002f8:	4b04      	ldr	r3, [pc, #16]	; (810030c <SystemInit+0x34>)
 81002fa:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 81002fe:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8100300:	bf00      	nop
 8100302:	46bd      	mov	sp, r7
 8100304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100308:	4770      	bx	lr
 810030a:	bf00      	nop
 810030c:	e000ed00 	.word	0xe000ed00

08100310 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8100310:	b580      	push	{r7, lr}
 8100312:	b082      	sub	sp, #8
 8100314:	af00      	add	r7, sp, #0

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8100316:	4b27      	ldr	r3, [pc, #156]	; (81003b4 <HAL_Init+0xa4>)
 8100318:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 810031c:	4a25      	ldr	r2, [pc, #148]	; (81003b4 <HAL_Init+0xa4>)
 810031e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8100322:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8100326:	4b23      	ldr	r3, [pc, #140]	; (81003b4 <HAL_Init+0xa4>)
 8100328:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 810032c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8100330:	607b      	str	r3, [r7, #4]
 8100332:	687b      	ldr	r3, [r7, #4]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8100334:	4b20      	ldr	r3, [pc, #128]	; (81003b8 <HAL_Init+0xa8>)
 8100336:	681b      	ldr	r3, [r3, #0]
 8100338:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 810033c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8100340:	4a1d      	ldr	r2, [pc, #116]	; (81003b8 <HAL_Init+0xa8>)
 8100342:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8100346:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8100348:	4b1b      	ldr	r3, [pc, #108]	; (81003b8 <HAL_Init+0xa8>)
 810034a:	681b      	ldr	r3, [r3, #0]
 810034c:	4a1a      	ldr	r2, [pc, #104]	; (81003b8 <HAL_Init+0xa8>)
 810034e:	f043 0301 	orr.w	r3, r3, #1
 8100352:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8100354:	2003      	movs	r0, #3
 8100356:	f000 f94d 	bl	81005f4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 810035a:	f000 fa23 	bl	81007a4 <HAL_RCC_GetSysClockFreq>
 810035e:	4601      	mov	r1, r0
 8100360:	4b14      	ldr	r3, [pc, #80]	; (81003b4 <HAL_Init+0xa4>)
 8100362:	699b      	ldr	r3, [r3, #24]
 8100364:	0a1b      	lsrs	r3, r3, #8
 8100366:	f003 030f 	and.w	r3, r3, #15
 810036a:	4a14      	ldr	r2, [pc, #80]	; (81003bc <HAL_Init+0xac>)
 810036c:	5cd3      	ldrb	r3, [r2, r3]
 810036e:	f003 031f 	and.w	r3, r3, #31
 8100372:	fa21 f303 	lsr.w	r3, r1, r3
 8100376:	4a12      	ldr	r2, [pc, #72]	; (81003c0 <HAL_Init+0xb0>)
 8100378:	6013      	str	r3, [r2, #0]

  /* Update the SystemD2Clock global variable */
  SystemD2Clock = (SystemCoreClock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 810037a:	4b11      	ldr	r3, [pc, #68]	; (81003c0 <HAL_Init+0xb0>)
 810037c:	681a      	ldr	r2, [r3, #0]
 810037e:	4b0d      	ldr	r3, [pc, #52]	; (81003b4 <HAL_Init+0xa4>)
 8100380:	699b      	ldr	r3, [r3, #24]
 8100382:	f003 030f 	and.w	r3, r3, #15
 8100386:	490d      	ldr	r1, [pc, #52]	; (81003bc <HAL_Init+0xac>)
 8100388:	5ccb      	ldrb	r3, [r1, r3]
 810038a:	f003 031f 	and.w	r3, r3, #31
 810038e:	fa22 f303 	lsr.w	r3, r2, r3
 8100392:	4a0c      	ldr	r2, [pc, #48]	; (81003c4 <HAL_Init+0xb4>)
 8100394:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8100396:	2000      	movs	r0, #0
 8100398:	f000 f816 	bl	81003c8 <HAL_InitTick>
 810039c:	4603      	mov	r3, r0
 810039e:	2b00      	cmp	r3, #0
 81003a0:	d001      	beq.n	81003a6 <HAL_Init+0x96>
  {
    return HAL_ERROR;
 81003a2:	2301      	movs	r3, #1
 81003a4:	e002      	b.n	81003ac <HAL_Init+0x9c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 81003a6:	f000 fbe5 	bl	8100b74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 81003aa:	2300      	movs	r3, #0
}
 81003ac:	4618      	mov	r0, r3
 81003ae:	3708      	adds	r7, #8
 81003b0:	46bd      	mov	sp, r7
 81003b2:	bd80      	pop	{r7, pc}
 81003b4:	58024400 	.word	0x58024400
 81003b8:	40024400 	.word	0x40024400
 81003bc:	08100cb8 	.word	0x08100cb8
 81003c0:	10000000 	.word	0x10000000
 81003c4:	10000004 	.word	0x10000004

081003c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 81003c8:	b580      	push	{r7, lr}
 81003ca:	b082      	sub	sp, #8
 81003cc:	af00      	add	r7, sp, #0
 81003ce:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 81003d0:	4b22      	ldr	r3, [pc, #136]	; (810045c <HAL_InitTick+0x94>)
 81003d2:	781b      	ldrb	r3, [r3, #0]
 81003d4:	2b00      	cmp	r3, #0
 81003d6:	d101      	bne.n	81003dc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 81003d8:	2301      	movs	r3, #1
 81003da:	e03a      	b.n	8100452 <HAL_InitTick+0x8a>
  }

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 81003dc:	f000 f93c 	bl	8100658 <HAL_GetCurrentCPUID>
 81003e0:	4603      	mov	r3, r0
 81003e2:	2b03      	cmp	r3, #3
 81003e4:	d112      	bne.n	810040c <HAL_InitTick+0x44>
  {
    /* Cortex-M7 detected */
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 81003e6:	4b1e      	ldr	r3, [pc, #120]	; (8100460 <HAL_InitTick+0x98>)
 81003e8:	681a      	ldr	r2, [r3, #0]
 81003ea:	4b1c      	ldr	r3, [pc, #112]	; (810045c <HAL_InitTick+0x94>)
 81003ec:	781b      	ldrb	r3, [r3, #0]
 81003ee:	4619      	mov	r1, r3
 81003f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 81003f4:	fbb3 f3f1 	udiv	r3, r3, r1
 81003f8:	fbb2 f3f3 	udiv	r3, r2, r3
 81003fc:	4618      	mov	r0, r3
 81003fe:	f000 f91e 	bl	810063e <HAL_SYSTICK_Config>
 8100402:	4603      	mov	r3, r0
 8100404:	2b00      	cmp	r3, #0
 8100406:	d015      	beq.n	8100434 <HAL_InitTick+0x6c>
    {
      return HAL_ERROR;
 8100408:	2301      	movs	r3, #1
 810040a:	e022      	b.n	8100452 <HAL_InitTick+0x8a>
  }
  else
  {
    /* Cortex-M4 detected */
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 810040c:	f000 fb3c 	bl	8100a88 <HAL_RCC_GetHCLKFreq>
 8100410:	4602      	mov	r2, r0
 8100412:	4b12      	ldr	r3, [pc, #72]	; (810045c <HAL_InitTick+0x94>)
 8100414:	781b      	ldrb	r3, [r3, #0]
 8100416:	4619      	mov	r1, r3
 8100418:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 810041c:	fbb3 f3f1 	udiv	r3, r3, r1
 8100420:	fbb2 f3f3 	udiv	r3, r2, r3
 8100424:	4618      	mov	r0, r3
 8100426:	f000 f90a 	bl	810063e <HAL_SYSTICK_Config>
 810042a:	4603      	mov	r3, r0
 810042c:	2b00      	cmp	r3, #0
 810042e:	d001      	beq.n	8100434 <HAL_InitTick+0x6c>
    {
      return HAL_ERROR;
 8100430:	2301      	movs	r3, #1
 8100432:	e00e      	b.n	8100452 <HAL_InitTick+0x8a>
    return HAL_ERROR;
  }
#endif

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8100434:	687b      	ldr	r3, [r7, #4]
 8100436:	2b0f      	cmp	r3, #15
 8100438:	d80a      	bhi.n	8100450 <HAL_InitTick+0x88>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 810043a:	2200      	movs	r2, #0
 810043c:	6879      	ldr	r1, [r7, #4]
 810043e:	f04f 30ff 	mov.w	r0, #4294967295
 8100442:	f000 f8e2 	bl	810060a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8100446:	4a07      	ldr	r2, [pc, #28]	; (8100464 <HAL_InitTick+0x9c>)
 8100448:	687b      	ldr	r3, [r7, #4]
 810044a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 810044c:	2300      	movs	r3, #0
 810044e:	e000      	b.n	8100452 <HAL_InitTick+0x8a>
    return HAL_ERROR;
 8100450:	2301      	movs	r3, #1
}
 8100452:	4618      	mov	r0, r3
 8100454:	3708      	adds	r7, #8
 8100456:	46bd      	mov	sp, r7
 8100458:	bd80      	pop	{r7, pc}
 810045a:	bf00      	nop
 810045c:	1000000c 	.word	0x1000000c
 8100460:	10000000 	.word	0x10000000
 8100464:	10000008 	.word	0x10000008

08100468 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8100468:	b480      	push	{r7}
 810046a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 810046c:	4b06      	ldr	r3, [pc, #24]	; (8100488 <HAL_IncTick+0x20>)
 810046e:	781b      	ldrb	r3, [r3, #0]
 8100470:	461a      	mov	r2, r3
 8100472:	4b06      	ldr	r3, [pc, #24]	; (810048c <HAL_IncTick+0x24>)
 8100474:	681b      	ldr	r3, [r3, #0]
 8100476:	4413      	add	r3, r2
 8100478:	4a04      	ldr	r2, [pc, #16]	; (810048c <HAL_IncTick+0x24>)
 810047a:	6013      	str	r3, [r2, #0]
}
 810047c:	bf00      	nop
 810047e:	46bd      	mov	sp, r7
 8100480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100484:	4770      	bx	lr
 8100486:	bf00      	nop
 8100488:	1000000c 	.word	0x1000000c
 810048c:	1000002c 	.word	0x1000002c

08100490 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8100490:	b480      	push	{r7}
 8100492:	b085      	sub	sp, #20
 8100494:	af00      	add	r7, sp, #0
 8100496:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8100498:	687b      	ldr	r3, [r7, #4]
 810049a:	f003 0307 	and.w	r3, r3, #7
 810049e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 81004a0:	4b0c      	ldr	r3, [pc, #48]	; (81004d4 <__NVIC_SetPriorityGrouping+0x44>)
 81004a2:	68db      	ldr	r3, [r3, #12]
 81004a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 81004a6:	68ba      	ldr	r2, [r7, #8]
 81004a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 81004ac:	4013      	ands	r3, r2
 81004ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 81004b0:	68fb      	ldr	r3, [r7, #12]
 81004b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 81004b4:	68bb      	ldr	r3, [r7, #8]
 81004b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 81004b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 81004bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81004c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 81004c2:	4a04      	ldr	r2, [pc, #16]	; (81004d4 <__NVIC_SetPriorityGrouping+0x44>)
 81004c4:	68bb      	ldr	r3, [r7, #8]
 81004c6:	60d3      	str	r3, [r2, #12]
}
 81004c8:	bf00      	nop
 81004ca:	3714      	adds	r7, #20
 81004cc:	46bd      	mov	sp, r7
 81004ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 81004d2:	4770      	bx	lr
 81004d4:	e000ed00 	.word	0xe000ed00

081004d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 81004d8:	b480      	push	{r7}
 81004da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 81004dc:	4b04      	ldr	r3, [pc, #16]	; (81004f0 <__NVIC_GetPriorityGrouping+0x18>)
 81004de:	68db      	ldr	r3, [r3, #12]
 81004e0:	0a1b      	lsrs	r3, r3, #8
 81004e2:	f003 0307 	and.w	r3, r3, #7
}
 81004e6:	4618      	mov	r0, r3
 81004e8:	46bd      	mov	sp, r7
 81004ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 81004ee:	4770      	bx	lr
 81004f0:	e000ed00 	.word	0xe000ed00

081004f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 81004f4:	b480      	push	{r7}
 81004f6:	b083      	sub	sp, #12
 81004f8:	af00      	add	r7, sp, #0
 81004fa:	4603      	mov	r3, r0
 81004fc:	6039      	str	r1, [r7, #0]
 81004fe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8100500:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100504:	2b00      	cmp	r3, #0
 8100506:	db0a      	blt.n	810051e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100508:	683b      	ldr	r3, [r7, #0]
 810050a:	b2da      	uxtb	r2, r3
 810050c:	490c      	ldr	r1, [pc, #48]	; (8100540 <__NVIC_SetPriority+0x4c>)
 810050e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100512:	0112      	lsls	r2, r2, #4
 8100514:	b2d2      	uxtb	r2, r2
 8100516:	440b      	add	r3, r1
 8100518:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 810051c:	e00a      	b.n	8100534 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810051e:	683b      	ldr	r3, [r7, #0]
 8100520:	b2da      	uxtb	r2, r3
 8100522:	4908      	ldr	r1, [pc, #32]	; (8100544 <__NVIC_SetPriority+0x50>)
 8100524:	88fb      	ldrh	r3, [r7, #6]
 8100526:	f003 030f 	and.w	r3, r3, #15
 810052a:	3b04      	subs	r3, #4
 810052c:	0112      	lsls	r2, r2, #4
 810052e:	b2d2      	uxtb	r2, r2
 8100530:	440b      	add	r3, r1
 8100532:	761a      	strb	r2, [r3, #24]
}
 8100534:	bf00      	nop
 8100536:	370c      	adds	r7, #12
 8100538:	46bd      	mov	sp, r7
 810053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810053e:	4770      	bx	lr
 8100540:	e000e100 	.word	0xe000e100
 8100544:	e000ed00 	.word	0xe000ed00

08100548 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8100548:	b480      	push	{r7}
 810054a:	b089      	sub	sp, #36	; 0x24
 810054c:	af00      	add	r7, sp, #0
 810054e:	60f8      	str	r0, [r7, #12]
 8100550:	60b9      	str	r1, [r7, #8]
 8100552:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8100554:	68fb      	ldr	r3, [r7, #12]
 8100556:	f003 0307 	and.w	r3, r3, #7
 810055a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 810055c:	69fb      	ldr	r3, [r7, #28]
 810055e:	f1c3 0307 	rsb	r3, r3, #7
 8100562:	2b04      	cmp	r3, #4
 8100564:	bf28      	it	cs
 8100566:	2304      	movcs	r3, #4
 8100568:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 810056a:	69fb      	ldr	r3, [r7, #28]
 810056c:	3304      	adds	r3, #4
 810056e:	2b06      	cmp	r3, #6
 8100570:	d902      	bls.n	8100578 <NVIC_EncodePriority+0x30>
 8100572:	69fb      	ldr	r3, [r7, #28]
 8100574:	3b03      	subs	r3, #3
 8100576:	e000      	b.n	810057a <NVIC_EncodePriority+0x32>
 8100578:	2300      	movs	r3, #0
 810057a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 810057c:	f04f 32ff 	mov.w	r2, #4294967295
 8100580:	69bb      	ldr	r3, [r7, #24]
 8100582:	fa02 f303 	lsl.w	r3, r2, r3
 8100586:	43da      	mvns	r2, r3
 8100588:	68bb      	ldr	r3, [r7, #8]
 810058a:	401a      	ands	r2, r3
 810058c:	697b      	ldr	r3, [r7, #20]
 810058e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8100590:	f04f 31ff 	mov.w	r1, #4294967295
 8100594:	697b      	ldr	r3, [r7, #20]
 8100596:	fa01 f303 	lsl.w	r3, r1, r3
 810059a:	43d9      	mvns	r1, r3
 810059c:	687b      	ldr	r3, [r7, #4]
 810059e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81005a0:	4313      	orrs	r3, r2
         );
}
 81005a2:	4618      	mov	r0, r3
 81005a4:	3724      	adds	r7, #36	; 0x24
 81005a6:	46bd      	mov	sp, r7
 81005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81005ac:	4770      	bx	lr
	...

081005b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 81005b0:	b580      	push	{r7, lr}
 81005b2:	b082      	sub	sp, #8
 81005b4:	af00      	add	r7, sp, #0
 81005b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 81005b8:	687b      	ldr	r3, [r7, #4]
 81005ba:	3b01      	subs	r3, #1
 81005bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 81005c0:	d301      	bcc.n	81005c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 81005c2:	2301      	movs	r3, #1
 81005c4:	e00f      	b.n	81005e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 81005c6:	4a0a      	ldr	r2, [pc, #40]	; (81005f0 <SysTick_Config+0x40>)
 81005c8:	687b      	ldr	r3, [r7, #4]
 81005ca:	3b01      	subs	r3, #1
 81005cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 81005ce:	210f      	movs	r1, #15
 81005d0:	f04f 30ff 	mov.w	r0, #4294967295
 81005d4:	f7ff ff8e 	bl	81004f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 81005d8:	4b05      	ldr	r3, [pc, #20]	; (81005f0 <SysTick_Config+0x40>)
 81005da:	2200      	movs	r2, #0
 81005dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 81005de:	4b04      	ldr	r3, [pc, #16]	; (81005f0 <SysTick_Config+0x40>)
 81005e0:	2207      	movs	r2, #7
 81005e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 81005e4:	2300      	movs	r3, #0
}
 81005e6:	4618      	mov	r0, r3
 81005e8:	3708      	adds	r7, #8
 81005ea:	46bd      	mov	sp, r7
 81005ec:	bd80      	pop	{r7, pc}
 81005ee:	bf00      	nop
 81005f0:	e000e010 	.word	0xe000e010

081005f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81005f4:	b580      	push	{r7, lr}
 81005f6:	b082      	sub	sp, #8
 81005f8:	af00      	add	r7, sp, #0
 81005fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 81005fc:	6878      	ldr	r0, [r7, #4]
 81005fe:	f7ff ff47 	bl	8100490 <__NVIC_SetPriorityGrouping>
}
 8100602:	bf00      	nop
 8100604:	3708      	adds	r7, #8
 8100606:	46bd      	mov	sp, r7
 8100608:	bd80      	pop	{r7, pc}

0810060a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 810060a:	b580      	push	{r7, lr}
 810060c:	b086      	sub	sp, #24
 810060e:	af00      	add	r7, sp, #0
 8100610:	4603      	mov	r3, r0
 8100612:	60b9      	str	r1, [r7, #8]
 8100614:	607a      	str	r2, [r7, #4]
 8100616:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8100618:	f7ff ff5e 	bl	81004d8 <__NVIC_GetPriorityGrouping>
 810061c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 810061e:	687a      	ldr	r2, [r7, #4]
 8100620:	68b9      	ldr	r1, [r7, #8]
 8100622:	6978      	ldr	r0, [r7, #20]
 8100624:	f7ff ff90 	bl	8100548 <NVIC_EncodePriority>
 8100628:	4602      	mov	r2, r0
 810062a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 810062e:	4611      	mov	r1, r2
 8100630:	4618      	mov	r0, r3
 8100632:	f7ff ff5f 	bl	81004f4 <__NVIC_SetPriority>
}
 8100636:	bf00      	nop
 8100638:	3718      	adds	r7, #24
 810063a:	46bd      	mov	sp, r7
 810063c:	bd80      	pop	{r7, pc}

0810063e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 810063e:	b580      	push	{r7, lr}
 8100640:	b082      	sub	sp, #8
 8100642:	af00      	add	r7, sp, #0
 8100644:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8100646:	6878      	ldr	r0, [r7, #4]
 8100648:	f7ff ffb2 	bl	81005b0 <SysTick_Config>
 810064c:	4603      	mov	r3, r0
}
 810064e:	4618      	mov	r0, r3
 8100650:	3708      	adds	r7, #8
 8100652:	46bd      	mov	sp, r7
 8100654:	bd80      	pop	{r7, pc}
	...

08100658 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8100658:	b480      	push	{r7}
 810065a:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 810065c:	4b07      	ldr	r3, [pc, #28]	; (810067c <HAL_GetCurrentCPUID+0x24>)
 810065e:	681b      	ldr	r3, [r3, #0]
 8100660:	091b      	lsrs	r3, r3, #4
 8100662:	f003 030f 	and.w	r3, r3, #15
 8100666:	2b07      	cmp	r3, #7
 8100668:	d101      	bne.n	810066e <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 810066a:	2303      	movs	r3, #3
 810066c:	e000      	b.n	8100670 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 810066e:	2301      	movs	r3, #1
  }
}
 8100670:	4618      	mov	r0, r3
 8100672:	46bd      	mov	sp, r7
 8100674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100678:	4770      	bx	lr
 810067a:	bf00      	nop
 810067c:	e000ed00 	.word	0xe000ed00

08100680 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8100680:	b480      	push	{r7}
 8100682:	b083      	sub	sp, #12
 8100684:	af00      	add	r7, sp, #0
 8100686:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8100688:	4b05      	ldr	r3, [pc, #20]	; (81006a0 <HAL_HSEM_ActivateNotification+0x20>)
 810068a:	681a      	ldr	r2, [r3, #0]
 810068c:	4904      	ldr	r1, [pc, #16]	; (81006a0 <HAL_HSEM_ActivateNotification+0x20>)
 810068e:	687b      	ldr	r3, [r7, #4]
 8100690:	4313      	orrs	r3, r2
 8100692:	600b      	str	r3, [r1, #0]
#endif
}
 8100694:	bf00      	nop
 8100696:	370c      	adds	r7, #12
 8100698:	46bd      	mov	sp, r7
 810069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810069e:	4770      	bx	lr
 81006a0:	58026510 	.word	0x58026510

081006a4 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN: Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN: Enter D3 Domain to DSTOP mode.
  * @retval None
  */
void HAL_PWREx_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 81006a4:	b480      	push	{r7}
 81006a6:	b085      	sub	sp, #20
 81006a8:	af00      	add	r7, sp, #0
 81006aa:	60f8      	str	r0, [r7, #12]
 81006ac:	460b      	mov	r3, r1
 81006ae:	607a      	str	r2, [r7, #4]
 81006b0:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
  assert_param(IS_PWR_DOMAIN(Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPDS, Regulator);
 81006b2:	4b33      	ldr	r3, [pc, #204]	; (8100780 <HAL_PWREx_EnterSTOPMode+0xdc>)
 81006b4:	681b      	ldr	r3, [r3, #0]
 81006b6:	f023 0201 	bic.w	r2, r3, #1
 81006ba:	4931      	ldr	r1, [pc, #196]	; (8100780 <HAL_PWREx_EnterSTOPMode+0xdc>)
 81006bc:	68fb      	ldr	r3, [r7, #12]
 81006be:	4313      	orrs	r3, r2
 81006c0:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 81006c2:	687b      	ldr	r3, [r7, #4]
 81006c4:	2b00      	cmp	r3, #0
 81006c6:	d122      	bne.n	810070e <HAL_PWREx_EnterSTOPMode+0x6a>
  {
    /* Check Core */
    assert_param(IS_PWR_D1_CPU(HAL_GetCurrentCPUID()));

    /* Keep DSTOP mode when D1 domain enters Deepsleep */
    CLEAR_BIT(PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 81006c8:	4b2d      	ldr	r3, [pc, #180]	; (8100780 <HAL_PWREx_EnterSTOPMode+0xdc>)
 81006ca:	691b      	ldr	r3, [r3, #16]
 81006cc:	4a2c      	ldr	r2, [pc, #176]	; (8100780 <HAL_PWREx_EnterSTOPMode+0xdc>)
 81006ce:	f023 0301 	bic.w	r3, r3, #1
 81006d2:	6113      	str	r3, [r2, #16]

#if defined(DUAL_CORE)
    CLEAR_BIT(PWR->CPU2CR, PWR_CPU2CR_PDDS_D1);
 81006d4:	4b2a      	ldr	r3, [pc, #168]	; (8100780 <HAL_PWREx_EnterSTOPMode+0xdc>)
 81006d6:	695b      	ldr	r3, [r3, #20]
 81006d8:	4a29      	ldr	r2, [pc, #164]	; (8100780 <HAL_PWREx_EnterSTOPMode+0xdc>)
 81006da:	f023 0301 	bic.w	r3, r3, #1
 81006de:	6153      	str	r3, [r2, #20]
#endif /*DUAL_CORE*/

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 81006e0:	4b28      	ldr	r3, [pc, #160]	; (8100784 <HAL_PWREx_EnterSTOPMode+0xe0>)
 81006e2:	691b      	ldr	r3, [r3, #16]
 81006e4:	4a27      	ldr	r2, [pc, #156]	; (8100784 <HAL_PWREx_EnterSTOPMode+0xe0>)
 81006e6:	f043 0304 	orr.w	r3, r3, #4
 81006ea:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 81006ec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 81006f0:	f3bf 8f6f 	isb	sy
    /* Ensure that all instructions done before entering STOP mode */
    __DSB();
    __ISB();

    /* Select Stop mode entry */
    if(STOPEntry == PWR_STOPENTRY_WFI)
 81006f4:	7afb      	ldrb	r3, [r7, #11]
 81006f6:	2b01      	cmp	r3, #1
 81006f8:	d101      	bne.n	81006fe <HAL_PWREx_EnterSTOPMode+0x5a>
    {
      /* Request Wait For Interrupt */
      __WFI();
 81006fa:	bf30      	wfi
 81006fc:	e000      	b.n	8100700 <HAL_PWREx_EnterSTOPMode+0x5c>
    }
    else
    {
      /* Request Wait For Event */
      __WFE();
 81006fe:	bf20      	wfe
    }

    /* Reset SLEEPDEEP bit of Cortex System Control Register */
    SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
 8100700:	4b20      	ldr	r3, [pc, #128]	; (8100784 <HAL_PWREx_EnterSTOPMode+0xe0>)
 8100702:	691b      	ldr	r3, [r3, #16]
 8100704:	4a1f      	ldr	r2, [pc, #124]	; (8100784 <HAL_PWREx_EnterSTOPMode+0xe0>)
 8100706:	f023 0304 	bic.w	r3, r3, #4
 810070a:	6113      	str	r3, [r2, #16]

#if defined(DUAL_CORE)
    CLEAR_BIT(PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
#endif /*DUAL_CORE*/
  }
}
 810070c:	e031      	b.n	8100772 <HAL_PWREx_EnterSTOPMode+0xce>
  else if (Domain == PWR_D2_DOMAIN)
 810070e:	687b      	ldr	r3, [r7, #4]
 8100710:	2b01      	cmp	r3, #1
 8100712:	d122      	bne.n	810075a <HAL_PWREx_EnterSTOPMode+0xb6>
    CLEAR_BIT(PWR->CPUCR, PWR_CPUCR_PDDS_D2);
 8100714:	4b1a      	ldr	r3, [pc, #104]	; (8100780 <HAL_PWREx_EnterSTOPMode+0xdc>)
 8100716:	691b      	ldr	r3, [r3, #16]
 8100718:	4a19      	ldr	r2, [pc, #100]	; (8100780 <HAL_PWREx_EnterSTOPMode+0xdc>)
 810071a:	f023 0302 	bic.w	r3, r3, #2
 810071e:	6113      	str	r3, [r2, #16]
    CLEAR_BIT(PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8100720:	4b17      	ldr	r3, [pc, #92]	; (8100780 <HAL_PWREx_EnterSTOPMode+0xdc>)
 8100722:	695b      	ldr	r3, [r3, #20]
 8100724:	4a16      	ldr	r2, [pc, #88]	; (8100780 <HAL_PWREx_EnterSTOPMode+0xdc>)
 8100726:	f023 0302 	bic.w	r3, r3, #2
 810072a:	6153      	str	r3, [r2, #20]
    SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 810072c:	4b15      	ldr	r3, [pc, #84]	; (8100784 <HAL_PWREx_EnterSTOPMode+0xe0>)
 810072e:	691b      	ldr	r3, [r3, #16]
 8100730:	4a14      	ldr	r2, [pc, #80]	; (8100784 <HAL_PWREx_EnterSTOPMode+0xe0>)
 8100732:	f043 0304 	orr.w	r3, r3, #4
 8100736:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8100738:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 810073c:	f3bf 8f6f 	isb	sy
    if(STOPEntry == PWR_STOPENTRY_WFI)
 8100740:	7afb      	ldrb	r3, [r7, #11]
 8100742:	2b01      	cmp	r3, #1
 8100744:	d101      	bne.n	810074a <HAL_PWREx_EnterSTOPMode+0xa6>
      __WFI();
 8100746:	bf30      	wfi
 8100748:	e000      	b.n	810074c <HAL_PWREx_EnterSTOPMode+0xa8>
      __WFE();
 810074a:	bf20      	wfe
    SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
 810074c:	4b0d      	ldr	r3, [pc, #52]	; (8100784 <HAL_PWREx_EnterSTOPMode+0xe0>)
 810074e:	691b      	ldr	r3, [r3, #16]
 8100750:	4a0c      	ldr	r2, [pc, #48]	; (8100784 <HAL_PWREx_EnterSTOPMode+0xe0>)
 8100752:	f023 0304 	bic.w	r3, r3, #4
 8100756:	6113      	str	r3, [r2, #16]
}
 8100758:	e00b      	b.n	8100772 <HAL_PWREx_EnterSTOPMode+0xce>
    CLEAR_BIT(PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 810075a:	4b09      	ldr	r3, [pc, #36]	; (8100780 <HAL_PWREx_EnterSTOPMode+0xdc>)
 810075c:	691b      	ldr	r3, [r3, #16]
 810075e:	4a08      	ldr	r2, [pc, #32]	; (8100780 <HAL_PWREx_EnterSTOPMode+0xdc>)
 8100760:	f023 0304 	bic.w	r3, r3, #4
 8100764:	6113      	str	r3, [r2, #16]
    CLEAR_BIT(PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8100766:	4b06      	ldr	r3, [pc, #24]	; (8100780 <HAL_PWREx_EnterSTOPMode+0xdc>)
 8100768:	695b      	ldr	r3, [r3, #20]
 810076a:	4a05      	ldr	r2, [pc, #20]	; (8100780 <HAL_PWREx_EnterSTOPMode+0xdc>)
 810076c:	f023 0304 	bic.w	r3, r3, #4
 8100770:	6153      	str	r3, [r2, #20]
}
 8100772:	bf00      	nop
 8100774:	3714      	adds	r7, #20
 8100776:	46bd      	mov	sp, r7
 8100778:	f85d 7b04 	ldr.w	r7, [sp], #4
 810077c:	4770      	bx	lr
 810077e:	bf00      	nop
 8100780:	58024800 	.word	0x58024800
 8100784:	e000ed00 	.word	0xe000ed00

08100788 <HAL_PWREx_ClearPendingEvent>:
  * @note   This API clear the pending event in order to enter a given domain to DSTOP. It should
  *         be called just before enter low power mode APIs using Wait For Event request.
  * @retval None
  */
void HAL_PWREx_ClearPendingEvent(void)
{
 8100788:	b580      	push	{r7, lr}
 810078a:	af00      	add	r7, sp, #0
#if defined(DUAL_CORE)
  /* Check Core */
  if(HAL_GetCurrentCPUID() == CM7_CPUID)
 810078c:	f7ff ff64 	bl	8100658 <HAL_GetCurrentCPUID>
 8100790:	4603      	mov	r3, r0
 8100792:	2b03      	cmp	r3, #3
 8100794:	d101      	bne.n	810079a <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE();
 8100796:	bf20      	wfe
  }
#else
  __WFE();
#endif /*DUAL_CORE*/

}
 8100798:	e001      	b.n	810079e <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV();
 810079a:	bf40      	sev
    __WFE();
 810079c:	bf20      	wfe
}
 810079e:	bf00      	nop
 81007a0:	bd80      	pop	{r7, pc}
	...

081007a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 81007a4:	b480      	push	{r7}
 81007a6:	b089      	sub	sp, #36	; 0x24
 81007a8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 81007aa:	4baf      	ldr	r3, [pc, #700]	; (8100a68 <HAL_RCC_GetSysClockFreq+0x2c4>)
 81007ac:	691b      	ldr	r3, [r3, #16]
 81007ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 81007b2:	2b18      	cmp	r3, #24
 81007b4:	f200 814e 	bhi.w	8100a54 <HAL_RCC_GetSysClockFreq+0x2b0>
 81007b8:	a201      	add	r2, pc, #4	; (adr r2, 81007c0 <HAL_RCC_GetSysClockFreq+0x1c>)
 81007ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81007be:	bf00      	nop
 81007c0:	08100825 	.word	0x08100825
 81007c4:	08100a55 	.word	0x08100a55
 81007c8:	08100a55 	.word	0x08100a55
 81007cc:	08100a55 	.word	0x08100a55
 81007d0:	08100a55 	.word	0x08100a55
 81007d4:	08100a55 	.word	0x08100a55
 81007d8:	08100a55 	.word	0x08100a55
 81007dc:	08100a55 	.word	0x08100a55
 81007e0:	0810084b 	.word	0x0810084b
 81007e4:	08100a55 	.word	0x08100a55
 81007e8:	08100a55 	.word	0x08100a55
 81007ec:	08100a55 	.word	0x08100a55
 81007f0:	08100a55 	.word	0x08100a55
 81007f4:	08100a55 	.word	0x08100a55
 81007f8:	08100a55 	.word	0x08100a55
 81007fc:	08100a55 	.word	0x08100a55
 8100800:	08100851 	.word	0x08100851
 8100804:	08100a55 	.word	0x08100a55
 8100808:	08100a55 	.word	0x08100a55
 810080c:	08100a55 	.word	0x08100a55
 8100810:	08100a55 	.word	0x08100a55
 8100814:	08100a55 	.word	0x08100a55
 8100818:	08100a55 	.word	0x08100a55
 810081c:	08100a55 	.word	0x08100a55
 8100820:	08100857 	.word	0x08100857
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8100824:	4b90      	ldr	r3, [pc, #576]	; (8100a68 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8100826:	681b      	ldr	r3, [r3, #0]
 8100828:	f003 0320 	and.w	r3, r3, #32
 810082c:	2b00      	cmp	r3, #0
 810082e:	d009      	beq.n	8100844 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8100830:	4b8d      	ldr	r3, [pc, #564]	; (8100a68 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8100832:	681b      	ldr	r3, [r3, #0]
 8100834:	08db      	lsrs	r3, r3, #3
 8100836:	f003 0303 	and.w	r3, r3, #3
 810083a:	4a8c      	ldr	r2, [pc, #560]	; (8100a6c <HAL_RCC_GetSysClockFreq+0x2c8>)
 810083c:	fa22 f303 	lsr.w	r3, r2, r3
 8100840:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8100842:	e10a      	b.n	8100a5a <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8100844:	4b89      	ldr	r3, [pc, #548]	; (8100a6c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8100846:	61bb      	str	r3, [r7, #24]
    break;
 8100848:	e107      	b.n	8100a5a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 810084a:	4b89      	ldr	r3, [pc, #548]	; (8100a70 <HAL_RCC_GetSysClockFreq+0x2cc>)
 810084c:	61bb      	str	r3, [r7, #24]
    break;
 810084e:	e104      	b.n	8100a5a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8100850:	4b88      	ldr	r3, [pc, #544]	; (8100a74 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8100852:	61bb      	str	r3, [r7, #24]
    break;
 8100854:	e101      	b.n	8100a5a <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8100856:	4b84      	ldr	r3, [pc, #528]	; (8100a68 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8100858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810085a:	f003 0303 	and.w	r3, r3, #3
 810085e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8100860:	4b81      	ldr	r3, [pc, #516]	; (8100a68 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8100862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8100864:	091b      	lsrs	r3, r3, #4
 8100866:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810086a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 810086c:	4b7e      	ldr	r3, [pc, #504]	; (8100a68 <HAL_RCC_GetSysClockFreq+0x2c4>)
 810086e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8100870:	f003 0301 	and.w	r3, r3, #1
 8100874:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8100876:	4b7c      	ldr	r3, [pc, #496]	; (8100a68 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8100878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810087a:	08db      	lsrs	r3, r3, #3
 810087c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8100880:	68fa      	ldr	r2, [r7, #12]
 8100882:	fb02 f303 	mul.w	r3, r2, r3
 8100886:	ee07 3a90 	vmov	s15, r3
 810088a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810088e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8100892:	693b      	ldr	r3, [r7, #16]
 8100894:	2b00      	cmp	r3, #0
 8100896:	f000 80da 	beq.w	8100a4e <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 810089a:	697b      	ldr	r3, [r7, #20]
 810089c:	2b01      	cmp	r3, #1
 810089e:	d05a      	beq.n	8100956 <HAL_RCC_GetSysClockFreq+0x1b2>
 81008a0:	2b01      	cmp	r3, #1
 81008a2:	d302      	bcc.n	81008aa <HAL_RCC_GetSysClockFreq+0x106>
 81008a4:	2b02      	cmp	r3, #2
 81008a6:	d078      	beq.n	810099a <HAL_RCC_GetSysClockFreq+0x1f6>
 81008a8:	e099      	b.n	81009de <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81008aa:	4b6f      	ldr	r3, [pc, #444]	; (8100a68 <HAL_RCC_GetSysClockFreq+0x2c4>)
 81008ac:	681b      	ldr	r3, [r3, #0]
 81008ae:	f003 0320 	and.w	r3, r3, #32
 81008b2:	2b00      	cmp	r3, #0
 81008b4:	d02d      	beq.n	8100912 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81008b6:	4b6c      	ldr	r3, [pc, #432]	; (8100a68 <HAL_RCC_GetSysClockFreq+0x2c4>)
 81008b8:	681b      	ldr	r3, [r3, #0]
 81008ba:	08db      	lsrs	r3, r3, #3
 81008bc:	f003 0303 	and.w	r3, r3, #3
 81008c0:	4a6a      	ldr	r2, [pc, #424]	; (8100a6c <HAL_RCC_GetSysClockFreq+0x2c8>)
 81008c2:	fa22 f303 	lsr.w	r3, r2, r3
 81008c6:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81008c8:	687b      	ldr	r3, [r7, #4]
 81008ca:	ee07 3a90 	vmov	s15, r3
 81008ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81008d2:	693b      	ldr	r3, [r7, #16]
 81008d4:	ee07 3a90 	vmov	s15, r3
 81008d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81008dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81008e0:	4b61      	ldr	r3, [pc, #388]	; (8100a68 <HAL_RCC_GetSysClockFreq+0x2c4>)
 81008e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81008e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81008e8:	ee07 3a90 	vmov	s15, r3
 81008ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81008f0:	ed97 6a02 	vldr	s12, [r7, #8]
 81008f4:	eddf 5a60 	vldr	s11, [pc, #384]	; 8100a78 <HAL_RCC_GetSysClockFreq+0x2d4>
 81008f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81008fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8100900:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8100904:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8100908:	ee67 7a27 	vmul.f32	s15, s14, s15
 810090c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8100910:	e087      	b.n	8100a22 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8100912:	693b      	ldr	r3, [r7, #16]
 8100914:	ee07 3a90 	vmov	s15, r3
 8100918:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810091c:	eddf 6a57 	vldr	s13, [pc, #348]	; 8100a7c <HAL_RCC_GetSysClockFreq+0x2d8>
 8100920:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8100924:	4b50      	ldr	r3, [pc, #320]	; (8100a68 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8100926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8100928:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810092c:	ee07 3a90 	vmov	s15, r3
 8100930:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100934:	ed97 6a02 	vldr	s12, [r7, #8]
 8100938:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8100a78 <HAL_RCC_GetSysClockFreq+0x2d4>
 810093c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8100940:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8100944:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8100948:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810094c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8100950:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8100954:	e065      	b.n	8100a22 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8100956:	693b      	ldr	r3, [r7, #16]
 8100958:	ee07 3a90 	vmov	s15, r3
 810095c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100960:	eddf 6a47 	vldr	s13, [pc, #284]	; 8100a80 <HAL_RCC_GetSysClockFreq+0x2dc>
 8100964:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8100968:	4b3f      	ldr	r3, [pc, #252]	; (8100a68 <HAL_RCC_GetSysClockFreq+0x2c4>)
 810096a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810096c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8100970:	ee07 3a90 	vmov	s15, r3
 8100974:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100978:	ed97 6a02 	vldr	s12, [r7, #8]
 810097c:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8100a78 <HAL_RCC_GetSysClockFreq+0x2d4>
 8100980:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8100984:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8100988:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810098c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8100990:	ee67 7a27 	vmul.f32	s15, s14, s15
 8100994:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8100998:	e043      	b.n	8100a22 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810099a:	693b      	ldr	r3, [r7, #16]
 810099c:	ee07 3a90 	vmov	s15, r3
 81009a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81009a4:	eddf 6a37 	vldr	s13, [pc, #220]	; 8100a84 <HAL_RCC_GetSysClockFreq+0x2e0>
 81009a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81009ac:	4b2e      	ldr	r3, [pc, #184]	; (8100a68 <HAL_RCC_GetSysClockFreq+0x2c4>)
 81009ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81009b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81009b4:	ee07 3a90 	vmov	s15, r3
 81009b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81009bc:	ed97 6a02 	vldr	s12, [r7, #8]
 81009c0:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8100a78 <HAL_RCC_GetSysClockFreq+0x2d4>
 81009c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81009c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81009cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81009d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81009d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 81009d8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81009dc:	e021      	b.n	8100a22 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81009de:	693b      	ldr	r3, [r7, #16]
 81009e0:	ee07 3a90 	vmov	s15, r3
 81009e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81009e8:	eddf 6a25 	vldr	s13, [pc, #148]	; 8100a80 <HAL_RCC_GetSysClockFreq+0x2dc>
 81009ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81009f0:	4b1d      	ldr	r3, [pc, #116]	; (8100a68 <HAL_RCC_GetSysClockFreq+0x2c4>)
 81009f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81009f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81009f8:	ee07 3a90 	vmov	s15, r3
 81009fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100a00:	ed97 6a02 	vldr	s12, [r7, #8]
 8100a04:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8100a78 <HAL_RCC_GetSysClockFreq+0x2d4>
 8100a08:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8100a0c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8100a10:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8100a14:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8100a18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8100a1c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8100a20:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8100a22:	4b11      	ldr	r3, [pc, #68]	; (8100a68 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8100a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8100a26:	0a5b      	lsrs	r3, r3, #9
 8100a28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8100a2c:	3301      	adds	r3, #1
 8100a2e:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8100a30:	683b      	ldr	r3, [r7, #0]
 8100a32:	ee07 3a90 	vmov	s15, r3
 8100a36:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8100a3a:	edd7 6a07 	vldr	s13, [r7, #28]
 8100a3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8100a42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8100a46:	ee17 3a90 	vmov	r3, s15
 8100a4a:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8100a4c:	e005      	b.n	8100a5a <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8100a4e:	2300      	movs	r3, #0
 8100a50:	61bb      	str	r3, [r7, #24]
    break;
 8100a52:	e002      	b.n	8100a5a <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8100a54:	4b06      	ldr	r3, [pc, #24]	; (8100a70 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8100a56:	61bb      	str	r3, [r7, #24]
    break;
 8100a58:	bf00      	nop
  }

  return sysclockfreq;
 8100a5a:	69bb      	ldr	r3, [r7, #24]
}
 8100a5c:	4618      	mov	r0, r3
 8100a5e:	3724      	adds	r7, #36	; 0x24
 8100a60:	46bd      	mov	sp, r7
 8100a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100a66:	4770      	bx	lr
 8100a68:	58024400 	.word	0x58024400
 8100a6c:	03d09000 	.word	0x03d09000
 8100a70:	003d0900 	.word	0x003d0900
 8100a74:	017d7840 	.word	0x017d7840
 8100a78:	46000000 	.word	0x46000000
 8100a7c:	4c742400 	.word	0x4c742400
 8100a80:	4a742400 	.word	0x4a742400
 8100a84:	4bbebc20 	.word	0x4bbebc20

08100a88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8100a88:	b580      	push	{r7, lr}
 8100a8a:	af00      	add	r7, sp, #0
  SystemD2Clock = (HAL_RCCEx_GetD1SysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8100a8c:	f000 f818 	bl	8100ac0 <HAL_RCCEx_GetD1SysClockFreq>
 8100a90:	4601      	mov	r1, r0
 8100a92:	4b08      	ldr	r3, [pc, #32]	; (8100ab4 <HAL_RCC_GetHCLKFreq+0x2c>)
 8100a94:	699b      	ldr	r3, [r3, #24]
 8100a96:	f003 030f 	and.w	r3, r3, #15
 8100a9a:	4a07      	ldr	r2, [pc, #28]	; (8100ab8 <HAL_RCC_GetHCLKFreq+0x30>)
 8100a9c:	5cd3      	ldrb	r3, [r2, r3]
 8100a9e:	f003 031f 	and.w	r3, r3, #31
 8100aa2:	fa21 f303 	lsr.w	r3, r1, r3
 8100aa6:	4a05      	ldr	r2, [pc, #20]	; (8100abc <HAL_RCC_GetHCLKFreq+0x34>)
 8100aa8:	6013      	str	r3, [r2, #0]
  return SystemD2Clock;
 8100aaa:	4b04      	ldr	r3, [pc, #16]	; (8100abc <HAL_RCC_GetHCLKFreq+0x34>)
 8100aac:	681b      	ldr	r3, [r3, #0]
}
 8100aae:	4618      	mov	r0, r3
 8100ab0:	bd80      	pop	{r7, pc}
 8100ab2:	bf00      	nop
 8100ab4:	58024400 	.word	0x58024400
 8100ab8:	08100cb8 	.word	0x08100cb8
 8100abc:	10000004 	.word	0x10000004

08100ac0 <HAL_RCCEx_GetD1SysClockFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCCEx_GetD1SysClockFreq(void)
{
 8100ac0:	b580      	push	{r7, lr}
 8100ac2:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8100ac4:	f7ff fe6e 	bl	81007a4 <HAL_RCC_GetSysClockFreq>
 8100ac8:	4601      	mov	r1, r0
 8100aca:	4b08      	ldr	r3, [pc, #32]	; (8100aec <HAL_RCCEx_GetD1SysClockFreq+0x2c>)
 8100acc:	699b      	ldr	r3, [r3, #24]
 8100ace:	0a1b      	lsrs	r3, r3, #8
 8100ad0:	f003 030f 	and.w	r3, r3, #15
 8100ad4:	4a06      	ldr	r2, [pc, #24]	; (8100af0 <HAL_RCCEx_GetD1SysClockFreq+0x30>)
 8100ad6:	5cd3      	ldrb	r3, [r2, r3]
 8100ad8:	f003 031f 	and.w	r3, r3, #31
 8100adc:	fa21 f303 	lsr.w	r3, r1, r3
 8100ae0:	4a04      	ldr	r2, [pc, #16]	; (8100af4 <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 8100ae2:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8100ae4:	4b03      	ldr	r3, [pc, #12]	; (8100af4 <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 8100ae6:	681b      	ldr	r3, [r3, #0]
}
 8100ae8:	4618      	mov	r0, r3
 8100aea:	bd80      	pop	{r7, pc}
 8100aec:	58024400 	.word	0x58024400
 8100af0:	08100cb8 	.word	0x08100cb8
 8100af4:	10000000 	.word	0x10000000

08100af8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100af8:	b580      	push	{r7, lr}
 8100afa:	b082      	sub	sp, #8
 8100afc:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8100afe:	4b1a      	ldr	r3, [pc, #104]	; (8100b68 <main+0x70>)
 8100b00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100b04:	4a18      	ldr	r2, [pc, #96]	; (8100b68 <main+0x70>)
 8100b06:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8100b0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100b0e:	4b16      	ldr	r3, [pc, #88]	; (8100b68 <main+0x70>)
 8100b10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100b14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8100b18:	607b      	str	r3, [r7, #4]
 8100b1a:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100b1c:	2001      	movs	r0, #1
 8100b1e:	f7ff fdaf 	bl	8100680 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8100b22:	f7ff fe31 	bl	8100788 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8100b26:	2201      	movs	r2, #1
 8100b28:	2102      	movs	r1, #2
 8100b2a:	2000      	movs	r0, #0
 8100b2c:	f7ff fdba 	bl	81006a4 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100b30:	4b0e      	ldr	r3, [pc, #56]	; (8100b6c <main+0x74>)
 8100b32:	681b      	ldr	r3, [r3, #0]
 8100b34:	091b      	lsrs	r3, r3, #4
 8100b36:	f003 030f 	and.w	r3, r3, #15
 8100b3a:	2b07      	cmp	r3, #7
 8100b3c:	d108      	bne.n	8100b50 <main+0x58>
 8100b3e:	4b0c      	ldr	r3, [pc, #48]	; (8100b70 <main+0x78>)
 8100b40:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8100b44:	4a0a      	ldr	r2, [pc, #40]	; (8100b70 <main+0x78>)
 8100b46:	f043 0301 	orr.w	r3, r3, #1
 8100b4a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8100b4e:	e007      	b.n	8100b60 <main+0x68>
 8100b50:	4b07      	ldr	r3, [pc, #28]	; (8100b70 <main+0x78>)
 8100b52:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8100b56:	4a06      	ldr	r2, [pc, #24]	; (8100b70 <main+0x78>)
 8100b58:	f043 0301 	orr.w	r3, r3, #1
 8100b5c:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8100b60:	f7ff fbd6 	bl	8100310 <HAL_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8100b64:	e7fe      	b.n	8100b64 <main+0x6c>
 8100b66:	bf00      	nop
 8100b68:	58024400 	.word	0x58024400
 8100b6c:	e000ed00 	.word	0xe000ed00
 8100b70:	58026400 	.word	0x58026400

08100b74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8100b74:	b480      	push	{r7}
 8100b76:	b083      	sub	sp, #12
 8100b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8100b7a:	4b0a      	ldr	r3, [pc, #40]	; (8100ba4 <HAL_MspInit+0x30>)
 8100b7c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100b80:	4a08      	ldr	r2, [pc, #32]	; (8100ba4 <HAL_MspInit+0x30>)
 8100b82:	f043 0302 	orr.w	r3, r3, #2
 8100b86:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8100b8a:	4b06      	ldr	r3, [pc, #24]	; (8100ba4 <HAL_MspInit+0x30>)
 8100b8c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100b90:	f003 0302 	and.w	r3, r3, #2
 8100b94:	607b      	str	r3, [r7, #4]
 8100b96:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8100b98:	bf00      	nop
 8100b9a:	370c      	adds	r7, #12
 8100b9c:	46bd      	mov	sp, r7
 8100b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100ba2:	4770      	bx	lr
 8100ba4:	58024400 	.word	0x58024400

08100ba8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8100ba8:	b480      	push	{r7}
 8100baa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8100bac:	bf00      	nop
 8100bae:	46bd      	mov	sp, r7
 8100bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100bb4:	4770      	bx	lr

08100bb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8100bb6:	b480      	push	{r7}
 8100bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8100bba:	e7fe      	b.n	8100bba <HardFault_Handler+0x4>

08100bbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8100bbc:	b480      	push	{r7}
 8100bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8100bc0:	e7fe      	b.n	8100bc0 <MemManage_Handler+0x4>

08100bc2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8100bc2:	b480      	push	{r7}
 8100bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8100bc6:	e7fe      	b.n	8100bc6 <BusFault_Handler+0x4>

08100bc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8100bc8:	b480      	push	{r7}
 8100bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8100bcc:	e7fe      	b.n	8100bcc <UsageFault_Handler+0x4>

08100bce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8100bce:	b480      	push	{r7}
 8100bd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8100bd2:	bf00      	nop
 8100bd4:	46bd      	mov	sp, r7
 8100bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100bda:	4770      	bx	lr

08100bdc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8100bdc:	b480      	push	{r7}
 8100bde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8100be0:	bf00      	nop
 8100be2:	46bd      	mov	sp, r7
 8100be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100be8:	4770      	bx	lr

08100bea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8100bea:	b480      	push	{r7}
 8100bec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8100bee:	bf00      	nop
 8100bf0:	46bd      	mov	sp, r7
 8100bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100bf6:	4770      	bx	lr

08100bf8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8100bf8:	b580      	push	{r7, lr}
 8100bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8100bfc:	f7ff fc34 	bl	8100468 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8100c00:	bf00      	nop
 8100c02:	bd80      	pop	{r7, pc}

08100c04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8100c04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8100c3c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8100c08:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8100c0a:	e003      	b.n	8100c14 <LoopCopyDataInit>

08100c0c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8100c0c:	4b0c      	ldr	r3, [pc, #48]	; (8100c40 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8100c0e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8100c10:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8100c12:	3104      	adds	r1, #4

08100c14 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8100c14:	480b      	ldr	r0, [pc, #44]	; (8100c44 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8100c16:	4b0c      	ldr	r3, [pc, #48]	; (8100c48 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8100c18:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8100c1a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8100c1c:	d3f6      	bcc.n	8100c0c <CopyDataInit>
  ldr  r2, =_sbss
 8100c1e:	4a0b      	ldr	r2, [pc, #44]	; (8100c4c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8100c20:	e002      	b.n	8100c28 <LoopFillZerobss>

08100c22 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8100c22:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8100c24:	f842 3b04 	str.w	r3, [r2], #4

08100c28 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8100c28:	4b09      	ldr	r3, [pc, #36]	; (8100c50 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8100c2a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8100c2c:	d3f9      	bcc.n	8100c22 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8100c2e:	f7ff fb53 	bl	81002d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8100c32:	f000 f811 	bl	8100c58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8100c36:	f7ff ff5f 	bl	8100af8 <main>
  bx  lr    
 8100c3a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8100c3c:	10048000 	.word	0x10048000
  ldr  r3, =_sidata
 8100c40:	08100cd0 	.word	0x08100cd0
  ldr  r0, =_sdata
 8100c44:	10000000 	.word	0x10000000
  ldr  r3, =_edata
 8100c48:	10000010 	.word	0x10000010
  ldr  r2, =_sbss
 8100c4c:	10000010 	.word	0x10000010
  ldr  r3, = _ebss
 8100c50:	10000030 	.word	0x10000030

08100c54 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8100c54:	e7fe      	b.n	8100c54 <ADC3_IRQHandler>
	...

08100c58 <__libc_init_array>:
 8100c58:	b570      	push	{r4, r5, r6, lr}
 8100c5a:	4e0d      	ldr	r6, [pc, #52]	; (8100c90 <__libc_init_array+0x38>)
 8100c5c:	4c0d      	ldr	r4, [pc, #52]	; (8100c94 <__libc_init_array+0x3c>)
 8100c5e:	1ba4      	subs	r4, r4, r6
 8100c60:	10a4      	asrs	r4, r4, #2
 8100c62:	2500      	movs	r5, #0
 8100c64:	42a5      	cmp	r5, r4
 8100c66:	d109      	bne.n	8100c7c <__libc_init_array+0x24>
 8100c68:	4e0b      	ldr	r6, [pc, #44]	; (8100c98 <__libc_init_array+0x40>)
 8100c6a:	4c0c      	ldr	r4, [pc, #48]	; (8100c9c <__libc_init_array+0x44>)
 8100c6c:	f000 f818 	bl	8100ca0 <_init>
 8100c70:	1ba4      	subs	r4, r4, r6
 8100c72:	10a4      	asrs	r4, r4, #2
 8100c74:	2500      	movs	r5, #0
 8100c76:	42a5      	cmp	r5, r4
 8100c78:	d105      	bne.n	8100c86 <__libc_init_array+0x2e>
 8100c7a:	bd70      	pop	{r4, r5, r6, pc}
 8100c7c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8100c80:	4798      	blx	r3
 8100c82:	3501      	adds	r5, #1
 8100c84:	e7ee      	b.n	8100c64 <__libc_init_array+0xc>
 8100c86:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8100c8a:	4798      	blx	r3
 8100c8c:	3501      	adds	r5, #1
 8100c8e:	e7f2      	b.n	8100c76 <__libc_init_array+0x1e>
 8100c90:	08100cc8 	.word	0x08100cc8
 8100c94:	08100cc8 	.word	0x08100cc8
 8100c98:	08100cc8 	.word	0x08100cc8
 8100c9c:	08100ccc 	.word	0x08100ccc

08100ca0 <_init>:
 8100ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8100ca2:	bf00      	nop
 8100ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8100ca6:	bc08      	pop	{r3}
 8100ca8:	469e      	mov	lr, r3
 8100caa:	4770      	bx	lr

08100cac <_fini>:
 8100cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8100cae:	bf00      	nop
 8100cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8100cb2:	bc08      	pop	{r3}
 8100cb4:	469e      	mov	lr, r3
 8100cb6:	4770      	bx	lr
