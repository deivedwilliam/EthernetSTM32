
EthernetTest_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014a74  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000021ec  08014d14  08014d14  00024d14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08016f00  08016f00  00026f00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08016f04  08016f04  00026f04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000200  20000000  08016f08  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00004b54  20000200  08017108  00030200  2**2
                  ALLOC
  7 ._user_heap_stack 00000804  20004d54  08017108  00034d54  2**0
                  ALLOC
  8 .lwip_sec     00001a00  30040000  08017108  00040000  2**2
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030200  2**0
                  CONTENTS, READONLY
 10 .debug_info   00045ce4  00000000  00000000  0003022e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00007b52  00000000  00000000  00075f12  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001b60  00000000  00000000  0007da68  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001950  00000000  00000000  0007f5c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00045dff  00000000  00000000  00080f18  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000273b2  00000000  00000000  000c6d17  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00188624  00000000  00000000  000ee0c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  002766ed  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000073a4  00000000  00000000  00276768  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20000200 	.word	0x20000200
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08014cfc 	.word	0x08014cfc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	20000204 	.word	0x20000204
 80002dc:	08014cfc 	.word	0x08014cfc

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000384:	4b2f      	ldr	r3, [pc, #188]	; (8000444 <SystemInit+0xc4>)
 8000386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800038a:	4a2e      	ldr	r2, [pc, #184]	; (8000444 <SystemInit+0xc4>)
 800038c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000390:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Pos;
 8000394:	4b2b      	ldr	r3, [pc, #172]	; (8000444 <SystemInit+0xc4>)
 8000396:	691b      	ldr	r3, [r3, #16]
 8000398:	4a2a      	ldr	r2, [pc, #168]	; (8000444 <SystemInit+0xc4>)
 800039a:	f043 0304 	orr.w	r3, r3, #4
 800039e:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80003a0:	4b29      	ldr	r3, [pc, #164]	; (8000448 <SystemInit+0xc8>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	4a28      	ldr	r2, [pc, #160]	; (8000448 <SystemInit+0xc8>)
 80003a6:	f043 0301 	orr.w	r3, r3, #1
 80003aa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80003ac:	4b26      	ldr	r3, [pc, #152]	; (8000448 <SystemInit+0xc8>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80003b2:	4b25      	ldr	r3, [pc, #148]	; (8000448 <SystemInit+0xc8>)
 80003b4:	681a      	ldr	r2, [r3, #0]
 80003b6:	4924      	ldr	r1, [pc, #144]	; (8000448 <SystemInit+0xc8>)
 80003b8:	4b24      	ldr	r3, [pc, #144]	; (800044c <SystemInit+0xcc>)
 80003ba:	4013      	ands	r3, r2
 80003bc:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80003be:	4b22      	ldr	r3, [pc, #136]	; (8000448 <SystemInit+0xc8>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80003c4:	4b20      	ldr	r3, [pc, #128]	; (8000448 <SystemInit+0xc8>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80003ca:	4b1f      	ldr	r3, [pc, #124]	; (8000448 <SystemInit+0xc8>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 80003d0:	4b1d      	ldr	r3, [pc, #116]	; (8000448 <SystemInit+0xc8>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 80003d6:	4b1c      	ldr	r3, [pc, #112]	; (8000448 <SystemInit+0xc8>)
 80003d8:	2200      	movs	r2, #0
 80003da:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 80003dc:	4b1a      	ldr	r3, [pc, #104]	; (8000448 <SystemInit+0xc8>)
 80003de:	2200      	movs	r2, #0
 80003e0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80003e2:	4b19      	ldr	r3, [pc, #100]	; (8000448 <SystemInit+0xc8>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 80003e8:	4b17      	ldr	r3, [pc, #92]	; (8000448 <SystemInit+0xc8>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80003ee:	4b16      	ldr	r3, [pc, #88]	; (8000448 <SystemInit+0xc8>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 80003f4:	4b14      	ldr	r3, [pc, #80]	; (8000448 <SystemInit+0xc8>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80003fa:	4b13      	ldr	r3, [pc, #76]	; (8000448 <SystemInit+0xc8>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000400:	4b11      	ldr	r3, [pc, #68]	; (8000448 <SystemInit+0xc8>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	4a10      	ldr	r2, [pc, #64]	; (8000448 <SystemInit+0xc8>)
 8000406:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800040a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800040c:	4b0e      	ldr	r3, [pc, #56]	; (8000448 <SystemInit+0xc8>)
 800040e:	2200      	movs	r2, #0
 8000410:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000412:	4b0f      	ldr	r3, [pc, #60]	; (8000450 <SystemInit+0xd0>)
 8000414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000416:	4a0e      	ldr	r2, [pc, #56]	; (8000450 <SystemInit+0xd0>)
 8000418:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800041c:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800041e:	4b0d      	ldr	r3, [pc, #52]	; (8000454 <SystemInit+0xd4>)
 8000420:	681a      	ldr	r2, [r3, #0]
 8000422:	4b0d      	ldr	r3, [pc, #52]	; (8000458 <SystemInit+0xd8>)
 8000424:	4013      	ands	r3, r2
 8000426:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800042a:	d202      	bcs.n	8000432 <SystemInit+0xb2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800042c:	4b0b      	ldr	r3, [pc, #44]	; (800045c <SystemInit+0xdc>)
 800042e:	2201      	movs	r2, #1
 8000430:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000432:	4b04      	ldr	r3, [pc, #16]	; (8000444 <SystemInit+0xc4>)
 8000434:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000438:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800043a:	bf00      	nop
 800043c:	46bd      	mov	sp, r7
 800043e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000442:	4770      	bx	lr
 8000444:	e000ed00 	.word	0xe000ed00
 8000448:	58024400 	.word	0x58024400
 800044c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000450:	580000c0 	.word	0x580000c0
 8000454:	5c001000 	.word	0x5c001000
 8000458:	ffff0000 	.word	0xffff0000
 800045c:	51008108 	.word	0x51008108

08000460 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000460:	b480      	push	{r7}
 8000462:	b083      	sub	sp, #12
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
 8000468:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	2b00      	cmp	r3, #0
 800046e:	d00b      	beq.n	8000488 <LAN8742_RegisterBusIO+0x28>
 8000470:	683b      	ldr	r3, [r7, #0]
 8000472:	68db      	ldr	r3, [r3, #12]
 8000474:	2b00      	cmp	r3, #0
 8000476:	d007      	beq.n	8000488 <LAN8742_RegisterBusIO+0x28>
 8000478:	683b      	ldr	r3, [r7, #0]
 800047a:	689b      	ldr	r3, [r3, #8]
 800047c:	2b00      	cmp	r3, #0
 800047e:	d003      	beq.n	8000488 <LAN8742_RegisterBusIO+0x28>
 8000480:	683b      	ldr	r3, [r7, #0]
 8000482:	691b      	ldr	r3, [r3, #16]
 8000484:	2b00      	cmp	r3, #0
 8000486:	d102      	bne.n	800048e <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000488:	f04f 33ff 	mov.w	r3, #4294967295
 800048c:	e014      	b.n	80004b8 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 800048e:	683b      	ldr	r3, [r7, #0]
 8000490:	681a      	ldr	r2, [r3, #0]
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000496:	683b      	ldr	r3, [r7, #0]
 8000498:	685a      	ldr	r2, [r3, #4]
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 800049e:	683b      	ldr	r3, [r7, #0]
 80004a0:	68da      	ldr	r2, [r3, #12]
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80004a6:	683b      	ldr	r3, [r7, #0]
 80004a8:	689a      	ldr	r2, [r3, #8]
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80004ae:	683b      	ldr	r3, [r7, #0]
 80004b0:	691a      	ldr	r2, [r3, #16]
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 80004b6:	2300      	movs	r3, #0
}
 80004b8:	4618      	mov	r0, r3
 80004ba:	370c      	adds	r7, #12
 80004bc:	46bd      	mov	sp, r7
 80004be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c2:	4770      	bx	lr

080004c4 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b086      	sub	sp, #24
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 80004cc:	2300      	movs	r3, #0
 80004ce:	60fb      	str	r3, [r7, #12]
 80004d0:	2300      	movs	r3, #0
 80004d2:	60bb      	str	r3, [r7, #8]
 80004d4:	2300      	movs	r3, #0
 80004d6:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 80004d8:	2300      	movs	r3, #0
 80004da:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	685b      	ldr	r3, [r3, #4]
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d17b      	bne.n	80005dc <LAN8742_Init+0x118>
   {
     if(pObj->IO.Init != 0)
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	689b      	ldr	r3, [r3, #8]
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d002      	beq.n	80004f2 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	689b      	ldr	r3, [r3, #8]
 80004f0:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	2220      	movs	r2, #32
 80004f6:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80004f8:	2300      	movs	r3, #0
 80004fa:	617b      	str	r3, [r7, #20]
 80004fc:	e01c      	b.n	8000538 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	695b      	ldr	r3, [r3, #20]
 8000502:	f107 0208 	add.w	r2, r7, #8
 8000506:	2112      	movs	r1, #18
 8000508:	6978      	ldr	r0, [r7, #20]
 800050a:	4798      	blx	r3
 800050c:	4603      	mov	r3, r0
 800050e:	2b00      	cmp	r3, #0
 8000510:	da03      	bge.n	800051a <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8000512:	f06f 0304 	mvn.w	r3, #4
 8000516:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8000518:	e00b      	b.n	8000532 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 800051a:	68bb      	ldr	r3, [r7, #8]
 800051c:	f003 031f 	and.w	r3, r3, #31
 8000520:	697a      	ldr	r2, [r7, #20]
 8000522:	429a      	cmp	r2, r3
 8000524:	d105      	bne.n	8000532 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	697a      	ldr	r2, [r7, #20]
 800052a:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 800052c:	2300      	movs	r3, #0
 800052e:	613b      	str	r3, [r7, #16]
         break;
 8000530:	e005      	b.n	800053e <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000532:	697b      	ldr	r3, [r7, #20]
 8000534:	3301      	adds	r3, #1
 8000536:	617b      	str	r3, [r7, #20]
 8000538:	697b      	ldr	r3, [r7, #20]
 800053a:	2b1f      	cmp	r3, #31
 800053c:	d9df      	bls.n	80004fe <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	2b1f      	cmp	r3, #31
 8000544:	d902      	bls.n	800054c <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000546:	f06f 0302 	mvn.w	r3, #2
 800054a:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 800054c:	693b      	ldr	r3, [r7, #16]
 800054e:	2b00      	cmp	r3, #0
 8000550:	d144      	bne.n	80005dc <LAN8742_Init+0x118>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	691b      	ldr	r3, [r3, #16]
 8000556:	687a      	ldr	r2, [r7, #4]
 8000558:	6810      	ldr	r0, [r2, #0]
 800055a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800055e:	2100      	movs	r1, #0
 8000560:	4798      	blx	r3
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	db36      	blt.n	80005d6 <LAN8742_Init+0x112>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	695b      	ldr	r3, [r3, #20]
 800056c:	687a      	ldr	r2, [r7, #4]
 800056e:	6810      	ldr	r0, [r2, #0]
 8000570:	f107 0208 	add.w	r2, r7, #8
 8000574:	2100      	movs	r1, #0
 8000576:	4798      	blx	r3
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	db27      	blt.n	80005ce <LAN8742_Init+0x10a>
         { 
           tickstart = pObj->IO.GetTick();
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	699b      	ldr	r3, [r3, #24]
 8000582:	4798      	blx	r3
 8000584:	4603      	mov	r3, r0
 8000586:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000588:	e01b      	b.n	80005c2 <LAN8742_Init+0xfe>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	699b      	ldr	r3, [r3, #24]
 800058e:	4798      	blx	r3
 8000590:	4603      	mov	r3, r0
 8000592:	461a      	mov	r2, r3
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	1ad3      	subs	r3, r2, r3
 8000598:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800059c:	d80e      	bhi.n	80005bc <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	695b      	ldr	r3, [r3, #20]
 80005a2:	687a      	ldr	r2, [r7, #4]
 80005a4:	6810      	ldr	r0, [r2, #0]
 80005a6:	f107 0208 	add.w	r2, r7, #8
 80005aa:	2100      	movs	r1, #0
 80005ac:	4798      	blx	r3
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	da06      	bge.n	80005c2 <LAN8742_Init+0xfe>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 80005b4:	f06f 0304 	mvn.w	r3, #4
 80005b8:	613b      	str	r3, [r7, #16]
                 break;
 80005ba:	e00f      	b.n	80005dc <LAN8742_Init+0x118>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 80005bc:	f06f 0301 	mvn.w	r3, #1
 80005c0:	613b      	str	r3, [r7, #16]
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80005c2:	68bb      	ldr	r3, [r7, #8]
 80005c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d1de      	bne.n	800058a <LAN8742_Init+0xc6>
 80005cc:	e006      	b.n	80005dc <LAN8742_Init+0x118>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 80005ce:	f06f 0304 	mvn.w	r3, #4
 80005d2:	613b      	str	r3, [r7, #16]
 80005d4:	e002      	b.n	80005dc <LAN8742_Init+0x118>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 80005d6:	f06f 0303 	mvn.w	r3, #3
 80005da:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 80005dc:	693b      	ldr	r3, [r7, #16]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d112      	bne.n	8000608 <LAN8742_Init+0x144>
   {
     tickstart =  pObj->IO.GetTick();
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	699b      	ldr	r3, [r3, #24]
 80005e6:	4798      	blx	r3
 80005e8:	4603      	mov	r3, r0
 80005ea:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 80005ec:	bf00      	nop
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	699b      	ldr	r3, [r3, #24]
 80005f2:	4798      	blx	r3
 80005f4:	4603      	mov	r3, r0
 80005f6:	461a      	mov	r2, r3
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	1ad3      	subs	r3, r2, r3
 80005fc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000600:	d9f5      	bls.n	80005ee <LAN8742_Init+0x12a>
     {
     }
     pObj->Is_Initialized = 1;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	2201      	movs	r2, #1
 8000606:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8000608:	693b      	ldr	r3, [r7, #16]
 }
 800060a:	4618      	mov	r0, r3
 800060c:	3718      	adds	r7, #24
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}

08000612 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8000612:	b580      	push	{r7, lr}
 8000614:	b084      	sub	sp, #16
 8000616:	af00      	add	r7, sp, #0
 8000618:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 800061a:	2300      	movs	r3, #0
 800061c:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	695b      	ldr	r3, [r3, #20]
 8000622:	687a      	ldr	r2, [r7, #4]
 8000624:	6810      	ldr	r0, [r2, #0]
 8000626:	f107 020c 	add.w	r2, r7, #12
 800062a:	2101      	movs	r1, #1
 800062c:	4798      	blx	r3
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	da02      	bge.n	800063a <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000634:	f06f 0304 	mvn.w	r3, #4
 8000638:	e06e      	b.n	8000718 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	695b      	ldr	r3, [r3, #20]
 800063e:	687a      	ldr	r2, [r7, #4]
 8000640:	6810      	ldr	r0, [r2, #0]
 8000642:	f107 020c 	add.w	r2, r7, #12
 8000646:	2101      	movs	r1, #1
 8000648:	4798      	blx	r3
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	da02      	bge.n	8000656 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000650:	f06f 0304 	mvn.w	r3, #4
 8000654:	e060      	b.n	8000718 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	f003 0304 	and.w	r3, r3, #4
 800065c:	2b00      	cmp	r3, #0
 800065e:	d101      	bne.n	8000664 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8000660:	2301      	movs	r3, #1
 8000662:	e059      	b.n	8000718 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	695b      	ldr	r3, [r3, #20]
 8000668:	687a      	ldr	r2, [r7, #4]
 800066a:	6810      	ldr	r0, [r2, #0]
 800066c:	f107 020c 	add.w	r2, r7, #12
 8000670:	2100      	movs	r1, #0
 8000672:	4798      	blx	r3
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	da02      	bge.n	8000680 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 800067a:	f06f 0304 	mvn.w	r3, #4
 800067e:	e04b      	b.n	8000718 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000686:	2b00      	cmp	r3, #0
 8000688:	d11b      	bne.n	80006c2 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000690:	2b00      	cmp	r3, #0
 8000692:	d006      	beq.n	80006a2 <LAN8742_GetLinkState+0x90>
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800069e:	2302      	movs	r3, #2
 80006a0:	e03a      	b.n	8000718 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80006ac:	2303      	movs	r3, #3
 80006ae:	e033      	b.n	8000718 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80006ba:	2304      	movs	r3, #4
 80006bc:	e02c      	b.n	8000718 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80006be:	2305      	movs	r3, #5
 80006c0:	e02a      	b.n	8000718 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	695b      	ldr	r3, [r3, #20]
 80006c6:	687a      	ldr	r2, [r7, #4]
 80006c8:	6810      	ldr	r0, [r2, #0]
 80006ca:	f107 020c 	add.w	r2, r7, #12
 80006ce:	211f      	movs	r1, #31
 80006d0:	4798      	blx	r3
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	da02      	bge.n	80006de <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80006d8:	f06f 0304 	mvn.w	r3, #4
 80006dc:	e01c      	b.n	8000718 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d101      	bne.n	80006ec <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80006e8:	2306      	movs	r3, #6
 80006ea:	e015      	b.n	8000718 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	f003 031c 	and.w	r3, r3, #28
 80006f2:	2b18      	cmp	r3, #24
 80006f4:	d101      	bne.n	80006fa <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80006f6:	2302      	movs	r3, #2
 80006f8:	e00e      	b.n	8000718 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	f003 031c 	and.w	r3, r3, #28
 8000700:	2b08      	cmp	r3, #8
 8000702:	d101      	bne.n	8000708 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000704:	2303      	movs	r3, #3
 8000706:	e007      	b.n	8000718 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	f003 031c 	and.w	r3, r3, #28
 800070e:	2b14      	cmp	r3, #20
 8000710:	d101      	bne.n	8000716 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000712:	2304      	movs	r3, #4
 8000714:	e000      	b.n	8000718 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000716:	2305      	movs	r3, #5
    }				
  }
}
 8000718:	4618      	mov	r0, r3
 800071a:	3710      	adds	r7, #16
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}

08000720 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000724:	2003      	movs	r0, #3
 8000726:	f000 f9b5 	bl	8000a94 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800072a:	f004 f8f7 	bl	800491c <HAL_RCC_GetSysClockFreq>
 800072e:	4601      	mov	r1, r0
 8000730:	4b13      	ldr	r3, [pc, #76]	; (8000780 <HAL_Init+0x60>)
 8000732:	699b      	ldr	r3, [r3, #24]
 8000734:	0a1b      	lsrs	r3, r3, #8
 8000736:	f003 030f 	and.w	r3, r3, #15
 800073a:	4a12      	ldr	r2, [pc, #72]	; (8000784 <HAL_Init+0x64>)
 800073c:	5cd3      	ldrb	r3, [r2, r3]
 800073e:	f003 031f 	and.w	r3, r3, #31
 8000742:	fa21 f303 	lsr.w	r3, r1, r3
 8000746:	4a10      	ldr	r2, [pc, #64]	; (8000788 <HAL_Init+0x68>)
 8000748:	6013      	str	r3, [r2, #0]

  /* Update the SystemD2Clock global variable */
  SystemD2Clock = (SystemCoreClock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800074a:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <HAL_Init+0x68>)
 800074c:	681a      	ldr	r2, [r3, #0]
 800074e:	4b0c      	ldr	r3, [pc, #48]	; (8000780 <HAL_Init+0x60>)
 8000750:	699b      	ldr	r3, [r3, #24]
 8000752:	f003 030f 	and.w	r3, r3, #15
 8000756:	490b      	ldr	r1, [pc, #44]	; (8000784 <HAL_Init+0x64>)
 8000758:	5ccb      	ldrb	r3, [r1, r3]
 800075a:	f003 031f 	and.w	r3, r3, #31
 800075e:	fa22 f303 	lsr.w	r3, r2, r3
 8000762:	4a0a      	ldr	r2, [pc, #40]	; (800078c <HAL_Init+0x6c>)
 8000764:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000766:	2000      	movs	r0, #0
 8000768:	f000 f812 	bl	8000790 <HAL_InitTick>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <HAL_Init+0x56>
  {
    return HAL_ERROR;
 8000772:	2301      	movs	r3, #1
 8000774:	e002      	b.n	800077c <HAL_Init+0x5c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000776:	f012 fb0b 	bl	8012d90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800077a:	2300      	movs	r3, #0
}
 800077c:	4618      	mov	r0, r3
 800077e:	bd80      	pop	{r7, pc}
 8000780:	58024400 	.word	0x58024400
 8000784:	08016d68 	.word	0x08016d68
 8000788:	20000000 	.word	0x20000000
 800078c:	20000004 	.word	0x20000004

08000790 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000798:	4b22      	ldr	r3, [pc, #136]	; (8000824 <HAL_InitTick+0x94>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d101      	bne.n	80007a4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80007a0:	2301      	movs	r3, #1
 80007a2:	e03a      	b.n	800081a <HAL_InitTick+0x8a>
  }

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 80007a4:	f000 fa2e 	bl	8000c04 <HAL_GetCurrentCPUID>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b03      	cmp	r3, #3
 80007ac:	d112      	bne.n	80007d4 <HAL_InitTick+0x44>
  {
    /* Cortex-M7 detected */
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80007ae:	4b1e      	ldr	r3, [pc, #120]	; (8000828 <HAL_InitTick+0x98>)
 80007b0:	681a      	ldr	r2, [r3, #0]
 80007b2:	4b1c      	ldr	r3, [pc, #112]	; (8000824 <HAL_InitTick+0x94>)
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	4619      	mov	r1, r3
 80007b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007bc:	fbb3 f3f1 	udiv	r3, r3, r1
 80007c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80007c4:	4618      	mov	r0, r3
 80007c6:	f000 f998 	bl	8000afa <HAL_SYSTICK_Config>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d015      	beq.n	80007fc <HAL_InitTick+0x6c>
    {
      return HAL_ERROR;
 80007d0:	2301      	movs	r3, #1
 80007d2:	e022      	b.n	800081a <HAL_InitTick+0x8a>
  }
  else
  {
    /* Cortex-M4 detected */
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80007d4:	f004 fa14 	bl	8004c00 <HAL_RCC_GetHCLKFreq>
 80007d8:	4602      	mov	r2, r0
 80007da:	4b12      	ldr	r3, [pc, #72]	; (8000824 <HAL_InitTick+0x94>)
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	4619      	mov	r1, r3
 80007e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007e4:	fbb3 f3f1 	udiv	r3, r3, r1
 80007e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80007ec:	4618      	mov	r0, r3
 80007ee:	f000 f984 	bl	8000afa <HAL_SYSTICK_Config>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <HAL_InitTick+0x6c>
    {
      return HAL_ERROR;
 80007f8:	2301      	movs	r3, #1
 80007fa:	e00e      	b.n	800081a <HAL_InitTick+0x8a>
    return HAL_ERROR;
  }
#endif

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	2b0f      	cmp	r3, #15
 8000800:	d80a      	bhi.n	8000818 <HAL_InitTick+0x88>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000802:	2200      	movs	r2, #0
 8000804:	6879      	ldr	r1, [r7, #4]
 8000806:	f04f 30ff 	mov.w	r0, #4294967295
 800080a:	f000 f94e 	bl	8000aaa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800080e:	4a07      	ldr	r2, [pc, #28]	; (800082c <HAL_InitTick+0x9c>)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000814:	2300      	movs	r3, #0
 8000816:	e000      	b.n	800081a <HAL_InitTick+0x8a>
    return HAL_ERROR;
 8000818:	2301      	movs	r3, #1
}
 800081a:	4618      	mov	r0, r3
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	2000000c 	.word	0x2000000c
 8000828:	20000000 	.word	0x20000000
 800082c:	20000008 	.word	0x20000008

08000830 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000834:	4b06      	ldr	r3, [pc, #24]	; (8000850 <HAL_IncTick+0x20>)
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	461a      	mov	r2, r3
 800083a:	4b06      	ldr	r3, [pc, #24]	; (8000854 <HAL_IncTick+0x24>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4413      	add	r3, r2
 8000840:	4a04      	ldr	r2, [pc, #16]	; (8000854 <HAL_IncTick+0x24>)
 8000842:	6013      	str	r3, [r2, #0]
}
 8000844:	bf00      	nop
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	2000000c 	.word	0x2000000c
 8000854:	200003a4 	.word	0x200003a4

08000858 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  return uwTick;
 800085c:	4b03      	ldr	r3, [pc, #12]	; (800086c <HAL_GetTick+0x14>)
 800085e:	681b      	ldr	r3, [r3, #0]
}
 8000860:	4618      	mov	r0, r3
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	200003a4 	.word	0x200003a4

08000870 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000878:	f7ff ffee 	bl	8000858 <HAL_GetTick>
 800087c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000888:	d005      	beq.n	8000896 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800088a:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <HAL_Delay+0x40>)
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	461a      	mov	r2, r3
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	4413      	add	r3, r2
 8000894:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000896:	bf00      	nop
 8000898:	f7ff ffde 	bl	8000858 <HAL_GetTick>
 800089c:	4602      	mov	r2, r0
 800089e:	68bb      	ldr	r3, [r7, #8]
 80008a0:	1ad3      	subs	r3, r2, r3
 80008a2:	68fa      	ldr	r2, [r7, #12]
 80008a4:	429a      	cmp	r2, r3
 80008a6:	d8f7      	bhi.n	8000898 <HAL_Delay+0x28>
  {
  }
}
 80008a8:	bf00      	nop
 80008aa:	3710      	adds	r7, #16
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	2000000c 	.word	0x2000000c

080008b4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80008b8:	4b03      	ldr	r3, [pc, #12]	; (80008c8 <HAL_GetREVID+0x14>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	0c1b      	lsrs	r3, r3, #16
}
 80008be:	4618      	mov	r0, r3
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr
 80008c8:	5c001000 	.word	0x5c001000

080008cc <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b083      	sub	sp, #12
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80008d4:	4b06      	ldr	r3, [pc, #24]	; (80008f0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80008d6:	685b      	ldr	r3, [r3, #4]
 80008d8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80008dc:	4904      	ldr	r1, [pc, #16]	; (80008f0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	4313      	orrs	r3, r2
 80008e2:	604b      	str	r3, [r1, #4]
}
 80008e4:	bf00      	nop
 80008e6:	370c      	adds	r7, #12
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr
 80008f0:	58000400 	.word	0x58000400

080008f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b085      	sub	sp, #20
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	f003 0307 	and.w	r3, r3, #7
 8000902:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000904:	4b0b      	ldr	r3, [pc, #44]	; (8000934 <__NVIC_SetPriorityGrouping+0x40>)
 8000906:	68db      	ldr	r3, [r3, #12]
 8000908:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800090a:	68ba      	ldr	r2, [r7, #8]
 800090c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000910:	4013      	ands	r3, r2
 8000912:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000918:	68bb      	ldr	r3, [r7, #8]
 800091a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800091c:	4b06      	ldr	r3, [pc, #24]	; (8000938 <__NVIC_SetPriorityGrouping+0x44>)
 800091e:	4313      	orrs	r3, r2
 8000920:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000922:	4a04      	ldr	r2, [pc, #16]	; (8000934 <__NVIC_SetPriorityGrouping+0x40>)
 8000924:	68bb      	ldr	r3, [r7, #8]
 8000926:	60d3      	str	r3, [r2, #12]
}
 8000928:	bf00      	nop
 800092a:	3714      	adds	r7, #20
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr
 8000934:	e000ed00 	.word	0xe000ed00
 8000938:	05fa0000 	.word	0x05fa0000

0800093c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000940:	4b04      	ldr	r3, [pc, #16]	; (8000954 <__NVIC_GetPriorityGrouping+0x18>)
 8000942:	68db      	ldr	r3, [r3, #12]
 8000944:	0a1b      	lsrs	r3, r3, #8
 8000946:	f003 0307 	and.w	r3, r3, #7
}
 800094a:	4618      	mov	r0, r3
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr
 8000954:	e000ed00 	.word	0xe000ed00

08000958 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
 800095e:	4603      	mov	r3, r0
 8000960:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000962:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000966:	2b00      	cmp	r3, #0
 8000968:	db0b      	blt.n	8000982 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800096a:	88fb      	ldrh	r3, [r7, #6]
 800096c:	f003 021f 	and.w	r2, r3, #31
 8000970:	4907      	ldr	r1, [pc, #28]	; (8000990 <__NVIC_EnableIRQ+0x38>)
 8000972:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000976:	095b      	lsrs	r3, r3, #5
 8000978:	2001      	movs	r0, #1
 800097a:	fa00 f202 	lsl.w	r2, r0, r2
 800097e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000982:	bf00      	nop
 8000984:	370c      	adds	r7, #12
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	e000e100 	.word	0xe000e100

08000994 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000994:	b480      	push	{r7}
 8000996:	b083      	sub	sp, #12
 8000998:	af00      	add	r7, sp, #0
 800099a:	4603      	mov	r3, r0
 800099c:	6039      	str	r1, [r7, #0]
 800099e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80009a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	db0a      	blt.n	80009be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	b2da      	uxtb	r2, r3
 80009ac:	490c      	ldr	r1, [pc, #48]	; (80009e0 <__NVIC_SetPriority+0x4c>)
 80009ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009b2:	0112      	lsls	r2, r2, #4
 80009b4:	b2d2      	uxtb	r2, r2
 80009b6:	440b      	add	r3, r1
 80009b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009bc:	e00a      	b.n	80009d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	b2da      	uxtb	r2, r3
 80009c2:	4908      	ldr	r1, [pc, #32]	; (80009e4 <__NVIC_SetPriority+0x50>)
 80009c4:	88fb      	ldrh	r3, [r7, #6]
 80009c6:	f003 030f 	and.w	r3, r3, #15
 80009ca:	3b04      	subs	r3, #4
 80009cc:	0112      	lsls	r2, r2, #4
 80009ce:	b2d2      	uxtb	r2, r2
 80009d0:	440b      	add	r3, r1
 80009d2:	761a      	strb	r2, [r3, #24]
}
 80009d4:	bf00      	nop
 80009d6:	370c      	adds	r7, #12
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr
 80009e0:	e000e100 	.word	0xe000e100
 80009e4:	e000ed00 	.word	0xe000ed00

080009e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b089      	sub	sp, #36	; 0x24
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	60f8      	str	r0, [r7, #12]
 80009f0:	60b9      	str	r1, [r7, #8]
 80009f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	f003 0307 	and.w	r3, r3, #7
 80009fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009fc:	69fb      	ldr	r3, [r7, #28]
 80009fe:	f1c3 0307 	rsb	r3, r3, #7
 8000a02:	2b04      	cmp	r3, #4
 8000a04:	bf28      	it	cs
 8000a06:	2304      	movcs	r3, #4
 8000a08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a0a:	69fb      	ldr	r3, [r7, #28]
 8000a0c:	3304      	adds	r3, #4
 8000a0e:	2b06      	cmp	r3, #6
 8000a10:	d902      	bls.n	8000a18 <NVIC_EncodePriority+0x30>
 8000a12:	69fb      	ldr	r3, [r7, #28]
 8000a14:	3b03      	subs	r3, #3
 8000a16:	e000      	b.n	8000a1a <NVIC_EncodePriority+0x32>
 8000a18:	2300      	movs	r3, #0
 8000a1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a1c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a20:	69bb      	ldr	r3, [r7, #24]
 8000a22:	fa02 f303 	lsl.w	r3, r2, r3
 8000a26:	43da      	mvns	r2, r3
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	401a      	ands	r2, r3
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a30:	f04f 31ff 	mov.w	r1, #4294967295
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	fa01 f303 	lsl.w	r3, r1, r3
 8000a3a:	43d9      	mvns	r1, r3
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a40:	4313      	orrs	r3, r2
         );
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3724      	adds	r7, #36	; 0x24
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
	...

08000a50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	3b01      	subs	r3, #1
 8000a5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a60:	d301      	bcc.n	8000a66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a62:	2301      	movs	r3, #1
 8000a64:	e00f      	b.n	8000a86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a66:	4a0a      	ldr	r2, [pc, #40]	; (8000a90 <SysTick_Config+0x40>)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	3b01      	subs	r3, #1
 8000a6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a6e:	210f      	movs	r1, #15
 8000a70:	f04f 30ff 	mov.w	r0, #4294967295
 8000a74:	f7ff ff8e 	bl	8000994 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a78:	4b05      	ldr	r3, [pc, #20]	; (8000a90 <SysTick_Config+0x40>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a7e:	4b04      	ldr	r3, [pc, #16]	; (8000a90 <SysTick_Config+0x40>)
 8000a80:	2207      	movs	r2, #7
 8000a82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a84:	2300      	movs	r3, #0
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	e000e010 	.word	0xe000e010

08000a94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a9c:	6878      	ldr	r0, [r7, #4]
 8000a9e:	f7ff ff29 	bl	80008f4 <__NVIC_SetPriorityGrouping>
}
 8000aa2:	bf00      	nop
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}

08000aaa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aaa:	b580      	push	{r7, lr}
 8000aac:	b086      	sub	sp, #24
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	60b9      	str	r1, [r7, #8]
 8000ab4:	607a      	str	r2, [r7, #4]
 8000ab6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ab8:	f7ff ff40 	bl	800093c <__NVIC_GetPriorityGrouping>
 8000abc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000abe:	687a      	ldr	r2, [r7, #4]
 8000ac0:	68b9      	ldr	r1, [r7, #8]
 8000ac2:	6978      	ldr	r0, [r7, #20]
 8000ac4:	f7ff ff90 	bl	80009e8 <NVIC_EncodePriority>
 8000ac8:	4602      	mov	r2, r0
 8000aca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ace:	4611      	mov	r1, r2
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f7ff ff5f 	bl	8000994 <__NVIC_SetPriority>
}
 8000ad6:	bf00      	nop
 8000ad8:	3718      	adds	r7, #24
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}

08000ade <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ade:	b580      	push	{r7, lr}
 8000ae0:	b082      	sub	sp, #8
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ae8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff ff33 	bl	8000958 <__NVIC_EnableIRQ>
}
 8000af2:	bf00      	nop
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}

08000afa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000afa:	b580      	push	{r7, lr}
 8000afc:	b082      	sub	sp, #8
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b02:	6878      	ldr	r0, [r7, #4]
 8000b04:	f7ff ffa4 	bl	8000a50 <SysTick_Config>
 8000b08:	4603      	mov	r3, r0
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3708      	adds	r7, #8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
	...

08000b14 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000b18:	f3bf 8f5f 	dmb	sy
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000b1c:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <HAL_MPU_Disable+0x24>)
 8000b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b20:	4a05      	ldr	r2, [pc, #20]	; (8000b38 <HAL_MPU_Disable+0x24>)
 8000b22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b26:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000b28:	4b04      	ldr	r3, [pc, #16]	; (8000b3c <HAL_MPU_Disable+0x28>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	605a      	str	r2, [r3, #4]
}
 8000b2e:	bf00      	nop
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr
 8000b38:	e000ed00 	.word	0xe000ed00
 8000b3c:	e000ed90 	.word	0xe000ed90

08000b40 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000b48:	4a0a      	ldr	r2, [pc, #40]	; (8000b74 <HAL_MPU_Enable+0x34>)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	f043 0301 	orr.w	r3, r3, #1
 8000b50:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000b52:	4b09      	ldr	r3, [pc, #36]	; (8000b78 <HAL_MPU_Enable+0x38>)
 8000b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b56:	4a08      	ldr	r2, [pc, #32]	; (8000b78 <HAL_MPU_Enable+0x38>)
 8000b58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b5c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000b5e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000b62:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000b66:	bf00      	nop
 8000b68:	370c      	adds	r7, #12
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	e000ed90 	.word	0xe000ed90
 8000b78:	e000ed00 	.word	0xe000ed00

08000b7c <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	785a      	ldrb	r2, [r3, #1]
 8000b88:	4b1d      	ldr	r3, [pc, #116]	; (8000c00 <HAL_MPU_ConfigRegion+0x84>)
 8000b8a:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d029      	beq.n	8000be8 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8000b94:	4a1a      	ldr	r2, [pc, #104]	; (8000c00 <HAL_MPU_ConfigRegion+0x84>)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	7b1b      	ldrb	r3, [r3, #12]
 8000ba0:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	7adb      	ldrb	r3, [r3, #11]
 8000ba6:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000ba8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	7a9b      	ldrb	r3, [r3, #10]
 8000bae:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000bb0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	7b5b      	ldrb	r3, [r3, #13]
 8000bb6:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000bb8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	7b9b      	ldrb	r3, [r3, #14]
 8000bbe:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000bc0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	7bdb      	ldrb	r3, [r3, #15]
 8000bc6:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000bc8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	7a5b      	ldrb	r3, [r3, #9]
 8000bce:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000bd0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	7a1b      	ldrb	r3, [r3, #8]
 8000bd6:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000bd8:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000bda:	687a      	ldr	r2, [r7, #4]
 8000bdc:	7812      	ldrb	r2, [r2, #0]
 8000bde:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000be0:	4a07      	ldr	r2, [pc, #28]	; (8000c00 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000be2:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000be4:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8000be6:	e005      	b.n	8000bf4 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8000be8:	4b05      	ldr	r3, [pc, #20]	; (8000c00 <HAL_MPU_ConfigRegion+0x84>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8000bee:	4b04      	ldr	r3, [pc, #16]	; (8000c00 <HAL_MPU_ConfigRegion+0x84>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	611a      	str	r2, [r3, #16]
}
 8000bf4:	bf00      	nop
 8000bf6:	370c      	adds	r7, #12
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr
 8000c00:	e000ed90 	.word	0xe000ed90

08000c04 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8000c08:	4b07      	ldr	r3, [pc, #28]	; (8000c28 <HAL_GetCurrentCPUID+0x24>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	091b      	lsrs	r3, r3, #4
 8000c0e:	f003 030f 	and.w	r3, r3, #15
 8000c12:	2b07      	cmp	r3, #7
 8000c14:	d101      	bne.n	8000c1a <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8000c16:	2303      	movs	r3, #3
 8000c18:	e000      	b.n	8000c1c <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8000c1a:	2301      	movs	r3, #1
  }
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	e000ed00 	.word	0xe000ed00

08000c2c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d101      	bne.n	8000c3e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	e0c6      	b.n	8000dcc <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d102      	bne.n	8000c4c <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8000c46:	6878      	ldr	r0, [r7, #4]
 8000c48:	f011 fa12 	bl	8012070 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	2223      	movs	r2, #35	; 0x23
 8000c50:	655a      	str	r2, [r3, #84]	; 0x54

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c52:	4b60      	ldr	r3, [pc, #384]	; (8000dd4 <HAL_ETH_Init+0x1a8>)
 8000c54:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c58:	4a5e      	ldr	r2, [pc, #376]	; (8000dd4 <HAL_ETH_Init+0x1a8>)
 8000c5a:	f043 0302 	orr.w	r3, r3, #2
 8000c5e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000c62:	4b5c      	ldr	r3, [pc, #368]	; (8000dd4 <HAL_ETH_Init+0x1a8>)
 8000c64:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c68:	f003 0302 	and.w	r3, r3, #2
 8000c6c:	60bb      	str	r3, [r7, #8]
 8000c6e:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	7a1b      	ldrb	r3, [r3, #8]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d103      	bne.n	8000c80 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8000c78:	2000      	movs	r0, #0
 8000c7a:	f7ff fe27 	bl	80008cc <HAL_SYSCFG_ETHInterfaceSelect>
 8000c7e:	e003      	b.n	8000c88 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8000c80:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000c84:	f7ff fe22 	bl	80008cc <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f042 0201 	orr.w	r2, r2, #1
 8000c9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000c9e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ca0:	f7ff fdda 	bl	8000858 <HAL_GetTick>
 8000ca4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8000ca6:	e00f      	b.n	8000cc8 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8000ca8:	f7ff fdd6 	bl	8000858 <HAL_GetTick>
 8000cac:	4602      	mov	r2, r0
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	1ad3      	subs	r3, r2, r3
 8000cb2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000cb6:	d907      	bls.n	8000cc8 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	2204      	movs	r2, #4
 8000cbc:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	22e0      	movs	r2, #224	; 0xe0
 8000cc2:	655a      	str	r2, [r3, #84]	; 0x54
      /* Return Error */
      return HAL_ERROR;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	e081      	b.n	8000dcc <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f003 0301 	and.w	r3, r3, #1
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d1e6      	bne.n	8000ca8 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8000cda:	6878      	ldr	r0, [r7, #4]
 8000cdc:	f001 f94a 	bl	8001f74 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8000ce0:	f003 ff8e 	bl	8004c00 <HAL_RCC_GetHCLKFreq>
 8000ce4:	4602      	mov	r2, r0
 8000ce6:	4b3c      	ldr	r3, [pc, #240]	; (8000dd8 <HAL_ETH_Init+0x1ac>)
 8000ce8:	fba3 2302 	umull	r2, r3, r3, r2
 8000cec:	0c9a      	lsrs	r2, r3, #18
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	3a01      	subs	r2, #1
 8000cf4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8000cf8:	6878      	ldr	r0, [r7, #4]
 8000cfa:	f001 f89d 	bl	8001e38 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000d14:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8000d18:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	695b      	ldr	r3, [r3, #20]
 8000d1e:	f003 0303 	and.w	r3, r3, #3
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d007      	beq.n	8000d36 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	2201      	movs	r2, #1
 8000d2a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	22e0      	movs	r2, #224	; 0xe0
 8000d30:	655a      	str	r2, [r3, #84]	; 0x54
    /* Return Error */
    return HAL_ERROR;
 8000d32:	2301      	movs	r3, #1
 8000d34:	e04a      	b.n	8000dcc <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681a      	ldr	r2, [r3, #0]
 8000d3a:	f241 1308 	movw	r3, #4360	; 0x1108
 8000d3e:	4413      	add	r3, r2
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	4b26      	ldr	r3, [pc, #152]	; (8000ddc <HAL_ETH_Init+0x1b0>)
 8000d44:	4013      	ands	r3, r2
 8000d46:	687a      	ldr	r2, [r7, #4]
 8000d48:	6952      	ldr	r2, [r2, #20]
 8000d4a:	0052      	lsls	r2, r2, #1
 8000d4c:	6879      	ldr	r1, [r7, #4]
 8000d4e:	6809      	ldr	r1, [r1, #0]
 8000d50:	431a      	orrs	r2, r3
 8000d52:	f241 1308 	movw	r3, #4360	; 0x1108
 8000d56:	440b      	add	r3, r1
 8000d58:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8000d5a:	6878      	ldr	r0, [r7, #4]
 8000d5c:	f001 f962 	bl	8002024 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8000d60:	6878      	ldr	r0, [r7, #4]
 8000d62:	f001 f9a6 	bl	80020b2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	3305      	adds	r3, #5
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	021a      	lsls	r2, r3, #8
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	3304      	adds	r3, #4
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	4619      	mov	r1, r3
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	430a      	orrs	r2, r1
 8000d80:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	3303      	adds	r3, #3
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	061a      	lsls	r2, r3, #24
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	3302      	adds	r3, #2
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	041b      	lsls	r3, r3, #16
 8000d98:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	3301      	adds	r3, #1
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8000da4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8000db2:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8000db4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2200      	movs	r2, #0
 8000dbc:	65da      	str	r2, [r3, #92]	; 0x5c
  heth->gState = HAL_ETH_STATE_READY;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2210      	movs	r2, #16
 8000dc2:	655a      	str	r2, [r3, #84]	; 0x54
  heth->RxState = HAL_ETH_STATE_READY;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2210      	movs	r2, #16
 8000dc8:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8000dca:	2300      	movs	r3, #0
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3710      	adds	r7, #16
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	58024400 	.word	0x58024400
 8000dd8:	431bde83 	.word	0x431bde83
 8000ddc:	ffff8001 	.word	0xffff8001

08000de0 <HAL_ETH_DescAssignMemory>:
  * @param  pBuffer1: address of buffer 1
  * @param  pBuffer2: address of buffer 2 if available
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DescAssignMemory(ETH_HandleTypeDef *heth, uint32_t Index, uint8_t *pBuffer1, uint8_t *pBuffer2)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b087      	sub	sp, #28
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	60f8      	str	r0, [r7, #12]
 8000de8:	60b9      	str	r1, [r7, #8]
 8000dea:	607a      	str	r2, [r7, #4]
 8000dec:	603b      	str	r3, [r7, #0]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[Index];
 8000dee:	68fa      	ldr	r2, [r7, #12]
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	330a      	adds	r3, #10
 8000df4:	009b      	lsls	r3, r3, #2
 8000df6:	4413      	add	r3, r2
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	617b      	str	r3, [r7, #20]

  if((pBuffer1 == NULL) || (Index >= (uint32_t)ETH_RX_DESC_CNT))
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d002      	beq.n	8000e08 <HAL_ETH_DescAssignMemory+0x28>
 8000e02:	68bb      	ldr	r3, [r7, #8]
 8000e04:	2b03      	cmp	r3, #3
 8000e06:	d904      	bls.n	8000e12 <HAL_ETH_DescAssignMemory+0x32>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Return Error */
    return HAL_ERROR;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	e021      	b.n	8000e56 <HAL_ETH_DescAssignMemory+0x76>
  }

  /* write buffer address to RDES0 */
  WRITE_REG(dmarxdesc->DESC0, (uint32_t)pBuffer1);
 8000e12:	687a      	ldr	r2, [r7, #4]
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	601a      	str	r2, [r3, #0]
  /* store buffer address */
  WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)pBuffer1);
 8000e18:	687a      	ldr	r2, [r7, #4]
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	611a      	str	r2, [r3, #16]
  /* set buffer address valid bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	68db      	ldr	r3, [r3, #12]
 8000e22:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	60da      	str	r2, [r3, #12]

  if(pBuffer2 != NULL)
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d00b      	beq.n	8000e48 <HAL_ETH_DescAssignMemory+0x68>
  {
    /* write buffer 2 address to RDES1 */
    WRITE_REG(dmarxdesc->DESC2, (uint32_t)pBuffer2);
 8000e30:	683a      	ldr	r2, [r7, #0]
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	609a      	str	r2, [r3, #8]
     /* store buffer 2 address */
    WRITE_REG(dmarxdesc->BackupAddr1, (uint32_t)pBuffer2);
 8000e36:	683a      	ldr	r2, [r7, #0]
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	615a      	str	r2, [r3, #20]
    /* set buffer 2 address valid bit to RDES3 */
    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	68db      	ldr	r3, [r3, #12]
 8000e40:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	60da      	str	r2, [r3, #12]
  }
  /* set OWN bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8000e54:	2300      	movs	r3, #0
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	371c      	adds	r7, #28
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr

08000e62 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8000e62:	b480      	push	{r7}
 8000e64:	b083      	sub	sp, #12
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
  if(heth->gState == HAL_ETH_STATE_READY)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e6e:	2b10      	cmp	r3, #16
 8000e70:	d14c      	bne.n	8000f0c <HAL_ETH_Start+0xaa>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2223      	movs	r2, #35	; 0x23
 8000e76:	655a      	str	r2, [r3, #84]	; 0x54

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f042 0202 	orr.w	r2, r2, #2
 8000e86:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f042 0201 	orr.w	r2, r2, #1
 8000e96:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f042 0201 	orr.w	r2, r2, #1
 8000ea8:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	f241 1304 	movw	r3, #4356	; 0x1104
 8000eb4:	4413      	add	r3, r2
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	687a      	ldr	r2, [r7, #4]
 8000eba:	6811      	ldr	r1, [r2, #0]
 8000ebc:	f043 0201 	orr.w	r2, r3, #1
 8000ec0:	f241 1304 	movw	r3, #4356	; 0x1104
 8000ec4:	440b      	add	r3, r1
 8000ec6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	f241 1308 	movw	r3, #4360	; 0x1108
 8000ed0:	4413      	add	r3, r2
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	687a      	ldr	r2, [r7, #4]
 8000ed6:	6811      	ldr	r1, [r2, #0]
 8000ed8:	f043 0201 	orr.w	r2, r3, #1
 8000edc:	f241 1308 	movw	r3, #4360	; 0x1108
 8000ee0:	440b      	add	r3, r1
 8000ee2:	601a      	str	r2, [r3, #0]

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f442 7281 	orr.w	r2, r2, #258	; 0x102
 8000ef6:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8000efa:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2210      	movs	r2, #16
 8000f00:	655a      	str	r2, [r3, #84]	; 0x54
    heth->RxState = HAL_ETH_STATE_BUSY_RX;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2222      	movs	r2, #34	; 0x22
 8000f06:	659a      	str	r2, [r3, #88]	; 0x58

    return HAL_OK;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	e000      	b.n	8000f0e <HAL_ETH_Start+0xac>
  }
  else
  {
    return HAL_ERROR;
 8000f0c:	2301      	movs	r3, #1
  }
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr

08000f1a <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	b083      	sub	sp, #12
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
  if(heth->gState != HAL_ETH_STATE_RESET)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d040      	beq.n	8000fac <HAL_ETH_Stop+0x92>
  {
     /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2223      	movs	r2, #35	; 0x23
 8000f2e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	f241 1304 	movw	r3, #4356	; 0x1104
 8000f38:	4413      	add	r3, r2
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	687a      	ldr	r2, [r7, #4]
 8000f3e:	6811      	ldr	r1, [r2, #0]
 8000f40:	f023 0201 	bic.w	r2, r3, #1
 8000f44:	f241 1304 	movw	r3, #4356	; 0x1104
 8000f48:	440b      	add	r3, r1
 8000f4a:	601a      	str	r2, [r3, #0]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	f241 1308 	movw	r3, #4360	; 0x1108
 8000f54:	4413      	add	r3, r2
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	687a      	ldr	r2, [r7, #4]
 8000f5a:	6811      	ldr	r1, [r2, #0]
 8000f5c:	f023 0201 	bic.w	r2, r3, #1
 8000f60:	f241 1308 	movw	r3, #4360	; 0x1108
 8000f64:	440b      	add	r3, r1
 8000f66:	601a      	str	r2, [r3, #0]

    /* Disable the MAC reception */
    CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_RE);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f022 0201 	bic.w	r2, r2, #1
 8000f76:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f042 0201 	orr.w	r2, r2, #1
 8000f88:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f022 0202 	bic.w	r2, r2, #2
 8000f9a:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2210      	movs	r2, #16
 8000fa0:	655a      	str	r2, [r3, #84]	; 0x54
    heth->RxState = HAL_ETH_STATE_READY;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2210      	movs	r2, #16
 8000fa6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Return function status */
    return HAL_OK;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	e000      	b.n	8000fae <HAL_ETH_Stop+0x94>
  }
  else
  {
    return HAL_ERROR;
 8000fac:	2301      	movs	r3, #1
  }
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr

08000fba <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b086      	sub	sp, #24
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	60f8      	str	r0, [r7, #12]
 8000fc2:	60b9      	str	r1, [r7, #8]
 8000fc4:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  const ETH_DMADescTypeDef *dmatxdesc;

  if(pTxConfig == NULL)
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d107      	bne.n	8000fdc <HAL_ETH_Transmit+0x22>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fd0:	f043 0201 	orr.w	r2, r3, #1
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	65da      	str	r2, [r3, #92]	; 0x5c
    return HAL_ERROR;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	e076      	b.n	80010ca <HAL_ETH_Transmit+0x110>
  }

  if(heth->gState == HAL_ETH_STATE_READY)
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fe0:	2b10      	cmp	r3, #16
 8000fe2:	d171      	bne.n	80010c8 <HAL_ETH_Transmit+0x10e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	68b9      	ldr	r1, [r7, #8]
 8000fe8:	68f8      	ldr	r0, [r7, #12]
 8000fea:	f001 f8bf 	bl	800216c <ETH_Prepare_Tx_Descriptors>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d007      	beq.n	8001004 <HAL_ETH_Transmit+0x4a>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ff8:	f043 0202 	orr.w	r2, r3, #2
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8001000:	2301      	movs	r3, #1
 8001002:	e062      	b.n	80010ca <HAL_ETH_Transmit+0x110>
    }

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	3206      	adds	r2, #6
 800100c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001010:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001016:	1c5a      	adds	r2, r3, #1
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	629a      	str	r2, [r3, #40]	; 0x28
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001020:	2b03      	cmp	r3, #3
 8001022:	d904      	bls.n	800102e <HAL_ETH_Transmit+0x74>
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001028:	1f1a      	subs	r2, r3, #4
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	68fa      	ldr	r2, [r7, #12]
 8001038:	3106      	adds	r1, #6
 800103a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800103e:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8001042:	601a      	str	r2, [r3, #0]

    tickstart = HAL_GetTick();
 8001044:	f7ff fc08 	bl	8000858 <HAL_GetTick>
 8001048:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occured */
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 800104a:	e034      	b.n	80010b6 <HAL_ETH_Transmit+0xfc>
    {
      if((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800105a:	2b00      	cmp	r3, #0
 800105c:	d011      	beq.n	8001082 <HAL_ETH_Transmit+0xc8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001062:	f043 0208 	orr.w	r2, r3, #8
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	65da      	str	r2, [r3, #92]	; 0x5c
        heth->DMAErrorCode = heth->Instance->DMACSR;
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	661a      	str	r2, [r3, #96]	; 0x60
        /* Set ETH HAL State to Ready */
        heth->gState = HAL_ETH_STATE_ERROR;
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	22e0      	movs	r2, #224	; 0xe0
 800107c:	655a      	str	r2, [r3, #84]	; 0x54
        /* Return function status */
        return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	e023      	b.n	80010ca <HAL_ETH_Transmit+0x110>
      }

      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001088:	d015      	beq.n	80010b6 <HAL_ETH_Transmit+0xfc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout) || (Timeout == 0U))
 800108a:	f7ff fbe5 	bl	8000858 <HAL_GetTick>
 800108e:	4602      	mov	r2, r0
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	1ad3      	subs	r3, r2, r3
 8001094:	687a      	ldr	r2, [r7, #4]
 8001096:	429a      	cmp	r2, r3
 8001098:	d302      	bcc.n	80010a0 <HAL_ETH_Transmit+0xe6>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d10a      	bne.n	80010b6 <HAL_ETH_Transmit+0xfc>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010a4:	f043 0204 	orr.w	r2, r3, #4
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	65da      	str	r2, [r3, #92]	; 0x5c
          heth->gState = HAL_ETH_STATE_READY;
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	2210      	movs	r2, #16
 80010b0:	655a      	str	r2, [r3, #84]	; 0x54
          return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	e009      	b.n	80010ca <HAL_ETH_Transmit+0x110>
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	68db      	ldr	r3, [r3, #12]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	dbc6      	blt.n	800104c <HAL_ETH_Transmit+0x92>
        }
      }
    }

    /* Set ETH HAL State to Ready */
    heth->gState = HAL_ETH_STATE_READY;
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	2210      	movs	r2, #16
 80010c2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 80010c4:	2300      	movs	r3, #0
 80010c6:	e000      	b.n	80010ca <HAL_ETH_Transmit+0x110>
  }
  else
  {
    return HAL_ERROR;
 80010c8:	2301      	movs	r3, #1
  }
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3718      	adds	r7, #24
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <HAL_ETH_IsRxDataAvailable>:
  *         the configuration information for ETHERNET module
  * @retval  1: A Packet is received
  *          0: no Packet received
  */
uint8_t HAL_ETH_IsRxDataAvailable(ETH_HandleTypeDef *heth)
{
 80010d2:	b480      	push	{r7}
 80010d4:	b089      	sub	sp, #36	; 0x24
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	332c      	adds	r3, #44	; 0x2c
 80010de:	60bb      	str	r3, [r7, #8]
  uint32_t descidx = dmarxdesclist->CurRxDesc;
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	691b      	ldr	r3, [r3, #16]
 80010e4:	61fb      	str	r3, [r7, #28]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	69fa      	ldr	r2, [r7, #28]
 80010ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010ee:	61bb      	str	r3, [r7, #24]
  uint32_t descscancnt = 0;
 80010f0:	2300      	movs	r3, #0
 80010f2:	617b      	str	r3, [r7, #20]
  uint32_t appdesccnt = 0, firstappdescidx = 0;
 80010f4:	2300      	movs	r3, #0
 80010f6:	613b      	str	r3, [r7, #16]
 80010f8:	2300      	movs	r3, #0
 80010fa:	60fb      	str	r3, [r7, #12]

  if(dmarxdesclist->AppDescNbr != 0U)
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	699b      	ldr	r3, [r3, #24]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d06b      	beq.n	80011dc <HAL_ETH_IsRxDataAvailable+0x10a>
  {
    /* data already received by not yet processed*/
    return 0;
 8001104:	2300      	movs	r3, #0
 8001106:	e0bc      	b.n	8001282 <HAL_ETH_IsRxDataAvailable+0x1b0>
  }

  /* Check if descriptor is not owned by DMA */
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
  {
    descscancnt++;
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	3301      	adds	r3, #1
 800110c:	617b      	str	r3, [r7, #20]

    /* Check if last descriptor */
    if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 800110e:	69bb      	ldr	r3, [r7, #24]
 8001110:	68db      	ldr	r3, [r3, #12]
 8001112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001116:	2b00      	cmp	r3, #0
 8001118:	d036      	beq.n	8001188 <HAL_ETH_IsRxDataAvailable+0xb6>
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	3301      	adds	r3, #1
 800111e:	613b      	str	r3, [r7, #16]

      if(appdesccnt == 1U)
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	2b01      	cmp	r3, #1
 8001124:	d101      	bne.n	800112a <HAL_ETH_IsRxDataAvailable+0x58>
      {
        WRITE_REG(firstappdescidx, descidx);
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	60fb      	str	r3, [r7, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	3301      	adds	r3, #1
 800112e:	61fb      	str	r3, [r7, #28]
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	2b03      	cmp	r3, #3
 8001134:	d902      	bls.n	800113c <HAL_ETH_IsRxDataAvailable+0x6a>
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	3b04      	subs	r3, #4
 800113a:	61fb      	str	r3, [r7, #28]

      /* Check for Context descriptor */
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	69fa      	ldr	r2, [r7, #28]
 8001140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001144:	61bb      	str	r3, [r7, #24]

      if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_OWN)  == (uint32_t)RESET)
 8001146:	69bb      	ldr	r3, [r7, #24]
 8001148:	68db      	ldr	r3, [r3, #12]
 800114a:	2b00      	cmp	r3, #0
 800114c:	db11      	blt.n	8001172 <HAL_ETH_IsRxDataAvailable+0xa0>
      {
        if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 800114e:	69bb      	ldr	r3, [r7, #24]
 8001150:	68db      	ldr	r3, [r3, #12]
 8001152:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001156:	2b00      	cmp	r3, #0
 8001158:	d00b      	beq.n	8001172 <HAL_ETH_IsRxDataAvailable+0xa0>
        {
          /* Increment the number of descriptors to be passed to the application */
          dmarxdesclist->AppContextDesc = 1;
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	2201      	movs	r2, #1
 800115e:	61da      	str	r2, [r3, #28]
          /* Increment current rx descriptor index */
          INCR_RX_DESC_INDEX(descidx, 1U);
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	3301      	adds	r3, #1
 8001164:	61fb      	str	r3, [r7, #28]
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	2b03      	cmp	r3, #3
 800116a:	d902      	bls.n	8001172 <HAL_ETH_IsRxDataAvailable+0xa0>
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	3b04      	subs	r3, #4
 8001170:	61fb      	str	r3, [r7, #28]
        }
      }
      /* Fill information to Rx descriptors list */
      dmarxdesclist->CurRxDesc = descidx;
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	69fa      	ldr	r2, [r7, #28]
 8001176:	611a      	str	r2, [r3, #16]
      dmarxdesclist->FirstAppDesc = firstappdescidx;
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	68fa      	ldr	r2, [r7, #12]
 800117c:	615a      	str	r2, [r3, #20]
      dmarxdesclist->AppDescNbr = appdesccnt;
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	693a      	ldr	r2, [r7, #16]
 8001182:	619a      	str	r2, [r3, #24]

      /* Return function status */
      return 1;
 8001184:	2301      	movs	r3, #1
 8001186:	e07c      	b.n	8001282 <HAL_ETH_IsRxDataAvailable+0x1b0>
    }
    /* Check if first descriptor */
    else if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001190:	2b00      	cmp	r3, #0
 8001192:	d012      	beq.n	80011ba <HAL_ETH_IsRxDataAvailable+0xe8>
    {
      WRITE_REG(firstappdescidx, descidx);
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	60fb      	str	r3, [r7, #12]
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt = 1U;
 8001198:	2301      	movs	r3, #1
 800119a:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	3301      	adds	r3, #1
 80011a0:	61fb      	str	r3, [r7, #28]
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	2b03      	cmp	r3, #3
 80011a6:	d902      	bls.n	80011ae <HAL_ETH_IsRxDataAvailable+0xdc>
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	3b04      	subs	r3, #4
 80011ac:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	69fa      	ldr	r2, [r7, #28]
 80011b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011b6:	61bb      	str	r3, [r7, #24]
 80011b8:	e010      	b.n	80011dc <HAL_ETH_IsRxDataAvailable+0x10a>
    }
    /* It should be an intermediate descriptor */
    else
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	3301      	adds	r3, #1
 80011be:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	3301      	adds	r3, #1
 80011c4:	61fb      	str	r3, [r7, #28]
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	2b03      	cmp	r3, #3
 80011ca:	d902      	bls.n	80011d2 <HAL_ETH_IsRxDataAvailable+0x100>
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	3b04      	subs	r3, #4
 80011d0:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	69fa      	ldr	r2, [r7, #28]
 80011d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011da:	61bb      	str	r3, [r7, #24]
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	db02      	blt.n	80011ea <HAL_ETH_IsRxDataAvailable+0x118>
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	2b03      	cmp	r3, #3
 80011e8:	d98e      	bls.n	8001108 <HAL_ETH_IsRxDataAvailable+0x36>
    }
  }

  /* Build Descriptors if an incomplete Packet is received */
  if(appdesccnt > 0U)
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d044      	beq.n	800127a <HAL_ETH_IsRxDataAvailable+0x1a8>
  {
    descidx = firstappdescidx;
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	61fb      	str	r3, [r7, #28]
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	69fa      	ldr	r2, [r7, #28]
 80011f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011fc:	61bb      	str	r3, [r7, #24]

    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 80011fe:	2300      	movs	r3, #0
 8001200:	617b      	str	r3, [r7, #20]
 8001202:	e036      	b.n	8001272 <HAL_ETH_IsRxDataAvailable+0x1a0>
    {
      WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 8001204:	69bb      	ldr	r3, [r7, #24]
 8001206:	691a      	ldr	r2, [r3, #16]
 8001208:	69bb      	ldr	r3, [r7, #24]
 800120a:	601a      	str	r2, [r3, #0]
      WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 800120c:	69bb      	ldr	r3, [r7, #24]
 800120e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001212:	60da      	str	r2, [r3, #12]

      if (READ_REG(dmarxdesc->BackupAddr1) != ((uint32_t)RESET))
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	695b      	ldr	r3, [r3, #20]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d009      	beq.n	8001230 <HAL_ETH_IsRxDataAvailable+0x15e>
      {
        WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	695a      	ldr	r2, [r3, #20]
 8001220:	69bb      	ldr	r3, [r7, #24]
 8001222:	609a      	str	r2, [r3, #8]
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800122c:	69bb      	ldr	r3, [r7, #24]
 800122e:	60da      	str	r2, [r3, #12]
      }

      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8001230:	69bb      	ldr	r3, [r7, #24]
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	60da      	str	r2, [r3, #12]

      if(dmarxdesclist->ItMode != ((uint32_t)RESET))
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	6a1b      	ldr	r3, [r3, #32]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d005      	beq.n	8001250 <HAL_ETH_IsRxDataAvailable+0x17e>
      {
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8001244:	69bb      	ldr	r3, [r7, #24]
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800124c:	69bb      	ldr	r3, [r7, #24]
 800124e:	60da      	str	r2, [r3, #12]
      }

      /* Increment rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	3301      	adds	r3, #1
 8001254:	61fb      	str	r3, [r7, #28]
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	2b03      	cmp	r3, #3
 800125a:	d902      	bls.n	8001262 <HAL_ETH_IsRxDataAvailable+0x190>
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	3b04      	subs	r3, #4
 8001260:	61fb      	str	r3, [r7, #28]
      /* Get descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	69fa      	ldr	r2, [r7, #28]
 8001266:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800126a:	61bb      	str	r3, [r7, #24]
    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	3301      	adds	r3, #1
 8001270:	617b      	str	r3, [r7, #20]
 8001272:	697a      	ldr	r2, [r7, #20]
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	429a      	cmp	r2, r3
 8001278:	d3c4      	bcc.n	8001204 <HAL_ETH_IsRxDataAvailable+0x132>
    }
  }

  /* Fill information to Rx descriptors list: No received Packet */
  dmarxdesclist->AppDescNbr = 0U;
 800127a:	68bb      	ldr	r3, [r7, #8]
 800127c:	2200      	movs	r2, #0
 800127e:	619a      	str	r2, [r3, #24]

  return 0;
 8001280:	2300      	movs	r3, #0
}
 8001282:	4618      	mov	r0, r3
 8001284:	3724      	adds	r7, #36	; 0x24
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr

0800128e <HAL_ETH_GetRxDataBuffer>:
  *         the configuration information for ETHERNET module
  * @param  RxBuffer: Pointer to a ETH_BufferTypeDef structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataBuffer(ETH_HandleTypeDef *heth, ETH_BufferTypeDef *RxBuffer)
{
 800128e:	b580      	push	{r7, lr}
 8001290:	b08a      	sub	sp, #40	; 0x28
 8001292:	af00      	add	r7, sp, #0
 8001294:	6078      	str	r0, [r7, #4]
 8001296:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	332c      	adds	r3, #44	; 0x2c
 800129c:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	695b      	ldr	r3, [r3, #20]
 80012a2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t index, accumulatedlen = 0, lastdesclen;
 80012a4:	2300      	movs	r3, #0
 80012a6:	61fb      	str	r3, [r7, #28]
  __IO const ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012b0:	61bb      	str	r3, [r7, #24]
  ETH_BufferTypeDef *rxbuff = RxBuffer;
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	617b      	str	r3, [r7, #20]

  if(rxbuff == NULL)
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d104      	bne.n	80012c6 <HAL_ETH_GetRxDataBuffer+0x38>
  {
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2201      	movs	r2, #1
 80012c0:	65da      	str	r2, [r3, #92]	; 0x5c
    return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e07d      	b.n	80013c2 <HAL_ETH_GetRxDataBuffer+0x134>
  }

  if(dmarxdesclist->AppDescNbr == 0U)
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	699b      	ldr	r3, [r3, #24]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d10f      	bne.n	80012ee <HAL_ETH_GetRxDataBuffer+0x60>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f7ff feff 	bl	80010d2 <HAL_ETH_IsRxDataAvailable>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d101      	bne.n	80012de <HAL_ETH_GetRxDataBuffer+0x50>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e071      	b.n	80013c2 <HAL_ETH_GetRxDataBuffer+0x134>
    }
    else
    {
      descidx = dmarxdesclist->FirstAppDesc;
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	695b      	ldr	r3, [r3, #20]
 80012e2:	627b      	str	r3, [r7, #36]	; 0x24
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012ec:	61bb      	str	r3, [r7, #24]
    }
  }

  /* Get intermediate descriptors buffers: in case of the Packet is splitted into multi descriptors */
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 80012ee:	2300      	movs	r3, #0
 80012f0:	623b      	str	r3, [r7, #32]
 80012f2:	e031      	b.n	8001358 <HAL_ETH_GetRxDataBuffer+0xca>
  {
    /* Get Address and length of the first buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 80012f4:	69bb      	ldr	r3, [r7, #24]
 80012f6:	691b      	ldr	r3, [r3, #16]
 80012f8:	461a      	mov	r2, r3
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	601a      	str	r2, [r3, #0]
    rxbuff->len =  heth->Init.RxBuffLen;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	695a      	ldr	r2, [r3, #20]
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	605a      	str	r2, [r3, #4]

    /* Check if the second buffer address of this descriptor is valid */
    if(dmarxdesc->BackupAddr1 != 0U)
 8001306:	69bb      	ldr	r3, [r7, #24]
 8001308:	695b      	ldr	r3, [r3, #20]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d00b      	beq.n	8001326 <HAL_ETH_GetRxDataBuffer+0x98>
    {
      /* Point to next buffer */
      rxbuff = (struct __ETH_BufferTypeDef *)rxbuff->next;
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	617b      	str	r3, [r7, #20]
      /* Get Address and length of the second buffer address */
      rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 8001314:	69bb      	ldr	r3, [r7, #24]
 8001316:	695b      	ldr	r3, [r3, #20]
 8001318:	461a      	mov	r2, r3
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	601a      	str	r2, [r3, #0]
      rxbuff->len =  heth->Init.RxBuffLen;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	695a      	ldr	r2, [r3, #20]
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	605a      	str	r2, [r3, #4]
    {
      /* Nothing to do here */
    }

    /* get total length until this descriptor */
    accumulatedlen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 8001326:	69bb      	ldr	r3, [r7, #24]
 8001328:	68db      	ldr	r3, [r3, #12]
 800132a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800132e:	61fb      	str	r3, [r7, #28]

    /* Increment to next descriptor */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001332:	3301      	adds	r3, #1
 8001334:	627b      	str	r3, [r7, #36]	; 0x24
 8001336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001338:	2b03      	cmp	r3, #3
 800133a:	d902      	bls.n	8001342 <HAL_ETH_GetRxDataBuffer+0xb4>
 800133c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800133e:	3b04      	subs	r3, #4
 8001340:	627b      	str	r3, [r7, #36]	; 0x24
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001346:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800134a:	61bb      	str	r3, [r7, #24]

    /* Point to next buffer */
    rxbuff = (struct __ETH_BufferTypeDef *)rxbuff->next;
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	617b      	str	r3, [r7, #20]
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 8001352:	6a3b      	ldr	r3, [r7, #32]
 8001354:	3301      	adds	r3, #1
 8001356:	623b      	str	r3, [r7, #32]
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	3b01      	subs	r3, #1
 800135e:	6a3a      	ldr	r2, [r7, #32]
 8001360:	429a      	cmp	r2, r3
 8001362:	d3c7      	bcc.n	80012f4 <HAL_ETH_GetRxDataBuffer+0x66>
  }

  /* last descriptor data length */
  lastdesclen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - accumulatedlen;
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	1ad3      	subs	r3, r2, r3
 8001370:	60fb      	str	r3, [r7, #12]

  /* Get Address of the first buffer address */
  rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 8001372:	69bb      	ldr	r3, [r7, #24]
 8001374:	691b      	ldr	r3, [r3, #16]
 8001376:	461a      	mov	r2, r3
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	601a      	str	r2, [r3, #0]

  /* data is in only one buffer */
  if(lastdesclen <= heth->Init.RxBuffLen)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	695b      	ldr	r3, [r3, #20]
 8001380:	68fa      	ldr	r2, [r7, #12]
 8001382:	429a      	cmp	r2, r3
 8001384:	d803      	bhi.n	800138e <HAL_ETH_GetRxDataBuffer+0x100>
  {
    rxbuff->len = lastdesclen;
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	68fa      	ldr	r2, [r7, #12]
 800138a:	605a      	str	r2, [r3, #4]
 800138c:	e018      	b.n	80013c0 <HAL_ETH_GetRxDataBuffer+0x132>
  }
  /* data is in two buffers */
  else if(dmarxdesc->BackupAddr1 != 0U)
 800138e:	69bb      	ldr	r3, [r7, #24]
 8001390:	695b      	ldr	r3, [r3, #20]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d012      	beq.n	80013bc <HAL_ETH_GetRxDataBuffer+0x12e>
  {
    /* Get the Length of the first buffer address */
    rxbuff->len = heth->Init.RxBuffLen;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	695a      	ldr	r2, [r3, #20]
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	605a      	str	r2, [r3, #4]
    /* Point to next buffer */
    rxbuff = (struct __ETH_BufferTypeDef *)rxbuff->next;
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	617b      	str	r3, [r7, #20]
    /* Get the Address the Length of the second buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 80013a4:	69bb      	ldr	r3, [r7, #24]
 80013a6:	695b      	ldr	r3, [r3, #20]
 80013a8:	461a      	mov	r2, r3
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	601a      	str	r2, [r3, #0]
    rxbuff->len =  lastdesclen - (heth->Init.RxBuffLen);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	695b      	ldr	r3, [r3, #20]
 80013b2:	68fa      	ldr	r2, [r7, #12]
 80013b4:	1ad2      	subs	r2, r2, r3
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	605a      	str	r2, [r3, #4]
 80013ba:	e001      	b.n	80013c0 <HAL_ETH_GetRxDataBuffer+0x132>
  }
  else /* Buffer 2 not valid*/
  {
    return HAL_ERROR;
 80013bc:	2301      	movs	r3, #1
 80013be:	e000      	b.n	80013c2 <HAL_ETH_GetRxDataBuffer+0x134>
  }

  return HAL_OK;
 80013c0:	2300      	movs	r3, #0
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3728      	adds	r7, #40	; 0x28
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}

080013ca <HAL_ETH_GetRxDataLength>:
  *         the configuration information for ETHERNET module
  * @param  Length: parameter to hold Rx packet length
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataLength(ETH_HandleTypeDef *heth, uint32_t *Length)
{
 80013ca:	b580      	push	{r7, lr}
 80013cc:	b086      	sub	sp, #24
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	6078      	str	r0, [r7, #4]
 80013d2:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	332c      	adds	r3, #44	; 0x2c
 80013d8:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	695b      	ldr	r3, [r3, #20]
 80013de:	617b      	str	r3, [r7, #20]
  __IO const ETH_DMADescTypeDef *dmarxdesc;

  if(dmarxdesclist->AppDescNbr == 0U)
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	699b      	ldr	r3, [r3, #24]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d107      	bne.n	80013f8 <HAL_ETH_GetRxDataLength+0x2e>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f7ff fe72 	bl	80010d2 <HAL_ETH_IsRxDataAvailable>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d101      	bne.n	80013f8 <HAL_ETH_GetRxDataLength+0x2e>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 80013f4:	2301      	movs	r3, #1
 80013f6:	e017      	b.n	8001428 <HAL_ETH_GetRxDataLength+0x5e>
    }
  }

  /* Get index of last descriptor */
  INCR_RX_DESC_INDEX(descidx, (dmarxdesclist->AppDescNbr - 1U));
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	699a      	ldr	r2, [r3, #24]
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	4413      	add	r3, r2
 8001400:	3b01      	subs	r3, #1
 8001402:	617b      	str	r3, [r7, #20]
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	2b03      	cmp	r3, #3
 8001408:	d902      	bls.n	8001410 <HAL_ETH_GetRxDataLength+0x46>
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	3b04      	subs	r3, #4
 800140e:	617b      	str	r3, [r7, #20]
  /* Point to last descriptor */
  dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	697a      	ldr	r2, [r7, #20]
 8001414:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001418:	60fb      	str	r3, [r7, #12]

  *Length = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	68db      	ldr	r3, [r3, #12]
 800141e:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001426:	2300      	movs	r3, #0
}
 8001428:	4618      	mov	r0, r3
 800142a:	3718      	adds	r7, #24
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}

08001430 <HAL_ETH_BuildRxDescriptors>:
* @param  heth: pointer to a ETH_HandleTypeDef structure that contains
*         the configuration information for ETHERNET module
* @retval HAL status.
*/
HAL_StatusTypeDef HAL_ETH_BuildRxDescriptors(ETH_HandleTypeDef *heth)
{
 8001430:	b480      	push	{r7}
 8001432:	b089      	sub	sp, #36	; 0x24
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	332c      	adds	r3, #44	; 0x2c
 800143c:	60fb      	str	r3, [r7, #12]
  uint32_t descindex = dmarxdesclist->FirstAppDesc;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	695b      	ldr	r3, [r3, #20]
 8001442:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	69fa      	ldr	r2, [r7, #28]
 8001448:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800144c:	61bb      	str	r3, [r7, #24]
  uint32_t totalappdescnbr = dmarxdesclist->AppDescNbr;
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	699b      	ldr	r3, [r3, #24]
 8001452:	617b      	str	r3, [r7, #20]
  uint32_t descscan;

  if(dmarxdesclist->AppDescNbr == 0U)
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	699b      	ldr	r3, [r3, #24]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d101      	bne.n	8001460 <HAL_ETH_BuildRxDescriptors+0x30>
  {
    /* No Rx descriptors to build */
    return HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	e055      	b.n	800150c <HAL_ETH_BuildRxDescriptors+0xdc>
  }

  if(dmarxdesclist->AppContextDesc != 0U)
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	69db      	ldr	r3, [r3, #28]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d002      	beq.n	800146e <HAL_ETH_BuildRxDescriptors+0x3e>
  {
    /* A context descriptor is available */
    totalappdescnbr += 1U;
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	3301      	adds	r3, #1
 800146c:	617b      	str	r3, [r7, #20]
  }

  for(descscan =0; descscan < totalappdescnbr; descscan++)
 800146e:	2300      	movs	r3, #0
 8001470:	613b      	str	r3, [r7, #16]
 8001472:	e03c      	b.n	80014ee <HAL_ETH_BuildRxDescriptors+0xbe>
  {
    WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 8001474:	69bb      	ldr	r3, [r7, #24]
 8001476:	691a      	ldr	r2, [r3, #16]
 8001478:	69bb      	ldr	r3, [r7, #24]
 800147a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 800147c:	69bb      	ldr	r3, [r7, #24]
 800147e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001482:	60da      	str	r2, [r3, #12]

    if (READ_REG(dmarxdesc->BackupAddr1) != 0U)
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	695b      	ldr	r3, [r3, #20]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d009      	beq.n	80014a0 <HAL_ETH_BuildRxDescriptors+0x70>
    {
      WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	695a      	ldr	r2, [r3, #20]
 8001490:	69bb      	ldr	r3, [r7, #24]
 8001492:	609a      	str	r2, [r3, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	60da      	str	r2, [r3, #12]
    }

    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 80014a0:	69bb      	ldr	r3, [r7, #24]
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80014a8:	69bb      	ldr	r3, [r7, #24]
 80014aa:	60da      	str	r2, [r3, #12]

    if(dmarxdesclist->ItMode != 0U)
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	6a1b      	ldr	r3, [r3, #32]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d005      	beq.n	80014c0 <HAL_ETH_BuildRxDescriptors+0x90>
    {
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	60da      	str	r2, [r3, #12]
    }

    if(descscan < (dmarxdesclist->AppDescNbr - 1U))
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	699b      	ldr	r3, [r3, #24]
 80014c4:	3b01      	subs	r3, #1
 80014c6:	693a      	ldr	r2, [r7, #16]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d20d      	bcs.n	80014e8 <HAL_ETH_BuildRxDescriptors+0xb8>
    {
      /* Increment rx descriptor index */
      INCR_RX_DESC_INDEX(descindex, 1U);
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	3301      	adds	r3, #1
 80014d0:	61fb      	str	r3, [r7, #28]
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	2b03      	cmp	r3, #3
 80014d6:	d902      	bls.n	80014de <HAL_ETH_BuildRxDescriptors+0xae>
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	3b04      	subs	r3, #4
 80014dc:	61fb      	str	r3, [r7, #28]
      /* Get descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	69fa      	ldr	r2, [r7, #28]
 80014e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014e6:	61bb      	str	r3, [r7, #24]
  for(descscan =0; descscan < totalappdescnbr; descscan++)
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	3301      	adds	r3, #1
 80014ec:	613b      	str	r3, [r7, #16]
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	429a      	cmp	r2, r3
 80014f4:	d3be      	bcc.n	8001474 <HAL_ETH_BuildRxDescriptors+0x44>
    }
  }

  /* Set the Tail pointer address to the last rx descriptor hold by the app */
  WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6819      	ldr	r1, [r3, #0]
 80014fa:	69ba      	ldr	r2, [r7, #24]
 80014fc:	f241 1328 	movw	r3, #4392	; 0x1128
 8001500:	440b      	add	r3, r1
 8001502:	601a      	str	r2, [r3, #0]

  /* reset the Application desc number */
  WRITE_REG(dmarxdesclist->AppDescNbr, 0);
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	2200      	movs	r2, #0
 8001508:	619a      	str	r2, [r3, #24]

  return HAL_OK;
 800150a:	2300      	movs	r3, #0
}
 800150c:	4618      	mov	r0, r3
 800150e:	3724      	adds	r7, #36	; 0x24
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr

08001518 <HAL_ETH_ReadPHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t *pRegValue)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b086      	sub	sp, #24
 800151c:	af00      	add	r7, sp, #0
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	60b9      	str	r1, [r7, #8]
 8001522:	607a      	str	r2, [r7, #4]
 8001524:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800152e:	f003 0301 	and.w	r3, r3, #1
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e03e      	b.n	80015b8 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001542:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	055b      	lsls	r3, r3, #21
 800154e:	4313      	orrs	r3, r2
 8001550:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	041b      	lsls	r3, r3, #16
 800155c:	4313      	orrs	r3, r2
 800155e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	f043 030c 	orr.w	r3, r3, #12
 8001566:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	f043 0301 	orr.w	r3, r3, #1
 800156e:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	697a      	ldr	r2, [r7, #20]
 8001576:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 800157a:	f7ff f96d 	bl	8000858 <HAL_GetTick>
 800157e:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001580:	e009      	b.n	8001596 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 8001582:	f7ff f969 	bl	8000858 <HAL_GetTick>
 8001586:	4602      	mov	r2, r0
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001590:	d901      	bls.n	8001596 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e010      	b.n	80015b8 <HAL_ETH_ReadPHYRegister+0xa0>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800159e:	f003 0301 	and.w	r3, r3, #1
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d1ed      	bne.n	8001582 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	461a      	mov	r2, r3
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80015b6:	2300      	movs	r3, #0
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3718      	adds	r7, #24
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}

080015c0 <HAL_ETH_WritePHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t RegValue)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b086      	sub	sp, #24
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	60f8      	str	r0, [r7, #12]
 80015c8:	60b9      	str	r1, [r7, #8]
 80015ca:	607a      	str	r2, [r7, #4]
 80015cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80015d6:	f003 0301 	and.w	r3, r3, #1
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e03c      	b.n	800165c <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80015ea:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	055b      	lsls	r3, r3, #21
 80015f6:	4313      	orrs	r3, r2
 80015f8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	041b      	lsls	r3, r3, #16
 8001604:	4313      	orrs	r3, r2
 8001606:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	f023 030c 	bic.w	r3, r3, #12
 800160e:	f043 0304 	orr.w	r3, r3, #4
 8001612:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	f043 0301 	orr.w	r3, r3, #1
 800161a:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	b29a      	uxth	r2, r3
 8001620:	4b10      	ldr	r3, [pc, #64]	; (8001664 <HAL_ETH_WritePHYRegister+0xa4>)
 8001622:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8001626:	4a0f      	ldr	r2, [pc, #60]	; (8001664 <HAL_ETH_WritePHYRegister+0xa4>)
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 800162e:	f7ff f913 	bl	8000858 <HAL_GetTick>
 8001632:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001634:	e009      	b.n	800164a <HAL_ETH_WritePHYRegister+0x8a>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 8001636:	f7ff f90f 	bl	8000858 <HAL_GetTick>
 800163a:	4602      	mov	r2, r0
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	1ad3      	subs	r3, r2, r3
 8001640:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001644:	d901      	bls.n	800164a <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e008      	b.n	800165c <HAL_ETH_WritePHYRegister+0x9c>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001652:	f003 0301 	and.w	r3, r3, #1
 8001656:	2b00      	cmp	r3, #0
 8001658:	d1ed      	bne.n	8001636 <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 800165a:	2300      	movs	r3, #0
}
 800165c:	4618      	mov	r0, r3
 800165e:	3718      	adds	r7, #24
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	40028000 	.word	0x40028000

08001668 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d101      	bne.n	800167c <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	e1c3      	b.n	8001a04 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 020c 	and.w	r2, r3, #12
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC)>> 4) > 0U) ? ENABLE : DISABLE;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 0310 	and.w	r3, r3, #16
 8001694:	2b00      	cmp	r3, #0
 8001696:	bf14      	ite	ne
 8001698:	2301      	movne	r3, #1
 800169a:	2300      	moveq	r3, #0
 800169c:	b2db      	uxtb	r3, r3
 800169e:	461a      	mov	r2, r3
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016be:	2b00      	cmp	r3, #0
 80016c0:	bf0c      	ite	eq
 80016c2:	2301      	moveq	r3, #1
 80016c4:	2300      	movne	r3, #0
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	461a      	mov	r2, r3
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U) ? ENABLE : DISABLE;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016da:	2b00      	cmp	r3, #0
 80016dc:	bf14      	ite	ne
 80016de:	2301      	movne	r3, #1
 80016e0:	2300      	moveq	r3, #0
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	461a      	mov	r2, r3
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	bf0c      	ite	eq
 80016f8:	2301      	moveq	r3, #1
 80016fa:	2300      	movne	r3, #0
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	461a      	mov	r2, r3
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800170e:	2b00      	cmp	r3, #0
 8001710:	bf14      	ite	ne
 8001712:	2301      	movne	r3, #1
 8001714:	2300      	moveq	r3, #0
 8001716:	b2db      	uxtb	r3, r3
 8001718:	461a      	mov	r2, r3
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001728:	2b00      	cmp	r3, #0
 800172a:	bf14      	ite	ne
 800172c:	2301      	movne	r3, #1
 800172e:	2300      	moveq	r3, #0
 8001730:	b2db      	uxtb	r3, r3
 8001732:	461a      	mov	r2, r3
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800175e:	2b00      	cmp	r3, #0
 8001760:	bf14      	ite	ne
 8001762:	2301      	movne	r3, #1
 8001764:	2300      	moveq	r3, #0
 8001766:	b2db      	uxtb	r3, r3
 8001768:	461a      	mov	r2, r3
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >>17) == 0U) ? ENABLE : DISABLE;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001778:	2b00      	cmp	r3, #0
 800177a:	bf0c      	ite	eq
 800177c:	2301      	moveq	r3, #1
 800177e:	2300      	movne	r3, #0
 8001780:	b2db      	uxtb	r3, r3
 8001782:	461a      	mov	r2, r3
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >>19) == 0U) ? ENABLE : DISABLE;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001792:	2b00      	cmp	r3, #0
 8001794:	bf0c      	ite	eq
 8001796:	2301      	moveq	r3, #1
 8001798:	2300      	movne	r3, #0
 800179a:	b2db      	uxtb	r3, r3
 800179c:	461a      	mov	r2, r3
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	bf14      	ite	ne
 80017b0:	2301      	movne	r3, #1
 80017b2:	2300      	moveq	r3, #0
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	461a      	mov	r2, r3
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	bf14      	ite	ne
 80017ca:	2301      	movne	r3, #1
 80017cc:	2300      	moveq	r3, #0
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	461a      	mov	r2, r3
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	bf14      	ite	ne
 80017e4:	2301      	movne	r3, #1
 80017e6:	2300      	moveq	r3, #0
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	461a      	mov	r2, r3
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	bf14      	ite	ne
 80017fe:	2301      	movne	r3, #1
 8001800:	2300      	moveq	r3, #0
 8001802:	b2db      	uxtb	r3, r3
 8001804:	461a      	mov	r2, r3
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001822:	2b00      	cmp	r3, #0
 8001824:	bf14      	ite	ne
 8001826:	2301      	movne	r3, #1
 8001828:	2300      	moveq	r3, #0
 800182a:	b2db      	uxtb	r3, r3
 800182c:	461a      	mov	r2, r3
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001858:	2b00      	cmp	r3, #0
 800185a:	bf0c      	ite	eq
 800185c:	2301      	moveq	r3, #1
 800185e:	2300      	movne	r3, #0
 8001860:	b2db      	uxtb	r3, r3
 8001862:	461a      	mov	r2, r3
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001874:	2b00      	cmp	r3, #0
 8001876:	bf14      	ite	ne
 8001878:	2301      	movne	r3, #1
 800187a:	2300      	moveq	r3, #0
 800187c:	b2db      	uxtb	r3, r3
 800187e:	461a      	mov	r2, r3
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001890:	2b00      	cmp	r3, #0
 8001892:	bf14      	ite	ne
 8001894:	2301      	movne	r3, #1
 8001896:	2300      	moveq	r3, #0
 8001898:	b2db      	uxtb	r3, r3
 800189a:	461a      	mov	r2, r3
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U) ? ENABLE : DISABLE;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	bf14      	ite	ne
 80018b0:	2301      	movne	r3, #1
 80018b2:	2300      	moveq	r3, #0
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	461a      	mov	r2, r3
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	0e5b      	lsrs	r3, r3, #25
 80018c6:	f003 021f 	and.w	r2, r3, #31
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018d8:	2b00      	cmp	r3, #0
 80018da:	bf14      	ite	ne
 80018dc:	2301      	movne	r3, #1
 80018de:	2300      	moveq	r3, #0
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	461a      	mov	r2, r3
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	f003 020f 	and.w	r2, r3, #15
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018fe:	f003 0302 	and.w	r3, r3, #2
 8001902:	2b00      	cmp	r3, #0
 8001904:	bf14      	ite	ne
 8001906:	2301      	movne	r3, #1
 8001908:	2300      	moveq	r3, #0
 800190a:	b2db      	uxtb	r3, r3
 800190c:	461a      	mov	r2, r3
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800191a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800191e:	2b00      	cmp	r3, #0
 8001920:	bf0c      	ite	eq
 8001922:	2301      	moveq	r3, #1
 8001924:	2300      	movne	r3, #0
 8001926:	b2db      	uxtb	r3, r3
 8001928:	461a      	mov	r2, r3
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001936:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001944:	0c1b      	lsrs	r3, r3, #16
 8001946:	b29a      	uxth	r2, r3
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001954:	f003 0301 	and.w	r3, r3, #1
 8001958:	2b00      	cmp	r3, #0
 800195a:	bf14      	ite	ne
 800195c:	2301      	movne	r3, #1
 800195e:	2300      	moveq	r3, #0
 8001960:	b2db      	uxtb	r3, r3
 8001962:	461a      	mov	r2, r3
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U) ? ENABLE : DISABLE;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	2b00      	cmp	r3, #0
 8001978:	bf14      	ite	ne
 800197a:	2301      	movne	r3, #1
 800197c:	2300      	moveq	r3, #0
 800197e:	b2db      	uxtb	r3, r3
 8001980:	461a      	mov	r2, r3
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8001990:	f003 0272 	and.w	r2, r3, #114	; 0x72
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80019a0:	f003 0223 	and.w	r2, r3, #35	; 0x23
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80019b0:	f003 0308 	and.w	r3, r3, #8
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	bf14      	ite	ne
 80019b8:	2301      	movne	r3, #1
 80019ba:	2300      	moveq	r3, #0
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	461a      	mov	r2, r3
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80019ce:	f003 0310 	and.w	r3, r3, #16
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	bf14      	ite	ne
 80019d6:	2301      	movne	r3, #1
 80019d8:	2300      	moveq	r3, #0
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	461a      	mov	r2, r3
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80019ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	bf0c      	ite	eq
 80019f4:	2301      	moveq	r3, #1
 80019f6:	2300      	movne	r3, #0
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	461a      	mov	r2, r3
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8001a02:	2300      	movs	r3, #0
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	6039      	str	r1, [r7, #0]
  if(macconf == NULL)
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d101      	bne.n	8001a24 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e00a      	b.n	8001a3a <HAL_ETH_SetMACConfig+0x2a>
  }

  if(heth->RxState == HAL_ETH_STATE_READY)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a28:	2b10      	cmp	r3, #16
 8001a2a:	d105      	bne.n	8001a38 <HAL_ETH_SetMACConfig+0x28>
  {
    ETH_SetMACConfig(heth, macconf);
 8001a2c:	6839      	ldr	r1, [r7, #0]
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f000 f860 	bl	8001af4 <ETH_SetMACConfig>

    return HAL_OK;
 8001a34:	2300      	movs	r3, #0
 8001a36:	e000      	b.n	8001a3a <HAL_ETH_SetMACConfig+0x2a>
  }
  else
  {
    return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
  }
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
	...

08001a44 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001a54:	60fb      	str	r3, [r7, #12]

	/* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001a5c:	60fb      	str	r3, [r7, #12]

	/* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001a5e:	f003 f8cf 	bl	8004c00 <HAL_RCC_GetHCLKFreq>
 8001a62:	60b8      	str	r0, [r7, #8]

	/* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	4a1e      	ldr	r2, [pc, #120]	; (8001ae0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d908      	bls.n	8001a7e <HAL_ETH_SetMDIOClockRange+0x3a>
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	4a1d      	ldr	r2, [pc, #116]	; (8001ae4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d804      	bhi.n	8001a7e <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	e027      	b.n	8001ace <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	4a18      	ldr	r2, [pc, #96]	; (8001ae4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d908      	bls.n	8001a98 <HAL_ETH_SetMDIOClockRange+0x54>
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	4a17      	ldr	r2, [pc, #92]	; (8001ae8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d804      	bhi.n	8001a98 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001a94:	60fb      	str	r3, [r7, #12]
 8001a96:	e01a      	b.n	8001ace <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	4a13      	ldr	r2, [pc, #76]	; (8001ae8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d903      	bls.n	8001aa8 <HAL_ETH_SetMDIOClockRange+0x64>
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	4a12      	ldr	r2, [pc, #72]	; (8001aec <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d911      	bls.n	8001acc <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	4a10      	ldr	r2, [pc, #64]	; (8001aec <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d908      	bls.n	8001ac2 <HAL_ETH_SetMDIOClockRange+0x7e>
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	4a0f      	ldr	r2, [pc, #60]	; (8001af0 <HAL_ETH_SetMDIOClockRange+0xac>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d804      	bhi.n	8001ac2 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001abe:	60fb      	str	r3, [r7, #12]
 8001ac0:	e005      	b.n	8001ace <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ac8:	60fb      	str	r3, [r7, #12]
 8001aca:	e000      	b.n	8001ace <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8001acc:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	68fa      	ldr	r2, [r7, #12]
 8001ad4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8001ad8:	bf00      	nop
 8001ada:	3710      	adds	r7, #16
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	01312cff 	.word	0x01312cff
 8001ae4:	02160ebf 	.word	0x02160ebf
 8001ae8:	039386ff 	.word	0x039386ff
 8001aec:	05f5e0ff 	.word	0x05f5e0ff
 8001af0:	08f0d17f 	.word	0x08f0d17f

08001af4 <ETH_SetMACConfig>:
/**
  * @}
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b085      	sub	sp, #20
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8001b06:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	791b      	ldrb	r3, [r3, #4]
 8001b0c:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8001b0e:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	7b1b      	ldrb	r3, [r3, #12]
 8001b14:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8001b16:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	7b5b      	ldrb	r3, [r3, #13]
 8001b1c:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001b1e:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	7b9b      	ldrb	r3, [r3, #14]
 8001b24:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8001b26:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	7bdb      	ldrb	r3, [r3, #15]
 8001b2c:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001b2e:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001b30:	683a      	ldr	r2, [r7, #0]
 8001b32:	7c12      	ldrb	r2, [r2, #16]
 8001b34:	2a00      	cmp	r2, #0
 8001b36:	d102      	bne.n	8001b3e <ETH_SetMACConfig+0x4a>
 8001b38:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001b3c:	e000      	b.n	8001b40 <ETH_SetMACConfig+0x4c>
 8001b3e:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001b40:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001b42:	683a      	ldr	r2, [r7, #0]
 8001b44:	7c52      	ldrb	r2, [r2, #17]
 8001b46:	2a00      	cmp	r2, #0
 8001b48:	d102      	bne.n	8001b50 <ETH_SetMACConfig+0x5c>
 8001b4a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b4e:	e000      	b.n	8001b52 <ETH_SetMACConfig+0x5e>
 8001b50:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001b52:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	7c9b      	ldrb	r3, [r3, #18]
 8001b58:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001b5a:	431a      	orrs	r2, r3
                                macconf->Speed |
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8001b60:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8001b66:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	7f1b      	ldrb	r3, [r3, #28]
 8001b6c:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8001b6e:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	7f5b      	ldrb	r3, [r3, #29]
 8001b74:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8001b76:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8001b78:	683a      	ldr	r2, [r7, #0]
 8001b7a:	7f92      	ldrb	r2, [r2, #30]
 8001b7c:	2a00      	cmp	r2, #0
 8001b7e:	d102      	bne.n	8001b86 <ETH_SetMACConfig+0x92>
 8001b80:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b84:	e000      	b.n	8001b88 <ETH_SetMACConfig+0x94>
 8001b86:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8001b88:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	7fdb      	ldrb	r3, [r3, #31]
 8001b8e:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8001b90:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8001b92:	683a      	ldr	r2, [r7, #0]
 8001b94:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001b98:	2a00      	cmp	r2, #0
 8001b9a:	d102      	bne.n	8001ba2 <ETH_SetMACConfig+0xae>
 8001b9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ba0:	e000      	b.n	8001ba4 <ETH_SetMACConfig+0xb0>
 8001ba2:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8001ba4:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8001baa:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001bb2:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8001bb4:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	4b56      	ldr	r3, [pc, #344]	; (8001d20 <ETH_SetMACConfig+0x22c>)
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	6812      	ldr	r2, [r2, #0]
 8001bcc:	68f9      	ldr	r1, [r7, #12]
 8001bce:	430b      	orrs	r3, r1
 8001bd0:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bd6:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001bde:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001be0:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001be8:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8001bea:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001bf2:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8001bf4:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8001bf6:	683a      	ldr	r2, [r7, #0]
 8001bf8:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8001bfc:	2a00      	cmp	r2, #0
 8001bfe:	d102      	bne.n	8001c06 <ETH_SetMACConfig+0x112>
 8001c00:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001c04:	e000      	b.n	8001c08 <ETH_SetMACConfig+0x114>
 8001c06:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8001c08:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	685a      	ldr	r2, [r3, #4]
 8001c18:	4b42      	ldr	r3, [pc, #264]	; (8001d24 <ETH_SetMACConfig+0x230>)
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	6812      	ldr	r2, [r2, #0]
 8001c20:	68f9      	ldr	r1, [r7, #12]
 8001c22:	430b      	orrs	r3, r1
 8001c24:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c2c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001c32:	4313      	orrs	r3, r2
 8001c34:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	68da      	ldr	r2, [r3, #12]
 8001c3c:	4b3a      	ldr	r3, [pc, #232]	; (8001d28 <ETH_SetMACConfig+0x234>)
 8001c3e:	4013      	ands	r3, r2
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	6812      	ldr	r2, [r2, #0]
 8001c44:	68f9      	ldr	r1, [r7, #12]
 8001c46:	430b      	orrs	r3, r1
 8001c48:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001c50:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001c56:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8001c58:	683a      	ldr	r2, [r7, #0]
 8001c5a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001c5e:	2a00      	cmp	r2, #0
 8001c60:	d101      	bne.n	8001c66 <ETH_SetMACConfig+0x172>
 8001c62:	2280      	movs	r2, #128	; 0x80
 8001c64:	e000      	b.n	8001c68 <ETH_SetMACConfig+0x174>
 8001c66:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001c68:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c6e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001c70:	4313      	orrs	r3, r2
 8001c72:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001c7a:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8001c7e:	4013      	ands	r3, r2
 8001c80:	687a      	ldr	r2, [r7, #4]
 8001c82:	6812      	ldr	r2, [r2, #0]
 8001c84:	68f9      	ldr	r1, [r7, #12]
 8001c86:	430b      	orrs	r3, r1
 8001c88:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001c90:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001c98:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ca6:	f023 0103 	bic.w	r1, r3, #3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	68fa      	ldr	r2, [r7, #12]
 8001cb0:	430a      	orrs	r2, r1
 8001cb2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8001cbe:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	430a      	orrs	r2, r1
 8001ccc:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001cd4:	683a      	ldr	r2, [r7, #0]
 8001cd6:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8001cda:	2a00      	cmp	r2, #0
 8001cdc:	d101      	bne.n	8001ce2 <ETH_SetMACConfig+0x1ee>
 8001cde:	2240      	movs	r2, #64	; 0x40
 8001ce0:	e000      	b.n	8001ce4 <ETH_SetMACConfig+0x1f0>
 8001ce2:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001ce4:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001cec:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001cee:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001cf6:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001d04:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	68fa      	ldr	r2, [r7, #12]
 8001d0e:	430a      	orrs	r2, r1
 8001d10:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8001d14:	bf00      	nop
 8001d16:	3714      	adds	r7, #20
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr
 8001d20:	00048083 	.word	0x00048083
 8001d24:	c0f88000 	.word	0xc0f88000
 8001d28:	fffffef0 	.word	0xfffffef0

08001d2c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	4b38      	ldr	r3, [pc, #224]	; (8001e24 <ETH_SetDMAConfig+0xf8>)
 8001d42:	4013      	ands	r3, r2
 8001d44:	683a      	ldr	r2, [r7, #0]
 8001d46:	6812      	ldr	r2, [r2, #0]
 8001d48:	6879      	ldr	r1, [r7, #4]
 8001d4a:	6809      	ldr	r1, [r1, #0]
 8001d4c:	431a      	orrs	r2, r3
 8001d4e:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8001d52:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	791b      	ldrb	r3, [r3, #4]
 8001d58:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001d5e:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	7b1b      	ldrb	r3, [r3, #12]
 8001d64:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001d66:	4313      	orrs	r3, r2
 8001d68:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	f241 0304 	movw	r3, #4100	; 0x1004
 8001d72:	4413      	add	r3, r2
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	4b2c      	ldr	r3, [pc, #176]	; (8001e28 <ETH_SetDMAConfig+0xfc>)
 8001d78:	4013      	ands	r3, r2
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	6811      	ldr	r1, [r2, #0]
 8001d7e:	68fa      	ldr	r2, [r7, #12]
 8001d80:	431a      	orrs	r2, r3
 8001d82:	f241 0304 	movw	r3, #4100	; 0x1004
 8001d86:	440b      	add	r3, r1
 8001d88:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	7b5b      	ldrb	r3, [r3, #13]
 8001d8e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001d94:	4313      	orrs	r3, r2
 8001d96:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	4b22      	ldr	r3, [pc, #136]	; (8001e2c <ETH_SetDMAConfig+0x100>)
 8001da4:	4013      	ands	r3, r2
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	6811      	ldr	r1, [r2, #0]
 8001daa:	68fa      	ldr	r2, [r7, #12]
 8001dac:	431a      	orrs	r2, r3
 8001dae:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8001db2:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	7d1b      	ldrb	r3, [r3, #20]
 8001dbc:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001dbe:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	7f5b      	ldrb	r3, [r3, #29]
 8001dc4:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	f241 1304 	movw	r3, #4356	; 0x1104
 8001dd2:	4413      	add	r3, r2
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	4b16      	ldr	r3, [pc, #88]	; (8001e30 <ETH_SetDMAConfig+0x104>)
 8001dd8:	4013      	ands	r3, r2
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	6811      	ldr	r1, [r2, #0]
 8001dde:	68fa      	ldr	r2, [r7, #12]
 8001de0:	431a      	orrs	r2, r3
 8001de2:	f241 1304 	movw	r3, #4356	; 0x1104
 8001de6:	440b      	add	r3, r1
 8001de8:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	7f1b      	ldrb	r3, [r3, #28]
 8001dee:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001df4:	4313      	orrs	r3, r2
 8001df6:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	f241 1308 	movw	r3, #4360	; 0x1108
 8001e00:	4413      	add	r3, r2
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	4b0b      	ldr	r3, [pc, #44]	; (8001e34 <ETH_SetDMAConfig+0x108>)
 8001e06:	4013      	ands	r3, r2
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	6811      	ldr	r1, [r2, #0]
 8001e0c:	68fa      	ldr	r2, [r7, #12]
 8001e0e:	431a      	orrs	r2, r3
 8001e10:	f241 1308 	movw	r3, #4360	; 0x1108
 8001e14:	440b      	add	r3, r1
 8001e16:	601a      	str	r2, [r3, #0]
}
 8001e18:	bf00      	nop
 8001e1a:	3714      	adds	r7, #20
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr
 8001e24:	ffff87fd 	.word	0xffff87fd
 8001e28:	ffff2ffe 	.word	0xffff2ffe
 8001e2c:	fffec000 	.word	0xfffec000
 8001e30:	ffc0efef 	.word	0xffc0efef
 8001e34:	7fc0ffff 	.word	0x7fc0ffff

08001e38 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b0a4      	sub	sp, #144	; 0x90
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001e40:	2301      	movs	r3, #1
 8001e42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001e46:	2300      	movs	r3, #0
 8001e48:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001e50:	2300      	movs	r3, #0
 8001e52:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001e56:	2301      	movs	r3, #1
 8001e58:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001e62:	2301      	movs	r3, #1
 8001e64:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001e74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e78:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8001e80:	2300      	movs	r3, #0
 8001e82:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001e84:	2300      	movs	r3, #0
 8001e86:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8001e90:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8001e94:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001e96:	2300      	movs	r3, #0
 8001e98:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001eac:	2300      	movs	r3, #0
 8001eae:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001ed0:	2320      	movs	r3, #32
 8001ed2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001edc:	2300      	movs	r3, #0
 8001ede:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001ee2:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001ee8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001eec:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001efa:	2300      	movs	r3, #0
 8001efc:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001f00:	2300      	movs	r3, #0
 8001f02:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001f06:	2300      	movs	r3, #0
 8001f08:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001f12:	2300      	movs	r3, #0
 8001f14:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001f16:	2301      	movs	r3, #1
 8001f18:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001f1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f20:	4619      	mov	r1, r3
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f7ff fde6 	bl	8001af4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001f30:	2300      	movs	r3, #0
 8001f32:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001f34:	2300      	movs	r3, #0
 8001f36:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001f42:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001f46:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001f4c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001f50:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001f52:	2300      	movs	r3, #0
 8001f54:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8001f58:	f44f 7306 	mov.w	r3, #536	; 0x218
 8001f5c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001f5e:	f107 0308 	add.w	r3, r7, #8
 8001f62:	4619      	mov	r1, r3
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f7ff fee1 	bl	8001d2c <ETH_SetDMAConfig>
}
 8001f6a:	bf00      	nop
 8001f6c:	3790      	adds	r7, #144	; 0x90
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
	...

08001f74 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001f84:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001f8c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001f8e:	f002 fe37 	bl	8004c00 <HAL_RCC_GetHCLKFreq>
 8001f92:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	4a1e      	ldr	r2, [pc, #120]	; (8002010 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d908      	bls.n	8001fae <ETH_MAC_MDIO_ClkConfig+0x3a>
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	4a1d      	ldr	r2, [pc, #116]	; (8002014 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d804      	bhi.n	8001fae <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001faa:	60fb      	str	r3, [r7, #12]
 8001fac:	e027      	b.n	8001ffe <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	4a18      	ldr	r2, [pc, #96]	; (8002014 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d908      	bls.n	8001fc8 <ETH_MAC_MDIO_ClkConfig+0x54>
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	4a17      	ldr	r2, [pc, #92]	; (8002018 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d804      	bhi.n	8001fc8 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001fc4:	60fb      	str	r3, [r7, #12]
 8001fc6:	e01a      	b.n	8001ffe <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	4a13      	ldr	r2, [pc, #76]	; (8002018 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d903      	bls.n	8001fd8 <ETH_MAC_MDIO_ClkConfig+0x64>
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	4a12      	ldr	r2, [pc, #72]	; (800201c <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d911      	bls.n	8001ffc <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	4a10      	ldr	r2, [pc, #64]	; (800201c <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d908      	bls.n	8001ff2 <ETH_MAC_MDIO_ClkConfig+0x7e>
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	4a0f      	ldr	r2, [pc, #60]	; (8002020 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d804      	bhi.n	8001ff2 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fee:	60fb      	str	r3, [r7, #12]
 8001ff0:	e005      	b.n	8001ffe <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ff8:	60fb      	str	r3, [r7, #12]
 8001ffa:	e000      	b.n	8001ffe <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8001ffc:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	68fa      	ldr	r2, [r7, #12]
 8002004:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002008:	bf00      	nop
 800200a:	3710      	adds	r7, #16
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	01312cff 	.word	0x01312cff
 8002014:	02160ebf 	.word	0x02160ebf
 8002018:	039386ff 	.word	0x039386ff
 800201c:	05f5e0ff 	.word	0x05f5e0ff
 8002020:	08f0d17f 	.word	0x08f0d17f

08002024 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002024:	b480      	push	{r7}
 8002026:	b085      	sub	sp, #20
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800202c:	2300      	movs	r3, #0
 800202e:	60fb      	str	r3, [r7, #12]
 8002030:	e01d      	b.n	800206e <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	68d9      	ldr	r1, [r3, #12]
 8002036:	68fa      	ldr	r2, [r7, #12]
 8002038:	4613      	mov	r3, r2
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	4413      	add	r3, r2
 800203e:	00db      	lsls	r3, r3, #3
 8002040:	440b      	add	r3, r1
 8002042:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	2200      	movs	r2, #0
 8002048:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	2200      	movs	r2, #0
 800204e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	2200      	movs	r2, #0
 8002054:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	2200      	movs	r2, #0
 800205a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800205c:	68b9      	ldr	r1, [r7, #8]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	68fa      	ldr	r2, [r7, #12]
 8002062:	3206      	adds	r2, #6
 8002064:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	3301      	adds	r3, #1
 800206c:	60fb      	str	r3, [r7, #12]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2b03      	cmp	r3, #3
 8002072:	d9de      	bls.n	8002032 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2200      	movs	r2, #0
 8002078:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	f241 132c 	movw	r3, #4396	; 0x112c
 8002082:	4413      	add	r3, r2
 8002084:	2203      	movs	r2, #3
 8002086:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	68d9      	ldr	r1, [r3, #12]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	f241 1314 	movw	r3, #4372	; 0x1114
 8002094:	4413      	add	r3, r2
 8002096:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	68da      	ldr	r2, [r3, #12]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 80020a4:	601a      	str	r2, [r3, #0]
}
 80020a6:	bf00      	nop
 80020a8:	3714      	adds	r7, #20
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr

080020b2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80020b2:	b480      	push	{r7}
 80020b4:	b085      	sub	sp, #20
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80020ba:	2300      	movs	r3, #0
 80020bc:	60fb      	str	r3, [r7, #12]
 80020be:	e024      	b.n	800210a <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6919      	ldr	r1, [r3, #16]
 80020c4:	68fa      	ldr	r2, [r7, #12]
 80020c6:	4613      	mov	r3, r2
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	4413      	add	r3, r2
 80020cc:	00db      	lsls	r3, r3, #3
 80020ce:	440b      	add	r3, r1
 80020d0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	2200      	movs	r2, #0
 80020dc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	2200      	movs	r2, #0
 80020e2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	2200      	movs	r2, #0
 80020e8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	2200      	movs	r2, #0
 80020ee:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	2200      	movs	r2, #0
 80020f4:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors adresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80020f6:	68ba      	ldr	r2, [r7, #8]
 80020f8:	6879      	ldr	r1, [r7, #4]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	330a      	adds	r3, #10
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	440b      	add	r3, r1
 8002102:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	3301      	adds	r3, #1
 8002108:	60fb      	str	r3, [r7, #12]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2b03      	cmp	r3, #3
 800210e:	d9d7      	bls.n	80020c0 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2200      	movs	r2, #0
 8002114:	63da      	str	r2, [r3, #60]	; 0x3c
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2200      	movs	r2, #0
 800211a:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2200      	movs	r2, #0
 8002120:	645a      	str	r2, [r3, #68]	; 0x44
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	64da      	str	r2, [r3, #76]	; 0x4c
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2200      	movs	r2, #0
 800212c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	f241 1330 	movw	r3, #4400	; 0x1130
 8002136:	4413      	add	r3, r2
 8002138:	2203      	movs	r2, #3
 800213a:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6919      	ldr	r1, [r3, #16]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	f241 131c 	movw	r3, #4380	; 0x111c
 8002148:	4413      	add	r3, r2
 800214a:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (((uint32_t)(ETH_RX_DESC_CNT - 1))*sizeof(ETH_DMADescTypeDef)))));
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	691b      	ldr	r3, [r3, #16]
 8002150:	f503 61d8 	add.w	r1, r3, #1728	; 0x6c0
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	f241 1328 	movw	r3, #4392	; 0x1128
 800215c:	4413      	add	r3, r2
 800215e:	6019      	str	r1, [r3, #0]
}
 8002160:	bf00      	nop
 8002162:	3714      	adds	r7, #20
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 800216c:	b480      	push	{r7}
 800216e:	b08d      	sub	sp, #52	; 0x34
 8002170:	af00      	add	r7, sp, #0
 8002172:	60f8      	str	r0, [r7, #12]
 8002174:	60b9      	str	r1, [r7, #8]
 8002176:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	3318      	adds	r3, #24
 800217c:	61bb      	str	r3, [r7, #24]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	691b      	ldr	r3, [r3, #16]
 8002182:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002184:	69bb      	ldr	r3, [r7, #24]
 8002186:	691b      	ldr	r3, [r3, #16]
 8002188:	617b      	str	r3, [r7, #20]
  uint32_t descnbr = 0, idx;
 800218a:	2300      	movs	r3, #0
 800218c:	62bb      	str	r3, [r7, #40]	; 0x28
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002192:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002196:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	61fb      	str	r3, [r7, #28]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 800219e:	6a3b      	ldr	r3, [r7, #32]
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80021a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80021aa:	d101      	bne.n	80021b0 <ETH_Prepare_Tx_Descriptors+0x44>
  {
    return HAL_ETH_ERROR_BUSY;
 80021ac:	2302      	movs	r3, #2
 80021ae:	e223      	b.n	80025f8 <ETH_Prepare_Tx_Descriptors+0x48c>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0304 	and.w	r3, r3, #4
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d044      	beq.n	8002246 <ETH_Prepare_Tx_Descriptors+0xda>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 80021bc:	6a3b      	ldr	r3, [r7, #32]
 80021be:	68da      	ldr	r2, [r3, #12]
 80021c0:	4b72      	ldr	r3, [pc, #456]	; (800238c <ETH_Prepare_Tx_Descriptors+0x220>)
 80021c2:	4013      	ands	r3, r2
 80021c4:	68ba      	ldr	r2, [r7, #8]
 80021c6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80021c8:	431a      	orrs	r2, r3
 80021ca:	6a3b      	ldr	r3, [r7, #32]
 80021cc:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 80021ce:	6a3b      	ldr	r3, [r7, #32]
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80021d6:	6a3b      	ldr	r3, [r7, #32]
 80021d8:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80021e8:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != 0U)
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0308 	and.w	r3, r3, #8
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d027      	beq.n	8002246 <ETH_Prepare_Tx_Descriptors+0xda>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 80021f6:	6a3b      	ldr	r3, [r7, #32]
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	b29a      	uxth	r2, r3
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002200:	041b      	lsls	r3, r3, #16
 8002202:	431a      	orrs	r2, r3
 8002204:	6a3b      	ldr	r3, [r7, #32]
 8002206:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8002208:	6a3b      	ldr	r3, [r7, #32]
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002210:	6a3b      	ldr	r3, [r7, #32]
 8002212:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8002214:	6a3b      	ldr	r3, [r7, #32]
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002220:	431a      	orrs	r2, r3
 8002222:	6a3b      	ldr	r3, [r7, #32]
 8002224:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002234:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002244:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segementation is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0310 	and.w	r3, r3, #16
 800224e:	2b00      	cmp	r3, #0
 8002250:	d00e      	beq.n	8002270 <ETH_Prepare_Tx_Descriptors+0x104>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8002252:	6a3b      	ldr	r3, [r7, #32]
 8002254:	689a      	ldr	r2, [r3, #8]
 8002256:	4b4e      	ldr	r3, [pc, #312]	; (8002390 <ETH_Prepare_Tx_Descriptors+0x224>)
 8002258:	4013      	ands	r3, r2
 800225a:	68ba      	ldr	r2, [r7, #8]
 800225c:	6992      	ldr	r2, [r2, #24]
 800225e:	431a      	orrs	r2, r3
 8002260:	6a3b      	ldr	r3, [r7, #32]
 8002262:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8002264:	6a3b      	ldr	r3, [r7, #32]
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800226c:	6a3b      	ldr	r3, [r7, #32]
 800226e:	60da      	str	r2, [r3, #12]
  }

  if((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)|| (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U))
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0304 	and.w	r3, r3, #4
 8002278:	2b00      	cmp	r3, #0
 800227a:	d105      	bne.n	8002288 <ETH_Prepare_Tx_Descriptors+0x11c>
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0310 	and.w	r3, r3, #16
 8002284:	2b00      	cmp	r3, #0
 8002286:	d030      	beq.n	80022ea <ETH_Prepare_Tx_Descriptors+0x17e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8002288:	6a3b      	ldr	r3, [r7, #32]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002290:	6a3b      	ldr	r3, [r7, #32]
 8002292:	60da      	str	r2, [r3, #12]
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002294:	6a3b      	ldr	r3, [r7, #32]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800229c:	6a3b      	ldr	r3, [r7, #32]
 800229e:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80022a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022a2:	3301      	adds	r3, #1
 80022a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022a8:	2b03      	cmp	r3, #3
 80022aa:	d902      	bls.n	80022b2 <ETH_Prepare_Tx_Descriptors+0x146>
 80022ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ae:	3b04      	subs	r3, #4
 80022b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022ba:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 80022bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022be:	3301      	adds	r3, #1
 80022c0:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 80022c2:	6a3b      	ldr	r3, [r7, #32]
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80022ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80022ce:	d10c      	bne.n	80022ea <ETH_Prepare_Tx_Descriptors+0x17e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	697a      	ldr	r2, [r7, #20]
 80022d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022d8:	623b      	str	r3, [r7, #32]
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80022da:	6a3b      	ldr	r3, [r7, #32]
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80022e2:	6a3b      	ldr	r3, [r7, #32]
 80022e4:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 80022e6:	2302      	movs	r3, #2
 80022e8:	e186      	b.n	80025f8 <ETH_Prepare_Tx_Descriptors+0x48c>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 80022ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ec:	3301      	adds	r3, #1
 80022ee:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	461a      	mov	r2, r3
 80022f6:	6a3b      	ldr	r3, [r7, #32]
 80022f8:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80022fa:	6a3b      	ldr	r3, [r7, #32]
 80022fc:	689a      	ldr	r2, [r3, #8]
 80022fe:	4b24      	ldr	r3, [pc, #144]	; (8002390 <ETH_Prepare_Tx_Descriptors+0x224>)
 8002300:	4013      	ands	r3, r2
 8002302:	69fa      	ldr	r2, [r7, #28]
 8002304:	6852      	ldr	r2, [r2, #4]
 8002306:	431a      	orrs	r2, r3
 8002308:	6a3b      	ldr	r3, [r7, #32]
 800230a:	609a      	str	r2, [r3, #8]

  if(txbuffer->next != NULL)
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d012      	beq.n	800233a <ETH_Prepare_Tx_Descriptors+0x1ce>
  {
    txbuffer = txbuffer->next;
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	461a      	mov	r2, r3
 8002320:	6a3b      	ldr	r3, [r7, #32]
 8002322:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8002324:	6a3b      	ldr	r3, [r7, #32]
 8002326:	689a      	ldr	r2, [r3, #8]
 8002328:	4b1a      	ldr	r3, [pc, #104]	; (8002394 <ETH_Prepare_Tx_Descriptors+0x228>)
 800232a:	4013      	ands	r3, r2
 800232c:	69fa      	ldr	r2, [r7, #28]
 800232e:	6852      	ldr	r2, [r2, #4]
 8002330:	0412      	lsls	r2, r2, #16
 8002332:	431a      	orrs	r2, r3
 8002334:	6a3b      	ldr	r3, [r7, #32]
 8002336:	609a      	str	r2, [r3, #8]
 8002338:	e008      	b.n	800234c <ETH_Prepare_Tx_Descriptors+0x1e0>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800233a:	6a3b      	ldr	r3, [r7, #32]
 800233c:	2200      	movs	r2, #0
 800233e:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002340:	6a3b      	ldr	r3, [r7, #32]
 8002342:	689a      	ldr	r2, [r3, #8]
 8002344:	4b13      	ldr	r3, [pc, #76]	; (8002394 <ETH_Prepare_Tx_Descriptors+0x228>)
 8002346:	4013      	ands	r3, r2
 8002348:	6a3a      	ldr	r2, [r7, #32]
 800234a:	6093      	str	r3, [r2, #8]
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0310 	and.w	r3, r3, #16
 8002354:	2b00      	cmp	r3, #0
 8002356:	d021      	beq.n	800239c <ETH_Prepare_Tx_Descriptors+0x230>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8002358:	6a3b      	ldr	r3, [r7, #32]
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	6a1b      	ldr	r3, [r3, #32]
 8002364:	04db      	lsls	r3, r3, #19
 8002366:	431a      	orrs	r2, r3
 8002368:	6a3b      	ldr	r3, [r7, #32]
 800236a:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 800236c:	6a3b      	ldr	r3, [r7, #32]
 800236e:	68da      	ldr	r2, [r3, #12]
 8002370:	4b09      	ldr	r3, [pc, #36]	; (8002398 <ETH_Prepare_Tx_Descriptors+0x22c>)
 8002372:	4013      	ands	r3, r2
 8002374:	68ba      	ldr	r2, [r7, #8]
 8002376:	69d2      	ldr	r2, [r2, #28]
 8002378:	431a      	orrs	r2, r3
 800237a:	6a3b      	ldr	r3, [r7, #32]
 800237c:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 800237e:	6a3b      	ldr	r3, [r7, #32]
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002386:	6a3b      	ldr	r3, [r7, #32]
 8002388:	60da      	str	r2, [r3, #12]
 800238a:	e02e      	b.n	80023ea <ETH_Prepare_Tx_Descriptors+0x27e>
 800238c:	ffff0000 	.word	0xffff0000
 8002390:	ffffc000 	.word	0xffffc000
 8002394:	c000ffff 	.word	0xc000ffff
 8002398:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 800239c:	6a3b      	ldr	r3, [r7, #32]
 800239e:	68da      	ldr	r2, [r3, #12]
 80023a0:	4b98      	ldr	r3, [pc, #608]	; (8002604 <ETH_Prepare_Tx_Descriptors+0x498>)
 80023a2:	4013      	ands	r3, r2
 80023a4:	68ba      	ldr	r2, [r7, #8]
 80023a6:	6852      	ldr	r2, [r2, #4]
 80023a8:	431a      	orrs	r2, r3
 80023aa:	6a3b      	ldr	r3, [r7, #32]
 80023ac:	60da      	str	r2, [r3, #12]

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0301 	and.w	r3, r3, #1
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d008      	beq.n	80023cc <ETH_Prepare_Tx_Descriptors+0x260>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 80023ba:	6a3b      	ldr	r3, [r7, #32]
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	695b      	ldr	r3, [r3, #20]
 80023c6:	431a      	orrs	r2, r3
 80023c8:	6a3b      	ldr	r3, [r7, #32]
 80023ca:	60da      	str	r2, [r3, #12]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0320 	and.w	r3, r3, #32
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d008      	beq.n	80023ea <ETH_Prepare_Tx_Descriptors+0x27e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 80023d8:	6a3b      	ldr	r3, [r7, #32]
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	691b      	ldr	r3, [r3, #16]
 80023e4:	431a      	orrs	r2, r3
 80023e6:	6a3b      	ldr	r3, [r7, #32]
 80023e8:	60da      	str	r2, [r3, #12]
    }
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0304 	and.w	r3, r3, #4
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d008      	beq.n	8002408 <ETH_Prepare_Tx_Descriptors+0x29c>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 80023f6:	6a3b      	ldr	r3, [r7, #32]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002402:	431a      	orrs	r2, r3
 8002404:	6a3b      	ldr	r3, [r7, #32]
 8002406:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8002408:	6a3b      	ldr	r3, [r7, #32]
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002410:	6a3b      	ldr	r3, [r7, #32]
 8002412:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8002414:	6a3b      	ldr	r3, [r7, #32]
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800241c:	6a3b      	ldr	r3, [r7, #32]
 800241e:	60da      	str	r2, [r3, #12]
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002420:	6a3b      	ldr	r3, [r7, #32]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002428:	6a3b      	ldr	r3, [r7, #32]
 800242a:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != 0U)
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0302 	and.w	r3, r3, #2
 8002434:	2b00      	cmp	r3, #0
 8002436:	f000 80c0 	beq.w	80025ba <ETH_Prepare_Tx_Descriptors+0x44e>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 800243a:	6a3b      	ldr	r3, [r7, #32]
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	431a      	orrs	r2, r3
 8002448:	6a3b      	ldr	r3, [r7, #32]
 800244a:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is splitted into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 800244c:	e0b5      	b.n	80025ba <ETH_Prepare_Tx_Descriptors+0x44e>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 800244e:	6a3b      	ldr	r3, [r7, #32]
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002456:	6a3b      	ldr	r3, [r7, #32]
 8002458:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800245a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800245c:	3301      	adds	r3, #1
 800245e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002462:	2b03      	cmp	r3, #3
 8002464:	d902      	bls.n	800246c <ETH_Prepare_Tx_Descriptors+0x300>
 8002466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002468:	3b04      	subs	r3, #4
 800246a:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002470:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002474:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8002476:	6a3b      	ldr	r3, [r7, #32]
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800247e:	6a3b      	ldr	r3, [r7, #32]
 8002480:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8002482:	6a3b      	ldr	r3, [r7, #32]
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800248a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800248e:	d126      	bne.n	80024de <ETH_Prepare_Tx_Descriptors+0x372>
    {
      descidx = firstdescidx;
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002498:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800249c:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for(idx = 0; idx < descnbr; idx ++)
 800249e:	2300      	movs	r3, #0
 80024a0:	627b      	str	r3, [r7, #36]	; 0x24
 80024a2:	e016      	b.n	80024d2 <ETH_Prepare_Tx_Descriptors+0x366>
      {
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80024a4:	6a3b      	ldr	r3, [r7, #32]
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80024ac:	6a3b      	ldr	r3, [r7, #32]
 80024ae:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80024b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024b2:	3301      	adds	r3, #1
 80024b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024b8:	2b03      	cmp	r3, #3
 80024ba:	d902      	bls.n	80024c2 <ETH_Prepare_Tx_Descriptors+0x356>
 80024bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024be:	3b04      	subs	r3, #4
 80024c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024ca:	623b      	str	r3, [r7, #32]
      for(idx = 0; idx < descnbr; idx ++)
 80024cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ce:	3301      	adds	r3, #1
 80024d0:	627b      	str	r3, [r7, #36]	; 0x24
 80024d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d3e4      	bcc.n	80024a4 <ETH_Prepare_Tx_Descriptors+0x338>
      }

      return HAL_ETH_ERROR_BUSY;
 80024da:	2302      	movs	r3, #2
 80024dc:	e08c      	b.n	80025f8 <ETH_Prepare_Tx_Descriptors+0x48c>
    }

    descnbr += 1U;
 80024de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024e0:	3301      	adds	r3, #1
 80024e2:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get the next Tx buffer in the list */
    txbuffer = (struct __ETH_BufferTypeDef *)txbuffer->next;
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	461a      	mov	r2, r3
 80024f0:	6a3b      	ldr	r3, [r7, #32]
 80024f2:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80024f4:	6a3b      	ldr	r3, [r7, #32]
 80024f6:	689a      	ldr	r2, [r3, #8]
 80024f8:	4b43      	ldr	r3, [pc, #268]	; (8002608 <ETH_Prepare_Tx_Descriptors+0x49c>)
 80024fa:	4013      	ands	r3, r2
 80024fc:	69fa      	ldr	r2, [r7, #28]
 80024fe:	6852      	ldr	r2, [r2, #4]
 8002500:	431a      	orrs	r2, r3
 8002502:	6a3b      	ldr	r3, [r7, #32]
 8002504:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d012      	beq.n	8002534 <ETH_Prepare_Tx_Descriptors+0x3c8>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = (struct __ETH_BufferTypeDef *)txbuffer->next;
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	461a      	mov	r2, r3
 800251a:	6a3b      	ldr	r3, [r7, #32]
 800251c:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 800251e:	6a3b      	ldr	r3, [r7, #32]
 8002520:	689a      	ldr	r2, [r3, #8]
 8002522:	4b3a      	ldr	r3, [pc, #232]	; (800260c <ETH_Prepare_Tx_Descriptors+0x4a0>)
 8002524:	4013      	ands	r3, r2
 8002526:	69fa      	ldr	r2, [r7, #28]
 8002528:	6852      	ldr	r2, [r2, #4]
 800252a:	0412      	lsls	r2, r2, #16
 800252c:	431a      	orrs	r2, r3
 800252e:	6a3b      	ldr	r3, [r7, #32]
 8002530:	609a      	str	r2, [r3, #8]
 8002532:	e008      	b.n	8002546 <ETH_Prepare_Tx_Descriptors+0x3da>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002534:	6a3b      	ldr	r3, [r7, #32]
 8002536:	2200      	movs	r2, #0
 8002538:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 800253a:	6a3b      	ldr	r3, [r7, #32]
 800253c:	689a      	ldr	r2, [r3, #8]
 800253e:	4b33      	ldr	r3, [pc, #204]	; (800260c <ETH_Prepare_Tx_Descriptors+0x4a0>)
 8002540:	4013      	ands	r3, r2
 8002542:	6a3a      	ldr	r2, [r7, #32]
 8002544:	6093      	str	r3, [r2, #8]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0310 	and.w	r3, r3, #16
 800254e:	2b00      	cmp	r3, #0
 8002550:	d00f      	beq.n	8002572 <ETH_Prepare_Tx_Descriptors+0x406>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002552:	6a3b      	ldr	r3, [r7, #32]
 8002554:	68da      	ldr	r2, [r3, #12]
 8002556:	4b2e      	ldr	r3, [pc, #184]	; (8002610 <ETH_Prepare_Tx_Descriptors+0x4a4>)
 8002558:	4013      	ands	r3, r2
 800255a:	68ba      	ldr	r2, [r7, #8]
 800255c:	69d2      	ldr	r2, [r2, #28]
 800255e:	431a      	orrs	r2, r3
 8002560:	6a3b      	ldr	r3, [r7, #32]
 8002562:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8002564:	6a3b      	ldr	r3, [r7, #32]
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800256c:	6a3b      	ldr	r3, [r7, #32]
 800256e:	60da      	str	r2, [r3, #12]
 8002570:	e017      	b.n	80025a2 <ETH_Prepare_Tx_Descriptors+0x436>
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002572:	6a3b      	ldr	r3, [r7, #32]
 8002574:	68da      	ldr	r2, [r3, #12]
 8002576:	4b23      	ldr	r3, [pc, #140]	; (8002604 <ETH_Prepare_Tx_Descriptors+0x498>)
 8002578:	4013      	ands	r3, r2
 800257a:	68ba      	ldr	r2, [r7, #8]
 800257c:	6852      	ldr	r2, [r2, #4]
 800257e:	431a      	orrs	r2, r3
 8002580:	6a3b      	ldr	r3, [r7, #32]
 8002582:	60da      	str	r2, [r3, #12]

      if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0301 	and.w	r3, r3, #1
 800258c:	2b00      	cmp	r3, #0
 800258e:	d008      	beq.n	80025a2 <ETH_Prepare_Tx_Descriptors+0x436>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8002590:	6a3b      	ldr	r3, [r7, #32]
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	695b      	ldr	r3, [r3, #20]
 800259c:	431a      	orrs	r2, r3
 800259e:	6a3b      	ldr	r3, [r7, #32]
 80025a0:	60da      	str	r2, [r3, #12]
      }
    }

    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80025a2:	6a3b      	ldr	r3, [r7, #32]
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80025aa:	6a3b      	ldr	r3, [r7, #32]
 80025ac:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 80025ae:	6a3b      	ldr	r3, [r7, #32]
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80025b6:	6a3b      	ldr	r3, [r7, #32]
 80025b8:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	f47f af45 	bne.w	800244e <ETH_Prepare_Tx_Descriptors+0x2e2>
  }

  if(ItMode != ((uint32_t)RESET))
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d006      	beq.n	80025d8 <ETH_Prepare_Tx_Descriptors+0x46c>
  {
    /* Set Interrupt on completition bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 80025ca:	6a3b      	ldr	r3, [r7, #32]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80025d2:	6a3b      	ldr	r3, [r7, #32]
 80025d4:	609a      	str	r2, [r3, #8]
 80025d6:	e005      	b.n	80025e4 <ETH_Prepare_Tx_Descriptors+0x478>
  }
  else
  {
    /* Clear Interrupt on completition bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 80025d8:	6a3b      	ldr	r3, [r7, #32]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80025e0:	6a3b      	ldr	r3, [r7, #32]
 80025e2:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 80025e4:	6a3b      	ldr	r3, [r7, #32]
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80025ec:	6a3b      	ldr	r3, [r7, #32]
 80025ee:	60da      	str	r2, [r3, #12]

  dmatxdesclist->CurTxDesc = descidx;
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025f4:	611a      	str	r2, [r3, #16]

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80025f6:	2300      	movs	r3, #0
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3734      	adds	r7, #52	; 0x34
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr
 8002604:	ffff8000 	.word	0xffff8000
 8002608:	ffffc000 	.word	0xffffc000
 800260c:	c000ffff 	.word	0xc000ffff
 8002610:	fffc0000 	.word	0xfffc0000

08002614 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002614:	b480      	push	{r7}
 8002616:	b089      	sub	sp, #36	; 0x24
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800261e:	2300      	movs	r3, #0
 8002620:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002622:	4b89      	ldr	r3, [pc, #548]	; (8002848 <HAL_GPIO_Init+0x234>)
 8002624:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002626:	e194      	b.n	8002952 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	2101      	movs	r1, #1
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	fa01 f303 	lsl.w	r3, r1, r3
 8002634:	4013      	ands	r3, r2
 8002636:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	2b00      	cmp	r3, #0
 800263c:	f000 8186 	beq.w	800294c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	2b02      	cmp	r3, #2
 8002646:	d003      	beq.n	8002650 <HAL_GPIO_Init+0x3c>
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	2b12      	cmp	r3, #18
 800264e:	d123      	bne.n	8002698 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	08da      	lsrs	r2, r3, #3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	3208      	adds	r2, #8
 8002658:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800265c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	f003 0307 	and.w	r3, r3, #7
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	220f      	movs	r2, #15
 8002668:	fa02 f303 	lsl.w	r3, r2, r3
 800266c:	43db      	mvns	r3, r3
 800266e:	69ba      	ldr	r2, [r7, #24]
 8002670:	4013      	ands	r3, r2
 8002672:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	691a      	ldr	r2, [r3, #16]
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	f003 0307 	and.w	r3, r3, #7
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	fa02 f303 	lsl.w	r3, r2, r3
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	4313      	orrs	r3, r2
 8002688:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	08da      	lsrs	r2, r3, #3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	3208      	adds	r2, #8
 8002692:	69b9      	ldr	r1, [r7, #24]
 8002694:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	005b      	lsls	r3, r3, #1
 80026a2:	2203      	movs	r2, #3
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	43db      	mvns	r3, r3
 80026aa:	69ba      	ldr	r2, [r7, #24]
 80026ac:	4013      	ands	r3, r2
 80026ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f003 0203 	and.w	r2, r3, #3
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	fa02 f303 	lsl.w	r3, r2, r3
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d00b      	beq.n	80026ec <HAL_GPIO_Init+0xd8>
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d007      	beq.n	80026ec <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026e0:	2b11      	cmp	r3, #17
 80026e2:	d003      	beq.n	80026ec <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	2b12      	cmp	r3, #18
 80026ea:	d130      	bne.n	800274e <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	005b      	lsls	r3, r3, #1
 80026f6:	2203      	movs	r2, #3
 80026f8:	fa02 f303 	lsl.w	r3, r2, r3
 80026fc:	43db      	mvns	r3, r3
 80026fe:	69ba      	ldr	r2, [r7, #24]
 8002700:	4013      	ands	r3, r2
 8002702:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	68da      	ldr	r2, [r3, #12]
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	005b      	lsls	r3, r3, #1
 800270c:	fa02 f303 	lsl.w	r3, r2, r3
 8002710:	69ba      	ldr	r2, [r7, #24]
 8002712:	4313      	orrs	r3, r2
 8002714:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	69ba      	ldr	r2, [r7, #24]
 800271a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002722:	2201      	movs	r2, #1
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	fa02 f303 	lsl.w	r3, r2, r3
 800272a:	43db      	mvns	r3, r3
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	4013      	ands	r3, r2
 8002730:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	091b      	lsrs	r3, r3, #4
 8002738:	f003 0201 	and.w	r2, r3, #1
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	fa02 f303 	lsl.w	r3, r2, r3
 8002742:	69ba      	ldr	r2, [r7, #24]
 8002744:	4313      	orrs	r3, r2
 8002746:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	69ba      	ldr	r2, [r7, #24]
 800274c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	005b      	lsls	r3, r3, #1
 8002758:	2203      	movs	r2, #3
 800275a:	fa02 f303 	lsl.w	r3, r2, r3
 800275e:	43db      	mvns	r3, r3
 8002760:	69ba      	ldr	r2, [r7, #24]
 8002762:	4013      	ands	r3, r2
 8002764:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	689a      	ldr	r2, [r3, #8]
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	005b      	lsls	r3, r3, #1
 800276e:	fa02 f303 	lsl.w	r3, r2, r3
 8002772:	69ba      	ldr	r2, [r7, #24]
 8002774:	4313      	orrs	r3, r2
 8002776:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	69ba      	ldr	r2, [r7, #24]
 800277c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002786:	2b00      	cmp	r3, #0
 8002788:	f000 80e0 	beq.w	800294c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800278c:	4b2f      	ldr	r3, [pc, #188]	; (800284c <HAL_GPIO_Init+0x238>)
 800278e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002792:	4a2e      	ldr	r2, [pc, #184]	; (800284c <HAL_GPIO_Init+0x238>)
 8002794:	f043 0302 	orr.w	r3, r3, #2
 8002798:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800279c:	4b2b      	ldr	r3, [pc, #172]	; (800284c <HAL_GPIO_Init+0x238>)
 800279e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	60fb      	str	r3, [r7, #12]
 80027a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027aa:	4a29      	ldr	r2, [pc, #164]	; (8002850 <HAL_GPIO_Init+0x23c>)
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	089b      	lsrs	r3, r3, #2
 80027b0:	3302      	adds	r3, #2
 80027b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	f003 0303 	and.w	r3, r3, #3
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	220f      	movs	r2, #15
 80027c2:	fa02 f303 	lsl.w	r3, r2, r3
 80027c6:	43db      	mvns	r3, r3
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	4013      	ands	r3, r2
 80027cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a20      	ldr	r2, [pc, #128]	; (8002854 <HAL_GPIO_Init+0x240>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d052      	beq.n	800287c <HAL_GPIO_Init+0x268>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a1f      	ldr	r2, [pc, #124]	; (8002858 <HAL_GPIO_Init+0x244>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d031      	beq.n	8002842 <HAL_GPIO_Init+0x22e>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a1e      	ldr	r2, [pc, #120]	; (800285c <HAL_GPIO_Init+0x248>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d02b      	beq.n	800283e <HAL_GPIO_Init+0x22a>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a1d      	ldr	r2, [pc, #116]	; (8002860 <HAL_GPIO_Init+0x24c>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d025      	beq.n	800283a <HAL_GPIO_Init+0x226>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a1c      	ldr	r2, [pc, #112]	; (8002864 <HAL_GPIO_Init+0x250>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d01f      	beq.n	8002836 <HAL_GPIO_Init+0x222>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a1b      	ldr	r2, [pc, #108]	; (8002868 <HAL_GPIO_Init+0x254>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d019      	beq.n	8002832 <HAL_GPIO_Init+0x21e>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a1a      	ldr	r2, [pc, #104]	; (800286c <HAL_GPIO_Init+0x258>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d013      	beq.n	800282e <HAL_GPIO_Init+0x21a>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a19      	ldr	r2, [pc, #100]	; (8002870 <HAL_GPIO_Init+0x25c>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d00d      	beq.n	800282a <HAL_GPIO_Init+0x216>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a18      	ldr	r2, [pc, #96]	; (8002874 <HAL_GPIO_Init+0x260>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d007      	beq.n	8002826 <HAL_GPIO_Init+0x212>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a17      	ldr	r2, [pc, #92]	; (8002878 <HAL_GPIO_Init+0x264>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d101      	bne.n	8002822 <HAL_GPIO_Init+0x20e>
 800281e:	2309      	movs	r3, #9
 8002820:	e02d      	b.n	800287e <HAL_GPIO_Init+0x26a>
 8002822:	230a      	movs	r3, #10
 8002824:	e02b      	b.n	800287e <HAL_GPIO_Init+0x26a>
 8002826:	2308      	movs	r3, #8
 8002828:	e029      	b.n	800287e <HAL_GPIO_Init+0x26a>
 800282a:	2307      	movs	r3, #7
 800282c:	e027      	b.n	800287e <HAL_GPIO_Init+0x26a>
 800282e:	2306      	movs	r3, #6
 8002830:	e025      	b.n	800287e <HAL_GPIO_Init+0x26a>
 8002832:	2305      	movs	r3, #5
 8002834:	e023      	b.n	800287e <HAL_GPIO_Init+0x26a>
 8002836:	2304      	movs	r3, #4
 8002838:	e021      	b.n	800287e <HAL_GPIO_Init+0x26a>
 800283a:	2303      	movs	r3, #3
 800283c:	e01f      	b.n	800287e <HAL_GPIO_Init+0x26a>
 800283e:	2302      	movs	r3, #2
 8002840:	e01d      	b.n	800287e <HAL_GPIO_Init+0x26a>
 8002842:	2301      	movs	r3, #1
 8002844:	e01b      	b.n	800287e <HAL_GPIO_Init+0x26a>
 8002846:	bf00      	nop
 8002848:	58000080 	.word	0x58000080
 800284c:	58024400 	.word	0x58024400
 8002850:	58000400 	.word	0x58000400
 8002854:	58020000 	.word	0x58020000
 8002858:	58020400 	.word	0x58020400
 800285c:	58020800 	.word	0x58020800
 8002860:	58020c00 	.word	0x58020c00
 8002864:	58021000 	.word	0x58021000
 8002868:	58021400 	.word	0x58021400
 800286c:	58021800 	.word	0x58021800
 8002870:	58021c00 	.word	0x58021c00
 8002874:	58022000 	.word	0x58022000
 8002878:	58022400 	.word	0x58022400
 800287c:	2300      	movs	r3, #0
 800287e:	69fa      	ldr	r2, [r7, #28]
 8002880:	f002 0203 	and.w	r2, r2, #3
 8002884:	0092      	lsls	r2, r2, #2
 8002886:	4093      	lsls	r3, r2
 8002888:	69ba      	ldr	r2, [r7, #24]
 800288a:	4313      	orrs	r3, r2
 800288c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800288e:	4938      	ldr	r1, [pc, #224]	; (8002970 <HAL_GPIO_Init+0x35c>)
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	089b      	lsrs	r3, r3, #2
 8002894:	3302      	adds	r3, #2
 8002896:	69ba      	ldr	r2, [r7, #24]
 8002898:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	43db      	mvns	r3, r3
 80028a6:	69ba      	ldr	r2, [r7, #24]
 80028a8:	4013      	ands	r3, r2
 80028aa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d003      	beq.n	80028c0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80028b8:	69ba      	ldr	r2, [r7, #24]
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	4313      	orrs	r3, r2
 80028be:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	69ba      	ldr	r2, [r7, #24]
 80028c4:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	43db      	mvns	r3, r3
 80028d0:	69ba      	ldr	r2, [r7, #24]
 80028d2:	4013      	ands	r3, r2
 80028d4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d003      	beq.n	80028ea <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80028e2:	69ba      	ldr	r2, [r7, #24]
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	69ba      	ldr	r2, [r7, #24]
 80028ee:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80028f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	43db      	mvns	r3, r3
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	4013      	ands	r3, r2
 8002900:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d003      	beq.n	8002916 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800290e:	69ba      	ldr	r2, [r7, #24]
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	4313      	orrs	r3, r2
 8002914:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002916:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800291e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	43db      	mvns	r3, r3
 800292a:	69ba      	ldr	r2, [r7, #24]
 800292c:	4013      	ands	r3, r2
 800292e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002938:	2b00      	cmp	r3, #0
 800293a:	d003      	beq.n	8002944 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	4313      	orrs	r3, r2
 8002942:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002944:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002948:	69bb      	ldr	r3, [r7, #24]
 800294a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	3301      	adds	r3, #1
 8002950:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	fa22 f303 	lsr.w	r3, r2, r3
 800295c:	2b00      	cmp	r3, #0
 800295e:	f47f ae63 	bne.w	8002628 <HAL_GPIO_Init+0x14>
  }
}
 8002962:	bf00      	nop
 8002964:	3724      	adds	r7, #36	; 0x24
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr
 800296e:	bf00      	nop
 8002970:	58000400 	.word	0x58000400

08002974 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800297c:	4a08      	ldr	r2, [pc, #32]	; (80029a0 <HAL_HSEM_FastTake+0x2c>)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	3320      	adds	r3, #32
 8002982:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002986:	4a07      	ldr	r2, [pc, #28]	; (80029a4 <HAL_HSEM_FastTake+0x30>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d101      	bne.n	8002990 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800298c:	2300      	movs	r3, #0
 800298e:	e000      	b.n	8002992 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
}
 8002992:	4618      	mov	r0, r3
 8002994:	370c      	adds	r7, #12
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	58026400 	.word	0x58026400
 80029a4:	80000300 	.word	0x80000300

080029a8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80029b2:	4906      	ldr	r1, [pc, #24]	; (80029cc <HAL_HSEM_Release+0x24>)
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80029c0:	bf00      	nop
 80029c2:	370c      	adds	r7, #12
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr
 80029cc:	58026400 	.word	0x58026400

080029d0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80029d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029d2:	b08f      	sub	sp, #60	; 0x3c
 80029d4:	af0a      	add	r7, sp, #40	; 0x28
 80029d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d101      	bne.n	80029e2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e116      	b.n	8002c10 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d106      	bne.n	8002a02 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f010 fd97 	bl	8013530 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2203      	movs	r2, #3
 8002a06:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d102      	bne.n	8002a1c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4618      	mov	r0, r3
 8002a22:	f003 fa8e 	bl	8005f42 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	603b      	str	r3, [r7, #0]
 8002a2c:	687e      	ldr	r6, [r7, #4]
 8002a2e:	466d      	mov	r5, sp
 8002a30:	f106 0410 	add.w	r4, r6, #16
 8002a34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a3c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a40:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a44:	1d33      	adds	r3, r6, #4
 8002a46:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a48:	6838      	ldr	r0, [r7, #0]
 8002a4a:	f003 f965 	bl	8005d18 <USB_CoreInit>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d005      	beq.n	8002a60 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2202      	movs	r2, #2
 8002a58:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e0d7      	b.n	8002c10 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2100      	movs	r1, #0
 8002a66:	4618      	mov	r0, r3
 8002a68:	f003 fa7c 	bl	8005f64 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	73fb      	strb	r3, [r7, #15]
 8002a70:	e04a      	b.n	8002b08 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002a72:	7bfa      	ldrb	r2, [r7, #15]
 8002a74:	6879      	ldr	r1, [r7, #4]
 8002a76:	4613      	mov	r3, r2
 8002a78:	00db      	lsls	r3, r3, #3
 8002a7a:	1a9b      	subs	r3, r3, r2
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	440b      	add	r3, r1
 8002a80:	333d      	adds	r3, #61	; 0x3d
 8002a82:	2201      	movs	r2, #1
 8002a84:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002a86:	7bfa      	ldrb	r2, [r7, #15]
 8002a88:	6879      	ldr	r1, [r7, #4]
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	00db      	lsls	r3, r3, #3
 8002a8e:	1a9b      	subs	r3, r3, r2
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	440b      	add	r3, r1
 8002a94:	333c      	adds	r3, #60	; 0x3c
 8002a96:	7bfa      	ldrb	r2, [r7, #15]
 8002a98:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002a9a:	7bfa      	ldrb	r2, [r7, #15]
 8002a9c:	7bfb      	ldrb	r3, [r7, #15]
 8002a9e:	b298      	uxth	r0, r3
 8002aa0:	6879      	ldr	r1, [r7, #4]
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	00db      	lsls	r3, r3, #3
 8002aa6:	1a9b      	subs	r3, r3, r2
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	440b      	add	r3, r1
 8002aac:	3342      	adds	r3, #66	; 0x42
 8002aae:	4602      	mov	r2, r0
 8002ab0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002ab2:	7bfa      	ldrb	r2, [r7, #15]
 8002ab4:	6879      	ldr	r1, [r7, #4]
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	00db      	lsls	r3, r3, #3
 8002aba:	1a9b      	subs	r3, r3, r2
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	440b      	add	r3, r1
 8002ac0:	333f      	adds	r3, #63	; 0x3f
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002ac6:	7bfa      	ldrb	r2, [r7, #15]
 8002ac8:	6879      	ldr	r1, [r7, #4]
 8002aca:	4613      	mov	r3, r2
 8002acc:	00db      	lsls	r3, r3, #3
 8002ace:	1a9b      	subs	r3, r3, r2
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	440b      	add	r3, r1
 8002ad4:	3344      	adds	r3, #68	; 0x44
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002ada:	7bfa      	ldrb	r2, [r7, #15]
 8002adc:	6879      	ldr	r1, [r7, #4]
 8002ade:	4613      	mov	r3, r2
 8002ae0:	00db      	lsls	r3, r3, #3
 8002ae2:	1a9b      	subs	r3, r3, r2
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	440b      	add	r3, r1
 8002ae8:	3348      	adds	r3, #72	; 0x48
 8002aea:	2200      	movs	r2, #0
 8002aec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002aee:	7bfa      	ldrb	r2, [r7, #15]
 8002af0:	6879      	ldr	r1, [r7, #4]
 8002af2:	4613      	mov	r3, r2
 8002af4:	00db      	lsls	r3, r3, #3
 8002af6:	1a9b      	subs	r3, r3, r2
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	440b      	add	r3, r1
 8002afc:	3350      	adds	r3, #80	; 0x50
 8002afe:	2200      	movs	r2, #0
 8002b00:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b02:	7bfb      	ldrb	r3, [r7, #15]
 8002b04:	3301      	adds	r3, #1
 8002b06:	73fb      	strb	r3, [r7, #15]
 8002b08:	7bfa      	ldrb	r2, [r7, #15]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d3af      	bcc.n	8002a72 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b12:	2300      	movs	r3, #0
 8002b14:	73fb      	strb	r3, [r7, #15]
 8002b16:	e044      	b.n	8002ba2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002b18:	7bfa      	ldrb	r2, [r7, #15]
 8002b1a:	6879      	ldr	r1, [r7, #4]
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	00db      	lsls	r3, r3, #3
 8002b20:	1a9b      	subs	r3, r3, r2
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	440b      	add	r3, r1
 8002b26:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002b2e:	7bfa      	ldrb	r2, [r7, #15]
 8002b30:	6879      	ldr	r1, [r7, #4]
 8002b32:	4613      	mov	r3, r2
 8002b34:	00db      	lsls	r3, r3, #3
 8002b36:	1a9b      	subs	r3, r3, r2
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	440b      	add	r3, r1
 8002b3c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002b40:	7bfa      	ldrb	r2, [r7, #15]
 8002b42:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002b44:	7bfa      	ldrb	r2, [r7, #15]
 8002b46:	6879      	ldr	r1, [r7, #4]
 8002b48:	4613      	mov	r3, r2
 8002b4a:	00db      	lsls	r3, r3, #3
 8002b4c:	1a9b      	subs	r3, r3, r2
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	440b      	add	r3, r1
 8002b52:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002b56:	2200      	movs	r2, #0
 8002b58:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002b5a:	7bfa      	ldrb	r2, [r7, #15]
 8002b5c:	6879      	ldr	r1, [r7, #4]
 8002b5e:	4613      	mov	r3, r2
 8002b60:	00db      	lsls	r3, r3, #3
 8002b62:	1a9b      	subs	r3, r3, r2
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	440b      	add	r3, r1
 8002b68:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002b70:	7bfa      	ldrb	r2, [r7, #15]
 8002b72:	6879      	ldr	r1, [r7, #4]
 8002b74:	4613      	mov	r3, r2
 8002b76:	00db      	lsls	r3, r3, #3
 8002b78:	1a9b      	subs	r3, r3, r2
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	440b      	add	r3, r1
 8002b7e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002b82:	2200      	movs	r2, #0
 8002b84:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002b86:	7bfa      	ldrb	r2, [r7, #15]
 8002b88:	6879      	ldr	r1, [r7, #4]
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	00db      	lsls	r3, r3, #3
 8002b8e:	1a9b      	subs	r3, r3, r2
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	440b      	add	r3, r1
 8002b94:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002b98:	2200      	movs	r2, #0
 8002b9a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b9c:	7bfb      	ldrb	r3, [r7, #15]
 8002b9e:	3301      	adds	r3, #1
 8002ba0:	73fb      	strb	r3, [r7, #15]
 8002ba2:	7bfa      	ldrb	r2, [r7, #15]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d3b5      	bcc.n	8002b18 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	603b      	str	r3, [r7, #0]
 8002bb2:	687e      	ldr	r6, [r7, #4]
 8002bb4:	466d      	mov	r5, sp
 8002bb6:	f106 0410 	add.w	r4, r6, #16
 8002bba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bbc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bc0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bc2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002bc6:	e885 0003 	stmia.w	r5, {r0, r1}
 8002bca:	1d33      	adds	r3, r6, #4
 8002bcc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bce:	6838      	ldr	r0, [r7, #0]
 8002bd0:	f003 f9f2 	bl	8005fb8 <USB_DevInit>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d005      	beq.n	8002be6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2202      	movs	r2, #2
 8002bde:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e014      	b.n	8002c10 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d102      	bne.n	8002c04 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f001 f898 	bl	8003d34 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f004 f9e7 	bl	8006fdc <USB_DevDisconnect>

  return HAL_OK;
 8002c0e:	2300      	movs	r3, #0
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3714      	adds	r7, #20
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c18 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d101      	bne.n	8002c34 <HAL_PCD_Start+0x1c>
 8002c30:	2302      	movs	r3, #2
 8002c32:	e020      	b.n	8002c76 <HAL_PCD_Start+0x5e>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2201      	movs	r2, #1
 8002c38:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d109      	bne.n	8002c58 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d005      	beq.n	8002c58 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c50:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f004 f9a5 	bl	8006fac <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4618      	mov	r0, r3
 8002c68:	f003 f95a 	bl	8005f20 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3710      	adds	r7, #16
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}

08002c7e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002c7e:	b590      	push	{r4, r7, lr}
 8002c80:	b08d      	sub	sp, #52	; 0x34
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c8c:	6a3b      	ldr	r3, [r7, #32]
 8002c8e:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4618      	mov	r0, r3
 8002c96:	f004 fa4c 	bl	8007132 <USB_GetMode>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	f040 83bb 	bne.w	8003418 <HAL_PCD_IRQHandler+0x79a>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f004 f9b0 	bl	800700c <USB_ReadInterrupts>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	f000 83b1 	beq.w	8003416 <HAL_PCD_IRQHandler+0x798>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f004 f9a7 	bl	800700c <USB_ReadInterrupts>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	f003 0302 	and.w	r3, r3, #2
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d107      	bne.n	8002cd8 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	695a      	ldr	r2, [r3, #20]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f002 0202 	and.w	r2, r2, #2
 8002cd6:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f004 f995 	bl	800700c <USB_ReadInterrupts>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ce8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002cec:	d17b      	bne.n	8002de6 <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f004 f99b 	bl	8007032 <USB_ReadDevAllOutEpInterrupt>
 8002cfc:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002cfe:	e06f      	b.n	8002de0 <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d02:	f003 0301 	and.w	r3, r3, #1
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d064      	beq.n	8002dd4 <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d10:	b2d2      	uxtb	r2, r2
 8002d12:	4611      	mov	r1, r2
 8002d14:	4618      	mov	r0, r3
 8002d16:	f004 f9c0 	bl	800709a <USB_ReadDevOutEPInterrupt>
 8002d1a:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	f003 0301 	and.w	r3, r3, #1
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d00c      	beq.n	8002d40 <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d28:	015a      	lsls	r2, r3, #5
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	4413      	add	r3, r2
 8002d2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d32:	461a      	mov	r2, r3
 8002d34:	2301      	movs	r3, #1
 8002d36:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002d38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f000 fe3a 	bl	80039b4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002d40:	69bb      	ldr	r3, [r7, #24]
 8002d42:	f003 0308 	and.w	r3, r3, #8
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d00c      	beq.n	8002d64 <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002d4a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f000 ff39 	bl	8003bc4 <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d54:	015a      	lsls	r2, r3, #5
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	4413      	add	r3, r2
 8002d5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d5e:	461a      	mov	r2, r3
 8002d60:	2308      	movs	r3, #8
 8002d62:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	f003 0310 	and.w	r3, r3, #16
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d008      	beq.n	8002d80 <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d70:	015a      	lsls	r2, r3, #5
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	4413      	add	r3, r2
 8002d76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	2310      	movs	r3, #16
 8002d7e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	f003 0320 	and.w	r3, r3, #32
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d015      	beq.n	8002db6 <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d108      	bne.n	8002da4 <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6818      	ldr	r0, [r3, #0]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	2101      	movs	r1, #1
 8002da0:	f004 fa0c 	bl	80071bc <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da6:	015a      	lsls	r2, r3, #5
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	4413      	add	r3, r2
 8002dac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002db0:	461a      	mov	r2, r3
 8002db2:	2320      	movs	r3, #32
 8002db4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d009      	beq.n	8002dd4 <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc2:	015a      	lsls	r2, r3, #5
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	4413      	add	r3, r2
 8002dc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dcc:	461a      	mov	r2, r3
 8002dce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002dd2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ddc:	085b      	lsrs	r3, r3, #1
 8002dde:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d18c      	bne.n	8002d00 <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4618      	mov	r0, r3
 8002dec:	f004 f90e 	bl	800700c <USB_ReadInterrupts>
 8002df0:	4603      	mov	r3, r0
 8002df2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002df6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002dfa:	f040 80c4 	bne.w	8002f86 <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4618      	mov	r0, r3
 8002e04:	f004 f92f 	bl	8007066 <USB_ReadDevAllInEpInterrupt>
 8002e08:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002e0e:	e0b6      	b.n	8002f7e <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e12:	f003 0301 	and.w	r3, r3, #1
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	f000 80ab 	beq.w	8002f72 <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e22:	b2d2      	uxtb	r2, r2
 8002e24:	4611      	mov	r1, r2
 8002e26:	4618      	mov	r0, r3
 8002e28:	f004 f955 	bl	80070d6 <USB_ReadDevInEPInterrupt>
 8002e2c:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002e2e:	69bb      	ldr	r3, [r7, #24]
 8002e30:	f003 0301 	and.w	r3, r3, #1
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d05b      	beq.n	8002ef0 <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3a:	f003 030f 	and.w	r3, r3, #15
 8002e3e:	2201      	movs	r2, #1
 8002e40:	fa02 f303 	lsl.w	r3, r2, r3
 8002e44:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	43db      	mvns	r3, r3
 8002e52:	69f9      	ldr	r1, [r7, #28]
 8002e54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002e58:	4013      	ands	r3, r2
 8002e5a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5e:	015a      	lsls	r2, r3, #5
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	4413      	add	r3, r2
 8002e64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e68:	461a      	mov	r2, r3
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	691b      	ldr	r3, [r3, #16]
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d11b      	bne.n	8002eae <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002e76:	6879      	ldr	r1, [r7, #4]
 8002e78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	00db      	lsls	r3, r3, #3
 8002e7e:	1a9b      	subs	r3, r3, r2
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	440b      	add	r3, r1
 8002e84:	3348      	adds	r3, #72	; 0x48
 8002e86:	6819      	ldr	r1, [r3, #0]
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	00db      	lsls	r3, r3, #3
 8002e90:	1a9b      	subs	r3, r3, r2
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	4403      	add	r3, r0
 8002e96:	3344      	adds	r3, #68	; 0x44
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4419      	add	r1, r3
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	00db      	lsls	r3, r3, #3
 8002ea4:	1a9b      	subs	r3, r3, r2
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	4403      	add	r3, r0
 8002eaa:	3348      	adds	r3, #72	; 0x48
 8002eac:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f010 fbc8 	bl	801364a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	691b      	ldr	r3, [r3, #16]
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d116      	bne.n	8002ef0 <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d113      	bne.n	8002ef0 <HAL_PCD_IRQHandler+0x272>
 8002ec8:	6879      	ldr	r1, [r7, #4]
 8002eca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ecc:	4613      	mov	r3, r2
 8002ece:	00db      	lsls	r3, r3, #3
 8002ed0:	1a9b      	subs	r3, r3, r2
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	440b      	add	r3, r1
 8002ed6:	3350      	adds	r3, #80	; 0x50
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d108      	bne.n	8002ef0 <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6818      	ldr	r0, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002ee8:	461a      	mov	r2, r3
 8002eea:	2101      	movs	r1, #1
 8002eec:	f004 f966 	bl	80071bc <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	f003 0308 	and.w	r3, r3, #8
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d008      	beq.n	8002f0c <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efc:	015a      	lsls	r2, r3, #5
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	4413      	add	r3, r2
 8002f02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f06:	461a      	mov	r2, r3
 8002f08:	2308      	movs	r3, #8
 8002f0a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002f0c:	69bb      	ldr	r3, [r7, #24]
 8002f0e:	f003 0310 	and.w	r3, r3, #16
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d008      	beq.n	8002f28 <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f18:	015a      	lsls	r2, r3, #5
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	4413      	add	r3, r2
 8002f1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f22:	461a      	mov	r2, r3
 8002f24:	2310      	movs	r3, #16
 8002f26:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002f28:	69bb      	ldr	r3, [r7, #24]
 8002f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d008      	beq.n	8002f44 <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f34:	015a      	lsls	r2, r3, #5
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	4413      	add	r3, r2
 8002f3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f3e:	461a      	mov	r2, r3
 8002f40:	2340      	movs	r3, #64	; 0x40
 8002f42:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002f44:	69bb      	ldr	r3, [r7, #24]
 8002f46:	f003 0302 	and.w	r3, r3, #2
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d008      	beq.n	8002f60 <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f50:	015a      	lsls	r2, r3, #5
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	4413      	add	r3, r2
 8002f56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	2302      	movs	r3, #2
 8002f5e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002f60:	69bb      	ldr	r3, [r7, #24]
 8002f62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d003      	beq.n	8002f72 <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002f6a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f000 fc94 	bl	800389a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f74:	3301      	adds	r3, #1
 8002f76:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f7a:	085b      	lsrs	r3, r3, #1
 8002f7c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	f47f af45 	bne.w	8002e10 <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f004 f83e 	bl	800700c <USB_ReadInterrupts>
 8002f90:	4603      	mov	r3, r0
 8002f92:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002f96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f9a:	d122      	bne.n	8002fe2 <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	69fa      	ldr	r2, [r7, #28]
 8002fa6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002faa:	f023 0301 	bic.w	r3, r3, #1
 8002fae:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d108      	bne.n	8002fcc <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002fc2:	2100      	movs	r1, #0
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f000 fed9 	bl	8003d7c <HAL_PCDEx_LPM_Callback>
 8002fca:	e002      	b.n	8002fd2 <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	f010 fbb3 	bl	8013738 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	695a      	ldr	r2, [r3, #20]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002fe0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f004 f810 	bl	800700c <USB_ReadInterrupts>
 8002fec:	4603      	mov	r3, r0
 8002fee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ff2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ff6:	d112      	bne.n	800301e <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	f003 0301 	and.w	r3, r3, #1
 8003004:	2b01      	cmp	r3, #1
 8003006:	d102      	bne.n	800300e <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f010 fb6f 	bl	80136ec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	695a      	ldr	r2, [r3, #20]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800301c:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4618      	mov	r0, r3
 8003024:	f003 fff2 	bl	800700c <USB_ReadInterrupts>
 8003028:	4603      	mov	r3, r0
 800302a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800302e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003032:	d121      	bne.n	8003078 <HAL_PCD_IRQHandler+0x3fa>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	695a      	ldr	r2, [r3, #20]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003042:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800304a:	2b00      	cmp	r3, #0
 800304c:	d111      	bne.n	8003072 <HAL_PCD_IRQHandler+0x3f4>
      {
        hpcd->LPM_State = LPM_L1;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2201      	movs	r2, #1
 8003052:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800305c:	089b      	lsrs	r3, r3, #2
 800305e:	f003 020f 	and.w	r2, r3, #15
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003068:	2101      	movs	r1, #1
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f000 fe86 	bl	8003d7c <HAL_PCDEx_LPM_Callback>
 8003070:	e002      	b.n	8003078 <HAL_PCD_IRQHandler+0x3fa>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f010 fb3a 	bl	80136ec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4618      	mov	r0, r3
 800307e:	f003 ffc5 	bl	800700c <USB_ReadInterrupts>
 8003082:	4603      	mov	r3, r0
 8003084:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003088:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800308c:	f040 80a7 	bne.w	80031de <HAL_PCD_IRQHandler+0x560>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	69fa      	ldr	r2, [r7, #28]
 800309a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800309e:	f023 0301 	bic.w	r3, r3, #1
 80030a2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	2110      	movs	r1, #16
 80030aa:	4618      	mov	r0, r3
 80030ac:	f003 f8f0 	bl	8006290 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030b0:	2300      	movs	r3, #0
 80030b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030b4:	e036      	b.n	8003124 <HAL_PCD_IRQHandler+0x4a6>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80030b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030b8:	015a      	lsls	r2, r3, #5
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	4413      	add	r3, r2
 80030be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030c2:	461a      	mov	r2, r3
 80030c4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80030c8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80030ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030cc:	015a      	lsls	r2, r3, #5
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	4413      	add	r3, r2
 80030d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030da:	0151      	lsls	r1, r2, #5
 80030dc:	69fa      	ldr	r2, [r7, #28]
 80030de:	440a      	add	r2, r1
 80030e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80030e4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80030e8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80030ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ec:	015a      	lsls	r2, r3, #5
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	4413      	add	r3, r2
 80030f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030f6:	461a      	mov	r2, r3
 80030f8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80030fc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80030fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003100:	015a      	lsls	r2, r3, #5
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	4413      	add	r3, r2
 8003106:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800310e:	0151      	lsls	r1, r2, #5
 8003110:	69fa      	ldr	r2, [r7, #28]
 8003112:	440a      	add	r2, r1
 8003114:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003118:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800311c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800311e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003120:	3301      	adds	r3, #1
 8003122:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800312a:	429a      	cmp	r2, r3
 800312c:	d3c3      	bcc.n	80030b6 <HAL_PCD_IRQHandler+0x438>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003134:	69db      	ldr	r3, [r3, #28]
 8003136:	69fa      	ldr	r2, [r7, #28]
 8003138:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800313c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003140:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003146:	2b00      	cmp	r3, #0
 8003148:	d016      	beq.n	8003178 <HAL_PCD_IRQHandler+0x4fa>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003150:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003154:	69fa      	ldr	r2, [r7, #28]
 8003156:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800315a:	f043 030b 	orr.w	r3, r3, #11
 800315e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800316a:	69fa      	ldr	r2, [r7, #28]
 800316c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003170:	f043 030b 	orr.w	r3, r3, #11
 8003174:	6453      	str	r3, [r2, #68]	; 0x44
 8003176:	e015      	b.n	80031a4 <HAL_PCD_IRQHandler+0x526>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800317e:	695a      	ldr	r2, [r3, #20]
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003186:	4619      	mov	r1, r3
 8003188:	f242 032b 	movw	r3, #8235	; 0x202b
 800318c:	4313      	orrs	r3, r2
 800318e:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003196:	691b      	ldr	r3, [r3, #16]
 8003198:	69fa      	ldr	r2, [r7, #28]
 800319a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800319e:	f043 030b 	orr.w	r3, r3, #11
 80031a2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	69fa      	ldr	r2, [r7, #28]
 80031ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031b2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80031b6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6818      	ldr	r0, [r3, #0]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	691b      	ldr	r3, [r3, #16]
 80031c0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80031c8:	461a      	mov	r2, r3
 80031ca:	f003 fff7 	bl	80071bc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	695a      	ldr	r2, [r3, #20]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80031dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4618      	mov	r0, r3
 80031e4:	f003 ff12 	bl	800700c <USB_ReadInterrupts>
 80031e8:	4603      	mov	r3, r0
 80031ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031f2:	d124      	bne.n	800323e <HAL_PCD_IRQHandler+0x5c0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4618      	mov	r0, r3
 80031fa:	f003 ffa9 	bl	8007150 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4618      	mov	r0, r3
 8003204:	f003 f8a5 	bl	8006352 <USB_GetDevSpeed>
 8003208:	4603      	mov	r3, r0
 800320a:	461a      	mov	r2, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681c      	ldr	r4, [r3, #0]
 8003214:	f001 fcf4 	bl	8004c00 <HAL_RCC_GetHCLKFreq>
 8003218:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800321e:	b2db      	uxtb	r3, r3
 8003220:	461a      	mov	r2, r3
 8003222:	4620      	mov	r0, r4
 8003224:	f002 fdda 	bl	8005ddc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f010 fa36 	bl	801369a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	695a      	ldr	r2, [r3, #20]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800323c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4618      	mov	r0, r3
 8003244:	f003 fee2 	bl	800700c <USB_ReadInterrupts>
 8003248:	4603      	mov	r3, r0
 800324a:	f003 0310 	and.w	r3, r3, #16
 800324e:	2b10      	cmp	r3, #16
 8003250:	d161      	bne.n	8003316 <HAL_PCD_IRQHandler+0x698>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	699a      	ldr	r2, [r3, #24]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f022 0210 	bic.w	r2, r2, #16
 8003260:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003262:	6a3b      	ldr	r3, [r7, #32]
 8003264:	6a1b      	ldr	r3, [r3, #32]
 8003266:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	f003 020f 	and.w	r2, r3, #15
 800326e:	4613      	mov	r3, r2
 8003270:	00db      	lsls	r3, r3, #3
 8003272:	1a9b      	subs	r3, r3, r2
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	4413      	add	r3, r2
 800327e:	3304      	adds	r3, #4
 8003280:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	0c5b      	lsrs	r3, r3, #17
 8003286:	f003 030f 	and.w	r3, r3, #15
 800328a:	2b02      	cmp	r3, #2
 800328c:	d124      	bne.n	80032d8 <HAL_PCD_IRQHandler+0x65a>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800328e:	693a      	ldr	r2, [r7, #16]
 8003290:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003294:	4013      	ands	r3, r2
 8003296:	2b00      	cmp	r3, #0
 8003298:	d035      	beq.n	8003306 <HAL_PCD_IRQHandler+0x688>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	091b      	lsrs	r3, r3, #4
 80032a2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80032a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	461a      	mov	r2, r3
 80032ac:	6a38      	ldr	r0, [r7, #32]
 80032ae:	f003 fd5a 	bl	8006d66 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	68da      	ldr	r2, [r3, #12]
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	091b      	lsrs	r3, r3, #4
 80032ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032be:	441a      	add	r2, r3
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	699a      	ldr	r2, [r3, #24]
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	091b      	lsrs	r3, r3, #4
 80032cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032d0:	441a      	add	r2, r3
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	619a      	str	r2, [r3, #24]
 80032d6:	e016      	b.n	8003306 <HAL_PCD_IRQHandler+0x688>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	0c5b      	lsrs	r3, r3, #17
 80032dc:	f003 030f 	and.w	r3, r3, #15
 80032e0:	2b06      	cmp	r3, #6
 80032e2:	d110      	bne.n	8003306 <HAL_PCD_IRQHandler+0x688>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80032ea:	2208      	movs	r2, #8
 80032ec:	4619      	mov	r1, r3
 80032ee:	6a38      	ldr	r0, [r7, #32]
 80032f0:	f003 fd39 	bl	8006d66 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	699a      	ldr	r2, [r3, #24]
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	091b      	lsrs	r3, r3, #4
 80032fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003300:	441a      	add	r2, r3
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	699a      	ldr	r2, [r3, #24]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f042 0210 	orr.w	r2, r2, #16
 8003314:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4618      	mov	r0, r3
 800331c:	f003 fe76 	bl	800700c <USB_ReadInterrupts>
 8003320:	4603      	mov	r3, r0
 8003322:	f003 0308 	and.w	r3, r3, #8
 8003326:	2b08      	cmp	r3, #8
 8003328:	d10a      	bne.n	8003340 <HAL_PCD_IRQHandler+0x6c2>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f010 f9a7 	bl	801367e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	695a      	ldr	r2, [r3, #20]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f002 0208 	and.w	r2, r2, #8
 800333e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4618      	mov	r0, r3
 8003346:	f003 fe61 	bl	800700c <USB_ReadInterrupts>
 800334a:	4603      	mov	r3, r0
 800334c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003350:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003354:	d10f      	bne.n	8003376 <HAL_PCD_IRQHandler+0x6f8>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003356:	2300      	movs	r3, #0
 8003358:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800335a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335c:	b2db      	uxtb	r3, r3
 800335e:	4619      	mov	r1, r3
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f010 fa09 	bl	8013778 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	695a      	ldr	r2, [r3, #20]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003374:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4618      	mov	r0, r3
 800337c:	f003 fe46 	bl	800700c <USB_ReadInterrupts>
 8003380:	4603      	mov	r3, r0
 8003382:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003386:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800338a:	d10f      	bne.n	80033ac <HAL_PCD_IRQHandler+0x72e>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800338c:	2300      	movs	r3, #0
 800338e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003392:	b2db      	uxtb	r3, r3
 8003394:	4619      	mov	r1, r3
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f010 f9dc 	bl	8013754 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	695a      	ldr	r2, [r3, #20]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80033aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4618      	mov	r0, r3
 80033b2:	f003 fe2b 	bl	800700c <USB_ReadInterrupts>
 80033b6:	4603      	mov	r3, r0
 80033b8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80033bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033c0:	d10a      	bne.n	80033d8 <HAL_PCD_IRQHandler+0x75a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f010 f9ea 	bl	801379c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	695a      	ldr	r2, [r3, #20]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80033d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4618      	mov	r0, r3
 80033de:	f003 fe15 	bl	800700c <USB_ReadInterrupts>
 80033e2:	4603      	mov	r3, r0
 80033e4:	f003 0304 	and.w	r3, r3, #4
 80033e8:	2b04      	cmp	r3, #4
 80033ea:	d115      	bne.n	8003418 <HAL_PCD_IRQHandler+0x79a>
    {
      temp = hpcd->Instance->GOTGINT;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	f003 0304 	and.w	r3, r3, #4
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d002      	beq.n	8003404 <HAL_PCD_IRQHandler+0x786>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f010 f9da 	bl	80137b8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	6859      	ldr	r1, [r3, #4]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	693a      	ldr	r2, [r7, #16]
 8003410:	430a      	orrs	r2, r1
 8003412:	605a      	str	r2, [r3, #4]
 8003414:	e000      	b.n	8003418 <HAL_PCD_IRQHandler+0x79a>
      return;
 8003416:	bf00      	nop
    }
  }
}
 8003418:	3734      	adds	r7, #52	; 0x34
 800341a:	46bd      	mov	sp, r7
 800341c:	bd90      	pop	{r4, r7, pc}

0800341e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800341e:	b580      	push	{r7, lr}
 8003420:	b082      	sub	sp, #8
 8003422:	af00      	add	r7, sp, #0
 8003424:	6078      	str	r0, [r7, #4]
 8003426:	460b      	mov	r3, r1
 8003428:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003430:	2b01      	cmp	r3, #1
 8003432:	d101      	bne.n	8003438 <HAL_PCD_SetAddress+0x1a>
 8003434:	2302      	movs	r3, #2
 8003436:	e013      	b.n	8003460 <HAL_PCD_SetAddress+0x42>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2201      	movs	r2, #1
 800343c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	78fa      	ldrb	r2, [r7, #3]
 8003444:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	78fa      	ldrb	r2, [r7, #3]
 800344e:	4611      	mov	r1, r2
 8003450:	4618      	mov	r0, r3
 8003452:	f003 fd85 	bl	8006f60 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800345e:	2300      	movs	r3, #0
}
 8003460:	4618      	mov	r0, r3
 8003462:	3708      	adds	r7, #8
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}

08003468 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	4608      	mov	r0, r1
 8003472:	4611      	mov	r1, r2
 8003474:	461a      	mov	r2, r3
 8003476:	4603      	mov	r3, r0
 8003478:	70fb      	strb	r3, [r7, #3]
 800347a:	460b      	mov	r3, r1
 800347c:	803b      	strh	r3, [r7, #0]
 800347e:	4613      	mov	r3, r2
 8003480:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003482:	2300      	movs	r3, #0
 8003484:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003486:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800348a:	2b00      	cmp	r3, #0
 800348c:	da0f      	bge.n	80034ae <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800348e:	78fb      	ldrb	r3, [r7, #3]
 8003490:	f003 020f 	and.w	r2, r3, #15
 8003494:	4613      	mov	r3, r2
 8003496:	00db      	lsls	r3, r3, #3
 8003498:	1a9b      	subs	r3, r3, r2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	3338      	adds	r3, #56	; 0x38
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	4413      	add	r3, r2
 80034a2:	3304      	adds	r3, #4
 80034a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2201      	movs	r2, #1
 80034aa:	705a      	strb	r2, [r3, #1]
 80034ac:	e00f      	b.n	80034ce <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034ae:	78fb      	ldrb	r3, [r7, #3]
 80034b0:	f003 020f 	and.w	r2, r3, #15
 80034b4:	4613      	mov	r3, r2
 80034b6:	00db      	lsls	r3, r3, #3
 80034b8:	1a9b      	subs	r3, r3, r2
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	4413      	add	r3, r2
 80034c4:	3304      	adds	r3, #4
 80034c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2200      	movs	r2, #0
 80034cc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80034ce:	78fb      	ldrb	r3, [r7, #3]
 80034d0:	f003 030f 	and.w	r3, r3, #15
 80034d4:	b2da      	uxtb	r2, r3
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80034da:	883a      	ldrh	r2, [r7, #0]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	78ba      	ldrb	r2, [r7, #2]
 80034e4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	785b      	ldrb	r3, [r3, #1]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d004      	beq.n	80034f8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	b29a      	uxth	r2, r3
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80034f8:	78bb      	ldrb	r3, [r7, #2]
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	d102      	bne.n	8003504 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2200      	movs	r2, #0
 8003502:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800350a:	2b01      	cmp	r3, #1
 800350c:	d101      	bne.n	8003512 <HAL_PCD_EP_Open+0xaa>
 800350e:	2302      	movs	r3, #2
 8003510:	e00e      	b.n	8003530 <HAL_PCD_EP_Open+0xc8>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2201      	movs	r2, #1
 8003516:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	68f9      	ldr	r1, [r7, #12]
 8003520:	4618      	mov	r0, r3
 8003522:	f002 ff3b 	bl	800639c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800352e:	7afb      	ldrb	r3, [r7, #11]
}
 8003530:	4618      	mov	r0, r3
 8003532:	3710      	adds	r7, #16
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}

08003538 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b084      	sub	sp, #16
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	460b      	mov	r3, r1
 8003542:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003544:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003548:	2b00      	cmp	r3, #0
 800354a:	da0f      	bge.n	800356c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800354c:	78fb      	ldrb	r3, [r7, #3]
 800354e:	f003 020f 	and.w	r2, r3, #15
 8003552:	4613      	mov	r3, r2
 8003554:	00db      	lsls	r3, r3, #3
 8003556:	1a9b      	subs	r3, r3, r2
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	3338      	adds	r3, #56	; 0x38
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	4413      	add	r3, r2
 8003560:	3304      	adds	r3, #4
 8003562:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2201      	movs	r2, #1
 8003568:	705a      	strb	r2, [r3, #1]
 800356a:	e00f      	b.n	800358c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800356c:	78fb      	ldrb	r3, [r7, #3]
 800356e:	f003 020f 	and.w	r2, r3, #15
 8003572:	4613      	mov	r3, r2
 8003574:	00db      	lsls	r3, r3, #3
 8003576:	1a9b      	subs	r3, r3, r2
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	4413      	add	r3, r2
 8003582:	3304      	adds	r3, #4
 8003584:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2200      	movs	r2, #0
 800358a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800358c:	78fb      	ldrb	r3, [r7, #3]
 800358e:	f003 030f 	and.w	r3, r3, #15
 8003592:	b2da      	uxtb	r2, r3
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d101      	bne.n	80035a6 <HAL_PCD_EP_Close+0x6e>
 80035a2:	2302      	movs	r3, #2
 80035a4:	e00e      	b.n	80035c4 <HAL_PCD_EP_Close+0x8c>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2201      	movs	r2, #1
 80035aa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	68f9      	ldr	r1, [r7, #12]
 80035b4:	4618      	mov	r0, r3
 80035b6:	f002 ff79 	bl	80064ac <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80035c2:	2300      	movs	r3, #0
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3710      	adds	r7, #16
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}

080035cc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b086      	sub	sp, #24
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	60f8      	str	r0, [r7, #12]
 80035d4:	607a      	str	r2, [r7, #4]
 80035d6:	603b      	str	r3, [r7, #0]
 80035d8:	460b      	mov	r3, r1
 80035da:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035dc:	7afb      	ldrb	r3, [r7, #11]
 80035de:	f003 020f 	and.w	r2, r3, #15
 80035e2:	4613      	mov	r3, r2
 80035e4:	00db      	lsls	r3, r3, #3
 80035e6:	1a9b      	subs	r3, r3, r2
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80035ee:	68fa      	ldr	r2, [r7, #12]
 80035f0:	4413      	add	r3, r2
 80035f2:	3304      	adds	r3, #4
 80035f4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	683a      	ldr	r2, [r7, #0]
 8003600:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	2200      	movs	r2, #0
 8003606:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	2200      	movs	r2, #0
 800360c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800360e:	7afb      	ldrb	r3, [r7, #11]
 8003610:	f003 030f 	and.w	r3, r3, #15
 8003614:	b2da      	uxtb	r2, r3
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	2b01      	cmp	r3, #1
 8003620:	d102      	bne.n	8003628 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003628:	7afb      	ldrb	r3, [r7, #11]
 800362a:	f003 030f 	and.w	r3, r3, #15
 800362e:	2b00      	cmp	r3, #0
 8003630:	d109      	bne.n	8003646 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	6818      	ldr	r0, [r3, #0]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	691b      	ldr	r3, [r3, #16]
 800363a:	b2db      	uxtb	r3, r3
 800363c:	461a      	mov	r2, r3
 800363e:	6979      	ldr	r1, [r7, #20]
 8003640:	f003 fa04 	bl	8006a4c <USB_EP0StartXfer>
 8003644:	e008      	b.n	8003658 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6818      	ldr	r0, [r3, #0]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	b2db      	uxtb	r3, r3
 8003650:	461a      	mov	r2, r3
 8003652:	6979      	ldr	r1, [r7, #20]
 8003654:	f002 ffae 	bl	80065b4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003658:	2300      	movs	r3, #0
}
 800365a:	4618      	mov	r0, r3
 800365c:	3718      	adds	r7, #24
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}

08003662 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003662:	b480      	push	{r7}
 8003664:	b083      	sub	sp, #12
 8003666:	af00      	add	r7, sp, #0
 8003668:	6078      	str	r0, [r7, #4]
 800366a:	460b      	mov	r3, r1
 800366c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800366e:	78fb      	ldrb	r3, [r7, #3]
 8003670:	f003 020f 	and.w	r2, r3, #15
 8003674:	6879      	ldr	r1, [r7, #4]
 8003676:	4613      	mov	r3, r2
 8003678:	00db      	lsls	r3, r3, #3
 800367a:	1a9b      	subs	r3, r3, r2
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	440b      	add	r3, r1
 8003680:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003684:	681b      	ldr	r3, [r3, #0]
}
 8003686:	4618      	mov	r0, r3
 8003688:	370c      	adds	r7, #12
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr

08003692 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003692:	b580      	push	{r7, lr}
 8003694:	b086      	sub	sp, #24
 8003696:	af00      	add	r7, sp, #0
 8003698:	60f8      	str	r0, [r7, #12]
 800369a:	607a      	str	r2, [r7, #4]
 800369c:	603b      	str	r3, [r7, #0]
 800369e:	460b      	mov	r3, r1
 80036a0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036a2:	7afb      	ldrb	r3, [r7, #11]
 80036a4:	f003 020f 	and.w	r2, r3, #15
 80036a8:	4613      	mov	r3, r2
 80036aa:	00db      	lsls	r3, r3, #3
 80036ac:	1a9b      	subs	r3, r3, r2
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	3338      	adds	r3, #56	; 0x38
 80036b2:	68fa      	ldr	r2, [r7, #12]
 80036b4:	4413      	add	r3, r2
 80036b6:	3304      	adds	r3, #4
 80036b8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	683a      	ldr	r2, [r7, #0]
 80036c4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	2200      	movs	r2, #0
 80036ca:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	2201      	movs	r2, #1
 80036d0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80036d2:	7afb      	ldrb	r3, [r7, #11]
 80036d4:	f003 030f 	and.w	r3, r3, #15
 80036d8:	b2da      	uxtb	r2, r3
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	691b      	ldr	r3, [r3, #16]
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d102      	bne.n	80036ec <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80036ec:	7afb      	ldrb	r3, [r7, #11]
 80036ee:	f003 030f 	and.w	r3, r3, #15
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d109      	bne.n	800370a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	6818      	ldr	r0, [r3, #0]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	461a      	mov	r2, r3
 8003702:	6979      	ldr	r1, [r7, #20]
 8003704:	f003 f9a2 	bl	8006a4c <USB_EP0StartXfer>
 8003708:	e008      	b.n	800371c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	6818      	ldr	r0, [r3, #0]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	691b      	ldr	r3, [r3, #16]
 8003712:	b2db      	uxtb	r3, r3
 8003714:	461a      	mov	r2, r3
 8003716:	6979      	ldr	r1, [r7, #20]
 8003718:	f002 ff4c 	bl	80065b4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800371c:	2300      	movs	r3, #0
}
 800371e:	4618      	mov	r0, r3
 8003720:	3718      	adds	r7, #24
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}

08003726 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003726:	b580      	push	{r7, lr}
 8003728:	b084      	sub	sp, #16
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
 800372e:	460b      	mov	r3, r1
 8003730:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003732:	78fb      	ldrb	r3, [r7, #3]
 8003734:	f003 020f 	and.w	r2, r3, #15
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	429a      	cmp	r2, r3
 800373e:	d901      	bls.n	8003744 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e050      	b.n	80037e6 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003744:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003748:	2b00      	cmp	r3, #0
 800374a:	da0f      	bge.n	800376c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800374c:	78fb      	ldrb	r3, [r7, #3]
 800374e:	f003 020f 	and.w	r2, r3, #15
 8003752:	4613      	mov	r3, r2
 8003754:	00db      	lsls	r3, r3, #3
 8003756:	1a9b      	subs	r3, r3, r2
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	3338      	adds	r3, #56	; 0x38
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	4413      	add	r3, r2
 8003760:	3304      	adds	r3, #4
 8003762:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2201      	movs	r2, #1
 8003768:	705a      	strb	r2, [r3, #1]
 800376a:	e00d      	b.n	8003788 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800376c:	78fa      	ldrb	r2, [r7, #3]
 800376e:	4613      	mov	r3, r2
 8003770:	00db      	lsls	r3, r3, #3
 8003772:	1a9b      	subs	r3, r3, r2
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	4413      	add	r3, r2
 800377e:	3304      	adds	r3, #4
 8003780:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2200      	movs	r2, #0
 8003786:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2201      	movs	r2, #1
 800378c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800378e:	78fb      	ldrb	r3, [r7, #3]
 8003790:	f003 030f 	and.w	r3, r3, #15
 8003794:	b2da      	uxtb	r2, r3
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d101      	bne.n	80037a8 <HAL_PCD_EP_SetStall+0x82>
 80037a4:	2302      	movs	r3, #2
 80037a6:	e01e      	b.n	80037e6 <HAL_PCD_EP_SetStall+0xc0>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	68f9      	ldr	r1, [r7, #12]
 80037b6:	4618      	mov	r0, r3
 80037b8:	f003 fafe 	bl	8006db8 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80037bc:	78fb      	ldrb	r3, [r7, #3]
 80037be:	f003 030f 	and.w	r3, r3, #15
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d10a      	bne.n	80037dc <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6818      	ldr	r0, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	691b      	ldr	r3, [r3, #16]
 80037ce:	b2d9      	uxtb	r1, r3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80037d6:	461a      	mov	r2, r3
 80037d8:	f003 fcf0 	bl	80071bc <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80037e4:	2300      	movs	r3, #0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3710      	adds	r7, #16
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}

080037ee <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80037ee:	b580      	push	{r7, lr}
 80037f0:	b084      	sub	sp, #16
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	6078      	str	r0, [r7, #4]
 80037f6:	460b      	mov	r3, r1
 80037f8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80037fa:	78fb      	ldrb	r3, [r7, #3]
 80037fc:	f003 020f 	and.w	r2, r3, #15
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	429a      	cmp	r2, r3
 8003806:	d901      	bls.n	800380c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e042      	b.n	8003892 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800380c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003810:	2b00      	cmp	r3, #0
 8003812:	da0f      	bge.n	8003834 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003814:	78fb      	ldrb	r3, [r7, #3]
 8003816:	f003 020f 	and.w	r2, r3, #15
 800381a:	4613      	mov	r3, r2
 800381c:	00db      	lsls	r3, r3, #3
 800381e:	1a9b      	subs	r3, r3, r2
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	3338      	adds	r3, #56	; 0x38
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	4413      	add	r3, r2
 8003828:	3304      	adds	r3, #4
 800382a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2201      	movs	r2, #1
 8003830:	705a      	strb	r2, [r3, #1]
 8003832:	e00f      	b.n	8003854 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003834:	78fb      	ldrb	r3, [r7, #3]
 8003836:	f003 020f 	and.w	r2, r3, #15
 800383a:	4613      	mov	r3, r2
 800383c:	00db      	lsls	r3, r3, #3
 800383e:	1a9b      	subs	r3, r3, r2
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	4413      	add	r3, r2
 800384a:	3304      	adds	r3, #4
 800384c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2200      	movs	r2, #0
 8003852:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2200      	movs	r2, #0
 8003858:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800385a:	78fb      	ldrb	r3, [r7, #3]
 800385c:	f003 030f 	and.w	r3, r3, #15
 8003860:	b2da      	uxtb	r2, r3
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800386c:	2b01      	cmp	r3, #1
 800386e:	d101      	bne.n	8003874 <HAL_PCD_EP_ClrStall+0x86>
 8003870:	2302      	movs	r3, #2
 8003872:	e00e      	b.n	8003892 <HAL_PCD_EP_ClrStall+0xa4>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	68f9      	ldr	r1, [r7, #12]
 8003882:	4618      	mov	r0, r3
 8003884:	f003 fb06 	bl	8006e94 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003890:	2300      	movs	r3, #0
}
 8003892:	4618      	mov	r0, r3
 8003894:	3710      	adds	r7, #16
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}

0800389a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800389a:	b580      	push	{r7, lr}
 800389c:	b08a      	sub	sp, #40	; 0x28
 800389e:	af02      	add	r7, sp, #8
 80038a0:	6078      	str	r0, [r7, #4]
 80038a2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80038ae:	683a      	ldr	r2, [r7, #0]
 80038b0:	4613      	mov	r3, r2
 80038b2:	00db      	lsls	r3, r3, #3
 80038b4:	1a9b      	subs	r3, r3, r2
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	3338      	adds	r3, #56	; 0x38
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	4413      	add	r3, r2
 80038be:	3304      	adds	r3, #4
 80038c0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	699a      	ldr	r2, [r3, #24]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	695b      	ldr	r3, [r3, #20]
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d901      	bls.n	80038d2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e06c      	b.n	80039ac <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	695a      	ldr	r2, [r3, #20]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	699b      	ldr	r3, [r3, #24]
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	69fa      	ldr	r2, [r7, #28]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d902      	bls.n	80038ee <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80038ee:	69fb      	ldr	r3, [r7, #28]
 80038f0:	3303      	adds	r3, #3
 80038f2:	089b      	lsrs	r3, r3, #2
 80038f4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80038f6:	e02b      	b.n	8003950 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	695a      	ldr	r2, [r3, #20]
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	699b      	ldr	r3, [r3, #24]
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	69fa      	ldr	r2, [r7, #28]
 800390a:	429a      	cmp	r2, r3
 800390c:	d902      	bls.n	8003914 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	3303      	adds	r3, #3
 8003918:	089b      	lsrs	r3, r3, #2
 800391a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	68d9      	ldr	r1, [r3, #12]
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	b2da      	uxtb	r2, r3
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800392c:	b2db      	uxtb	r3, r3
 800392e:	9300      	str	r3, [sp, #0]
 8003930:	4603      	mov	r3, r0
 8003932:	6978      	ldr	r0, [r7, #20]
 8003934:	f003 f9e2 	bl	8006cfc <USB_WritePacket>

    ep->xfer_buff  += len;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	68da      	ldr	r2, [r3, #12]
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	441a      	add	r2, r3
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	699a      	ldr	r2, [r3, #24]
 8003948:	69fb      	ldr	r3, [r7, #28]
 800394a:	441a      	add	r2, r3
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	015a      	lsls	r2, r3, #5
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	4413      	add	r3, r2
 8003958:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800395c:	699b      	ldr	r3, [r3, #24]
 800395e:	b29b      	uxth	r3, r3
 8003960:	69ba      	ldr	r2, [r7, #24]
 8003962:	429a      	cmp	r2, r3
 8003964:	d809      	bhi.n	800397a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	699a      	ldr	r2, [r3, #24]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800396e:	429a      	cmp	r2, r3
 8003970:	d203      	bcs.n	800397a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	695b      	ldr	r3, [r3, #20]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d1be      	bne.n	80038f8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	695a      	ldr	r2, [r3, #20]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	699b      	ldr	r3, [r3, #24]
 8003982:	429a      	cmp	r2, r3
 8003984:	d811      	bhi.n	80039aa <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	f003 030f 	and.w	r3, r3, #15
 800398c:	2201      	movs	r2, #1
 800398e:	fa02 f303 	lsl.w	r3, r2, r3
 8003992:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800399a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	43db      	mvns	r3, r3
 80039a0:	6939      	ldr	r1, [r7, #16]
 80039a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80039a6:	4013      	ands	r3, r2
 80039a8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80039aa:	2300      	movs	r3, #0
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3720      	adds	r7, #32
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b086      	sub	sp, #24
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	333c      	adds	r3, #60	; 0x3c
 80039cc:	3304      	adds	r3, #4
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	015a      	lsls	r2, r3, #5
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	4413      	add	r3, r2
 80039da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	691b      	ldr	r3, [r3, #16]
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	f040 80b3 	bne.w	8003b52 <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	f003 0308 	and.w	r3, r3, #8
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d028      	beq.n	8003a48 <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	4a70      	ldr	r2, [pc, #448]	; (8003bbc <PCD_EP_OutXfrComplete_int+0x208>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d90e      	bls.n	8003a1c <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d009      	beq.n	8003a1c <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	015a      	lsls	r2, r3, #5
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	4413      	add	r3, r2
 8003a10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a14:	461a      	mov	r2, r3
 8003a16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a1a:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f00f fde7 	bl	80135f0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6818      	ldr	r0, [r3, #0]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	2101      	movs	r1, #1
 8003a30:	f003 fbc4 	bl	80071bc <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	015a      	lsls	r2, r3, #5
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	4413      	add	r3, r2
 8003a3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a40:	461a      	mov	r2, r3
 8003a42:	2308      	movs	r3, #8
 8003a44:	6093      	str	r3, [r2, #8]
 8003a46:	e0b3      	b.n	8003bb0 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	f003 0320 	and.w	r3, r3, #32
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d009      	beq.n	8003a66 <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	015a      	lsls	r2, r3, #5
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	4413      	add	r3, r2
 8003a5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a5e:	461a      	mov	r2, r3
 8003a60:	2320      	movs	r3, #32
 8003a62:	6093      	str	r3, [r2, #8]
 8003a64:	e0a4      	b.n	8003bb0 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	f040 809f 	bne.w	8003bb0 <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	4a51      	ldr	r2, [pc, #324]	; (8003bbc <PCD_EP_OutXfrComplete_int+0x208>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d90f      	bls.n	8003a9a <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d00a      	beq.n	8003a9a <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	015a      	lsls	r2, r3, #5
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	4413      	add	r3, r2
 8003a8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a90:	461a      	mov	r2, r3
 8003a92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a96:	6093      	str	r3, [r2, #8]
 8003a98:	e08a      	b.n	8003bb0 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003a9a:	6879      	ldr	r1, [r7, #4]
 8003a9c:	683a      	ldr	r2, [r7, #0]
 8003a9e:	4613      	mov	r3, r2
 8003aa0:	00db      	lsls	r3, r3, #3
 8003aa2:	1a9b      	subs	r3, r3, r2
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	440b      	add	r3, r1
 8003aa8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003aac:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	0159      	lsls	r1, r3, #5
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	440b      	add	r3, r1
 8003ab6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aba:	691b      	ldr	r3, [r3, #16]
 8003abc:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003ac0:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	683a      	ldr	r2, [r7, #0]
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	00db      	lsls	r3, r3, #3
 8003aca:	1a9b      	subs	r3, r3, r2
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	4403      	add	r3, r0
 8003ad0:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003ad4:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003ad6:	6879      	ldr	r1, [r7, #4]
 8003ad8:	683a      	ldr	r2, [r7, #0]
 8003ada:	4613      	mov	r3, r2
 8003adc:	00db      	lsls	r3, r3, #3
 8003ade:	1a9b      	subs	r3, r3, r2
 8003ae0:	009b      	lsls	r3, r3, #2
 8003ae2:	440b      	add	r3, r1
 8003ae4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003ae8:	6819      	ldr	r1, [r3, #0]
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	683a      	ldr	r2, [r7, #0]
 8003aee:	4613      	mov	r3, r2
 8003af0:	00db      	lsls	r3, r3, #3
 8003af2:	1a9b      	subs	r3, r3, r2
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	4403      	add	r3, r0
 8003af8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4419      	add	r1, r3
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	683a      	ldr	r2, [r7, #0]
 8003b04:	4613      	mov	r3, r2
 8003b06:	00db      	lsls	r3, r3, #3
 8003b08:	1a9b      	subs	r3, r3, r2
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	4403      	add	r3, r0
 8003b0e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003b12:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	4619      	mov	r1, r3
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f00f fd7a 	bl	8013614 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d144      	bne.n	8003bb0 <PCD_EP_OutXfrComplete_int+0x1fc>
 8003b26:	6879      	ldr	r1, [r7, #4]
 8003b28:	683a      	ldr	r2, [r7, #0]
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	00db      	lsls	r3, r3, #3
 8003b2e:	1a9b      	subs	r3, r3, r2
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	440b      	add	r3, r1
 8003b34:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d138      	bne.n	8003bb0 <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6818      	ldr	r0, [r3, #0]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003b48:	461a      	mov	r2, r3
 8003b4a:	2101      	movs	r1, #1
 8003b4c:	f003 fb36 	bl	80071bc <USB_EP0_OutStart>
 8003b50:	e02e      	b.n	8003bb0 <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	4a1a      	ldr	r2, [pc, #104]	; (8003bc0 <PCD_EP_OutXfrComplete_int+0x20c>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d124      	bne.n	8003ba4 <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d00a      	beq.n	8003b7a <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	015a      	lsls	r2, r3, #5
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	4413      	add	r3, r2
 8003b6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b70:	461a      	mov	r2, r3
 8003b72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b76:	6093      	str	r3, [r2, #8]
 8003b78:	e01a      	b.n	8003bb0 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	f003 0320 	and.w	r3, r3, #32
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d008      	beq.n	8003b96 <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	015a      	lsls	r2, r3, #5
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	4413      	add	r3, r2
 8003b8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b90:	461a      	mov	r2, r3
 8003b92:	2320      	movs	r3, #32
 8003b94:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	4619      	mov	r1, r3
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f00f fd39 	bl	8013614 <HAL_PCD_DataOutStageCallback>
 8003ba2:	e005      	b.n	8003bb0 <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	4619      	mov	r1, r3
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f00f fd32 	bl	8013614 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003bb0:	2300      	movs	r3, #0
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3718      	adds	r7, #24
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	bf00      	nop
 8003bbc:	4f54300a 	.word	0x4f54300a
 8003bc0:	4f54310a 	.word	0x4f54310a

08003bc4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b086      	sub	sp, #24
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	333c      	adds	r3, #60	; 0x3c
 8003bdc:	3304      	adds	r3, #4
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	015a      	lsls	r2, r3, #5
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	4413      	add	r3, r2
 8003bea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	691b      	ldr	r3, [r3, #16]
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d113      	bne.n	8003c22 <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	4a1f      	ldr	r2, [pc, #124]	; (8003c7c <PCD_EP_OutSetupPacket_int+0xb8>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d922      	bls.n	8003c48 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d01d      	beq.n	8003c48 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	015a      	lsls	r2, r3, #5
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	4413      	add	r3, r2
 8003c14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c18:	461a      	mov	r2, r3
 8003c1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c1e:	6093      	str	r3, [r2, #8]
 8003c20:	e012      	b.n	8003c48 <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	4a16      	ldr	r2, [pc, #88]	; (8003c80 <PCD_EP_OutSetupPacket_int+0xbc>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d10e      	bne.n	8003c48 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d009      	beq.n	8003c48 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	015a      	lsls	r2, r3, #5
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	4413      	add	r3, r2
 8003c3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c40:	461a      	mov	r2, r3
 8003c42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c46:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f00f fcd1 	bl	80135f0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	4a0a      	ldr	r2, [pc, #40]	; (8003c7c <PCD_EP_OutSetupPacket_int+0xb8>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d90c      	bls.n	8003c70 <PCD_EP_OutSetupPacket_int+0xac>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	691b      	ldr	r3, [r3, #16]
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d108      	bne.n	8003c70 <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6818      	ldr	r0, [r3, #0]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003c68:	461a      	mov	r2, r3
 8003c6a:	2101      	movs	r1, #1
 8003c6c:	f003 faa6 	bl	80071bc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003c70:	2300      	movs	r3, #0
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3718      	adds	r7, #24
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	4f54300a 	.word	0x4f54300a
 8003c80:	4f54310a 	.word	0x4f54310a

08003c84 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b085      	sub	sp, #20
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	70fb      	strb	r3, [r7, #3]
 8003c90:	4613      	mov	r3, r2
 8003c92:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003c9c:	78fb      	ldrb	r3, [r7, #3]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d107      	bne.n	8003cb2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003ca2:	883b      	ldrh	r3, [r7, #0]
 8003ca4:	0419      	lsls	r1, r3, #16
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	68ba      	ldr	r2, [r7, #8]
 8003cac:	430a      	orrs	r2, r1
 8003cae:	629a      	str	r2, [r3, #40]	; 0x28
 8003cb0:	e028      	b.n	8003d04 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb8:	0c1b      	lsrs	r3, r3, #16
 8003cba:	68ba      	ldr	r2, [r7, #8]
 8003cbc:	4413      	add	r3, r2
 8003cbe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	73fb      	strb	r3, [r7, #15]
 8003cc4:	e00d      	b.n	8003ce2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	7bfb      	ldrb	r3, [r7, #15]
 8003ccc:	3340      	adds	r3, #64	; 0x40
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	4413      	add	r3, r2
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	0c1b      	lsrs	r3, r3, #16
 8003cd6:	68ba      	ldr	r2, [r7, #8]
 8003cd8:	4413      	add	r3, r2
 8003cda:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003cdc:	7bfb      	ldrb	r3, [r7, #15]
 8003cde:	3301      	adds	r3, #1
 8003ce0:	73fb      	strb	r3, [r7, #15]
 8003ce2:	7bfa      	ldrb	r2, [r7, #15]
 8003ce4:	78fb      	ldrb	r3, [r7, #3]
 8003ce6:	3b01      	subs	r3, #1
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d3ec      	bcc.n	8003cc6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003cec:	883b      	ldrh	r3, [r7, #0]
 8003cee:	0418      	lsls	r0, r3, #16
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6819      	ldr	r1, [r3, #0]
 8003cf4:	78fb      	ldrb	r3, [r7, #3]
 8003cf6:	3b01      	subs	r3, #1
 8003cf8:	68ba      	ldr	r2, [r7, #8]
 8003cfa:	4302      	orrs	r2, r0
 8003cfc:	3340      	adds	r3, #64	; 0x40
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	440b      	add	r3, r1
 8003d02:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3714      	adds	r7, #20
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr

08003d12 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003d12:	b480      	push	{r7}
 8003d14:	b083      	sub	sp, #12
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
 8003d1a:	460b      	mov	r3, r1
 8003d1c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	887a      	ldrh	r2, [r7, #2]
 8003d24:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003d26:	2300      	movs	r3, #0
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	370c      	adds	r7, #12
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b085      	sub	sp, #20
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2201      	movs	r2, #1
 8003d46:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	699b      	ldr	r3, [r3, #24]
 8003d56:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d62:	4b05      	ldr	r3, [pc, #20]	; (8003d78 <HAL_PCDEx_ActivateLPM+0x44>)
 8003d64:	4313      	orrs	r3, r2
 8003d66:	68fa      	ldr	r2, [r7, #12]
 8003d68:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003d6a:	2300      	movs	r3, #0
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3714      	adds	r7, #20
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr
 8003d78:	10000003 	.word	0x10000003

08003d7c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	460b      	mov	r3, r1
 8003d86:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003d88:	bf00      	nop
 8003d8a:	370c      	adds	r7, #12
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr

08003d94 <HAL_PWREx_ConfigSupply>:
  *            @arg PWR_EXTERNAL_SOURCE_SUPPLY          The SMPS and the LDO are Bypassed.
  *                                                     The Vcore Power Domains are supplied from external source.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b084      	sub	sp, #16
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  if((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003d9c:	4b28      	ldr	r3, [pc, #160]	; (8003e40 <HAL_PWREx_ConfigSupply+0xac>)
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	f003 0307 	and.w	r3, r3, #7
 8003da4:	2b06      	cmp	r3, #6
 8003da6:	d008      	beq.n	8003dba <HAL_PWREx_ConfigSupply+0x26>
  {
    if((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003da8:	4b25      	ldr	r3, [pc, #148]	; (8003e40 <HAL_PWREx_ConfigSupply+0xac>)
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d001      	beq.n	8003dba <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new regulator config */
      return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e03e      	b.n	8003e38 <HAL_PWREx_ConfigSupply+0xa4>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG(PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003dba:	4b21      	ldr	r3, [pc, #132]	; (8003e40 <HAL_PWREx_ConfigSupply+0xac>)
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003dc2:	491f      	ldr	r1, [pc, #124]	; (8003e40 <HAL_PWREx_ConfigSupply+0xac>)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003dca:	f7fc fd45 	bl	8000858 <HAL_GetTick>
 8003dce:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 8003dd0:	e009      	b.n	8003de6 <HAL_PWREx_ConfigSupply+0x52>
  {
    if((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY_US)
 8003dd2:	f7fc fd41 	bl	8000858 <HAL_GetTick>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003de0:	d901      	bls.n	8003de6 <HAL_PWREx_ConfigSupply+0x52>
    {
      return HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	e028      	b.n	8003e38 <HAL_PWREx_ConfigSupply+0xa4>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 8003de6:	4b16      	ldr	r3, [pc, #88]	; (8003e40 <HAL_PWREx_ConfigSupply+0xac>)
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003dee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003df2:	d1ee      	bne.n	8003dd2 <HAL_PWREx_ConfigSupply+0x3e>
    }
  }

  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2b1e      	cmp	r3, #30
 8003df8:	d008      	beq.n	8003e0c <HAL_PWREx_ConfigSupply+0x78>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2b2e      	cmp	r3, #46	; 0x2e
 8003dfe:	d005      	beq.n	8003e0c <HAL_PWREx_ConfigSupply+0x78>
     (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2b1d      	cmp	r3, #29
 8003e04:	d002      	beq.n	8003e0c <HAL_PWREx_ConfigSupply+0x78>
     (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT) ||
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2b2d      	cmp	r3, #45	; 0x2d
 8003e0a:	d114      	bne.n	8003e36 <HAL_PWREx_ConfigSupply+0xa2>
     (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003e0c:	f7fc fd24 	bl	8000858 <HAL_GetTick>
 8003e10:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while(!__HAL_PWR_GET_FLAG(PWR_FLAG_SMPSEXTRDY))
 8003e12:	e009      	b.n	8003e28 <HAL_PWREx_ConfigSupply+0x94>
    {
      if((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY_US)
 8003e14:	f7fc fd20 	bl	8000858 <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e22:	d901      	bls.n	8003e28 <HAL_PWREx_ConfigSupply+0x94>
      {
        return HAL_TIMEOUT;
 8003e24:	2303      	movs	r3, #3
 8003e26:	e007      	b.n	8003e38 <HAL_PWREx_ConfigSupply+0xa4>
    while(!__HAL_PWR_GET_FLAG(PWR_FLAG_SMPSEXTRDY))
 8003e28:	4b05      	ldr	r3, [pc, #20]	; (8003e40 <HAL_PWREx_ConfigSupply+0xac>)
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e34:	d1ee      	bne.n	8003e14 <HAL_PWREx_ConfigSupply+0x80>
      }
    }
  }

  return HAL_OK;
 8003e36:	2300      	movs	r3, #0
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3710      	adds	r7, #16
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	58024800 	.word	0x58024800

08003e44 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief  Enable the USB voltage level detector.
  * @retval None
  */
void HAL_PWREx_EnableUSBVoltageDetector(void)
{
 8003e44:	b480      	push	{r7}
 8003e46:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT(PWR->CR3, PWR_CR3_USB33DEN);
 8003e48:	4b05      	ldr	r3, [pc, #20]	; (8003e60 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	4a04      	ldr	r2, [pc, #16]	; (8003e60 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003e4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e52:	60d3      	str	r3, [r2, #12]
}
 8003e54:	bf00      	nop
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr
 8003e5e:	bf00      	nop
 8003e60:	58024800 	.word	0x58024800

08003e64 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b08a      	sub	sp, #40	; 0x28
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d101      	bne.n	8003e76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e3a4      	b.n	80045c0 <HAL_RCC_OscConfig+0x75c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0301 	and.w	r3, r3, #1
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	f000 8087 	beq.w	8003f92 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e84:	4b9a      	ldr	r3, [pc, #616]	; (80040f0 <HAL_RCC_OscConfig+0x28c>)
 8003e86:	691b      	ldr	r3, [r3, #16]
 8003e88:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e8c:	627b      	str	r3, [r7, #36]	; 0x24
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003e8e:	4b98      	ldr	r3, [pc, #608]	; (80040f0 <HAL_RCC_OscConfig+0x28c>)
 8003e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e92:	623b      	str	r3, [r7, #32]
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e96:	2b10      	cmp	r3, #16
 8003e98:	d007      	beq.n	8003eaa <HAL_RCC_OscConfig+0x46>
 8003e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9c:	2b18      	cmp	r3, #24
 8003e9e:	d110      	bne.n	8003ec2 <HAL_RCC_OscConfig+0x5e>
 8003ea0:	6a3b      	ldr	r3, [r7, #32]
 8003ea2:	f003 0303 	and.w	r3, r3, #3
 8003ea6:	2b02      	cmp	r3, #2
 8003ea8:	d10b      	bne.n	8003ec2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003eaa:	4b91      	ldr	r3, [pc, #580]	; (80040f0 <HAL_RCC_OscConfig+0x28c>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d06c      	beq.n	8003f90 <HAL_RCC_OscConfig+0x12c>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d168      	bne.n	8003f90 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e37e      	b.n	80045c0 <HAL_RCC_OscConfig+0x75c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003eca:	d106      	bne.n	8003eda <HAL_RCC_OscConfig+0x76>
 8003ecc:	4b88      	ldr	r3, [pc, #544]	; (80040f0 <HAL_RCC_OscConfig+0x28c>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a87      	ldr	r2, [pc, #540]	; (80040f0 <HAL_RCC_OscConfig+0x28c>)
 8003ed2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ed6:	6013      	str	r3, [r2, #0]
 8003ed8:	e02e      	b.n	8003f38 <HAL_RCC_OscConfig+0xd4>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d10c      	bne.n	8003efc <HAL_RCC_OscConfig+0x98>
 8003ee2:	4b83      	ldr	r3, [pc, #524]	; (80040f0 <HAL_RCC_OscConfig+0x28c>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a82      	ldr	r2, [pc, #520]	; (80040f0 <HAL_RCC_OscConfig+0x28c>)
 8003ee8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003eec:	6013      	str	r3, [r2, #0]
 8003eee:	4b80      	ldr	r3, [pc, #512]	; (80040f0 <HAL_RCC_OscConfig+0x28c>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a7f      	ldr	r2, [pc, #508]	; (80040f0 <HAL_RCC_OscConfig+0x28c>)
 8003ef4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ef8:	6013      	str	r3, [r2, #0]
 8003efa:	e01d      	b.n	8003f38 <HAL_RCC_OscConfig+0xd4>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f04:	d10c      	bne.n	8003f20 <HAL_RCC_OscConfig+0xbc>
 8003f06:	4b7a      	ldr	r3, [pc, #488]	; (80040f0 <HAL_RCC_OscConfig+0x28c>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a79      	ldr	r2, [pc, #484]	; (80040f0 <HAL_RCC_OscConfig+0x28c>)
 8003f0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f10:	6013      	str	r3, [r2, #0]
 8003f12:	4b77      	ldr	r3, [pc, #476]	; (80040f0 <HAL_RCC_OscConfig+0x28c>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a76      	ldr	r2, [pc, #472]	; (80040f0 <HAL_RCC_OscConfig+0x28c>)
 8003f18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f1c:	6013      	str	r3, [r2, #0]
 8003f1e:	e00b      	b.n	8003f38 <HAL_RCC_OscConfig+0xd4>
 8003f20:	4b73      	ldr	r3, [pc, #460]	; (80040f0 <HAL_RCC_OscConfig+0x28c>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a72      	ldr	r2, [pc, #456]	; (80040f0 <HAL_RCC_OscConfig+0x28c>)
 8003f26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f2a:	6013      	str	r3, [r2, #0]
 8003f2c:	4b70      	ldr	r3, [pc, #448]	; (80040f0 <HAL_RCC_OscConfig+0x28c>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a6f      	ldr	r2, [pc, #444]	; (80040f0 <HAL_RCC_OscConfig+0x28c>)
 8003f32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d013      	beq.n	8003f68 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f40:	f7fc fc8a 	bl	8000858 <HAL_GetTick>
 8003f44:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003f46:	e008      	b.n	8003f5a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f48:	f7fc fc86 	bl	8000858 <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	69fb      	ldr	r3, [r7, #28]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	2b64      	cmp	r3, #100	; 0x64
 8003f54:	d901      	bls.n	8003f5a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	e332      	b.n	80045c0 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003f5a:	4b65      	ldr	r3, [pc, #404]	; (80040f0 <HAL_RCC_OscConfig+0x28c>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d0f0      	beq.n	8003f48 <HAL_RCC_OscConfig+0xe4>
 8003f66:	e014      	b.n	8003f92 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f68:	f7fc fc76 	bl	8000858 <HAL_GetTick>
 8003f6c:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003f6e:	e008      	b.n	8003f82 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f70:	f7fc fc72 	bl	8000858 <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	69fb      	ldr	r3, [r7, #28]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	2b64      	cmp	r3, #100	; 0x64
 8003f7c:	d901      	bls.n	8003f82 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e31e      	b.n	80045c0 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003f82:	4b5b      	ldr	r3, [pc, #364]	; (80040f0 <HAL_RCC_OscConfig+0x28c>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d1f0      	bne.n	8003f70 <HAL_RCC_OscConfig+0x10c>
 8003f8e:	e000      	b.n	8003f92 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0302 	and.w	r3, r3, #2
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	f000 80b0 	beq.w	8004100 <HAL_RCC_OscConfig+0x29c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fa0:	4b53      	ldr	r3, [pc, #332]	; (80040f0 <HAL_RCC_OscConfig+0x28c>)
 8003fa2:	691b      	ldr	r3, [r3, #16]
 8003fa4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003fa8:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003faa:	4b51      	ldr	r3, [pc, #324]	; (80040f0 <HAL_RCC_OscConfig+0x28c>)
 8003fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fae:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003fb0:	69bb      	ldr	r3, [r7, #24]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d007      	beq.n	8003fc6 <HAL_RCC_OscConfig+0x162>
 8003fb6:	69bb      	ldr	r3, [r7, #24]
 8003fb8:	2b18      	cmp	r3, #24
 8003fba:	d149      	bne.n	8004050 <HAL_RCC_OscConfig+0x1ec>
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	f003 0303 	and.w	r3, r3, #3
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d144      	bne.n	8004050 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003fc6:	4b4a      	ldr	r3, [pc, #296]	; (80040f0 <HAL_RCC_OscConfig+0x28c>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 0304 	and.w	r3, r3, #4
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d005      	beq.n	8003fde <HAL_RCC_OscConfig+0x17a>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d101      	bne.n	8003fde <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e2f0      	b.n	80045c0 <HAL_RCC_OscConfig+0x75c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
      /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003fde:	4b44      	ldr	r3, [pc, #272]	; (80040f0 <HAL_RCC_OscConfig+0x28c>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f023 0219 	bic.w	r2, r3, #25
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	4941      	ldr	r1, [pc, #260]	; (80040f0 <HAL_RCC_OscConfig+0x28c>)
 8003fec:	4313      	orrs	r3, r2
 8003fee:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ff0:	f7fc fc32 	bl	8000858 <HAL_GetTick>
 8003ff4:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ff6:	e008      	b.n	800400a <HAL_RCC_OscConfig+0x1a6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ff8:	f7fc fc2e 	bl	8000858 <HAL_GetTick>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	69fb      	ldr	r3, [r7, #28]
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	2b02      	cmp	r3, #2
 8004004:	d901      	bls.n	800400a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e2da      	b.n	80045c0 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800400a:	4b39      	ldr	r3, [pc, #228]	; (80040f0 <HAL_RCC_OscConfig+0x28c>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0304 	and.w	r3, r3, #4
 8004012:	2b00      	cmp	r3, #0
 8004014:	d0f0      	beq.n	8003ff8 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004016:	f7fc fc4d 	bl	80008b4 <HAL_GetREVID>
 800401a:	4602      	mov	r2, r0
 800401c:	f241 0303 	movw	r3, #4099	; 0x1003
 8004020:	429a      	cmp	r2, r3
 8004022:	d80a      	bhi.n	800403a <HAL_RCC_OscConfig+0x1d6>
 8004024:	4b32      	ldr	r3, [pc, #200]	; (80040f0 <HAL_RCC_OscConfig+0x28c>)
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	691b      	ldr	r3, [r3, #16]
 8004030:	031b      	lsls	r3, r3, #12
 8004032:	492f      	ldr	r1, [pc, #188]	; (80040f0 <HAL_RCC_OscConfig+0x28c>)
 8004034:	4313      	orrs	r3, r2
 8004036:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004038:	e062      	b.n	8004100 <HAL_RCC_OscConfig+0x29c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800403a:	4b2d      	ldr	r3, [pc, #180]	; (80040f0 <HAL_RCC_OscConfig+0x28c>)
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	691b      	ldr	r3, [r3, #16]
 8004046:	061b      	lsls	r3, r3, #24
 8004048:	4929      	ldr	r1, [pc, #164]	; (80040f0 <HAL_RCC_OscConfig+0x28c>)
 800404a:	4313      	orrs	r3, r2
 800404c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800404e:	e057      	b.n	8004100 <HAL_RCC_OscConfig+0x29c>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d038      	beq.n	80040ca <HAL_RCC_OscConfig+0x266>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004058:	4b25      	ldr	r3, [pc, #148]	; (80040f0 <HAL_RCC_OscConfig+0x28c>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f023 0219 	bic.w	r2, r3, #25
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	4922      	ldr	r1, [pc, #136]	; (80040f0 <HAL_RCC_OscConfig+0x28c>)
 8004066:	4313      	orrs	r3, r2
 8004068:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800406a:	f7fc fbf5 	bl	8000858 <HAL_GetTick>
 800406e:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004070:	e008      	b.n	8004084 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004072:	f7fc fbf1 	bl	8000858 <HAL_GetTick>
 8004076:	4602      	mov	r2, r0
 8004078:	69fb      	ldr	r3, [r7, #28]
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	2b02      	cmp	r3, #2
 800407e:	d901      	bls.n	8004084 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8004080:	2303      	movs	r3, #3
 8004082:	e29d      	b.n	80045c0 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004084:	4b1a      	ldr	r3, [pc, #104]	; (80040f0 <HAL_RCC_OscConfig+0x28c>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 0304 	and.w	r3, r3, #4
 800408c:	2b00      	cmp	r3, #0
 800408e:	d0f0      	beq.n	8004072 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004090:	f7fc fc10 	bl	80008b4 <HAL_GetREVID>
 8004094:	4602      	mov	r2, r0
 8004096:	f241 0303 	movw	r3, #4099	; 0x1003
 800409a:	429a      	cmp	r2, r3
 800409c:	d80a      	bhi.n	80040b4 <HAL_RCC_OscConfig+0x250>
 800409e:	4b14      	ldr	r3, [pc, #80]	; (80040f0 <HAL_RCC_OscConfig+0x28c>)
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	691b      	ldr	r3, [r3, #16]
 80040aa:	031b      	lsls	r3, r3, #12
 80040ac:	4910      	ldr	r1, [pc, #64]	; (80040f0 <HAL_RCC_OscConfig+0x28c>)
 80040ae:	4313      	orrs	r3, r2
 80040b0:	604b      	str	r3, [r1, #4]
 80040b2:	e025      	b.n	8004100 <HAL_RCC_OscConfig+0x29c>
 80040b4:	4b0e      	ldr	r3, [pc, #56]	; (80040f0 <HAL_RCC_OscConfig+0x28c>)
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	691b      	ldr	r3, [r3, #16]
 80040c0:	061b      	lsls	r3, r3, #24
 80040c2:	490b      	ldr	r1, [pc, #44]	; (80040f0 <HAL_RCC_OscConfig+0x28c>)
 80040c4:	4313      	orrs	r3, r2
 80040c6:	604b      	str	r3, [r1, #4]
 80040c8:	e01a      	b.n	8004100 <HAL_RCC_OscConfig+0x29c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040ca:	4b09      	ldr	r3, [pc, #36]	; (80040f0 <HAL_RCC_OscConfig+0x28c>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a08      	ldr	r2, [pc, #32]	; (80040f0 <HAL_RCC_OscConfig+0x28c>)
 80040d0:	f023 0301 	bic.w	r3, r3, #1
 80040d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d6:	f7fc fbbf 	bl	8000858 <HAL_GetTick>
 80040da:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80040dc:	e00a      	b.n	80040f4 <HAL_RCC_OscConfig+0x290>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040de:	f7fc fbbb 	bl	8000858 <HAL_GetTick>
 80040e2:	4602      	mov	r2, r0
 80040e4:	69fb      	ldr	r3, [r7, #28]
 80040e6:	1ad3      	subs	r3, r2, r3
 80040e8:	2b02      	cmp	r3, #2
 80040ea:	d903      	bls.n	80040f4 <HAL_RCC_OscConfig+0x290>
          {
            return HAL_TIMEOUT;
 80040ec:	2303      	movs	r3, #3
 80040ee:	e267      	b.n	80045c0 <HAL_RCC_OscConfig+0x75c>
 80040f0:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80040f4:	4ba0      	ldr	r3, [pc, #640]	; (8004378 <HAL_RCC_OscConfig+0x514>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 0304 	and.w	r3, r3, #4
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d1ee      	bne.n	80040de <HAL_RCC_OscConfig+0x27a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0310 	and.w	r3, r3, #16
 8004108:	2b00      	cmp	r3, #0
 800410a:	f000 808f 	beq.w	800422c <HAL_RCC_OscConfig+0x3c8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800410e:	4b9a      	ldr	r3, [pc, #616]	; (8004378 <HAL_RCC_OscConfig+0x514>)
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004116:	613b      	str	r3, [r7, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004118:	4b97      	ldr	r3, [pc, #604]	; (8004378 <HAL_RCC_OscConfig+0x514>)
 800411a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800411c:	60fb      	str	r3, [r7, #12]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	2b08      	cmp	r3, #8
 8004122:	d007      	beq.n	8004134 <HAL_RCC_OscConfig+0x2d0>
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	2b18      	cmp	r3, #24
 8004128:	d12d      	bne.n	8004186 <HAL_RCC_OscConfig+0x322>
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	f003 0303 	and.w	r3, r3, #3
 8004130:	2b01      	cmp	r3, #1
 8004132:	d128      	bne.n	8004186 <HAL_RCC_OscConfig+0x322>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004134:	4b90      	ldr	r3, [pc, #576]	; (8004378 <HAL_RCC_OscConfig+0x514>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800413c:	2b00      	cmp	r3, #0
 800413e:	d005      	beq.n	800414c <HAL_RCC_OscConfig+0x2e8>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	69db      	ldr	r3, [r3, #28]
 8004144:	2b80      	cmp	r3, #128	; 0x80
 8004146:	d001      	beq.n	800414c <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e239      	b.n	80045c0 <HAL_RCC_OscConfig+0x75c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800414c:	f7fc fbb2 	bl	80008b4 <HAL_GetREVID>
 8004150:	4602      	mov	r2, r0
 8004152:	f241 0303 	movw	r3, #4099	; 0x1003
 8004156:	429a      	cmp	r2, r3
 8004158:	d80a      	bhi.n	8004170 <HAL_RCC_OscConfig+0x30c>
 800415a:	4b87      	ldr	r3, [pc, #540]	; (8004378 <HAL_RCC_OscConfig+0x514>)
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6a1b      	ldr	r3, [r3, #32]
 8004166:	069b      	lsls	r3, r3, #26
 8004168:	4983      	ldr	r1, [pc, #524]	; (8004378 <HAL_RCC_OscConfig+0x514>)
 800416a:	4313      	orrs	r3, r2
 800416c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800416e:	e05d      	b.n	800422c <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004170:	4b81      	ldr	r3, [pc, #516]	; (8004378 <HAL_RCC_OscConfig+0x514>)
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6a1b      	ldr	r3, [r3, #32]
 800417c:	061b      	lsls	r3, r3, #24
 800417e:	497e      	ldr	r1, [pc, #504]	; (8004378 <HAL_RCC_OscConfig+0x514>)
 8004180:	4313      	orrs	r3, r2
 8004182:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004184:	e052      	b.n	800422c <HAL_RCC_OscConfig+0x3c8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	69db      	ldr	r3, [r3, #28]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d035      	beq.n	80041fa <HAL_RCC_OscConfig+0x396>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800418e:	4b7a      	ldr	r3, [pc, #488]	; (8004378 <HAL_RCC_OscConfig+0x514>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a79      	ldr	r2, [pc, #484]	; (8004378 <HAL_RCC_OscConfig+0x514>)
 8004194:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004198:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800419a:	f7fc fb5d 	bl	8000858 <HAL_GetTick>
 800419e:	61f8      	str	r0, [r7, #28]

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80041a0:	e008      	b.n	80041b4 <HAL_RCC_OscConfig+0x350>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80041a2:	f7fc fb59 	bl	8000858 <HAL_GetTick>
 80041a6:	4602      	mov	r2, r0
 80041a8:	69fb      	ldr	r3, [r7, #28]
 80041aa:	1ad3      	subs	r3, r2, r3
 80041ac:	2b02      	cmp	r3, #2
 80041ae:	d901      	bls.n	80041b4 <HAL_RCC_OscConfig+0x350>
          {
            return HAL_TIMEOUT;
 80041b0:	2303      	movs	r3, #3
 80041b2:	e205      	b.n	80045c0 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80041b4:	4b70      	ldr	r3, [pc, #448]	; (8004378 <HAL_RCC_OscConfig+0x514>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d0f0      	beq.n	80041a2 <HAL_RCC_OscConfig+0x33e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80041c0:	f7fc fb78 	bl	80008b4 <HAL_GetREVID>
 80041c4:	4602      	mov	r2, r0
 80041c6:	f241 0303 	movw	r3, #4099	; 0x1003
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d80a      	bhi.n	80041e4 <HAL_RCC_OscConfig+0x380>
 80041ce:	4b6a      	ldr	r3, [pc, #424]	; (8004378 <HAL_RCC_OscConfig+0x514>)
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a1b      	ldr	r3, [r3, #32]
 80041da:	069b      	lsls	r3, r3, #26
 80041dc:	4966      	ldr	r1, [pc, #408]	; (8004378 <HAL_RCC_OscConfig+0x514>)
 80041de:	4313      	orrs	r3, r2
 80041e0:	604b      	str	r3, [r1, #4]
 80041e2:	e023      	b.n	800422c <HAL_RCC_OscConfig+0x3c8>
 80041e4:	4b64      	ldr	r3, [pc, #400]	; (8004378 <HAL_RCC_OscConfig+0x514>)
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6a1b      	ldr	r3, [r3, #32]
 80041f0:	061b      	lsls	r3, r3, #24
 80041f2:	4961      	ldr	r1, [pc, #388]	; (8004378 <HAL_RCC_OscConfig+0x514>)
 80041f4:	4313      	orrs	r3, r2
 80041f6:	60cb      	str	r3, [r1, #12]
 80041f8:	e018      	b.n	800422c <HAL_RCC_OscConfig+0x3c8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80041fa:	4b5f      	ldr	r3, [pc, #380]	; (8004378 <HAL_RCC_OscConfig+0x514>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a5e      	ldr	r2, [pc, #376]	; (8004378 <HAL_RCC_OscConfig+0x514>)
 8004200:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004204:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004206:	f7fc fb27 	bl	8000858 <HAL_GetTick>
 800420a:	61f8      	str	r0, [r7, #28]

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800420c:	e008      	b.n	8004220 <HAL_RCC_OscConfig+0x3bc>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800420e:	f7fc fb23 	bl	8000858 <HAL_GetTick>
 8004212:	4602      	mov	r2, r0
 8004214:	69fb      	ldr	r3, [r7, #28]
 8004216:	1ad3      	subs	r3, r2, r3
 8004218:	2b02      	cmp	r3, #2
 800421a:	d901      	bls.n	8004220 <HAL_RCC_OscConfig+0x3bc>
          {
            return HAL_TIMEOUT;
 800421c:	2303      	movs	r3, #3
 800421e:	e1cf      	b.n	80045c0 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004220:	4b55      	ldr	r3, [pc, #340]	; (8004378 <HAL_RCC_OscConfig+0x514>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004228:	2b00      	cmp	r3, #0
 800422a:	d1f0      	bne.n	800420e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 0308 	and.w	r3, r3, #8
 8004234:	2b00      	cmp	r3, #0
 8004236:	d036      	beq.n	80042a6 <HAL_RCC_OscConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	695b      	ldr	r3, [r3, #20]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d019      	beq.n	8004274 <HAL_RCC_OscConfig+0x410>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004240:	4b4d      	ldr	r3, [pc, #308]	; (8004378 <HAL_RCC_OscConfig+0x514>)
 8004242:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004244:	4a4c      	ldr	r2, [pc, #304]	; (8004378 <HAL_RCC_OscConfig+0x514>)
 8004246:	f043 0301 	orr.w	r3, r3, #1
 800424a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800424c:	f7fc fb04 	bl	8000858 <HAL_GetTick>
 8004250:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004252:	e008      	b.n	8004266 <HAL_RCC_OscConfig+0x402>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004254:	f7fc fb00 	bl	8000858 <HAL_GetTick>
 8004258:	4602      	mov	r2, r0
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	2b02      	cmp	r3, #2
 8004260:	d901      	bls.n	8004266 <HAL_RCC_OscConfig+0x402>
        {
          return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e1ac      	b.n	80045c0 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004266:	4b44      	ldr	r3, [pc, #272]	; (8004378 <HAL_RCC_OscConfig+0x514>)
 8004268:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800426a:	f003 0302 	and.w	r3, r3, #2
 800426e:	2b00      	cmp	r3, #0
 8004270:	d0f0      	beq.n	8004254 <HAL_RCC_OscConfig+0x3f0>
 8004272:	e018      	b.n	80042a6 <HAL_RCC_OscConfig+0x442>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004274:	4b40      	ldr	r3, [pc, #256]	; (8004378 <HAL_RCC_OscConfig+0x514>)
 8004276:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004278:	4a3f      	ldr	r2, [pc, #252]	; (8004378 <HAL_RCC_OscConfig+0x514>)
 800427a:	f023 0301 	bic.w	r3, r3, #1
 800427e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004280:	f7fc faea 	bl	8000858 <HAL_GetTick>
 8004284:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004286:	e008      	b.n	800429a <HAL_RCC_OscConfig+0x436>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004288:	f7fc fae6 	bl	8000858 <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	2b02      	cmp	r3, #2
 8004294:	d901      	bls.n	800429a <HAL_RCC_OscConfig+0x436>
        {
          return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e192      	b.n	80045c0 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800429a:	4b37      	ldr	r3, [pc, #220]	; (8004378 <HAL_RCC_OscConfig+0x514>)
 800429c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800429e:	f003 0302 	and.w	r3, r3, #2
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d1f0      	bne.n	8004288 <HAL_RCC_OscConfig+0x424>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0320 	and.w	r3, r3, #32
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d036      	beq.n	8004320 <HAL_RCC_OscConfig+0x4bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	699b      	ldr	r3, [r3, #24]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d019      	beq.n	80042ee <HAL_RCC_OscConfig+0x48a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80042ba:	4b2f      	ldr	r3, [pc, #188]	; (8004378 <HAL_RCC_OscConfig+0x514>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a2e      	ldr	r2, [pc, #184]	; (8004378 <HAL_RCC_OscConfig+0x514>)
 80042c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80042c4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80042c6:	f7fc fac7 	bl	8000858 <HAL_GetTick>
 80042ca:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80042cc:	e008      	b.n	80042e0 <HAL_RCC_OscConfig+0x47c>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80042ce:	f7fc fac3 	bl	8000858 <HAL_GetTick>
 80042d2:	4602      	mov	r2, r0
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	1ad3      	subs	r3, r2, r3
 80042d8:	2b02      	cmp	r3, #2
 80042da:	d901      	bls.n	80042e0 <HAL_RCC_OscConfig+0x47c>
        {
          return HAL_TIMEOUT;
 80042dc:	2303      	movs	r3, #3
 80042de:	e16f      	b.n	80045c0 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80042e0:	4b25      	ldr	r3, [pc, #148]	; (8004378 <HAL_RCC_OscConfig+0x514>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d0f0      	beq.n	80042ce <HAL_RCC_OscConfig+0x46a>
 80042ec:	e018      	b.n	8004320 <HAL_RCC_OscConfig+0x4bc>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80042ee:	4b22      	ldr	r3, [pc, #136]	; (8004378 <HAL_RCC_OscConfig+0x514>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a21      	ldr	r2, [pc, #132]	; (8004378 <HAL_RCC_OscConfig+0x514>)
 80042f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80042f8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80042fa:	f7fc faad 	bl	8000858 <HAL_GetTick>
 80042fe:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004300:	e008      	b.n	8004314 <HAL_RCC_OscConfig+0x4b0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004302:	f7fc faa9 	bl	8000858 <HAL_GetTick>
 8004306:	4602      	mov	r2, r0
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	1ad3      	subs	r3, r2, r3
 800430c:	2b02      	cmp	r3, #2
 800430e:	d901      	bls.n	8004314 <HAL_RCC_OscConfig+0x4b0>
        {
          return HAL_TIMEOUT;
 8004310:	2303      	movs	r3, #3
 8004312:	e155      	b.n	80045c0 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004314:	4b18      	ldr	r3, [pc, #96]	; (8004378 <HAL_RCC_OscConfig+0x514>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800431c:	2b00      	cmp	r3, #0
 800431e:	d1f0      	bne.n	8004302 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 0304 	and.w	r3, r3, #4
 8004328:	2b00      	cmp	r3, #0
 800432a:	f000 8086 	beq.w	800443a <HAL_RCC_OscConfig+0x5d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800432e:	4b13      	ldr	r3, [pc, #76]	; (800437c <HAL_RCC_OscConfig+0x518>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a12      	ldr	r2, [pc, #72]	; (800437c <HAL_RCC_OscConfig+0x518>)
 8004334:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004338:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800433a:	f7fc fa8d 	bl	8000858 <HAL_GetTick>
 800433e:	61f8      	str	r0, [r7, #28]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004340:	e008      	b.n	8004354 <HAL_RCC_OscConfig+0x4f0>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004342:	f7fc fa89 	bl	8000858 <HAL_GetTick>
 8004346:	4602      	mov	r2, r0
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	2b64      	cmp	r3, #100	; 0x64
 800434e:	d901      	bls.n	8004354 <HAL_RCC_OscConfig+0x4f0>
      {
        return HAL_TIMEOUT;
 8004350:	2303      	movs	r3, #3
 8004352:	e135      	b.n	80045c0 <HAL_RCC_OscConfig+0x75c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004354:	4b09      	ldr	r3, [pc, #36]	; (800437c <HAL_RCC_OscConfig+0x518>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800435c:	2b00      	cmp	r3, #0
 800435e:	d0f0      	beq.n	8004342 <HAL_RCC_OscConfig+0x4de>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	2b01      	cmp	r3, #1
 8004366:	d10b      	bne.n	8004380 <HAL_RCC_OscConfig+0x51c>
 8004368:	4b03      	ldr	r3, [pc, #12]	; (8004378 <HAL_RCC_OscConfig+0x514>)
 800436a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800436c:	4a02      	ldr	r2, [pc, #8]	; (8004378 <HAL_RCC_OscConfig+0x514>)
 800436e:	f043 0301 	orr.w	r3, r3, #1
 8004372:	6713      	str	r3, [r2, #112]	; 0x70
 8004374:	e032      	b.n	80043dc <HAL_RCC_OscConfig+0x578>
 8004376:	bf00      	nop
 8004378:	58024400 	.word	0x58024400
 800437c:	58024800 	.word	0x58024800
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d10c      	bne.n	80043a2 <HAL_RCC_OscConfig+0x53e>
 8004388:	4b8f      	ldr	r3, [pc, #572]	; (80045c8 <HAL_RCC_OscConfig+0x764>)
 800438a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800438c:	4a8e      	ldr	r2, [pc, #568]	; (80045c8 <HAL_RCC_OscConfig+0x764>)
 800438e:	f023 0301 	bic.w	r3, r3, #1
 8004392:	6713      	str	r3, [r2, #112]	; 0x70
 8004394:	4b8c      	ldr	r3, [pc, #560]	; (80045c8 <HAL_RCC_OscConfig+0x764>)
 8004396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004398:	4a8b      	ldr	r2, [pc, #556]	; (80045c8 <HAL_RCC_OscConfig+0x764>)
 800439a:	f023 0304 	bic.w	r3, r3, #4
 800439e:	6713      	str	r3, [r2, #112]	; 0x70
 80043a0:	e01c      	b.n	80043dc <HAL_RCC_OscConfig+0x578>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	2b05      	cmp	r3, #5
 80043a8:	d10c      	bne.n	80043c4 <HAL_RCC_OscConfig+0x560>
 80043aa:	4b87      	ldr	r3, [pc, #540]	; (80045c8 <HAL_RCC_OscConfig+0x764>)
 80043ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ae:	4a86      	ldr	r2, [pc, #536]	; (80045c8 <HAL_RCC_OscConfig+0x764>)
 80043b0:	f043 0304 	orr.w	r3, r3, #4
 80043b4:	6713      	str	r3, [r2, #112]	; 0x70
 80043b6:	4b84      	ldr	r3, [pc, #528]	; (80045c8 <HAL_RCC_OscConfig+0x764>)
 80043b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ba:	4a83      	ldr	r2, [pc, #524]	; (80045c8 <HAL_RCC_OscConfig+0x764>)
 80043bc:	f043 0301 	orr.w	r3, r3, #1
 80043c0:	6713      	str	r3, [r2, #112]	; 0x70
 80043c2:	e00b      	b.n	80043dc <HAL_RCC_OscConfig+0x578>
 80043c4:	4b80      	ldr	r3, [pc, #512]	; (80045c8 <HAL_RCC_OscConfig+0x764>)
 80043c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043c8:	4a7f      	ldr	r2, [pc, #508]	; (80045c8 <HAL_RCC_OscConfig+0x764>)
 80043ca:	f023 0301 	bic.w	r3, r3, #1
 80043ce:	6713      	str	r3, [r2, #112]	; 0x70
 80043d0:	4b7d      	ldr	r3, [pc, #500]	; (80045c8 <HAL_RCC_OscConfig+0x764>)
 80043d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043d4:	4a7c      	ldr	r2, [pc, #496]	; (80045c8 <HAL_RCC_OscConfig+0x764>)
 80043d6:	f023 0304 	bic.w	r3, r3, #4
 80043da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d015      	beq.n	8004410 <HAL_RCC_OscConfig+0x5ac>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043e4:	f7fc fa38 	bl	8000858 <HAL_GetTick>
 80043e8:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80043ea:	e00a      	b.n	8004402 <HAL_RCC_OscConfig+0x59e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043ec:	f7fc fa34 	bl	8000858 <HAL_GetTick>
 80043f0:	4602      	mov	r2, r0
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d901      	bls.n	8004402 <HAL_RCC_OscConfig+0x59e>
        {
          return HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	e0de      	b.n	80045c0 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004402:	4b71      	ldr	r3, [pc, #452]	; (80045c8 <HAL_RCC_OscConfig+0x764>)
 8004404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004406:	f003 0302 	and.w	r3, r3, #2
 800440a:	2b00      	cmp	r3, #0
 800440c:	d0ee      	beq.n	80043ec <HAL_RCC_OscConfig+0x588>
 800440e:	e014      	b.n	800443a <HAL_RCC_OscConfig+0x5d6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004410:	f7fc fa22 	bl	8000858 <HAL_GetTick>
 8004414:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004416:	e00a      	b.n	800442e <HAL_RCC_OscConfig+0x5ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004418:	f7fc fa1e 	bl	8000858 <HAL_GetTick>
 800441c:	4602      	mov	r2, r0
 800441e:	69fb      	ldr	r3, [r7, #28]
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	f241 3288 	movw	r2, #5000	; 0x1388
 8004426:	4293      	cmp	r3, r2
 8004428:	d901      	bls.n	800442e <HAL_RCC_OscConfig+0x5ca>
        {
          return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e0c8      	b.n	80045c0 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800442e:	4b66      	ldr	r3, [pc, #408]	; (80045c8 <HAL_RCC_OscConfig+0x764>)
 8004430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004432:	f003 0302 	and.w	r3, r3, #2
 8004436:	2b00      	cmp	r3, #0
 8004438:	d1ee      	bne.n	8004418 <HAL_RCC_OscConfig+0x5b4>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443e:	2b00      	cmp	r3, #0
 8004440:	f000 80bd 	beq.w	80045be <HAL_RCC_OscConfig+0x75a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004444:	4b60      	ldr	r3, [pc, #384]	; (80045c8 <HAL_RCC_OscConfig+0x764>)
 8004446:	691b      	ldr	r3, [r3, #16]
 8004448:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800444c:	2b18      	cmp	r3, #24
 800444e:	f000 80b4 	beq.w	80045ba <HAL_RCC_OscConfig+0x756>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004456:	2b02      	cmp	r3, #2
 8004458:	f040 8095 	bne.w	8004586 <HAL_RCC_OscConfig+0x722>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800445c:	4b5a      	ldr	r3, [pc, #360]	; (80045c8 <HAL_RCC_OscConfig+0x764>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a59      	ldr	r2, [pc, #356]	; (80045c8 <HAL_RCC_OscConfig+0x764>)
 8004462:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004466:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004468:	f7fc f9f6 	bl	8000858 <HAL_GetTick>
 800446c:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800446e:	e008      	b.n	8004482 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004470:	f7fc f9f2 	bl	8000858 <HAL_GetTick>
 8004474:	4602      	mov	r2, r0
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	2b02      	cmp	r3, #2
 800447c:	d901      	bls.n	8004482 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 800447e:	2303      	movs	r3, #3
 8004480:	e09e      	b.n	80045c0 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004482:	4b51      	ldr	r3, [pc, #324]	; (80045c8 <HAL_RCC_OscConfig+0x764>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800448a:	2b00      	cmp	r3, #0
 800448c:	d1f0      	bne.n	8004470 <HAL_RCC_OscConfig+0x60c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800448e:	4b4e      	ldr	r3, [pc, #312]	; (80045c8 <HAL_RCC_OscConfig+0x764>)
 8004490:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004492:	4b4e      	ldr	r3, [pc, #312]	; (80045cc <HAL_RCC_OscConfig+0x768>)
 8004494:	4013      	ands	r3, r2
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800449e:	0112      	lsls	r2, r2, #4
 80044a0:	430a      	orrs	r2, r1
 80044a2:	4949      	ldr	r1, [pc, #292]	; (80045c8 <HAL_RCC_OscConfig+0x764>)
 80044a4:	4313      	orrs	r3, r2
 80044a6:	628b      	str	r3, [r1, #40]	; 0x28
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ac:	3b01      	subs	r3, #1
 80044ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044b6:	3b01      	subs	r3, #1
 80044b8:	025b      	lsls	r3, r3, #9
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	431a      	orrs	r2, r3
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c2:	3b01      	subs	r3, #1
 80044c4:	041b      	lsls	r3, r3, #16
 80044c6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80044ca:	431a      	orrs	r2, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044d0:	3b01      	subs	r3, #1
 80044d2:	061b      	lsls	r3, r3, #24
 80044d4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80044d8:	493b      	ldr	r1, [pc, #236]	; (80045c8 <HAL_RCC_OscConfig+0x764>)
 80044da:	4313      	orrs	r3, r2
 80044dc:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80044de:	4b3a      	ldr	r3, [pc, #232]	; (80045c8 <HAL_RCC_OscConfig+0x764>)
 80044e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e2:	4a39      	ldr	r2, [pc, #228]	; (80045c8 <HAL_RCC_OscConfig+0x764>)
 80044e4:	f023 0301 	bic.w	r3, r3, #1
 80044e8:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL  PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80044ea:	4b37      	ldr	r3, [pc, #220]	; (80045c8 <HAL_RCC_OscConfig+0x764>)
 80044ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044ee:	4b38      	ldr	r3, [pc, #224]	; (80045d0 <HAL_RCC_OscConfig+0x76c>)
 80044f0:	4013      	ands	r3, r2
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80044f6:	00d2      	lsls	r2, r2, #3
 80044f8:	4933      	ldr	r1, [pc, #204]	; (80045c8 <HAL_RCC_OscConfig+0x764>)
 80044fa:	4313      	orrs	r3, r2
 80044fc:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80044fe:	4b32      	ldr	r3, [pc, #200]	; (80045c8 <HAL_RCC_OscConfig+0x764>)
 8004500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004502:	f023 020c 	bic.w	r2, r3, #12
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450a:	492f      	ldr	r1, [pc, #188]	; (80045c8 <HAL_RCC_OscConfig+0x764>)
 800450c:	4313      	orrs	r3, r2
 800450e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004510:	4b2d      	ldr	r3, [pc, #180]	; (80045c8 <HAL_RCC_OscConfig+0x764>)
 8004512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004514:	f023 0202 	bic.w	r2, r3, #2
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800451c:	492a      	ldr	r1, [pc, #168]	; (80045c8 <HAL_RCC_OscConfig+0x764>)
 800451e:	4313      	orrs	r3, r2
 8004520:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004522:	4b29      	ldr	r3, [pc, #164]	; (80045c8 <HAL_RCC_OscConfig+0x764>)
 8004524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004526:	4a28      	ldr	r2, [pc, #160]	; (80045c8 <HAL_RCC_OscConfig+0x764>)
 8004528:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800452c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800452e:	4b26      	ldr	r3, [pc, #152]	; (80045c8 <HAL_RCC_OscConfig+0x764>)
 8004530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004532:	4a25      	ldr	r2, [pc, #148]	; (80045c8 <HAL_RCC_OscConfig+0x764>)
 8004534:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004538:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800453a:	4b23      	ldr	r3, [pc, #140]	; (80045c8 <HAL_RCC_OscConfig+0x764>)
 800453c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800453e:	4a22      	ldr	r2, [pc, #136]	; (80045c8 <HAL_RCC_OscConfig+0x764>)
 8004540:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004544:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004546:	4b20      	ldr	r3, [pc, #128]	; (80045c8 <HAL_RCC_OscConfig+0x764>)
 8004548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800454a:	4a1f      	ldr	r2, [pc, #124]	; (80045c8 <HAL_RCC_OscConfig+0x764>)
 800454c:	f043 0301 	orr.w	r3, r3, #1
 8004550:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004552:	4b1d      	ldr	r3, [pc, #116]	; (80045c8 <HAL_RCC_OscConfig+0x764>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a1c      	ldr	r2, [pc, #112]	; (80045c8 <HAL_RCC_OscConfig+0x764>)
 8004558:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800455c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800455e:	f7fc f97b 	bl	8000858 <HAL_GetTick>
 8004562:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004564:	e008      	b.n	8004578 <HAL_RCC_OscConfig+0x714>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004566:	f7fc f977 	bl	8000858 <HAL_GetTick>
 800456a:	4602      	mov	r2, r0
 800456c:	69fb      	ldr	r3, [r7, #28]
 800456e:	1ad3      	subs	r3, r2, r3
 8004570:	2b02      	cmp	r3, #2
 8004572:	d901      	bls.n	8004578 <HAL_RCC_OscConfig+0x714>
          {
            return HAL_TIMEOUT;
 8004574:	2303      	movs	r3, #3
 8004576:	e023      	b.n	80045c0 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004578:	4b13      	ldr	r3, [pc, #76]	; (80045c8 <HAL_RCC_OscConfig+0x764>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004580:	2b00      	cmp	r3, #0
 8004582:	d0f0      	beq.n	8004566 <HAL_RCC_OscConfig+0x702>
 8004584:	e01b      	b.n	80045be <HAL_RCC_OscConfig+0x75a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004586:	4b10      	ldr	r3, [pc, #64]	; (80045c8 <HAL_RCC_OscConfig+0x764>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a0f      	ldr	r2, [pc, #60]	; (80045c8 <HAL_RCC_OscConfig+0x764>)
 800458c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004590:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004592:	f7fc f961 	bl	8000858 <HAL_GetTick>
 8004596:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004598:	e008      	b.n	80045ac <HAL_RCC_OscConfig+0x748>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800459a:	f7fc f95d 	bl	8000858 <HAL_GetTick>
 800459e:	4602      	mov	r2, r0
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	2b02      	cmp	r3, #2
 80045a6:	d901      	bls.n	80045ac <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 80045a8:	2303      	movs	r3, #3
 80045aa:	e009      	b.n	80045c0 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80045ac:	4b06      	ldr	r3, [pc, #24]	; (80045c8 <HAL_RCC_OscConfig+0x764>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d1f0      	bne.n	800459a <HAL_RCC_OscConfig+0x736>
 80045b8:	e001      	b.n	80045be <HAL_RCC_OscConfig+0x75a>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e000      	b.n	80045c0 <HAL_RCC_OscConfig+0x75c>
    }
  }
  return HAL_OK;
 80045be:	2300      	movs	r3, #0
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3728      	adds	r7, #40	; 0x28
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	58024400 	.word	0x58024400
 80045cc:	fffffc0c 	.word	0xfffffc0c
 80045d0:	ffff0007 	.word	0xffff0007

080045d4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b084      	sub	sp, #16
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d101      	bne.n	80045e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	e18d      	b.n	8004904 <HAL_RCC_ClockConfig+0x330>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045e8:	4b8a      	ldr	r3, [pc, #552]	; (8004814 <HAL_RCC_ClockConfig+0x240>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 030f 	and.w	r3, r3, #15
 80045f0:	683a      	ldr	r2, [r7, #0]
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d910      	bls.n	8004618 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045f6:	4b87      	ldr	r3, [pc, #540]	; (8004814 <HAL_RCC_ClockConfig+0x240>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f023 020f 	bic.w	r2, r3, #15
 80045fe:	4985      	ldr	r1, [pc, #532]	; (8004814 <HAL_RCC_ClockConfig+0x240>)
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	4313      	orrs	r3, r2
 8004604:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004606:	4b83      	ldr	r3, [pc, #524]	; (8004814 <HAL_RCC_ClockConfig+0x240>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 030f 	and.w	r3, r3, #15
 800460e:	683a      	ldr	r2, [r7, #0]
 8004610:	429a      	cmp	r2, r3
 8004612:	d001      	beq.n	8004618 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	e175      	b.n	8004904 <HAL_RCC_ClockConfig+0x330>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 0304 	and.w	r3, r3, #4
 8004620:	2b00      	cmp	r3, #0
 8004622:	d010      	beq.n	8004646 <HAL_RCC_ClockConfig+0x72>
  {
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	691a      	ldr	r2, [r3, #16]
 8004628:	4b7b      	ldr	r3, [pc, #492]	; (8004818 <HAL_RCC_ClockConfig+0x244>)
 800462a:	699b      	ldr	r3, [r3, #24]
 800462c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004630:	429a      	cmp	r2, r3
 8004632:	d908      	bls.n	8004646 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004634:	4b78      	ldr	r3, [pc, #480]	; (8004818 <HAL_RCC_ClockConfig+0x244>)
 8004636:	699b      	ldr	r3, [r3, #24]
 8004638:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	691b      	ldr	r3, [r3, #16]
 8004640:	4975      	ldr	r1, [pc, #468]	; (8004818 <HAL_RCC_ClockConfig+0x244>)
 8004642:	4313      	orrs	r3, r2
 8004644:	618b      	str	r3, [r1, #24]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 0308 	and.w	r3, r3, #8
 800464e:	2b00      	cmp	r3, #0
 8004650:	d010      	beq.n	8004674 <HAL_RCC_ClockConfig+0xa0>
  {
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	695a      	ldr	r2, [r3, #20]
 8004656:	4b70      	ldr	r3, [pc, #448]	; (8004818 <HAL_RCC_ClockConfig+0x244>)
 8004658:	69db      	ldr	r3, [r3, #28]
 800465a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800465e:	429a      	cmp	r2, r3
 8004660:	d908      	bls.n	8004674 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004662:	4b6d      	ldr	r3, [pc, #436]	; (8004818 <HAL_RCC_ClockConfig+0x244>)
 8004664:	69db      	ldr	r3, [r3, #28]
 8004666:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	695b      	ldr	r3, [r3, #20]
 800466e:	496a      	ldr	r1, [pc, #424]	; (8004818 <HAL_RCC_ClockConfig+0x244>)
 8004670:	4313      	orrs	r3, r2
 8004672:	61cb      	str	r3, [r1, #28]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 0310 	and.w	r3, r3, #16
 800467c:	2b00      	cmp	r3, #0
 800467e:	d010      	beq.n	80046a2 <HAL_RCC_ClockConfig+0xce>
  {
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	699a      	ldr	r2, [r3, #24]
 8004684:	4b64      	ldr	r3, [pc, #400]	; (8004818 <HAL_RCC_ClockConfig+0x244>)
 8004686:	69db      	ldr	r3, [r3, #28]
 8004688:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800468c:	429a      	cmp	r2, r3
 800468e:	d908      	bls.n	80046a2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004690:	4b61      	ldr	r3, [pc, #388]	; (8004818 <HAL_RCC_ClockConfig+0x244>)
 8004692:	69db      	ldr	r3, [r3, #28]
 8004694:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	699b      	ldr	r3, [r3, #24]
 800469c:	495e      	ldr	r1, [pc, #376]	; (8004818 <HAL_RCC_ClockConfig+0x244>)
 800469e:	4313      	orrs	r3, r2
 80046a0:	61cb      	str	r3, [r1, #28]
    }
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 0320 	and.w	r3, r3, #32
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d010      	beq.n	80046d0 <HAL_RCC_ClockConfig+0xfc>
  {
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	69da      	ldr	r2, [r3, #28]
 80046b2:	4b59      	ldr	r3, [pc, #356]	; (8004818 <HAL_RCC_ClockConfig+0x244>)
 80046b4:	6a1b      	ldr	r3, [r3, #32]
 80046b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d908      	bls.n	80046d0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80046be:	4b56      	ldr	r3, [pc, #344]	; (8004818 <HAL_RCC_ClockConfig+0x244>)
 80046c0:	6a1b      	ldr	r3, [r3, #32]
 80046c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	69db      	ldr	r3, [r3, #28]
 80046ca:	4953      	ldr	r1, [pc, #332]	; (8004818 <HAL_RCC_ClockConfig+0x244>)
 80046cc:	4313      	orrs	r3, r2
 80046ce:	620b      	str	r3, [r1, #32]
    }
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0302 	and.w	r3, r3, #2
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d010      	beq.n	80046fe <HAL_RCC_ClockConfig+0x12a>
  {
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	68da      	ldr	r2, [r3, #12]
 80046e0:	4b4d      	ldr	r3, [pc, #308]	; (8004818 <HAL_RCC_ClockConfig+0x244>)
 80046e2:	699b      	ldr	r3, [r3, #24]
 80046e4:	f003 030f 	and.w	r3, r3, #15
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d908      	bls.n	80046fe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046ec:	4b4a      	ldr	r3, [pc, #296]	; (8004818 <HAL_RCC_ClockConfig+0x244>)
 80046ee:	699b      	ldr	r3, [r3, #24]
 80046f0:	f023 020f 	bic.w	r2, r3, #15
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	68db      	ldr	r3, [r3, #12]
 80046f8:	4947      	ldr	r1, [pc, #284]	; (8004818 <HAL_RCC_ClockConfig+0x244>)
 80046fa:	4313      	orrs	r3, r2
 80046fc:	618b      	str	r3, [r1, #24]
    }
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 0301 	and.w	r3, r3, #1
 8004706:	2b00      	cmp	r3, #0
 8004708:	d055      	beq.n	80047b6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800470a:	4b43      	ldr	r3, [pc, #268]	; (8004818 <HAL_RCC_ClockConfig+0x244>)
 800470c:	699b      	ldr	r3, [r3, #24]
 800470e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	4940      	ldr	r1, [pc, #256]	; (8004818 <HAL_RCC_ClockConfig+0x244>)
 8004718:	4313      	orrs	r3, r2
 800471a:	618b      	str	r3, [r1, #24]
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	2b02      	cmp	r3, #2
 8004722:	d107      	bne.n	8004734 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004724:	4b3c      	ldr	r3, [pc, #240]	; (8004818 <HAL_RCC_ClockConfig+0x244>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800472c:	2b00      	cmp	r3, #0
 800472e:	d121      	bne.n	8004774 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	e0e7      	b.n	8004904 <HAL_RCC_ClockConfig+0x330>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	2b03      	cmp	r3, #3
 800473a:	d107      	bne.n	800474c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800473c:	4b36      	ldr	r3, [pc, #216]	; (8004818 <HAL_RCC_ClockConfig+0x244>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004744:	2b00      	cmp	r3, #0
 8004746:	d115      	bne.n	8004774 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e0db      	b.n	8004904 <HAL_RCC_ClockConfig+0x330>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	2b01      	cmp	r3, #1
 8004752:	d107      	bne.n	8004764 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004754:	4b30      	ldr	r3, [pc, #192]	; (8004818 <HAL_RCC_ClockConfig+0x244>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800475c:	2b00      	cmp	r3, #0
 800475e:	d109      	bne.n	8004774 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	e0cf      	b.n	8004904 <HAL_RCC_ClockConfig+0x330>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004764:	4b2c      	ldr	r3, [pc, #176]	; (8004818 <HAL_RCC_ClockConfig+0x244>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f003 0304 	and.w	r3, r3, #4
 800476c:	2b00      	cmp	r3, #0
 800476e:	d101      	bne.n	8004774 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	e0c7      	b.n	8004904 <HAL_RCC_ClockConfig+0x330>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004774:	4b28      	ldr	r3, [pc, #160]	; (8004818 <HAL_RCC_ClockConfig+0x244>)
 8004776:	691b      	ldr	r3, [r3, #16]
 8004778:	f023 0207 	bic.w	r2, r3, #7
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	4925      	ldr	r1, [pc, #148]	; (8004818 <HAL_RCC_ClockConfig+0x244>)
 8004782:	4313      	orrs	r3, r2
 8004784:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004786:	f7fc f867 	bl	8000858 <HAL_GetTick>
 800478a:	60f8      	str	r0, [r7, #12]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800478c:	e00a      	b.n	80047a4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800478e:	f7fc f863 	bl	8000858 <HAL_GetTick>
 8004792:	4602      	mov	r2, r0
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	1ad3      	subs	r3, r2, r3
 8004798:	f241 3288 	movw	r2, #5000	; 0x1388
 800479c:	4293      	cmp	r3, r2
 800479e:	d901      	bls.n	80047a4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80047a0:	2303      	movs	r3, #3
 80047a2:	e0af      	b.n	8004904 <HAL_RCC_ClockConfig+0x330>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047a4:	4b1c      	ldr	r3, [pc, #112]	; (8004818 <HAL_RCC_ClockConfig+0x244>)
 80047a6:	691b      	ldr	r3, [r3, #16]
 80047a8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	00db      	lsls	r3, r3, #3
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d1eb      	bne.n	800478e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 0302 	and.w	r3, r3, #2
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d010      	beq.n	80047e4 <HAL_RCC_ClockConfig+0x210>
  {
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	68da      	ldr	r2, [r3, #12]
 80047c6:	4b14      	ldr	r3, [pc, #80]	; (8004818 <HAL_RCC_ClockConfig+0x244>)
 80047c8:	699b      	ldr	r3, [r3, #24]
 80047ca:	f003 030f 	and.w	r3, r3, #15
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d208      	bcs.n	80047e4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047d2:	4b11      	ldr	r3, [pc, #68]	; (8004818 <HAL_RCC_ClockConfig+0x244>)
 80047d4:	699b      	ldr	r3, [r3, #24]
 80047d6:	f023 020f 	bic.w	r2, r3, #15
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	68db      	ldr	r3, [r3, #12]
 80047de:	490e      	ldr	r1, [pc, #56]	; (8004818 <HAL_RCC_ClockConfig+0x244>)
 80047e0:	4313      	orrs	r3, r2
 80047e2:	618b      	str	r3, [r1, #24]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80047e4:	4b0b      	ldr	r3, [pc, #44]	; (8004814 <HAL_RCC_ClockConfig+0x240>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 030f 	and.w	r3, r3, #15
 80047ec:	683a      	ldr	r2, [r7, #0]
 80047ee:	429a      	cmp	r2, r3
 80047f0:	d214      	bcs.n	800481c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047f2:	4b08      	ldr	r3, [pc, #32]	; (8004814 <HAL_RCC_ClockConfig+0x240>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f023 020f 	bic.w	r2, r3, #15
 80047fa:	4906      	ldr	r1, [pc, #24]	; (8004814 <HAL_RCC_ClockConfig+0x240>)
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	4313      	orrs	r3, r2
 8004800:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004802:	4b04      	ldr	r3, [pc, #16]	; (8004814 <HAL_RCC_ClockConfig+0x240>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 030f 	and.w	r3, r3, #15
 800480a:	683a      	ldr	r2, [r7, #0]
 800480c:	429a      	cmp	r2, r3
 800480e:	d005      	beq.n	800481c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	e077      	b.n	8004904 <HAL_RCC_ClockConfig+0x330>
 8004814:	52002000 	.word	0x52002000
 8004818:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0304 	and.w	r3, r3, #4
 8004824:	2b00      	cmp	r3, #0
 8004826:	d010      	beq.n	800484a <HAL_RCC_ClockConfig+0x276>
 {
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	691a      	ldr	r2, [r3, #16]
 800482c:	4b37      	ldr	r3, [pc, #220]	; (800490c <HAL_RCC_ClockConfig+0x338>)
 800482e:	699b      	ldr	r3, [r3, #24]
 8004830:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004834:	429a      	cmp	r2, r3
 8004836:	d208      	bcs.n	800484a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004838:	4b34      	ldr	r3, [pc, #208]	; (800490c <HAL_RCC_ClockConfig+0x338>)
 800483a:	699b      	ldr	r3, [r3, #24]
 800483c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	691b      	ldr	r3, [r3, #16]
 8004844:	4931      	ldr	r1, [pc, #196]	; (800490c <HAL_RCC_ClockConfig+0x338>)
 8004846:	4313      	orrs	r3, r2
 8004848:	618b      	str	r3, [r1, #24]
   }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 0308 	and.w	r3, r3, #8
 8004852:	2b00      	cmp	r3, #0
 8004854:	d010      	beq.n	8004878 <HAL_RCC_ClockConfig+0x2a4>
 {
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	695a      	ldr	r2, [r3, #20]
 800485a:	4b2c      	ldr	r3, [pc, #176]	; (800490c <HAL_RCC_ClockConfig+0x338>)
 800485c:	69db      	ldr	r3, [r3, #28]
 800485e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004862:	429a      	cmp	r2, r3
 8004864:	d208      	bcs.n	8004878 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004866:	4b29      	ldr	r3, [pc, #164]	; (800490c <HAL_RCC_ClockConfig+0x338>)
 8004868:	69db      	ldr	r3, [r3, #28]
 800486a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	695b      	ldr	r3, [r3, #20]
 8004872:	4926      	ldr	r1, [pc, #152]	; (800490c <HAL_RCC_ClockConfig+0x338>)
 8004874:	4313      	orrs	r3, r2
 8004876:	61cb      	str	r3, [r1, #28]
   }
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 0310 	and.w	r3, r3, #16
 8004880:	2b00      	cmp	r3, #0
 8004882:	d010      	beq.n	80048a6 <HAL_RCC_ClockConfig+0x2d2>
 {
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	699a      	ldr	r2, [r3, #24]
 8004888:	4b20      	ldr	r3, [pc, #128]	; (800490c <HAL_RCC_ClockConfig+0x338>)
 800488a:	69db      	ldr	r3, [r3, #28]
 800488c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004890:	429a      	cmp	r2, r3
 8004892:	d208      	bcs.n	80048a6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004894:	4b1d      	ldr	r3, [pc, #116]	; (800490c <HAL_RCC_ClockConfig+0x338>)
 8004896:	69db      	ldr	r3, [r3, #28]
 8004898:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	699b      	ldr	r3, [r3, #24]
 80048a0:	491a      	ldr	r1, [pc, #104]	; (800490c <HAL_RCC_ClockConfig+0x338>)
 80048a2:	4313      	orrs	r3, r2
 80048a4:	61cb      	str	r3, [r1, #28]
   }
 }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 0320 	and.w	r3, r3, #32
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d010      	beq.n	80048d4 <HAL_RCC_ClockConfig+0x300>
 {
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	69da      	ldr	r2, [r3, #28]
 80048b6:	4b15      	ldr	r3, [pc, #84]	; (800490c <HAL_RCC_ClockConfig+0x338>)
 80048b8:	6a1b      	ldr	r3, [r3, #32]
 80048ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80048be:	429a      	cmp	r2, r3
 80048c0:	d208      	bcs.n	80048d4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80048c2:	4b12      	ldr	r3, [pc, #72]	; (800490c <HAL_RCC_ClockConfig+0x338>)
 80048c4:	6a1b      	ldr	r3, [r3, #32]
 80048c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	69db      	ldr	r3, [r3, #28]
 80048ce:	490f      	ldr	r1, [pc, #60]	; (800490c <HAL_RCC_ClockConfig+0x338>)
 80048d0:	4313      	orrs	r3, r2
 80048d2:	620b      	str	r3, [r1, #32]
   }
 }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80048d4:	f000 f822 	bl	800491c <HAL_RCC_GetSysClockFreq>
 80048d8:	4601      	mov	r1, r0
 80048da:	4b0c      	ldr	r3, [pc, #48]	; (800490c <HAL_RCC_ClockConfig+0x338>)
 80048dc:	699b      	ldr	r3, [r3, #24]
 80048de:	0a1b      	lsrs	r3, r3, #8
 80048e0:	f003 030f 	and.w	r3, r3, #15
 80048e4:	4a0a      	ldr	r2, [pc, #40]	; (8004910 <HAL_RCC_ClockConfig+0x33c>)
 80048e6:	5cd3      	ldrb	r3, [r2, r3]
 80048e8:	f003 031f 	and.w	r3, r3, #31
 80048ec:	fa21 f303 	lsr.w	r3, r1, r3
 80048f0:	4a08      	ldr	r2, [pc, #32]	; (8004914 <HAL_RCC_ClockConfig+0x340>)
 80048f2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80048f4:	4b08      	ldr	r3, [pc, #32]	; (8004918 <HAL_RCC_ClockConfig+0x344>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4618      	mov	r0, r3
 80048fa:	f7fb ff49 	bl	8000790 <HAL_InitTick>
 80048fe:	4603      	mov	r3, r0
 8004900:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8004902:	7afb      	ldrb	r3, [r7, #11]
}
 8004904:	4618      	mov	r0, r3
 8004906:	3710      	adds	r7, #16
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}
 800490c:	58024400 	.word	0x58024400
 8004910:	08016d68 	.word	0x08016d68
 8004914:	20000000 	.word	0x20000000
 8004918:	20000008 	.word	0x20000008

0800491c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800491c:	b480      	push	{r7}
 800491e:	b089      	sub	sp, #36	; 0x24
 8004920:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004922:	4baf      	ldr	r3, [pc, #700]	; (8004be0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800492a:	2b18      	cmp	r3, #24
 800492c:	f200 814e 	bhi.w	8004bcc <HAL_RCC_GetSysClockFreq+0x2b0>
 8004930:	a201      	add	r2, pc, #4	; (adr r2, 8004938 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004936:	bf00      	nop
 8004938:	0800499d 	.word	0x0800499d
 800493c:	08004bcd 	.word	0x08004bcd
 8004940:	08004bcd 	.word	0x08004bcd
 8004944:	08004bcd 	.word	0x08004bcd
 8004948:	08004bcd 	.word	0x08004bcd
 800494c:	08004bcd 	.word	0x08004bcd
 8004950:	08004bcd 	.word	0x08004bcd
 8004954:	08004bcd 	.word	0x08004bcd
 8004958:	080049c3 	.word	0x080049c3
 800495c:	08004bcd 	.word	0x08004bcd
 8004960:	08004bcd 	.word	0x08004bcd
 8004964:	08004bcd 	.word	0x08004bcd
 8004968:	08004bcd 	.word	0x08004bcd
 800496c:	08004bcd 	.word	0x08004bcd
 8004970:	08004bcd 	.word	0x08004bcd
 8004974:	08004bcd 	.word	0x08004bcd
 8004978:	080049c9 	.word	0x080049c9
 800497c:	08004bcd 	.word	0x08004bcd
 8004980:	08004bcd 	.word	0x08004bcd
 8004984:	08004bcd 	.word	0x08004bcd
 8004988:	08004bcd 	.word	0x08004bcd
 800498c:	08004bcd 	.word	0x08004bcd
 8004990:	08004bcd 	.word	0x08004bcd
 8004994:	08004bcd 	.word	0x08004bcd
 8004998:	080049cf 	.word	0x080049cf
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800499c:	4b90      	ldr	r3, [pc, #576]	; (8004be0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 0320 	and.w	r3, r3, #32
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d009      	beq.n	80049bc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80049a8:	4b8d      	ldr	r3, [pc, #564]	; (8004be0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	08db      	lsrs	r3, r3, #3
 80049ae:	f003 0303 	and.w	r3, r3, #3
 80049b2:	4a8c      	ldr	r2, [pc, #560]	; (8004be4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80049b4:	fa22 f303 	lsr.w	r3, r2, r3
 80049b8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80049ba:	e10a      	b.n	8004bd2 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80049bc:	4b89      	ldr	r3, [pc, #548]	; (8004be4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80049be:	61bb      	str	r3, [r7, #24]
    break;
 80049c0:	e107      	b.n	8004bd2 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80049c2:	4b89      	ldr	r3, [pc, #548]	; (8004be8 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80049c4:	61bb      	str	r3, [r7, #24]
    break;
 80049c6:	e104      	b.n	8004bd2 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80049c8:	4b88      	ldr	r3, [pc, #544]	; (8004bec <HAL_RCC_GetSysClockFreq+0x2d0>)
 80049ca:	61bb      	str	r3, [r7, #24]
    break;
 80049cc:	e101      	b.n	8004bd2 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80049ce:	4b84      	ldr	r3, [pc, #528]	; (8004be0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80049d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d2:	f003 0303 	and.w	r3, r3, #3
 80049d6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80049d8:	4b81      	ldr	r3, [pc, #516]	; (8004be0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80049da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049dc:	091b      	lsrs	r3, r3, #4
 80049de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049e2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80049e4:	4b7e      	ldr	r3, [pc, #504]	; (8004be0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80049e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e8:	f003 0301 	and.w	r3, r3, #1
 80049ec:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80049ee:	4b7c      	ldr	r3, [pc, #496]	; (8004be0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80049f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049f2:	08db      	lsrs	r3, r3, #3
 80049f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80049f8:	68fa      	ldr	r2, [r7, #12]
 80049fa:	fb02 f303 	mul.w	r3, r2, r3
 80049fe:	ee07 3a90 	vmov	s15, r3
 8004a02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a06:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	f000 80da 	beq.w	8004bc6 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d05a      	beq.n	8004ace <HAL_RCC_GetSysClockFreq+0x1b2>
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d302      	bcc.n	8004a22 <HAL_RCC_GetSysClockFreq+0x106>
 8004a1c:	2b02      	cmp	r3, #2
 8004a1e:	d078      	beq.n	8004b12 <HAL_RCC_GetSysClockFreq+0x1f6>
 8004a20:	e099      	b.n	8004b56 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a22:	4b6f      	ldr	r3, [pc, #444]	; (8004be0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 0320 	and.w	r3, r3, #32
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d02d      	beq.n	8004a8a <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004a2e:	4b6c      	ldr	r3, [pc, #432]	; (8004be0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	08db      	lsrs	r3, r3, #3
 8004a34:	f003 0303 	and.w	r3, r3, #3
 8004a38:	4a6a      	ldr	r2, [pc, #424]	; (8004be4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8004a3a:	fa22 f303 	lsr.w	r3, r2, r3
 8004a3e:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	ee07 3a90 	vmov	s15, r3
 8004a46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	ee07 3a90 	vmov	s15, r3
 8004a50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a58:	4b61      	ldr	r3, [pc, #388]	; (8004be0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a60:	ee07 3a90 	vmov	s15, r3
 8004a64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a68:	ed97 6a02 	vldr	s12, [r7, #8]
 8004a6c:	eddf 5a60 	vldr	s11, [pc, #384]	; 8004bf0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004a70:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a74:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a78:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a84:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004a88:	e087      	b.n	8004b9a <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	ee07 3a90 	vmov	s15, r3
 8004a90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a94:	eddf 6a57 	vldr	s13, [pc, #348]	; 8004bf4 <HAL_RCC_GetSysClockFreq+0x2d8>
 8004a98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a9c:	4b50      	ldr	r3, [pc, #320]	; (8004be0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004aa4:	ee07 3a90 	vmov	s15, r3
 8004aa8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004aac:	ed97 6a02 	vldr	s12, [r7, #8]
 8004ab0:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8004bf0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004ab4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ab8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004abc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ac0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ac4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ac8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004acc:	e065      	b.n	8004b9a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	ee07 3a90 	vmov	s15, r3
 8004ad4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ad8:	eddf 6a47 	vldr	s13, [pc, #284]	; 8004bf8 <HAL_RCC_GetSysClockFreq+0x2dc>
 8004adc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ae0:	4b3f      	ldr	r3, [pc, #252]	; (8004be0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ae8:	ee07 3a90 	vmov	s15, r3
 8004aec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004af0:	ed97 6a02 	vldr	s12, [r7, #8]
 8004af4:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8004bf0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004af8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004afc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b00:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b04:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b0c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b10:	e043      	b.n	8004b9a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	ee07 3a90 	vmov	s15, r3
 8004b18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b1c:	eddf 6a37 	vldr	s13, [pc, #220]	; 8004bfc <HAL_RCC_GetSysClockFreq+0x2e0>
 8004b20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b24:	4b2e      	ldr	r3, [pc, #184]	; (8004be0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b2c:	ee07 3a90 	vmov	s15, r3
 8004b30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b34:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b38:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8004bf0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004b3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b40:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b44:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b50:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b54:	e021      	b.n	8004b9a <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	ee07 3a90 	vmov	s15, r3
 8004b5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b60:	eddf 6a25 	vldr	s13, [pc, #148]	; 8004bf8 <HAL_RCC_GetSysClockFreq+0x2dc>
 8004b64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b68:	4b1d      	ldr	r3, [pc, #116]	; (8004be0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b70:	ee07 3a90 	vmov	s15, r3
 8004b74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b78:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b7c:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8004bf0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004b80:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b84:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b88:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b94:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b98:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004b9a:	4b11      	ldr	r3, [pc, #68]	; (8004be0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b9e:	0a5b      	lsrs	r3, r3, #9
 8004ba0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ba4:	3301      	adds	r3, #1
 8004ba6:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	ee07 3a90 	vmov	s15, r3
 8004bae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004bb2:	edd7 6a07 	vldr	s13, [r7, #28]
 8004bb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bbe:	ee17 3a90 	vmov	r3, s15
 8004bc2:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004bc4:	e005      	b.n	8004bd2 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	61bb      	str	r3, [r7, #24]
    break;
 8004bca:	e002      	b.n	8004bd2 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8004bcc:	4b06      	ldr	r3, [pc, #24]	; (8004be8 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8004bce:	61bb      	str	r3, [r7, #24]
    break;
 8004bd0:	bf00      	nop
  }

  return sysclockfreq;
 8004bd2:	69bb      	ldr	r3, [r7, #24]
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3724      	adds	r7, #36	; 0x24
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr
 8004be0:	58024400 	.word	0x58024400
 8004be4:	03d09000 	.word	0x03d09000
 8004be8:	003d0900 	.word	0x003d0900
 8004bec:	017d7840 	.word	0x017d7840
 8004bf0:	46000000 	.word	0x46000000
 8004bf4:	4c742400 	.word	0x4c742400
 8004bf8:	4a742400 	.word	0x4a742400
 8004bfc:	4bbebc20 	.word	0x4bbebc20

08004c00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	af00      	add	r7, sp, #0
  SystemD2Clock = (HAL_RCCEx_GetD1SysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004c04:	f000 ff08 	bl	8005a18 <HAL_RCCEx_GetD1SysClockFreq>
 8004c08:	4601      	mov	r1, r0
 8004c0a:	4b08      	ldr	r3, [pc, #32]	; (8004c2c <HAL_RCC_GetHCLKFreq+0x2c>)
 8004c0c:	699b      	ldr	r3, [r3, #24]
 8004c0e:	f003 030f 	and.w	r3, r3, #15
 8004c12:	4a07      	ldr	r2, [pc, #28]	; (8004c30 <HAL_RCC_GetHCLKFreq+0x30>)
 8004c14:	5cd3      	ldrb	r3, [r2, r3]
 8004c16:	f003 031f 	and.w	r3, r3, #31
 8004c1a:	fa21 f303 	lsr.w	r3, r1, r3
 8004c1e:	4a05      	ldr	r2, [pc, #20]	; (8004c34 <HAL_RCC_GetHCLKFreq+0x34>)
 8004c20:	6013      	str	r3, [r2, #0]
  return SystemD2Clock;
 8004c22:	4b04      	ldr	r3, [pc, #16]	; (8004c34 <HAL_RCC_GetHCLKFreq+0x34>)
 8004c24:	681b      	ldr	r3, [r3, #0]
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	bd80      	pop	{r7, pc}
 8004c2a:	bf00      	nop
 8004c2c:	58024400 	.word	0x58024400
 8004c30:	08016d68 	.word	0x08016d68
 8004c34:	20000004 	.word	0x20000004

08004c38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b086      	sub	sp, #24
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004c40:	2300      	movs	r3, #0
 8004c42:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004c44:	2300      	movs	r3, #0
 8004c46:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d03d      	beq.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c5c:	d013      	beq.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8004c5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c62:	d802      	bhi.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d007      	beq.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8004c68:	e01f      	b.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x72>
 8004c6a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c6e:	d013      	beq.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8004c70:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004c74:	d01c      	beq.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8004c76:	e018      	b.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c78:	4baf      	ldr	r3, [pc, #700]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c7c:	4aae      	ldr	r2, [pc, #696]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004c7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c82:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004c84:	e015      	b.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	3304      	adds	r3, #4
 8004c8a:	2102      	movs	r1, #2
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f000 fedf 	bl	8005a50 <RCCEx_PLL2_Config>
 8004c92:	4603      	mov	r3, r0
 8004c94:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004c96:	e00c      	b.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	3324      	adds	r3, #36	; 0x24
 8004c9c:	2102      	movs	r1, #2
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f000 ff88 	bl	8005bb4 <RCCEx_PLL3_Config>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004ca8:	e003      	b.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	75fb      	strb	r3, [r7, #23]
      break;
 8004cae:	e000      	b.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8004cb0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004cb2:	7dfb      	ldrb	r3, [r7, #23]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d109      	bne.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004cb8:	4b9f      	ldr	r3, [pc, #636]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004cba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cbc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004cc4:	499c      	ldr	r1, [pc, #624]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	650b      	str	r3, [r1, #80]	; 0x50
 8004cca:	e001      	b.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ccc:	7dfb      	ldrb	r3, [r7, #23]
 8004cce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d03d      	beq.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ce0:	2b04      	cmp	r3, #4
 8004ce2:	d826      	bhi.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8004ce4:	a201      	add	r2, pc, #4	; (adr r2, 8004cec <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8004ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cea:	bf00      	nop
 8004cec:	08004d01 	.word	0x08004d01
 8004cf0:	08004d0f 	.word	0x08004d0f
 8004cf4:	08004d21 	.word	0x08004d21
 8004cf8:	08004d39 	.word	0x08004d39
 8004cfc:	08004d39 	.word	0x08004d39
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d00:	4b8d      	ldr	r3, [pc, #564]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d04:	4a8c      	ldr	r2, [pc, #560]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004d06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d0a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004d0c:	e015      	b.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	3304      	adds	r3, #4
 8004d12:	2100      	movs	r1, #0
 8004d14:	4618      	mov	r0, r3
 8004d16:	f000 fe9b 	bl	8005a50 <RCCEx_PLL2_Config>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004d1e:	e00c      	b.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	3324      	adds	r3, #36	; 0x24
 8004d24:	2100      	movs	r1, #0
 8004d26:	4618      	mov	r0, r3
 8004d28:	f000 ff44 	bl	8005bb4 <RCCEx_PLL3_Config>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004d30:	e003      	b.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	75fb      	strb	r3, [r7, #23]
      break;
 8004d36:	e000      	b.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8004d38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d3a:	7dfb      	ldrb	r3, [r7, #23]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d109      	bne.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004d40:	4b7d      	ldr	r3, [pc, #500]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004d42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d44:	f023 0207 	bic.w	r2, r3, #7
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d4c:	497a      	ldr	r1, [pc, #488]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	650b      	str	r3, [r1, #80]	; 0x50
 8004d52:	e001      	b.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d54:	7dfb      	ldrb	r3, [r7, #23]
 8004d56:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d03e      	beq.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d68:	2b80      	cmp	r3, #128	; 0x80
 8004d6a:	d01c      	beq.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8004d6c:	2b80      	cmp	r3, #128	; 0x80
 8004d6e:	d804      	bhi.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x142>
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d008      	beq.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004d74:	2b40      	cmp	r3, #64	; 0x40
 8004d76:	d00d      	beq.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004d78:	e01e      	b.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8004d7a:	2bc0      	cmp	r3, #192	; 0xc0
 8004d7c:	d01f      	beq.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x186>
 8004d7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d82:	d01e      	beq.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004d84:	e018      	b.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d86:	4b6c      	ldr	r3, [pc, #432]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d8a:	4a6b      	ldr	r2, [pc, #428]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004d8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d90:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004d92:	e017      	b.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	3304      	adds	r3, #4
 8004d98:	2100      	movs	r1, #0
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f000 fe58 	bl	8005a50 <RCCEx_PLL2_Config>
 8004da0:	4603      	mov	r3, r0
 8004da2:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004da4:	e00e      	b.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	3324      	adds	r3, #36	; 0x24
 8004daa:	2100      	movs	r1, #0
 8004dac:	4618      	mov	r0, r3
 8004dae:	f000 ff01 	bl	8005bb4 <RCCEx_PLL3_Config>
 8004db2:	4603      	mov	r3, r0
 8004db4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004db6:	e005      	b.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	75fb      	strb	r3, [r7, #23]
      break;
 8004dbc:	e002      	b.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8004dbe:	bf00      	nop
 8004dc0:	e000      	b.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8004dc2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004dc4:	7dfb      	ldrb	r3, [r7, #23]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d109      	bne.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004dca:	4b5b      	ldr	r3, [pc, #364]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004dcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dce:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dd6:	4958      	ldr	r1, [pc, #352]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	650b      	str	r3, [r1, #80]	; 0x50
 8004ddc:	e001      	b.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dde:	7dfb      	ldrb	r3, [r7, #23]
 8004de0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d044      	beq.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004df4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004df8:	d01f      	beq.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x202>
 8004dfa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004dfe:	d805      	bhi.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d00a      	beq.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004e04:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e08:	d00e      	beq.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8004e0a:	e01f      	b.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x214>
 8004e0c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004e10:	d01f      	beq.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8004e12:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004e16:	d01e      	beq.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004e18:	e018      	b.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e1a:	4b47      	ldr	r3, [pc, #284]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e1e:	4a46      	ldr	r2, [pc, #280]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004e20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e24:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004e26:	e017      	b.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	3304      	adds	r3, #4
 8004e2c:	2100      	movs	r1, #0
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f000 fe0e 	bl	8005a50 <RCCEx_PLL2_Config>
 8004e34:	4603      	mov	r3, r0
 8004e36:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004e38:	e00e      	b.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	3324      	adds	r3, #36	; 0x24
 8004e3e:	2100      	movs	r1, #0
 8004e40:	4618      	mov	r0, r3
 8004e42:	f000 feb7 	bl	8005bb4 <RCCEx_PLL3_Config>
 8004e46:	4603      	mov	r3, r0
 8004e48:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004e4a:	e005      	b.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	75fb      	strb	r3, [r7, #23]
      break;
 8004e50:	e002      	b.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8004e52:	bf00      	nop
 8004e54:	e000      	b.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8004e56:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e58:	7dfb      	ldrb	r3, [r7, #23]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d10a      	bne.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004e5e:	4b36      	ldr	r3, [pc, #216]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e62:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004e6c:	4932      	ldr	r1, [pc, #200]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	658b      	str	r3, [r1, #88]	; 0x58
 8004e72:	e001      	b.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e74:	7dfb      	ldrb	r3, [r7, #23]
 8004e76:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d044      	beq.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004e8a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e8e:	d01f      	beq.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004e90:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e94:	d805      	bhi.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d00a      	beq.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8004e9a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e9e:	d00e      	beq.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004ea0:	e01f      	b.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8004ea2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004ea6:	d01f      	beq.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004ea8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004eac:	d01e      	beq.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004eae:	e018      	b.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004eb0:	4b21      	ldr	r3, [pc, #132]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb4:	4a20      	ldr	r2, [pc, #128]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004eb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004eba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004ebc:	e017      	b.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	3304      	adds	r3, #4
 8004ec2:	2100      	movs	r1, #0
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f000 fdc3 	bl	8005a50 <RCCEx_PLL2_Config>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004ece:	e00e      	b.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	3324      	adds	r3, #36	; 0x24
 8004ed4:	2100      	movs	r1, #0
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f000 fe6c 	bl	8005bb4 <RCCEx_PLL3_Config>
 8004edc:	4603      	mov	r3, r0
 8004ede:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004ee0:	e005      	b.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	75fb      	strb	r3, [r7, #23]
      break;
 8004ee6:	e002      	b.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8004ee8:	bf00      	nop
 8004eea:	e000      	b.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8004eec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004eee:	7dfb      	ldrb	r3, [r7, #23]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d10a      	bne.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004ef4:	4b10      	ldr	r3, [pc, #64]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004ef6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ef8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004f02:	490d      	ldr	r1, [pc, #52]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004f04:	4313      	orrs	r3, r2
 8004f06:	658b      	str	r3, [r1, #88]	; 0x58
 8004f08:	e001      	b.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f0a:	7dfb      	ldrb	r3, [r7, #23]
 8004f0c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d035      	beq.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f1e:	2b10      	cmp	r3, #16
 8004f20:	d00c      	beq.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x304>
 8004f22:	2b10      	cmp	r3, #16
 8004f24:	d802      	bhi.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d01b      	beq.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8004f2a:	e017      	b.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x324>
 8004f2c:	2b20      	cmp	r3, #32
 8004f2e:	d00c      	beq.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x312>
 8004f30:	2b30      	cmp	r3, #48	; 0x30
 8004f32:	d018      	beq.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8004f34:	e012      	b.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x324>
 8004f36:	bf00      	nop
 8004f38:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f3c:	4baf      	ldr	r3, [pc, #700]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f40:	4aae      	ldr	r2, [pc, #696]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004f42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f46:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004f48:	e00e      	b.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	3304      	adds	r3, #4
 8004f4e:	2102      	movs	r1, #2
 8004f50:	4618      	mov	r0, r3
 8004f52:	f000 fd7d 	bl	8005a50 <RCCEx_PLL2_Config>
 8004f56:	4603      	mov	r3, r0
 8004f58:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004f5a:	e005      	b.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	75fb      	strb	r3, [r7, #23]
      break;
 8004f60:	e002      	b.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8004f62:	bf00      	nop
 8004f64:	e000      	b.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8004f66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f68:	7dfb      	ldrb	r3, [r7, #23]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d109      	bne.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004f6e:	4ba3      	ldr	r3, [pc, #652]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f72:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f7a:	49a0      	ldr	r1, [pc, #640]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004f80:	e001      	b.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f82:	7dfb      	ldrb	r3, [r7, #23]
 8004f84:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d042      	beq.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f9a:	d01f      	beq.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8004f9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fa0:	d805      	bhi.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d00a      	beq.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x384>
 8004fa6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004faa:	d00e      	beq.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x392>
 8004fac:	e01f      	b.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8004fae:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004fb2:	d01f      	beq.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8004fb4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004fb8:	d01e      	beq.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8004fba:	e018      	b.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fbc:	4b8f      	ldr	r3, [pc, #572]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc0:	4a8e      	ldr	r2, [pc, #568]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004fc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fc6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004fc8:	e017      	b.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	3304      	adds	r3, #4
 8004fce:	2100      	movs	r1, #0
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f000 fd3d 	bl	8005a50 <RCCEx_PLL2_Config>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004fda:	e00e      	b.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	3324      	adds	r3, #36	; 0x24
 8004fe0:	2100      	movs	r1, #0
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f000 fde6 	bl	8005bb4 <RCCEx_PLL3_Config>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004fec:	e005      	b.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	75fb      	strb	r3, [r7, #23]
      break;
 8004ff2:	e002      	b.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8004ff4:	bf00      	nop
 8004ff6:	e000      	b.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8004ff8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ffa:	7dfb      	ldrb	r3, [r7, #23]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d109      	bne.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005000:	4b7e      	ldr	r3, [pc, #504]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005002:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005004:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800500c:	497b      	ldr	r1, [pc, #492]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800500e:	4313      	orrs	r3, r2
 8005010:	650b      	str	r3, [r1, #80]	; 0x50
 8005012:	e001      	b.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005014:	7dfb      	ldrb	r3, [r7, #23]
 8005016:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005020:	2b00      	cmp	r3, #0
 8005022:	d042      	beq.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005028:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800502c:	d01b      	beq.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800502e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005032:	d805      	bhi.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8005034:	2b00      	cmp	r3, #0
 8005036:	d022      	beq.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x446>
 8005038:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800503c:	d00a      	beq.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800503e:	e01b      	b.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8005040:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005044:	d01d      	beq.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8005046:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800504a:	d01c      	beq.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 800504c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005050:	d01b      	beq.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x452>
 8005052:	e011      	b.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	3304      	adds	r3, #4
 8005058:	2101      	movs	r1, #1
 800505a:	4618      	mov	r0, r3
 800505c:	f000 fcf8 	bl	8005a50 <RCCEx_PLL2_Config>
 8005060:	4603      	mov	r3, r0
 8005062:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005064:	e012      	b.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	3324      	adds	r3, #36	; 0x24
 800506a:	2101      	movs	r1, #1
 800506c:	4618      	mov	r0, r3
 800506e:	f000 fda1 	bl	8005bb4 <RCCEx_PLL3_Config>
 8005072:	4603      	mov	r3, r0
 8005074:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005076:	e009      	b.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	75fb      	strb	r3, [r7, #23]
      break;
 800507c:	e006      	b.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800507e:	bf00      	nop
 8005080:	e004      	b.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8005082:	bf00      	nop
 8005084:	e002      	b.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8005086:	bf00      	nop
 8005088:	e000      	b.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800508a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800508c:	7dfb      	ldrb	r3, [r7, #23]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d109      	bne.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005092:	4b5a      	ldr	r3, [pc, #360]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005094:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005096:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800509e:	4957      	ldr	r1, [pc, #348]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80050a0:	4313      	orrs	r3, r2
 80050a2:	650b      	str	r3, [r1, #80]	; 0x50
 80050a4:	e001      	b.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050a6:	7dfb      	ldrb	r3, [r7, #23]
 80050a8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d044      	beq.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80050bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050c0:	d01b      	beq.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80050c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050c6:	d805      	bhi.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d022      	beq.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80050cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80050d0:	d00a      	beq.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80050d2:	e01b      	b.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 80050d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050d8:	d01d      	beq.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80050da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80050de:	d01c      	beq.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 80050e0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80050e4:	d01b      	beq.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80050e6:	e011      	b.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	3304      	adds	r3, #4
 80050ec:	2101      	movs	r1, #1
 80050ee:	4618      	mov	r0, r3
 80050f0:	f000 fcae 	bl	8005a50 <RCCEx_PLL2_Config>
 80050f4:	4603      	mov	r3, r0
 80050f6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80050f8:	e012      	b.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	3324      	adds	r3, #36	; 0x24
 80050fe:	2101      	movs	r1, #1
 8005100:	4618      	mov	r0, r3
 8005102:	f000 fd57 	bl	8005bb4 <RCCEx_PLL3_Config>
 8005106:	4603      	mov	r3, r0
 8005108:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800510a:	e009      	b.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* HSE,  oscillator is used as source of SPI6 clock */
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	75fb      	strb	r3, [r7, #23]
      break;
 8005110:	e006      	b.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8005112:	bf00      	nop
 8005114:	e004      	b.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8005116:	bf00      	nop
 8005118:	e002      	b.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800511a:	bf00      	nop
 800511c:	e000      	b.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800511e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005120:	7dfb      	ldrb	r3, [r7, #23]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d10a      	bne.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005126:	4b35      	ldr	r3, [pc, #212]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800512a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005134:	4931      	ldr	r1, [pc, #196]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005136:	4313      	orrs	r3, r2
 8005138:	658b      	str	r3, [r1, #88]	; 0x58
 800513a:	e001      	b.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800513c:	7dfb      	ldrb	r3, [r7, #23]
 800513e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005148:	2b00      	cmp	r3, #0
 800514a:	d02d      	beq.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005150:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005154:	d005      	beq.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8005156:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800515a:	d009      	beq.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x538>
 800515c:	2b00      	cmp	r3, #0
 800515e:	d013      	beq.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8005160:	e00f      	b.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005162:	4b26      	ldr	r3, [pc, #152]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005166:	4a25      	ldr	r2, [pc, #148]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005168:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800516c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800516e:	e00c      	b.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	3304      	adds	r3, #4
 8005174:	2101      	movs	r1, #1
 8005176:	4618      	mov	r0, r3
 8005178:	f000 fc6a 	bl	8005a50 <RCCEx_PLL2_Config>
 800517c:	4603      	mov	r3, r0
 800517e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005180:	e003      	b.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	75fb      	strb	r3, [r7, #23]
      break;
 8005186:	e000      	b.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8005188:	bf00      	nop
    }

    if(ret == HAL_OK)
 800518a:	7dfb      	ldrb	r3, [r7, #23]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d109      	bne.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005190:	4b1a      	ldr	r3, [pc, #104]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005192:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005194:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800519c:	4917      	ldr	r1, [pc, #92]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800519e:	4313      	orrs	r3, r2
 80051a0:	650b      	str	r3, [r1, #80]	; 0x50
 80051a2:	e001      	b.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051a4:	7dfb      	ldrb	r3, [r7, #23]
 80051a6:	75bb      	strb	r3, [r7, #22]
    }
  }

#endif /*FDCAN1 || FDCAN2*/
  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d035      	beq.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051b8:	2b03      	cmp	r3, #3
 80051ba:	d81b      	bhi.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80051bc:	a201      	add	r2, pc, #4	; (adr r2, 80051c4 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 80051be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051c2:	bf00      	nop
 80051c4:	08005201 	.word	0x08005201
 80051c8:	080051d5 	.word	0x080051d5
 80051cc:	080051e3 	.word	0x080051e3
 80051d0:	08005201 	.word	0x08005201
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051d4:	4b09      	ldr	r3, [pc, #36]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80051d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d8:	4a08      	ldr	r2, [pc, #32]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80051da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80051e0:	e00f      	b.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	3304      	adds	r3, #4
 80051e6:	2102      	movs	r1, #2
 80051e8:	4618      	mov	r0, r3
 80051ea:	f000 fc31 	bl	8005a50 <RCCEx_PLL2_Config>
 80051ee:	4603      	mov	r3, r0
 80051f0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80051f2:	e006      	b.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	75fb      	strb	r3, [r7, #23]
      break;
 80051f8:	e003      	b.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 80051fa:	bf00      	nop
 80051fc:	58024400 	.word	0x58024400
      break;
 8005200:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005202:	7dfb      	ldrb	r3, [r7, #23]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d109      	bne.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005208:	4bba      	ldr	r3, [pc, #744]	; (80054f4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800520a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800520c:	f023 0203 	bic.w	r2, r3, #3
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005214:	49b7      	ldr	r1, [pc, #732]	; (80054f4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005216:	4313      	orrs	r3, r2
 8005218:	64cb      	str	r3, [r1, #76]	; 0x4c
 800521a:	e001      	b.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800521c:	7dfb      	ldrb	r3, [r7, #23]
 800521e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005228:	2b00      	cmp	r3, #0
 800522a:	f000 8086 	beq.w	800533a <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800522e:	4bb2      	ldr	r3, [pc, #712]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4ab1      	ldr	r2, [pc, #708]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8005234:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005238:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800523a:	f7fb fb0d 	bl	8000858 <HAL_GetTick>
 800523e:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005240:	e009      	b.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005242:	f7fb fb09 	bl	8000858 <HAL_GetTick>
 8005246:	4602      	mov	r2, r0
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	1ad3      	subs	r3, r2, r3
 800524c:	2b64      	cmp	r3, #100	; 0x64
 800524e:	d902      	bls.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8005250:	2303      	movs	r3, #3
 8005252:	75fb      	strb	r3, [r7, #23]
        break;
 8005254:	e005      	b.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005256:	4ba8      	ldr	r3, [pc, #672]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800525e:	2b00      	cmp	r3, #0
 8005260:	d0ef      	beq.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8005262:	7dfb      	ldrb	r3, [r7, #23]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d166      	bne.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005268:	4ba2      	ldr	r3, [pc, #648]	; (80054f4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800526a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005272:	4053      	eors	r3, r2
 8005274:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005278:	2b00      	cmp	r3, #0
 800527a:	d013      	beq.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800527c:	4b9d      	ldr	r3, [pc, #628]	; (80054f4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800527e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005280:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005284:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005286:	4b9b      	ldr	r3, [pc, #620]	; (80054f4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800528a:	4a9a      	ldr	r2, [pc, #616]	; (80054f4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800528c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005290:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005292:	4b98      	ldr	r3, [pc, #608]	; (80054f4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005296:	4a97      	ldr	r2, [pc, #604]	; (80054f4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005298:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800529c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800529e:	4a95      	ldr	r2, [pc, #596]	; (80054f4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source, wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80052aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052ae:	d115      	bne.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052b0:	f7fb fad2 	bl	8000858 <HAL_GetTick>
 80052b4:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80052b6:	e00b      	b.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052b8:	f7fb face 	bl	8000858 <HAL_GetTick>
 80052bc:	4602      	mov	r2, r0
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d902      	bls.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 80052ca:	2303      	movs	r3, #3
 80052cc:	75fb      	strb	r3, [r7, #23]
            break;
 80052ce:	e005      	b.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80052d0:	4b88      	ldr	r3, [pc, #544]	; (80054f4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80052d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052d4:	f003 0302 	and.w	r3, r3, #2
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d0ed      	beq.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 80052dc:	7dfb      	ldrb	r3, [r7, #23]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d126      	bne.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80052e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052f0:	d10d      	bne.n	800530e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 80052f2:	4b80      	ldr	r3, [pc, #512]	; (80054f4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005300:	0919      	lsrs	r1, r3, #4
 8005302:	4b7e      	ldr	r3, [pc, #504]	; (80054fc <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8005304:	400b      	ands	r3, r1
 8005306:	497b      	ldr	r1, [pc, #492]	; (80054f4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005308:	4313      	orrs	r3, r2
 800530a:	610b      	str	r3, [r1, #16]
 800530c:	e005      	b.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 800530e:	4b79      	ldr	r3, [pc, #484]	; (80054f4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	4a78      	ldr	r2, [pc, #480]	; (80054f4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005314:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005318:	6113      	str	r3, [r2, #16]
 800531a:	4b76      	ldr	r3, [pc, #472]	; (80054f4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800531c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005324:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005328:	4972      	ldr	r1, [pc, #456]	; (80054f4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800532a:	4313      	orrs	r3, r2
 800532c:	670b      	str	r3, [r1, #112]	; 0x70
 800532e:	e004      	b.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005330:	7dfb      	ldrb	r3, [r7, #23]
 8005332:	75bb      	strb	r3, [r7, #22]
 8005334:	e001      	b.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005336:	7dfb      	ldrb	r3, [r7, #23]
 8005338:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f003 0301 	and.w	r3, r3, #1
 8005342:	2b00      	cmp	r3, #0
 8005344:	d07d      	beq.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800534a:	2b28      	cmp	r3, #40	; 0x28
 800534c:	d866      	bhi.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 800534e:	a201      	add	r2, pc, #4	; (adr r2, 8005354 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005354:	08005423 	.word	0x08005423
 8005358:	0800541d 	.word	0x0800541d
 800535c:	0800541d 	.word	0x0800541d
 8005360:	0800541d 	.word	0x0800541d
 8005364:	0800541d 	.word	0x0800541d
 8005368:	0800541d 	.word	0x0800541d
 800536c:	0800541d 	.word	0x0800541d
 8005370:	0800541d 	.word	0x0800541d
 8005374:	080053f9 	.word	0x080053f9
 8005378:	0800541d 	.word	0x0800541d
 800537c:	0800541d 	.word	0x0800541d
 8005380:	0800541d 	.word	0x0800541d
 8005384:	0800541d 	.word	0x0800541d
 8005388:	0800541d 	.word	0x0800541d
 800538c:	0800541d 	.word	0x0800541d
 8005390:	0800541d 	.word	0x0800541d
 8005394:	0800540b 	.word	0x0800540b
 8005398:	0800541d 	.word	0x0800541d
 800539c:	0800541d 	.word	0x0800541d
 80053a0:	0800541d 	.word	0x0800541d
 80053a4:	0800541d 	.word	0x0800541d
 80053a8:	0800541d 	.word	0x0800541d
 80053ac:	0800541d 	.word	0x0800541d
 80053b0:	0800541d 	.word	0x0800541d
 80053b4:	08005423 	.word	0x08005423
 80053b8:	0800541d 	.word	0x0800541d
 80053bc:	0800541d 	.word	0x0800541d
 80053c0:	0800541d 	.word	0x0800541d
 80053c4:	0800541d 	.word	0x0800541d
 80053c8:	0800541d 	.word	0x0800541d
 80053cc:	0800541d 	.word	0x0800541d
 80053d0:	0800541d 	.word	0x0800541d
 80053d4:	08005423 	.word	0x08005423
 80053d8:	0800541d 	.word	0x0800541d
 80053dc:	0800541d 	.word	0x0800541d
 80053e0:	0800541d 	.word	0x0800541d
 80053e4:	0800541d 	.word	0x0800541d
 80053e8:	0800541d 	.word	0x0800541d
 80053ec:	0800541d 	.word	0x0800541d
 80053f0:	0800541d 	.word	0x0800541d
 80053f4:	08005423 	.word	0x08005423
    case RCC_USART16CLKSOURCE_D2PCLK2: /* D2PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	3304      	adds	r3, #4
 80053fc:	2101      	movs	r1, #1
 80053fe:	4618      	mov	r0, r3
 8005400:	f000 fb26 	bl	8005a50 <RCCEx_PLL2_Config>
 8005404:	4603      	mov	r3, r0
 8005406:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005408:	e00c      	b.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	3324      	adds	r3, #36	; 0x24
 800540e:	2101      	movs	r1, #1
 8005410:	4618      	mov	r0, r3
 8005412:	f000 fbcf 	bl	8005bb4 <RCCEx_PLL3_Config>
 8005416:	4603      	mov	r3, r0
 8005418:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800541a:	e003      	b.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	75fb      	strb	r3, [r7, #23]
      break;
 8005420:	e000      	b.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8005422:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005424:	7dfb      	ldrb	r3, [r7, #23]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d109      	bne.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800542a:	4b32      	ldr	r3, [pc, #200]	; (80054f4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800542c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800542e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005436:	492f      	ldr	r1, [pc, #188]	; (80054f4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005438:	4313      	orrs	r3, r2
 800543a:	654b      	str	r3, [r1, #84]	; 0x54
 800543c:	e001      	b.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800543e:	7dfb      	ldrb	r3, [r7, #23]
 8005440:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f003 0302 	and.w	r3, r3, #2
 800544a:	2b00      	cmp	r3, #0
 800544c:	d037      	beq.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005452:	2b05      	cmp	r3, #5
 8005454:	d820      	bhi.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8005456:	a201      	add	r2, pc, #4	; (adr r2, 800545c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8005458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800545c:	0800549f 	.word	0x0800549f
 8005460:	08005475 	.word	0x08005475
 8005464:	08005487 	.word	0x08005487
 8005468:	0800549f 	.word	0x0800549f
 800546c:	0800549f 	.word	0x0800549f
 8005470:	0800549f 	.word	0x0800549f
    case RCC_USART234578CLKSOURCE_D2PCLK1: /* D2PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	3304      	adds	r3, #4
 8005478:	2101      	movs	r1, #1
 800547a:	4618      	mov	r0, r3
 800547c:	f000 fae8 	bl	8005a50 <RCCEx_PLL2_Config>
 8005480:	4603      	mov	r3, r0
 8005482:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005484:	e00c      	b.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	3324      	adds	r3, #36	; 0x24
 800548a:	2101      	movs	r1, #1
 800548c:	4618      	mov	r0, r3
 800548e:	f000 fb91 	bl	8005bb4 <RCCEx_PLL3_Config>
 8005492:	4603      	mov	r3, r0
 8005494:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005496:	e003      	b.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005498:	2301      	movs	r3, #1
 800549a:	75fb      	strb	r3, [r7, #23]
      break;
 800549c:	e000      	b.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 800549e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054a0:	7dfb      	ldrb	r3, [r7, #23]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d109      	bne.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80054a6:	4b13      	ldr	r3, [pc, #76]	; (80054f4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80054a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054aa:	f023 0207 	bic.w	r2, r3, #7
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054b2:	4910      	ldr	r1, [pc, #64]	; (80054f4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80054b4:	4313      	orrs	r3, r2
 80054b6:	654b      	str	r3, [r1, #84]	; 0x54
 80054b8:	e001      	b.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054ba:	7dfb      	ldrb	r3, [r7, #23]
 80054bc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f003 0304 	and.w	r3, r3, #4
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d040      	beq.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054d0:	2b05      	cmp	r3, #5
 80054d2:	d827      	bhi.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 80054d4:	a201      	add	r2, pc, #4	; (adr r2, 80054dc <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 80054d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054da:	bf00      	nop
 80054dc:	0800552b 	.word	0x0800552b
 80054e0:	08005501 	.word	0x08005501
 80054e4:	08005513 	.word	0x08005513
 80054e8:	0800552b 	.word	0x0800552b
 80054ec:	0800552b 	.word	0x0800552b
 80054f0:	0800552b 	.word	0x0800552b
 80054f4:	58024400 	.word	0x58024400
 80054f8:	58024800 	.word	0x58024800
 80054fc:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_D3PCLK1: /* D3PCLK1 as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	3304      	adds	r3, #4
 8005504:	2101      	movs	r1, #1
 8005506:	4618      	mov	r0, r3
 8005508:	f000 faa2 	bl	8005a50 <RCCEx_PLL2_Config>
 800550c:	4603      	mov	r3, r0
 800550e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005510:	e00c      	b.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	3324      	adds	r3, #36	; 0x24
 8005516:	2101      	movs	r1, #1
 8005518:	4618      	mov	r0, r3
 800551a:	f000 fb4b 	bl	8005bb4 <RCCEx_PLL3_Config>
 800551e:	4603      	mov	r3, r0
 8005520:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005522:	e003      	b.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	75fb      	strb	r3, [r7, #23]
      break;
 8005528:	e000      	b.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 800552a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800552c:	7dfb      	ldrb	r3, [r7, #23]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d10a      	bne.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005532:	4bb3      	ldr	r3, [pc, #716]	; (8005800 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8005534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005536:	f023 0207 	bic.w	r2, r3, #7
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005540:	49af      	ldr	r1, [pc, #700]	; (8005800 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8005542:	4313      	orrs	r3, r2
 8005544:	658b      	str	r3, [r1, #88]	; 0x58
 8005546:	e001      	b.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005548:	7dfb      	ldrb	r3, [r7, #23]
 800554a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f003 0320 	and.w	r3, r3, #32
 8005554:	2b00      	cmp	r3, #0
 8005556:	d044      	beq.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800555e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005562:	d01b      	beq.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x964>
 8005564:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005568:	d805      	bhi.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 800556a:	2b00      	cmp	r3, #0
 800556c:	d022      	beq.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 800556e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005572:	d00a      	beq.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x952>
 8005574:	e01b      	b.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x976>
 8005576:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800557a:	d01d      	beq.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x980>
 800557c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005580:	d01c      	beq.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x984>
 8005582:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005586:	d01b      	beq.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8005588:	e011      	b.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	3304      	adds	r3, #4
 800558e:	2100      	movs	r1, #0
 8005590:	4618      	mov	r0, r3
 8005592:	f000 fa5d 	bl	8005a50 <RCCEx_PLL2_Config>
 8005596:	4603      	mov	r3, r0
 8005598:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800559a:	e012      	b.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	3324      	adds	r3, #36	; 0x24
 80055a0:	2102      	movs	r1, #2
 80055a2:	4618      	mov	r0, r3
 80055a4:	f000 fb06 	bl	8005bb4 <RCCEx_PLL3_Config>
 80055a8:	4603      	mov	r3, r0
 80055aa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80055ac:	e009      	b.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	75fb      	strb	r3, [r7, #23]
      break;
 80055b2:	e006      	b.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80055b4:	bf00      	nop
 80055b6:	e004      	b.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80055b8:	bf00      	nop
 80055ba:	e002      	b.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80055bc:	bf00      	nop
 80055be:	e000      	b.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80055c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055c2:	7dfb      	ldrb	r3, [r7, #23]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d10a      	bne.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80055c8:	4b8d      	ldr	r3, [pc, #564]	; (8005800 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80055ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055cc:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055d6:	498a      	ldr	r1, [pc, #552]	; (8005800 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80055d8:	4313      	orrs	r3, r2
 80055da:	654b      	str	r3, [r1, #84]	; 0x54
 80055dc:	e001      	b.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055de:	7dfb      	ldrb	r3, [r7, #23]
 80055e0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d044      	beq.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80055f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055f8:	d01b      	beq.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 80055fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055fe:	d805      	bhi.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8005600:	2b00      	cmp	r3, #0
 8005602:	d022      	beq.n	800564a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8005604:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005608:	d00a      	beq.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 800560a:	e01b      	b.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 800560c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005610:	d01d      	beq.n	800564e <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8005612:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005616:	d01c      	beq.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8005618:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800561c:	d01b      	beq.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 800561e:	e011      	b.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	3304      	adds	r3, #4
 8005624:	2100      	movs	r1, #0
 8005626:	4618      	mov	r0, r3
 8005628:	f000 fa12 	bl	8005a50 <RCCEx_PLL2_Config>
 800562c:	4603      	mov	r3, r0
 800562e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005630:	e012      	b.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	3324      	adds	r3, #36	; 0x24
 8005636:	2102      	movs	r1, #2
 8005638:	4618      	mov	r0, r3
 800563a:	f000 fabb 	bl	8005bb4 <RCCEx_PLL3_Config>
 800563e:	4603      	mov	r3, r0
 8005640:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005642:	e009      	b.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005644:	2301      	movs	r3, #1
 8005646:	75fb      	strb	r3, [r7, #23]
      break;
 8005648:	e006      	b.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800564a:	bf00      	nop
 800564c:	e004      	b.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800564e:	bf00      	nop
 8005650:	e002      	b.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8005652:	bf00      	nop
 8005654:	e000      	b.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8005656:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005658:	7dfb      	ldrb	r3, [r7, #23]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d10a      	bne.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800565e:	4b68      	ldr	r3, [pc, #416]	; (8005800 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8005660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005662:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800566c:	4964      	ldr	r1, [pc, #400]	; (8005800 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 800566e:	4313      	orrs	r3, r2
 8005670:	658b      	str	r3, [r1, #88]	; 0x58
 8005672:	e001      	b.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005674:	7dfb      	ldrb	r3, [r7, #23]
 8005676:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005680:	2b00      	cmp	r3, #0
 8005682:	d044      	beq.n	800570e <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800568a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800568e:	d01b      	beq.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8005690:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005694:	d805      	bhi.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8005696:	2b00      	cmp	r3, #0
 8005698:	d022      	beq.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800569a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800569e:	d00a      	beq.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80056a0:	e01b      	b.n	80056da <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 80056a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056a6:	d01d      	beq.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80056a8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80056ac:	d01c      	beq.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 80056ae:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80056b2:	d01b      	beq.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0xab4>
 80056b4:	e011      	b.n	80056da <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_D3PCLK1:      /* D3PCLK1 as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	3304      	adds	r3, #4
 80056ba:	2100      	movs	r1, #0
 80056bc:	4618      	mov	r0, r3
 80056be:	f000 f9c7 	bl	8005a50 <RCCEx_PLL2_Config>
 80056c2:	4603      	mov	r3, r0
 80056c4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80056c6:	e012      	b.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	3324      	adds	r3, #36	; 0x24
 80056cc:	2102      	movs	r1, #2
 80056ce:	4618      	mov	r0, r3
 80056d0:	f000 fa70 	bl	8005bb4 <RCCEx_PLL3_Config>
 80056d4:	4603      	mov	r3, r0
 80056d6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80056d8:	e009      	b.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	75fb      	strb	r3, [r7, #23]
      break;
 80056de:	e006      	b.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80056e0:	bf00      	nop
 80056e2:	e004      	b.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80056e4:	bf00      	nop
 80056e6:	e002      	b.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80056e8:	bf00      	nop
 80056ea:	e000      	b.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80056ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056ee:	7dfb      	ldrb	r3, [r7, #23]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d10a      	bne.n	800570a <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80056f4:	4b42      	ldr	r3, [pc, #264]	; (8005800 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80056f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056f8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005702:	493f      	ldr	r1, [pc, #252]	; (8005800 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8005704:	4313      	orrs	r3, r2
 8005706:	658b      	str	r3, [r1, #88]	; 0x58
 8005708:	e001      	b.n	800570e <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800570a:	7dfb      	ldrb	r3, [r7, #23]
 800570c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f003 0308 	and.w	r3, r3, #8
 8005716:	2b00      	cmp	r3, #0
 8005718:	d01b      	beq.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005720:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005724:	d10b      	bne.n	800573e <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	3324      	adds	r3, #36	; 0x24
 800572a:	2102      	movs	r1, #2
 800572c:	4618      	mov	r0, r3
 800572e:	f000 fa41 	bl	8005bb4 <RCCEx_PLL3_Config>
 8005732:	4603      	mov	r3, r0
 8005734:	2b00      	cmp	r3, #0
 8005736:	d00c      	beq.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
        {
          status = HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	75bb      	strb	r3, [r7, #22]
 800573c:	e009      	b.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
        }
    }

    else
    {
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800573e:	4b30      	ldr	r3, [pc, #192]	; (8005800 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8005740:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005742:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800574c:	492c      	ldr	r1, [pc, #176]	; (8005800 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 800574e:	4313      	orrs	r3, r2
 8005750:	654b      	str	r3, [r1, #84]	; 0x54
    }

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f003 0310 	and.w	r3, r3, #16
 800575a:	2b00      	cmp	r3, #0
 800575c:	d01b      	beq.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0xb5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005764:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005768:	d10b      	bne.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0xb4a>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	3324      	adds	r3, #36	; 0x24
 800576e:	2102      	movs	r1, #2
 8005770:	4618      	mov	r0, r3
 8005772:	f000 fa1f 	bl	8005bb4 <RCCEx_PLL3_Config>
 8005776:	4603      	mov	r3, r0
 8005778:	2b00      	cmp	r3, #0
 800577a:	d00c      	beq.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0xb5e>
      {
        status = HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	75bb      	strb	r3, [r7, #22]
 8005780:	e009      	b.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0xb5e>
      }
    }

    else
    {
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005782:	4b1f      	ldr	r3, [pc, #124]	; (8005800 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8005784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005786:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005790:	491b      	ldr	r1, [pc, #108]	; (8005800 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8005792:	4313      	orrs	r3, r2
 8005794:	658b      	str	r3, [r1, #88]	; 0x58
    }
  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d032      	beq.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80057a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057ac:	d00d      	beq.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0xb92>
 80057ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80057b2:	d016      	beq.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d111      	bne.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0xba4>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	3304      	adds	r3, #4
 80057bc:	2100      	movs	r1, #0
 80057be:	4618      	mov	r0, r3
 80057c0:	f000 f946 	bl	8005a50 <RCCEx_PLL2_Config>
 80057c4:	4603      	mov	r3, r0
 80057c6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80057c8:	e00c      	b.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0xbac>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	3324      	adds	r3, #36	; 0x24
 80057ce:	2102      	movs	r1, #2
 80057d0:	4618      	mov	r0, r3
 80057d2:	f000 f9ef 	bl	8005bb4 <RCCEx_PLL3_Config>
 80057d6:	4603      	mov	r3, r0
 80057d8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80057da:	e003      	b.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0xbac>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
 80057de:	75fb      	strb	r3, [r7, #23]
      break;
 80057e0:	e000      	b.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0xbac>
      break;
 80057e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80057e4:	7dfb      	ldrb	r3, [r7, #23]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d10c      	bne.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80057ea:	4b05      	ldr	r3, [pc, #20]	; (8005800 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80057ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057ee:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80057f8:	4901      	ldr	r1, [pc, #4]	; (8005800 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80057fa:	4313      	orrs	r3, r2
 80057fc:	658b      	str	r3, [r1, #88]	; 0x58
 80057fe:	e003      	b.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005800:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005804:	7dfb      	ldrb	r3, [r7, #23]
 8005806:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005810:	2b00      	cmp	r3, #0
 8005812:	d02f      	beq.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800581a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800581e:	d00c      	beq.n	800583a <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8005820:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005824:	d015      	beq.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8005826:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800582a:	d10f      	bne.n	800584c <HAL_RCCEx_PeriphCLKConfig+0xc14>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800582c:	4b79      	ldr	r3, [pc, #484]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800582e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005830:	4a78      	ldr	r2, [pc, #480]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8005832:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005836:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005838:	e00c      	b.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0xc1c>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	3324      	adds	r3, #36	; 0x24
 800583e:	2101      	movs	r1, #1
 8005840:	4618      	mov	r0, r3
 8005842:	f000 f9b7 	bl	8005bb4 <RCCEx_PLL3_Config>
 8005846:	4603      	mov	r3, r0
 8005848:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800584a:	e003      	b.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800584c:	2301      	movs	r3, #1
 800584e:	75fb      	strb	r3, [r7, #23]
      break;
 8005850:	e000      	b.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      break;
 8005852:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005854:	7dfb      	ldrb	r3, [r7, #23]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d10a      	bne.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800585a:	4b6e      	ldr	r3, [pc, #440]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800585c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800585e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005868:	496a      	ldr	r1, [pc, #424]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800586a:	4313      	orrs	r3, r2
 800586c:	654b      	str	r3, [r1, #84]	; 0x54
 800586e:	e001      	b.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005870:	7dfb      	ldrb	r3, [r7, #23]
 8005872:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800587c:	2b00      	cmp	r3, #0
 800587e:	d029      	beq.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005884:	2b00      	cmp	r3, #0
 8005886:	d003      	beq.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0xc58>
 8005888:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800588c:	d007      	beq.n	800589e <HAL_RCCEx_PeriphCLKConfig+0xc66>
 800588e:	e00f      	b.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0xc78>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005890:	4b60      	ldr	r3, [pc, #384]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8005892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005894:	4a5f      	ldr	r2, [pc, #380]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8005896:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800589a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800589c:	e00b      	b.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	3304      	adds	r3, #4
 80058a2:	2102      	movs	r1, #2
 80058a4:	4618      	mov	r0, r3
 80058a6:	f000 f8d3 	bl	8005a50 <RCCEx_PLL2_Config>
 80058aa:	4603      	mov	r3, r0
 80058ac:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80058ae:	e002      	b.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

    default:
      ret = HAL_ERROR;
 80058b0:	2301      	movs	r3, #1
 80058b2:	75fb      	strb	r3, [r7, #23]
      break;
 80058b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058b6:	7dfb      	ldrb	r3, [r7, #23]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d109      	bne.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80058bc:	4b55      	ldr	r3, [pc, #340]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80058be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058c0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058c8:	4952      	ldr	r1, [pc, #328]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80058ca:	4313      	orrs	r3, r2
 80058cc:	64cb      	str	r3, [r1, #76]	; 0x4c
 80058ce:	e001      	b.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058d0:	7dfb      	ldrb	r3, [r7, #23]
 80058d2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d00a      	beq.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	3324      	adds	r3, #36	; 0x24
 80058e4:	2102      	movs	r1, #2
 80058e6:	4618      	mov	r0, r3
 80058e8:	f000 f964 	bl	8005bb4 <RCCEx_PLL3_Config>
 80058ec:	4603      	mov	r3, r0
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d001      	beq.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    {
      status=HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d02f      	beq.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0xd2a>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005906:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800590a:	d00c      	beq.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0xcee>
 800590c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005910:	d802      	bhi.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0xce0>
 8005912:	2b00      	cmp	r3, #0
 8005914:	d011      	beq.n	800593a <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8005916:	e00d      	b.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0xcfc>
 8005918:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800591c:	d00f      	beq.n	800593e <HAL_RCCEx_PeriphCLKConfig+0xd06>
 800591e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005922:	d00e      	beq.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0xd0a>
 8005924:	e006      	b.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0xcfc>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005926:	4b3b      	ldr	r3, [pc, #236]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8005928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800592a:	4a3a      	ldr	r2, [pc, #232]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800592c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005930:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005932:	e007      	b.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005934:	2301      	movs	r3, #1
 8005936:	75fb      	strb	r3, [r7, #23]
      break;
 8005938:	e004      	b.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 800593a:	bf00      	nop
 800593c:	e002      	b.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 800593e:	bf00      	nop
 8005940:	e000      	b.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 8005942:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005944:	7dfb      	ldrb	r3, [r7, #23]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d109      	bne.n	800595e <HAL_RCCEx_PeriphCLKConfig+0xd26>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800594a:	4b32      	ldr	r3, [pc, #200]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800594c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800594e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005956:	492f      	ldr	r1, [pc, #188]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8005958:	4313      	orrs	r3, r2
 800595a:	654b      	str	r3, [r1, #84]	; 0x54
 800595c:	e001      	b.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0xd2a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800595e:	7dfb      	ldrb	r3, [r7, #23]
 8005960:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800596a:	2b00      	cmp	r3, #0
 800596c:	d008      	beq.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0xd48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800596e:	4b29      	ldr	r3, [pc, #164]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8005970:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005972:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800597a:	4926      	ldr	r1, [pc, #152]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800597c:	4313      	orrs	r3, r2
 800597e:	650b      	str	r3, [r1, #80]	; 0x50
  }

  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005988:	2b00      	cmp	r3, #0
 800598a:	d009      	beq.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0xd68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800598c:	4b21      	ldr	r3, [pc, #132]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800598e:	691b      	ldr	r3, [r3, #16]
 8005990:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800599a:	491e      	ldr	r1, [pc, #120]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800599c:	4313      	orrs	r3, r2
 800599e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d008      	beq.n	80059be <HAL_RCCEx_PeriphCLKConfig+0xd86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80059ac:	4b19      	ldr	r3, [pc, #100]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80059ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059b0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059b8:	4916      	ldr	r1, [pc, #88]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80059ba:	4313      	orrs	r3, r2
 80059bc:	650b      	str	r3, [r1, #80]	; 0x50
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d00d      	beq.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80059ca:	4b12      	ldr	r3, [pc, #72]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80059cc:	691b      	ldr	r3, [r3, #16]
 80059ce:	4a11      	ldr	r2, [pc, #68]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80059d0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80059d4:	6113      	str	r3, [r2, #16]
 80059d6:	4b0f      	ldr	r3, [pc, #60]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80059d8:	691a      	ldr	r2, [r3, #16]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80059e0:	490c      	ldr	r1, [pc, #48]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80059e2:	4313      	orrs	r3, r2
 80059e4:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	da08      	bge.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80059ee:	4b09      	ldr	r3, [pc, #36]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80059f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059f2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059fa:	4906      	ldr	r1, [pc, #24]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80059fc:	4313      	orrs	r3, r2
 80059fe:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8005a00:	7dbb      	ldrb	r3, [r7, #22]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d101      	bne.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    return HAL_OK;
 8005a06:	2300      	movs	r3, #0
 8005a08:	e000      	b.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0xdd4>
  }
  return HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3718      	adds	r7, #24
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}
 8005a14:	58024400 	.word	0x58024400

08005a18 <HAL_RCCEx_GetD1SysClockFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCCEx_GetD1SysClockFreq(void)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005a1c:	f7fe ff7e 	bl	800491c <HAL_RCC_GetSysClockFreq>
 8005a20:	4601      	mov	r1, r0
 8005a22:	4b08      	ldr	r3, [pc, #32]	; (8005a44 <HAL_RCCEx_GetD1SysClockFreq+0x2c>)
 8005a24:	699b      	ldr	r3, [r3, #24]
 8005a26:	0a1b      	lsrs	r3, r3, #8
 8005a28:	f003 030f 	and.w	r3, r3, #15
 8005a2c:	4a06      	ldr	r2, [pc, #24]	; (8005a48 <HAL_RCCEx_GetD1SysClockFreq+0x30>)
 8005a2e:	5cd3      	ldrb	r3, [r2, r3]
 8005a30:	f003 031f 	and.w	r3, r3, #31
 8005a34:	fa21 f303 	lsr.w	r3, r1, r3
 8005a38:	4a04      	ldr	r2, [pc, #16]	; (8005a4c <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 8005a3a:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8005a3c:	4b03      	ldr	r3, [pc, #12]	; (8005a4c <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	bd80      	pop	{r7, pc}
 8005a44:	58024400 	.word	0x58024400
 8005a48:	08016d68 	.word	0x08016d68
 8005a4c:	20000000 	.word	0x20000000

08005a50 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b084      	sub	sp, #16
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005a5e:	4b53      	ldr	r3, [pc, #332]	; (8005bac <RCCEx_PLL2_Config+0x15c>)
 8005a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a62:	f003 0303 	and.w	r3, r3, #3
 8005a66:	2b03      	cmp	r3, #3
 8005a68:	d101      	bne.n	8005a6e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e099      	b.n	8005ba2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005a6e:	4b4f      	ldr	r3, [pc, #316]	; (8005bac <RCCEx_PLL2_Config+0x15c>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a4e      	ldr	r2, [pc, #312]	; (8005bac <RCCEx_PLL2_Config+0x15c>)
 8005a74:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005a78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a7a:	f7fa feed 	bl	8000858 <HAL_GetTick>
 8005a7e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005a80:	e008      	b.n	8005a94 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005a82:	f7fa fee9 	bl	8000858 <HAL_GetTick>
 8005a86:	4602      	mov	r2, r0
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	1ad3      	subs	r3, r2, r3
 8005a8c:	2b02      	cmp	r3, #2
 8005a8e:	d901      	bls.n	8005a94 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005a90:	2303      	movs	r3, #3
 8005a92:	e086      	b.n	8005ba2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005a94:	4b45      	ldr	r3, [pc, #276]	; (8005bac <RCCEx_PLL2_Config+0x15c>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d1f0      	bne.n	8005a82 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005aa0:	4b42      	ldr	r3, [pc, #264]	; (8005bac <RCCEx_PLL2_Config+0x15c>)
 8005aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aa4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	031b      	lsls	r3, r3, #12
 8005aae:	493f      	ldr	r1, [pc, #252]	; (8005bac <RCCEx_PLL2_Config+0x15c>)
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	628b      	str	r3, [r1, #40]	; 0x28
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	3b01      	subs	r3, #1
 8005aba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	3b01      	subs	r3, #1
 8005ac4:	025b      	lsls	r3, r3, #9
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	431a      	orrs	r2, r3
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	68db      	ldr	r3, [r3, #12]
 8005ace:	3b01      	subs	r3, #1
 8005ad0:	041b      	lsls	r3, r3, #16
 8005ad2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005ad6:	431a      	orrs	r2, r3
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	691b      	ldr	r3, [r3, #16]
 8005adc:	3b01      	subs	r3, #1
 8005ade:	061b      	lsls	r3, r3, #24
 8005ae0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005ae4:	4931      	ldr	r1, [pc, #196]	; (8005bac <RCCEx_PLL2_Config+0x15c>)
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005aea:	4b30      	ldr	r3, [pc, #192]	; (8005bac <RCCEx_PLL2_Config+0x15c>)
 8005aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	695b      	ldr	r3, [r3, #20]
 8005af6:	492d      	ldr	r1, [pc, #180]	; (8005bac <RCCEx_PLL2_Config+0x15c>)
 8005af8:	4313      	orrs	r3, r2
 8005afa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005afc:	4b2b      	ldr	r3, [pc, #172]	; (8005bac <RCCEx_PLL2_Config+0x15c>)
 8005afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b00:	f023 0220 	bic.w	r2, r3, #32
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	699b      	ldr	r3, [r3, #24]
 8005b08:	4928      	ldr	r1, [pc, #160]	; (8005bac <RCCEx_PLL2_Config+0x15c>)
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005b0e:	4b27      	ldr	r3, [pc, #156]	; (8005bac <RCCEx_PLL2_Config+0x15c>)
 8005b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b12:	4a26      	ldr	r2, [pc, #152]	; (8005bac <RCCEx_PLL2_Config+0x15c>)
 8005b14:	f023 0310 	bic.w	r3, r3, #16
 8005b18:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005b1a:	4b24      	ldr	r3, [pc, #144]	; (8005bac <RCCEx_PLL2_Config+0x15c>)
 8005b1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b1e:	4b24      	ldr	r3, [pc, #144]	; (8005bb0 <RCCEx_PLL2_Config+0x160>)
 8005b20:	4013      	ands	r3, r2
 8005b22:	687a      	ldr	r2, [r7, #4]
 8005b24:	69d2      	ldr	r2, [r2, #28]
 8005b26:	00d2      	lsls	r2, r2, #3
 8005b28:	4920      	ldr	r1, [pc, #128]	; (8005bac <RCCEx_PLL2_Config+0x15c>)
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005b2e:	4b1f      	ldr	r3, [pc, #124]	; (8005bac <RCCEx_PLL2_Config+0x15c>)
 8005b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b32:	4a1e      	ldr	r2, [pc, #120]	; (8005bac <RCCEx_PLL2_Config+0x15c>)
 8005b34:	f043 0310 	orr.w	r3, r3, #16
 8005b38:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d106      	bne.n	8005b4e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005b40:	4b1a      	ldr	r3, [pc, #104]	; (8005bac <RCCEx_PLL2_Config+0x15c>)
 8005b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b44:	4a19      	ldr	r2, [pc, #100]	; (8005bac <RCCEx_PLL2_Config+0x15c>)
 8005b46:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b4a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005b4c:	e00f      	b.n	8005b6e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d106      	bne.n	8005b62 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005b54:	4b15      	ldr	r3, [pc, #84]	; (8005bac <RCCEx_PLL2_Config+0x15c>)
 8005b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b58:	4a14      	ldr	r2, [pc, #80]	; (8005bac <RCCEx_PLL2_Config+0x15c>)
 8005b5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b5e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005b60:	e005      	b.n	8005b6e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005b62:	4b12      	ldr	r3, [pc, #72]	; (8005bac <RCCEx_PLL2_Config+0x15c>)
 8005b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b66:	4a11      	ldr	r2, [pc, #68]	; (8005bac <RCCEx_PLL2_Config+0x15c>)
 8005b68:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005b6c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005b6e:	4b0f      	ldr	r3, [pc, #60]	; (8005bac <RCCEx_PLL2_Config+0x15c>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a0e      	ldr	r2, [pc, #56]	; (8005bac <RCCEx_PLL2_Config+0x15c>)
 8005b74:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005b78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b7a:	f7fa fe6d 	bl	8000858 <HAL_GetTick>
 8005b7e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005b80:	e008      	b.n	8005b94 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005b82:	f7fa fe69 	bl	8000858 <HAL_GetTick>
 8005b86:	4602      	mov	r2, r0
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	1ad3      	subs	r3, r2, r3
 8005b8c:	2b02      	cmp	r3, #2
 8005b8e:	d901      	bls.n	8005b94 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005b90:	2303      	movs	r3, #3
 8005b92:	e006      	b.n	8005ba2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005b94:	4b05      	ldr	r3, [pc, #20]	; (8005bac <RCCEx_PLL2_Config+0x15c>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d0f0      	beq.n	8005b82 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005ba0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3710      	adds	r7, #16
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}
 8005baa:	bf00      	nop
 8005bac:	58024400 	.word	0x58024400
 8005bb0:	ffff0007 	.word	0xffff0007

08005bb4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b084      	sub	sp, #16
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
 8005bbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005bc2:	4b53      	ldr	r3, [pc, #332]	; (8005d10 <RCCEx_PLL3_Config+0x15c>)
 8005bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bc6:	f003 0303 	and.w	r3, r3, #3
 8005bca:	2b03      	cmp	r3, #3
 8005bcc:	d101      	bne.n	8005bd2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	e099      	b.n	8005d06 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005bd2:	4b4f      	ldr	r3, [pc, #316]	; (8005d10 <RCCEx_PLL3_Config+0x15c>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a4e      	ldr	r2, [pc, #312]	; (8005d10 <RCCEx_PLL3_Config+0x15c>)
 8005bd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005bdc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bde:	f7fa fe3b 	bl	8000858 <HAL_GetTick>
 8005be2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005be4:	e008      	b.n	8005bf8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005be6:	f7fa fe37 	bl	8000858 <HAL_GetTick>
 8005bea:	4602      	mov	r2, r0
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	1ad3      	subs	r3, r2, r3
 8005bf0:	2b02      	cmp	r3, #2
 8005bf2:	d901      	bls.n	8005bf8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005bf4:	2303      	movs	r3, #3
 8005bf6:	e086      	b.n	8005d06 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005bf8:	4b45      	ldr	r3, [pc, #276]	; (8005d10 <RCCEx_PLL3_Config+0x15c>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d1f0      	bne.n	8005be6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005c04:	4b42      	ldr	r3, [pc, #264]	; (8005d10 <RCCEx_PLL3_Config+0x15c>)
 8005c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c08:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	051b      	lsls	r3, r3, #20
 8005c12:	493f      	ldr	r1, [pc, #252]	; (8005d10 <RCCEx_PLL3_Config+0x15c>)
 8005c14:	4313      	orrs	r3, r2
 8005c16:	628b      	str	r3, [r1, #40]	; 0x28
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	3b01      	subs	r3, #1
 8005c1e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	3b01      	subs	r3, #1
 8005c28:	025b      	lsls	r3, r3, #9
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	431a      	orrs	r2, r3
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	68db      	ldr	r3, [r3, #12]
 8005c32:	3b01      	subs	r3, #1
 8005c34:	041b      	lsls	r3, r3, #16
 8005c36:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005c3a:	431a      	orrs	r2, r3
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	691b      	ldr	r3, [r3, #16]
 8005c40:	3b01      	subs	r3, #1
 8005c42:	061b      	lsls	r3, r3, #24
 8005c44:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005c48:	4931      	ldr	r1, [pc, #196]	; (8005d10 <RCCEx_PLL3_Config+0x15c>)
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005c4e:	4b30      	ldr	r3, [pc, #192]	; (8005d10 <RCCEx_PLL3_Config+0x15c>)
 8005c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c52:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	695b      	ldr	r3, [r3, #20]
 8005c5a:	492d      	ldr	r1, [pc, #180]	; (8005d10 <RCCEx_PLL3_Config+0x15c>)
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005c60:	4b2b      	ldr	r3, [pc, #172]	; (8005d10 <RCCEx_PLL3_Config+0x15c>)
 8005c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c64:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	699b      	ldr	r3, [r3, #24]
 8005c6c:	4928      	ldr	r1, [pc, #160]	; (8005d10 <RCCEx_PLL3_Config+0x15c>)
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005c72:	4b27      	ldr	r3, [pc, #156]	; (8005d10 <RCCEx_PLL3_Config+0x15c>)
 8005c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c76:	4a26      	ldr	r2, [pc, #152]	; (8005d10 <RCCEx_PLL3_Config+0x15c>)
 8005c78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c7c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005c7e:	4b24      	ldr	r3, [pc, #144]	; (8005d10 <RCCEx_PLL3_Config+0x15c>)
 8005c80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c82:	4b24      	ldr	r3, [pc, #144]	; (8005d14 <RCCEx_PLL3_Config+0x160>)
 8005c84:	4013      	ands	r3, r2
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	69d2      	ldr	r2, [r2, #28]
 8005c8a:	00d2      	lsls	r2, r2, #3
 8005c8c:	4920      	ldr	r1, [pc, #128]	; (8005d10 <RCCEx_PLL3_Config+0x15c>)
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005c92:	4b1f      	ldr	r3, [pc, #124]	; (8005d10 <RCCEx_PLL3_Config+0x15c>)
 8005c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c96:	4a1e      	ldr	r2, [pc, #120]	; (8005d10 <RCCEx_PLL3_Config+0x15c>)
 8005c98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c9c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d106      	bne.n	8005cb2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005ca4:	4b1a      	ldr	r3, [pc, #104]	; (8005d10 <RCCEx_PLL3_Config+0x15c>)
 8005ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ca8:	4a19      	ldr	r2, [pc, #100]	; (8005d10 <RCCEx_PLL3_Config+0x15c>)
 8005caa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005cae:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005cb0:	e00f      	b.n	8005cd2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d106      	bne.n	8005cc6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005cb8:	4b15      	ldr	r3, [pc, #84]	; (8005d10 <RCCEx_PLL3_Config+0x15c>)
 8005cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cbc:	4a14      	ldr	r2, [pc, #80]	; (8005d10 <RCCEx_PLL3_Config+0x15c>)
 8005cbe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005cc2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005cc4:	e005      	b.n	8005cd2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005cc6:	4b12      	ldr	r3, [pc, #72]	; (8005d10 <RCCEx_PLL3_Config+0x15c>)
 8005cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cca:	4a11      	ldr	r2, [pc, #68]	; (8005d10 <RCCEx_PLL3_Config+0x15c>)
 8005ccc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005cd0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005cd2:	4b0f      	ldr	r3, [pc, #60]	; (8005d10 <RCCEx_PLL3_Config+0x15c>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a0e      	ldr	r2, [pc, #56]	; (8005d10 <RCCEx_PLL3_Config+0x15c>)
 8005cd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cdc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cde:	f7fa fdbb 	bl	8000858 <HAL_GetTick>
 8005ce2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005ce4:	e008      	b.n	8005cf8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005ce6:	f7fa fdb7 	bl	8000858 <HAL_GetTick>
 8005cea:	4602      	mov	r2, r0
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	1ad3      	subs	r3, r2, r3
 8005cf0:	2b02      	cmp	r3, #2
 8005cf2:	d901      	bls.n	8005cf8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005cf4:	2303      	movs	r3, #3
 8005cf6:	e006      	b.n	8005d06 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005cf8:	4b05      	ldr	r3, [pc, #20]	; (8005d10 <RCCEx_PLL3_Config+0x15c>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d0f0      	beq.n	8005ce6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3710      	adds	r7, #16
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}
 8005d0e:	bf00      	nop
 8005d10:	58024400 	.word	0x58024400
 8005d14:	ffff0007 	.word	0xffff0007

08005d18 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005d18:	b084      	sub	sp, #16
 8005d1a:	b580      	push	{r7, lr}
 8005d1c:	b084      	sub	sp, #16
 8005d1e:	af00      	add	r7, sp, #0
 8005d20:	6078      	str	r0, [r7, #4]
 8005d22:	f107 001c 	add.w	r0, r7, #28
 8005d26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d120      	bne.n	8005d72 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d34:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	68da      	ldr	r2, [r3, #12]
 8005d40:	4b25      	ldr	r3, [pc, #148]	; (8005dd8 <USB_CoreInit+0xc0>)
 8005d42:	4013      	ands	r3, r2
 8005d44:	687a      	ldr	r2, [r7, #4]
 8005d46:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	68db      	ldr	r3, [r3, #12]
 8005d4c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005d54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d56:	2b01      	cmp	r3, #1
 8005d58:	d105      	bne.n	8005d66 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	68db      	ldr	r3, [r3, #12]
 8005d5e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f001 fa86 	bl	8007278 <USB_CoreReset>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	73fb      	strb	r3, [r7, #15]
 8005d70:	e01a      	b.n	8005da8 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	68db      	ldr	r3, [r3, #12]
 8005d76:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f001 fa7a 	bl	8007278 <USB_CoreReset>
 8005d84:	4603      	mov	r3, r0
 8005d86:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005d88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d106      	bne.n	8005d9c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d92:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	639a      	str	r2, [r3, #56]	; 0x38
 8005d9a:	e005      	b.n	8005da8 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d10b      	bne.n	8005dc6 <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	f043 0208 	orr.w	r2, r3, #8
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	f043 0220 	orr.w	r2, r3, #32
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005dc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3710      	adds	r7, #16
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005dd2:	b004      	add	sp, #16
 8005dd4:	4770      	bx	lr
 8005dd6:	bf00      	nop
 8005dd8:	ffbdffbf 	.word	0xffbdffbf

08005ddc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b087      	sub	sp, #28
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	60f8      	str	r0, [r7, #12]
 8005de4:	60b9      	str	r1, [r7, #8]
 8005de6:	4613      	mov	r3, r2
 8005de8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005dea:	79fb      	ldrb	r3, [r7, #7]
 8005dec:	2b02      	cmp	r3, #2
 8005dee:	d165      	bne.n	8005ebc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	4a41      	ldr	r2, [pc, #260]	; (8005ef8 <USB_SetTurnaroundTime+0x11c>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d906      	bls.n	8005e06 <USB_SetTurnaroundTime+0x2a>
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	4a40      	ldr	r2, [pc, #256]	; (8005efc <USB_SetTurnaroundTime+0x120>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d802      	bhi.n	8005e06 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005e00:	230f      	movs	r3, #15
 8005e02:	617b      	str	r3, [r7, #20]
 8005e04:	e062      	b.n	8005ecc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	4a3c      	ldr	r2, [pc, #240]	; (8005efc <USB_SetTurnaroundTime+0x120>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d906      	bls.n	8005e1c <USB_SetTurnaroundTime+0x40>
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	4a3b      	ldr	r2, [pc, #236]	; (8005f00 <USB_SetTurnaroundTime+0x124>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d802      	bhi.n	8005e1c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005e16:	230e      	movs	r3, #14
 8005e18:	617b      	str	r3, [r7, #20]
 8005e1a:	e057      	b.n	8005ecc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	4a38      	ldr	r2, [pc, #224]	; (8005f00 <USB_SetTurnaroundTime+0x124>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d906      	bls.n	8005e32 <USB_SetTurnaroundTime+0x56>
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	4a37      	ldr	r2, [pc, #220]	; (8005f04 <USB_SetTurnaroundTime+0x128>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d802      	bhi.n	8005e32 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005e2c:	230d      	movs	r3, #13
 8005e2e:	617b      	str	r3, [r7, #20]
 8005e30:	e04c      	b.n	8005ecc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	4a33      	ldr	r2, [pc, #204]	; (8005f04 <USB_SetTurnaroundTime+0x128>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d906      	bls.n	8005e48 <USB_SetTurnaroundTime+0x6c>
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	4a32      	ldr	r2, [pc, #200]	; (8005f08 <USB_SetTurnaroundTime+0x12c>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d802      	bhi.n	8005e48 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005e42:	230c      	movs	r3, #12
 8005e44:	617b      	str	r3, [r7, #20]
 8005e46:	e041      	b.n	8005ecc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	4a2f      	ldr	r2, [pc, #188]	; (8005f08 <USB_SetTurnaroundTime+0x12c>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d906      	bls.n	8005e5e <USB_SetTurnaroundTime+0x82>
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	4a2e      	ldr	r2, [pc, #184]	; (8005f0c <USB_SetTurnaroundTime+0x130>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d802      	bhi.n	8005e5e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005e58:	230b      	movs	r3, #11
 8005e5a:	617b      	str	r3, [r7, #20]
 8005e5c:	e036      	b.n	8005ecc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	4a2a      	ldr	r2, [pc, #168]	; (8005f0c <USB_SetTurnaroundTime+0x130>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d906      	bls.n	8005e74 <USB_SetTurnaroundTime+0x98>
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	4a29      	ldr	r2, [pc, #164]	; (8005f10 <USB_SetTurnaroundTime+0x134>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d802      	bhi.n	8005e74 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005e6e:	230a      	movs	r3, #10
 8005e70:	617b      	str	r3, [r7, #20]
 8005e72:	e02b      	b.n	8005ecc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	4a26      	ldr	r2, [pc, #152]	; (8005f10 <USB_SetTurnaroundTime+0x134>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d906      	bls.n	8005e8a <USB_SetTurnaroundTime+0xae>
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	4a25      	ldr	r2, [pc, #148]	; (8005f14 <USB_SetTurnaroundTime+0x138>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d802      	bhi.n	8005e8a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005e84:	2309      	movs	r3, #9
 8005e86:	617b      	str	r3, [r7, #20]
 8005e88:	e020      	b.n	8005ecc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	4a21      	ldr	r2, [pc, #132]	; (8005f14 <USB_SetTurnaroundTime+0x138>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d906      	bls.n	8005ea0 <USB_SetTurnaroundTime+0xc4>
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	4a20      	ldr	r2, [pc, #128]	; (8005f18 <USB_SetTurnaroundTime+0x13c>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d802      	bhi.n	8005ea0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005e9a:	2308      	movs	r3, #8
 8005e9c:	617b      	str	r3, [r7, #20]
 8005e9e:	e015      	b.n	8005ecc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	4a1d      	ldr	r2, [pc, #116]	; (8005f18 <USB_SetTurnaroundTime+0x13c>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d906      	bls.n	8005eb6 <USB_SetTurnaroundTime+0xda>
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	4a1c      	ldr	r2, [pc, #112]	; (8005f1c <USB_SetTurnaroundTime+0x140>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d802      	bhi.n	8005eb6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005eb0:	2307      	movs	r3, #7
 8005eb2:	617b      	str	r3, [r7, #20]
 8005eb4:	e00a      	b.n	8005ecc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005eb6:	2306      	movs	r3, #6
 8005eb8:	617b      	str	r3, [r7, #20]
 8005eba:	e007      	b.n	8005ecc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005ebc:	79fb      	ldrb	r3, [r7, #7]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d102      	bne.n	8005ec8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005ec2:	2309      	movs	r3, #9
 8005ec4:	617b      	str	r3, [r7, #20]
 8005ec6:	e001      	b.n	8005ecc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005ec8:	2309      	movs	r3, #9
 8005eca:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	68db      	ldr	r3, [r3, #12]
 8005ed0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	68da      	ldr	r2, [r3, #12]
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	029b      	lsls	r3, r3, #10
 8005ee0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005ee4:	431a      	orrs	r2, r3
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005eea:	2300      	movs	r3, #0
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	371c      	adds	r7, #28
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef6:	4770      	bx	lr
 8005ef8:	00d8acbf 	.word	0x00d8acbf
 8005efc:	00e4e1bf 	.word	0x00e4e1bf
 8005f00:	00f423ff 	.word	0x00f423ff
 8005f04:	0106737f 	.word	0x0106737f
 8005f08:	011a499f 	.word	0x011a499f
 8005f0c:	01312cff 	.word	0x01312cff
 8005f10:	014ca43f 	.word	0x014ca43f
 8005f14:	016e35ff 	.word	0x016e35ff
 8005f18:	01a6ab1f 	.word	0x01a6ab1f
 8005f1c:	01e847ff 	.word	0x01e847ff

08005f20 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b083      	sub	sp, #12
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	f043 0201 	orr.w	r2, r3, #1
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005f34:	2300      	movs	r3, #0
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	370c      	adds	r7, #12
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f40:	4770      	bx	lr

08005f42 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f42:	b480      	push	{r7}
 8005f44:	b083      	sub	sp, #12
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	689b      	ldr	r3, [r3, #8]
 8005f4e:	f023 0201 	bic.w	r2, r3, #1
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005f56:	2300      	movs	r3, #0
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	370c      	adds	r7, #12
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr

08005f64 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b082      	sub	sp, #8
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	460b      	mov	r3, r1
 8005f6e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	68db      	ldr	r3, [r3, #12]
 8005f74:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005f7c:	78fb      	ldrb	r3, [r7, #3]
 8005f7e:	2b01      	cmp	r3, #1
 8005f80:	d106      	bne.n	8005f90 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	68db      	ldr	r3, [r3, #12]
 8005f86:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	60da      	str	r2, [r3, #12]
 8005f8e:	e00b      	b.n	8005fa8 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005f90:	78fb      	ldrb	r3, [r7, #3]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d106      	bne.n	8005fa4 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	68db      	ldr	r3, [r3, #12]
 8005f9a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	60da      	str	r2, [r3, #12]
 8005fa2:	e001      	b.n	8005fa8 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	e003      	b.n	8005fb0 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005fa8:	2032      	movs	r0, #50	; 0x32
 8005faa:	f7fa fc61 	bl	8000870 <HAL_Delay>

  return HAL_OK;
 8005fae:	2300      	movs	r3, #0
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3708      	adds	r7, #8
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}

08005fb8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005fb8:	b084      	sub	sp, #16
 8005fba:	b580      	push	{r7, lr}
 8005fbc:	b086      	sub	sp, #24
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	6078      	str	r0, [r7, #4]
 8005fc2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005fc6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	613b      	str	r3, [r7, #16]
 8005fd6:	e009      	b.n	8005fec <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005fd8:	687a      	ldr	r2, [r7, #4]
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	3340      	adds	r3, #64	; 0x40
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	4413      	add	r3, r2
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	3301      	adds	r3, #1
 8005fea:	613b      	str	r3, [r7, #16]
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	2b0e      	cmp	r3, #14
 8005ff0:	d9f2      	bls.n	8005fd8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005ff2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d112      	bne.n	800601e <USB_DevInit+0x66>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ffc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	601a      	str	r2, [r3, #0]
 800601c:	e005      	b.n	800602a <USB_DevInit+0x72>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006022:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006030:	461a      	mov	r2, r3
 8006032:	2300      	movs	r3, #0
 8006034:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800603c:	4619      	mov	r1, r3
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006044:	461a      	mov	r2, r3
 8006046:	680b      	ldr	r3, [r1, #0]
 8006048:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800604a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800604c:	2b01      	cmp	r3, #1
 800604e:	d10c      	bne.n	800606a <USB_DevInit+0xb2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006052:	2b00      	cmp	r3, #0
 8006054:	d104      	bne.n	8006060 <USB_DevInit+0xa8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006056:	2100      	movs	r1, #0
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f000 f961 	bl	8006320 <USB_SetDevSpeed>
 800605e:	e008      	b.n	8006072 <USB_DevInit+0xba>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006060:	2101      	movs	r1, #1
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f000 f95c 	bl	8006320 <USB_SetDevSpeed>
 8006068:	e003      	b.n	8006072 <USB_DevInit+0xba>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800606a:	2103      	movs	r1, #3
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f000 f957 	bl	8006320 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006072:	2110      	movs	r1, #16
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	f000 f90b 	bl	8006290 <USB_FlushTxFifo>
 800607a:	4603      	mov	r3, r0
 800607c:	2b00      	cmp	r3, #0
 800607e:	d001      	beq.n	8006084 <USB_DevInit+0xcc>
  {
    ret = HAL_ERROR;
 8006080:	2301      	movs	r3, #1
 8006082:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f000 f929 	bl	80062dc <USB_FlushRxFifo>
 800608a:	4603      	mov	r3, r0
 800608c:	2b00      	cmp	r3, #0
 800608e:	d001      	beq.n	8006094 <USB_DevInit+0xdc>
  {
    ret = HAL_ERROR;
 8006090:	2301      	movs	r3, #1
 8006092:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800609a:	461a      	mov	r2, r3
 800609c:	2300      	movs	r3, #0
 800609e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060a6:	461a      	mov	r2, r3
 80060a8:	2300      	movs	r3, #0
 80060aa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060b2:	461a      	mov	r2, r3
 80060b4:	2300      	movs	r3, #0
 80060b6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80060b8:	2300      	movs	r3, #0
 80060ba:	613b      	str	r3, [r7, #16]
 80060bc:	e043      	b.n	8006146 <USB_DevInit+0x18e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	015a      	lsls	r2, r3, #5
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	4413      	add	r3, r2
 80060c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80060d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80060d4:	d118      	bne.n	8006108 <USB_DevInit+0x150>
    {
      if (i == 0U)
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d10a      	bne.n	80060f2 <USB_DevInit+0x13a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	015a      	lsls	r2, r3, #5
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	4413      	add	r3, r2
 80060e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060e8:	461a      	mov	r2, r3
 80060ea:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80060ee:	6013      	str	r3, [r2, #0]
 80060f0:	e013      	b.n	800611a <USB_DevInit+0x162>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	015a      	lsls	r2, r3, #5
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	4413      	add	r3, r2
 80060fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060fe:	461a      	mov	r2, r3
 8006100:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006104:	6013      	str	r3, [r2, #0]
 8006106:	e008      	b.n	800611a <USB_DevInit+0x162>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	015a      	lsls	r2, r3, #5
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	4413      	add	r3, r2
 8006110:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006114:	461a      	mov	r2, r3
 8006116:	2300      	movs	r3, #0
 8006118:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	015a      	lsls	r2, r3, #5
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	4413      	add	r3, r2
 8006122:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006126:	461a      	mov	r2, r3
 8006128:	2300      	movs	r3, #0
 800612a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	015a      	lsls	r2, r3, #5
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	4413      	add	r3, r2
 8006134:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006138:	461a      	mov	r2, r3
 800613a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800613e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	3301      	adds	r3, #1
 8006144:	613b      	str	r3, [r7, #16]
 8006146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006148:	693a      	ldr	r2, [r7, #16]
 800614a:	429a      	cmp	r2, r3
 800614c:	d3b7      	bcc.n	80060be <USB_DevInit+0x106>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800614e:	2300      	movs	r3, #0
 8006150:	613b      	str	r3, [r7, #16]
 8006152:	e043      	b.n	80061dc <USB_DevInit+0x224>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	015a      	lsls	r2, r3, #5
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	4413      	add	r3, r2
 800615c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006166:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800616a:	d118      	bne.n	800619e <USB_DevInit+0x1e6>
    {
      if (i == 0U)
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d10a      	bne.n	8006188 <USB_DevInit+0x1d0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	015a      	lsls	r2, r3, #5
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	4413      	add	r3, r2
 800617a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800617e:	461a      	mov	r2, r3
 8006180:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006184:	6013      	str	r3, [r2, #0]
 8006186:	e013      	b.n	80061b0 <USB_DevInit+0x1f8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	015a      	lsls	r2, r3, #5
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	4413      	add	r3, r2
 8006190:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006194:	461a      	mov	r2, r3
 8006196:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800619a:	6013      	str	r3, [r2, #0]
 800619c:	e008      	b.n	80061b0 <USB_DevInit+0x1f8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	015a      	lsls	r2, r3, #5
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	4413      	add	r3, r2
 80061a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061aa:	461a      	mov	r2, r3
 80061ac:	2300      	movs	r3, #0
 80061ae:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	015a      	lsls	r2, r3, #5
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	4413      	add	r3, r2
 80061b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061bc:	461a      	mov	r2, r3
 80061be:	2300      	movs	r3, #0
 80061c0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	015a      	lsls	r2, r3, #5
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	4413      	add	r3, r2
 80061ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061ce:	461a      	mov	r2, r3
 80061d0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80061d4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	3301      	adds	r3, #1
 80061da:	613b      	str	r3, [r7, #16]
 80061dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061de:	693a      	ldr	r2, [r7, #16]
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d3b7      	bcc.n	8006154 <USB_DevInit+0x19c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061ea:	691b      	ldr	r3, [r3, #16]
 80061ec:	68fa      	ldr	r2, [r7, #12]
 80061ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80061f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061f6:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 80061f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061fa:	2b01      	cmp	r3, #1
 80061fc:	d110      	bne.n	8006220 <USB_DevInit+0x268>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006204:	461a      	mov	r2, r3
 8006206:	4b1e      	ldr	r3, [pc, #120]	; (8006280 <USB_DevInit+0x2c8>)
 8006208:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006210:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006218:	4619      	mov	r1, r3
 800621a:	4b1a      	ldr	r3, [pc, #104]	; (8006284 <USB_DevInit+0x2cc>)
 800621c:	4313      	orrs	r3, r2
 800621e:	630b      	str	r3, [r1, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2200      	movs	r2, #0
 8006224:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800622c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800622e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006230:	2b00      	cmp	r3, #0
 8006232:	d105      	bne.n	8006240 <USB_DevInit+0x288>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	699b      	ldr	r3, [r3, #24]
 8006238:	f043 0210 	orr.w	r2, r3, #16
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	699a      	ldr	r2, [r3, #24]
 8006244:	4b10      	ldr	r3, [pc, #64]	; (8006288 <USB_DevInit+0x2d0>)
 8006246:	4313      	orrs	r3, r2
 8006248:	687a      	ldr	r2, [r7, #4]
 800624a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800624c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800624e:	2b00      	cmp	r3, #0
 8006250:	d005      	beq.n	800625e <USB_DevInit+0x2a6>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	699b      	ldr	r3, [r3, #24]
 8006256:	f043 0208 	orr.w	r2, r3, #8
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800625e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006260:	2b01      	cmp	r3, #1
 8006262:	d105      	bne.n	8006270 <USB_DevInit+0x2b8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	699a      	ldr	r2, [r3, #24]
 8006268:	4b08      	ldr	r3, [pc, #32]	; (800628c <USB_DevInit+0x2d4>)
 800626a:	4313      	orrs	r3, r2
 800626c:	687a      	ldr	r2, [r7, #4]
 800626e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006270:	7dfb      	ldrb	r3, [r7, #23]
}
 8006272:	4618      	mov	r0, r3
 8006274:	3718      	adds	r7, #24
 8006276:	46bd      	mov	sp, r7
 8006278:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800627c:	b004      	add	sp, #16
 800627e:	4770      	bx	lr
 8006280:	00800100 	.word	0x00800100
 8006284:	00010003 	.word	0x00010003
 8006288:	803c3800 	.word	0x803c3800
 800628c:	40000004 	.word	0x40000004

08006290 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006290:	b480      	push	{r7}
 8006292:	b085      	sub	sp, #20
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
 8006298:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800629a:	2300      	movs	r3, #0
 800629c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	019b      	lsls	r3, r3, #6
 80062a2:	f043 0220 	orr.w	r2, r3, #32
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	3301      	adds	r3, #1
 80062ae:	60fb      	str	r3, [r7, #12]
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	4a09      	ldr	r2, [pc, #36]	; (80062d8 <USB_FlushTxFifo+0x48>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d901      	bls.n	80062bc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80062b8:	2303      	movs	r3, #3
 80062ba:	e006      	b.n	80062ca <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	691b      	ldr	r3, [r3, #16]
 80062c0:	f003 0320 	and.w	r3, r3, #32
 80062c4:	2b20      	cmp	r3, #32
 80062c6:	d0f0      	beq.n	80062aa <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80062c8:	2300      	movs	r3, #0
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3714      	adds	r7, #20
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr
 80062d6:	bf00      	nop
 80062d8:	00030d40 	.word	0x00030d40

080062dc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80062dc:	b480      	push	{r7}
 80062de:	b085      	sub	sp, #20
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80062e4:	2300      	movs	r3, #0
 80062e6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2210      	movs	r2, #16
 80062ec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	3301      	adds	r3, #1
 80062f2:	60fb      	str	r3, [r7, #12]
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	4a09      	ldr	r2, [pc, #36]	; (800631c <USB_FlushRxFifo+0x40>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d901      	bls.n	8006300 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80062fc:	2303      	movs	r3, #3
 80062fe:	e006      	b.n	800630e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	691b      	ldr	r3, [r3, #16]
 8006304:	f003 0310 	and.w	r3, r3, #16
 8006308:	2b10      	cmp	r3, #16
 800630a:	d0f0      	beq.n	80062ee <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800630c:	2300      	movs	r3, #0
}
 800630e:	4618      	mov	r0, r3
 8006310:	3714      	adds	r7, #20
 8006312:	46bd      	mov	sp, r7
 8006314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006318:	4770      	bx	lr
 800631a:	bf00      	nop
 800631c:	00030d40 	.word	0x00030d40

08006320 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006320:	b480      	push	{r7}
 8006322:	b085      	sub	sp, #20
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
 8006328:	460b      	mov	r3, r1
 800632a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	78fb      	ldrb	r3, [r7, #3]
 800633a:	68f9      	ldr	r1, [r7, #12]
 800633c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006340:	4313      	orrs	r3, r2
 8006342:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006344:	2300      	movs	r3, #0
}
 8006346:	4618      	mov	r0, r3
 8006348:	3714      	adds	r7, #20
 800634a:	46bd      	mov	sp, r7
 800634c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006350:	4770      	bx	lr

08006352 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006352:	b480      	push	{r7}
 8006354:	b087      	sub	sp, #28
 8006356:	af00      	add	r7, sp, #0
 8006358:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	f003 0306 	and.w	r3, r3, #6
 800636a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d102      	bne.n	8006378 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006372:	2300      	movs	r3, #0
 8006374:	75fb      	strb	r3, [r7, #23]
 8006376:	e00a      	b.n	800638e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2b02      	cmp	r3, #2
 800637c:	d002      	beq.n	8006384 <USB_GetDevSpeed+0x32>
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2b06      	cmp	r3, #6
 8006382:	d102      	bne.n	800638a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006384:	2302      	movs	r3, #2
 8006386:	75fb      	strb	r3, [r7, #23]
 8006388:	e001      	b.n	800638e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800638a:	230f      	movs	r3, #15
 800638c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800638e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006390:	4618      	mov	r0, r3
 8006392:	371c      	adds	r7, #28
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr

0800639c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800639c:	b480      	push	{r7}
 800639e:	b085      	sub	sp, #20
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
 80063a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	781b      	ldrb	r3, [r3, #0]
 80063ae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	785b      	ldrb	r3, [r3, #1]
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	d139      	bne.n	800642c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063be:	69da      	ldr	r2, [r3, #28]
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	781b      	ldrb	r3, [r3, #0]
 80063c4:	f003 030f 	and.w	r3, r3, #15
 80063c8:	2101      	movs	r1, #1
 80063ca:	fa01 f303 	lsl.w	r3, r1, r3
 80063ce:	b29b      	uxth	r3, r3
 80063d0:	68f9      	ldr	r1, [r7, #12]
 80063d2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80063d6:	4313      	orrs	r3, r2
 80063d8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	015a      	lsls	r2, r3, #5
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	4413      	add	r3, r2
 80063e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d153      	bne.n	8006498 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	015a      	lsls	r2, r3, #5
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	4413      	add	r3, r2
 80063f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063fc:	681a      	ldr	r2, [r3, #0]
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	689b      	ldr	r3, [r3, #8]
 8006402:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	78db      	ldrb	r3, [r3, #3]
 800640a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800640c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	059b      	lsls	r3, r3, #22
 8006412:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006414:	431a      	orrs	r2, r3
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	0159      	lsls	r1, r3, #5
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	440b      	add	r3, r1
 800641e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006422:	4619      	mov	r1, r3
 8006424:	4b20      	ldr	r3, [pc, #128]	; (80064a8 <USB_ActivateEndpoint+0x10c>)
 8006426:	4313      	orrs	r3, r2
 8006428:	600b      	str	r3, [r1, #0]
 800642a:	e035      	b.n	8006498 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006432:	69da      	ldr	r2, [r3, #28]
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	781b      	ldrb	r3, [r3, #0]
 8006438:	f003 030f 	and.w	r3, r3, #15
 800643c:	2101      	movs	r1, #1
 800643e:	fa01 f303 	lsl.w	r3, r1, r3
 8006442:	041b      	lsls	r3, r3, #16
 8006444:	68f9      	ldr	r1, [r7, #12]
 8006446:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800644a:	4313      	orrs	r3, r2
 800644c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	015a      	lsls	r2, r3, #5
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	4413      	add	r3, r2
 8006456:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006460:	2b00      	cmp	r3, #0
 8006462:	d119      	bne.n	8006498 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	015a      	lsls	r2, r3, #5
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	4413      	add	r3, r2
 800646c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006470:	681a      	ldr	r2, [r3, #0]
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	78db      	ldrb	r3, [r3, #3]
 800647e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006480:	430b      	orrs	r3, r1
 8006482:	431a      	orrs	r2, r3
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	0159      	lsls	r1, r3, #5
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	440b      	add	r3, r1
 800648c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006490:	4619      	mov	r1, r3
 8006492:	4b05      	ldr	r3, [pc, #20]	; (80064a8 <USB_ActivateEndpoint+0x10c>)
 8006494:	4313      	orrs	r3, r2
 8006496:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006498:	2300      	movs	r3, #0
}
 800649a:	4618      	mov	r0, r3
 800649c:	3714      	adds	r7, #20
 800649e:	46bd      	mov	sp, r7
 80064a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a4:	4770      	bx	lr
 80064a6:	bf00      	nop
 80064a8:	10008000 	.word	0x10008000

080064ac <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b085      	sub	sp, #20
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
 80064b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	781b      	ldrb	r3, [r3, #0]
 80064be:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	785b      	ldrb	r3, [r3, #1]
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	d135      	bne.n	8006534 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	781b      	ldrb	r3, [r3, #0]
 80064d4:	f003 030f 	and.w	r3, r3, #15
 80064d8:	2101      	movs	r1, #1
 80064da:	fa01 f303 	lsl.w	r3, r1, r3
 80064de:	b29b      	uxth	r3, r3
 80064e0:	43db      	mvns	r3, r3
 80064e2:	68f9      	ldr	r1, [r7, #12]
 80064e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80064e8:	4013      	ands	r3, r2
 80064ea:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064f2:	69da      	ldr	r2, [r3, #28]
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	781b      	ldrb	r3, [r3, #0]
 80064f8:	f003 030f 	and.w	r3, r3, #15
 80064fc:	2101      	movs	r1, #1
 80064fe:	fa01 f303 	lsl.w	r3, r1, r3
 8006502:	b29b      	uxth	r3, r3
 8006504:	43db      	mvns	r3, r3
 8006506:	68f9      	ldr	r1, [r7, #12]
 8006508:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800650c:	4013      	ands	r3, r2
 800650e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	015a      	lsls	r2, r3, #5
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	4413      	add	r3, r2
 8006518:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800651c:	681a      	ldr	r2, [r3, #0]
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	0159      	lsls	r1, r3, #5
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	440b      	add	r3, r1
 8006526:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800652a:	4619      	mov	r1, r3
 800652c:	4b1f      	ldr	r3, [pc, #124]	; (80065ac <USB_DeactivateEndpoint+0x100>)
 800652e:	4013      	ands	r3, r2
 8006530:	600b      	str	r3, [r1, #0]
 8006532:	e034      	b.n	800659e <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800653a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	781b      	ldrb	r3, [r3, #0]
 8006540:	f003 030f 	and.w	r3, r3, #15
 8006544:	2101      	movs	r1, #1
 8006546:	fa01 f303 	lsl.w	r3, r1, r3
 800654a:	041b      	lsls	r3, r3, #16
 800654c:	43db      	mvns	r3, r3
 800654e:	68f9      	ldr	r1, [r7, #12]
 8006550:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006554:	4013      	ands	r3, r2
 8006556:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800655e:	69da      	ldr	r2, [r3, #28]
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	781b      	ldrb	r3, [r3, #0]
 8006564:	f003 030f 	and.w	r3, r3, #15
 8006568:	2101      	movs	r1, #1
 800656a:	fa01 f303 	lsl.w	r3, r1, r3
 800656e:	041b      	lsls	r3, r3, #16
 8006570:	43db      	mvns	r3, r3
 8006572:	68f9      	ldr	r1, [r7, #12]
 8006574:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006578:	4013      	ands	r3, r2
 800657a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	015a      	lsls	r2, r3, #5
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	4413      	add	r3, r2
 8006584:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006588:	681a      	ldr	r2, [r3, #0]
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	0159      	lsls	r1, r3, #5
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	440b      	add	r3, r1
 8006592:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006596:	4619      	mov	r1, r3
 8006598:	4b05      	ldr	r3, [pc, #20]	; (80065b0 <USB_DeactivateEndpoint+0x104>)
 800659a:	4013      	ands	r3, r2
 800659c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800659e:	2300      	movs	r3, #0
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	3714      	adds	r7, #20
 80065a4:	46bd      	mov	sp, r7
 80065a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065aa:	4770      	bx	lr
 80065ac:	ec337800 	.word	0xec337800
 80065b0:	eff37800 	.word	0xeff37800

080065b4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b08a      	sub	sp, #40	; 0x28
 80065b8:	af02      	add	r7, sp, #8
 80065ba:	60f8      	str	r0, [r7, #12]
 80065bc:	60b9      	str	r1, [r7, #8]
 80065be:	4613      	mov	r3, r2
 80065c0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	781b      	ldrb	r3, [r3, #0]
 80065ca:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	785b      	ldrb	r3, [r3, #1]
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	f040 8163 	bne.w	800689c <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	695b      	ldr	r3, [r3, #20]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d132      	bne.n	8006644 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80065de:	69bb      	ldr	r3, [r7, #24]
 80065e0:	015a      	lsls	r2, r3, #5
 80065e2:	69fb      	ldr	r3, [r7, #28]
 80065e4:	4413      	add	r3, r2
 80065e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065ea:	691a      	ldr	r2, [r3, #16]
 80065ec:	69bb      	ldr	r3, [r7, #24]
 80065ee:	0159      	lsls	r1, r3, #5
 80065f0:	69fb      	ldr	r3, [r7, #28]
 80065f2:	440b      	add	r3, r1
 80065f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065f8:	4619      	mov	r1, r3
 80065fa:	4ba5      	ldr	r3, [pc, #660]	; (8006890 <USB_EPStartXfer+0x2dc>)
 80065fc:	4013      	ands	r3, r2
 80065fe:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006600:	69bb      	ldr	r3, [r7, #24]
 8006602:	015a      	lsls	r2, r3, #5
 8006604:	69fb      	ldr	r3, [r7, #28]
 8006606:	4413      	add	r3, r2
 8006608:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800660c:	691b      	ldr	r3, [r3, #16]
 800660e:	69ba      	ldr	r2, [r7, #24]
 8006610:	0151      	lsls	r1, r2, #5
 8006612:	69fa      	ldr	r2, [r7, #28]
 8006614:	440a      	add	r2, r1
 8006616:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800661a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800661e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006620:	69bb      	ldr	r3, [r7, #24]
 8006622:	015a      	lsls	r2, r3, #5
 8006624:	69fb      	ldr	r3, [r7, #28]
 8006626:	4413      	add	r3, r2
 8006628:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800662c:	691a      	ldr	r2, [r3, #16]
 800662e:	69bb      	ldr	r3, [r7, #24]
 8006630:	0159      	lsls	r1, r3, #5
 8006632:	69fb      	ldr	r3, [r7, #28]
 8006634:	440b      	add	r3, r1
 8006636:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800663a:	4619      	mov	r1, r3
 800663c:	4b95      	ldr	r3, [pc, #596]	; (8006894 <USB_EPStartXfer+0x2e0>)
 800663e:	4013      	ands	r3, r2
 8006640:	610b      	str	r3, [r1, #16]
 8006642:	e074      	b.n	800672e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006644:	69bb      	ldr	r3, [r7, #24]
 8006646:	015a      	lsls	r2, r3, #5
 8006648:	69fb      	ldr	r3, [r7, #28]
 800664a:	4413      	add	r3, r2
 800664c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006650:	691a      	ldr	r2, [r3, #16]
 8006652:	69bb      	ldr	r3, [r7, #24]
 8006654:	0159      	lsls	r1, r3, #5
 8006656:	69fb      	ldr	r3, [r7, #28]
 8006658:	440b      	add	r3, r1
 800665a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800665e:	4619      	mov	r1, r3
 8006660:	4b8c      	ldr	r3, [pc, #560]	; (8006894 <USB_EPStartXfer+0x2e0>)
 8006662:	4013      	ands	r3, r2
 8006664:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006666:	69bb      	ldr	r3, [r7, #24]
 8006668:	015a      	lsls	r2, r3, #5
 800666a:	69fb      	ldr	r3, [r7, #28]
 800666c:	4413      	add	r3, r2
 800666e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006672:	691a      	ldr	r2, [r3, #16]
 8006674:	69bb      	ldr	r3, [r7, #24]
 8006676:	0159      	lsls	r1, r3, #5
 8006678:	69fb      	ldr	r3, [r7, #28]
 800667a:	440b      	add	r3, r1
 800667c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006680:	4619      	mov	r1, r3
 8006682:	4b83      	ldr	r3, [pc, #524]	; (8006890 <USB_EPStartXfer+0x2dc>)
 8006684:	4013      	ands	r3, r2
 8006686:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006688:	69bb      	ldr	r3, [r7, #24]
 800668a:	015a      	lsls	r2, r3, #5
 800668c:	69fb      	ldr	r3, [r7, #28]
 800668e:	4413      	add	r3, r2
 8006690:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006694:	691a      	ldr	r2, [r3, #16]
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	6959      	ldr	r1, [r3, #20]
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	689b      	ldr	r3, [r3, #8]
 800669e:	440b      	add	r3, r1
 80066a0:	1e59      	subs	r1, r3, #1
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80066aa:	04d9      	lsls	r1, r3, #19
 80066ac:	4b7a      	ldr	r3, [pc, #488]	; (8006898 <USB_EPStartXfer+0x2e4>)
 80066ae:	400b      	ands	r3, r1
 80066b0:	69b9      	ldr	r1, [r7, #24]
 80066b2:	0148      	lsls	r0, r1, #5
 80066b4:	69f9      	ldr	r1, [r7, #28]
 80066b6:	4401      	add	r1, r0
 80066b8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80066bc:	4313      	orrs	r3, r2
 80066be:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80066c0:	69bb      	ldr	r3, [r7, #24]
 80066c2:	015a      	lsls	r2, r3, #5
 80066c4:	69fb      	ldr	r3, [r7, #28]
 80066c6:	4413      	add	r3, r2
 80066c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066cc:	691a      	ldr	r2, [r3, #16]
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	695b      	ldr	r3, [r3, #20]
 80066d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80066d6:	69b9      	ldr	r1, [r7, #24]
 80066d8:	0148      	lsls	r0, r1, #5
 80066da:	69f9      	ldr	r1, [r7, #28]
 80066dc:	4401      	add	r1, r0
 80066de:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80066e2:	4313      	orrs	r3, r2
 80066e4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	78db      	ldrb	r3, [r3, #3]
 80066ea:	2b01      	cmp	r3, #1
 80066ec:	d11f      	bne.n	800672e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80066ee:	69bb      	ldr	r3, [r7, #24]
 80066f0:	015a      	lsls	r2, r3, #5
 80066f2:	69fb      	ldr	r3, [r7, #28]
 80066f4:	4413      	add	r3, r2
 80066f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066fa:	691b      	ldr	r3, [r3, #16]
 80066fc:	69ba      	ldr	r2, [r7, #24]
 80066fe:	0151      	lsls	r1, r2, #5
 8006700:	69fa      	ldr	r2, [r7, #28]
 8006702:	440a      	add	r2, r1
 8006704:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006708:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800670c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800670e:	69bb      	ldr	r3, [r7, #24]
 8006710:	015a      	lsls	r2, r3, #5
 8006712:	69fb      	ldr	r3, [r7, #28]
 8006714:	4413      	add	r3, r2
 8006716:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800671a:	691b      	ldr	r3, [r3, #16]
 800671c:	69ba      	ldr	r2, [r7, #24]
 800671e:	0151      	lsls	r1, r2, #5
 8006720:	69fa      	ldr	r2, [r7, #28]
 8006722:	440a      	add	r2, r1
 8006724:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006728:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800672c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800672e:	79fb      	ldrb	r3, [r7, #7]
 8006730:	2b01      	cmp	r3, #1
 8006732:	d14b      	bne.n	80067cc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	691b      	ldr	r3, [r3, #16]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d009      	beq.n	8006750 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800673c:	69bb      	ldr	r3, [r7, #24]
 800673e:	015a      	lsls	r2, r3, #5
 8006740:	69fb      	ldr	r3, [r7, #28]
 8006742:	4413      	add	r3, r2
 8006744:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006748:	461a      	mov	r2, r3
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	691b      	ldr	r3, [r3, #16]
 800674e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	78db      	ldrb	r3, [r3, #3]
 8006754:	2b01      	cmp	r3, #1
 8006756:	d128      	bne.n	80067aa <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006758:	69fb      	ldr	r3, [r7, #28]
 800675a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800675e:	689b      	ldr	r3, [r3, #8]
 8006760:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006764:	2b00      	cmp	r3, #0
 8006766:	d110      	bne.n	800678a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006768:	69bb      	ldr	r3, [r7, #24]
 800676a:	015a      	lsls	r2, r3, #5
 800676c:	69fb      	ldr	r3, [r7, #28]
 800676e:	4413      	add	r3, r2
 8006770:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	69ba      	ldr	r2, [r7, #24]
 8006778:	0151      	lsls	r1, r2, #5
 800677a:	69fa      	ldr	r2, [r7, #28]
 800677c:	440a      	add	r2, r1
 800677e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006782:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006786:	6013      	str	r3, [r2, #0]
 8006788:	e00f      	b.n	80067aa <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800678a:	69bb      	ldr	r3, [r7, #24]
 800678c:	015a      	lsls	r2, r3, #5
 800678e:	69fb      	ldr	r3, [r7, #28]
 8006790:	4413      	add	r3, r2
 8006792:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	69ba      	ldr	r2, [r7, #24]
 800679a:	0151      	lsls	r1, r2, #5
 800679c:	69fa      	ldr	r2, [r7, #28]
 800679e:	440a      	add	r2, r1
 80067a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067a8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80067aa:	69bb      	ldr	r3, [r7, #24]
 80067ac:	015a      	lsls	r2, r3, #5
 80067ae:	69fb      	ldr	r3, [r7, #28]
 80067b0:	4413      	add	r3, r2
 80067b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	69ba      	ldr	r2, [r7, #24]
 80067ba:	0151      	lsls	r1, r2, #5
 80067bc:	69fa      	ldr	r2, [r7, #28]
 80067be:	440a      	add	r2, r1
 80067c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067c4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80067c8:	6013      	str	r3, [r2, #0]
 80067ca:	e133      	b.n	8006a34 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80067cc:	69bb      	ldr	r3, [r7, #24]
 80067ce:	015a      	lsls	r2, r3, #5
 80067d0:	69fb      	ldr	r3, [r7, #28]
 80067d2:	4413      	add	r3, r2
 80067d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	69ba      	ldr	r2, [r7, #24]
 80067dc:	0151      	lsls	r1, r2, #5
 80067de:	69fa      	ldr	r2, [r7, #28]
 80067e0:	440a      	add	r2, r1
 80067e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067e6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80067ea:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	78db      	ldrb	r3, [r3, #3]
 80067f0:	2b01      	cmp	r3, #1
 80067f2:	d015      	beq.n	8006820 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	695b      	ldr	r3, [r3, #20]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	f000 811b 	beq.w	8006a34 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80067fe:	69fb      	ldr	r3, [r7, #28]
 8006800:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006804:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	781b      	ldrb	r3, [r3, #0]
 800680a:	f003 030f 	and.w	r3, r3, #15
 800680e:	2101      	movs	r1, #1
 8006810:	fa01 f303 	lsl.w	r3, r1, r3
 8006814:	69f9      	ldr	r1, [r7, #28]
 8006816:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800681a:	4313      	orrs	r3, r2
 800681c:	634b      	str	r3, [r1, #52]	; 0x34
 800681e:	e109      	b.n	8006a34 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006820:	69fb      	ldr	r3, [r7, #28]
 8006822:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006826:	689b      	ldr	r3, [r3, #8]
 8006828:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800682c:	2b00      	cmp	r3, #0
 800682e:	d110      	bne.n	8006852 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006830:	69bb      	ldr	r3, [r7, #24]
 8006832:	015a      	lsls	r2, r3, #5
 8006834:	69fb      	ldr	r3, [r7, #28]
 8006836:	4413      	add	r3, r2
 8006838:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	69ba      	ldr	r2, [r7, #24]
 8006840:	0151      	lsls	r1, r2, #5
 8006842:	69fa      	ldr	r2, [r7, #28]
 8006844:	440a      	add	r2, r1
 8006846:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800684a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800684e:	6013      	str	r3, [r2, #0]
 8006850:	e00f      	b.n	8006872 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006852:	69bb      	ldr	r3, [r7, #24]
 8006854:	015a      	lsls	r2, r3, #5
 8006856:	69fb      	ldr	r3, [r7, #28]
 8006858:	4413      	add	r3, r2
 800685a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	69ba      	ldr	r2, [r7, #24]
 8006862:	0151      	lsls	r1, r2, #5
 8006864:	69fa      	ldr	r2, [r7, #28]
 8006866:	440a      	add	r2, r1
 8006868:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800686c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006870:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	68d9      	ldr	r1, [r3, #12]
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	781a      	ldrb	r2, [r3, #0]
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	695b      	ldr	r3, [r3, #20]
 800687e:	b298      	uxth	r0, r3
 8006880:	79fb      	ldrb	r3, [r7, #7]
 8006882:	9300      	str	r3, [sp, #0]
 8006884:	4603      	mov	r3, r0
 8006886:	68f8      	ldr	r0, [r7, #12]
 8006888:	f000 fa38 	bl	8006cfc <USB_WritePacket>
 800688c:	e0d2      	b.n	8006a34 <USB_EPStartXfer+0x480>
 800688e:	bf00      	nop
 8006890:	e007ffff 	.word	0xe007ffff
 8006894:	fff80000 	.word	0xfff80000
 8006898:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800689c:	69bb      	ldr	r3, [r7, #24]
 800689e:	015a      	lsls	r2, r3, #5
 80068a0:	69fb      	ldr	r3, [r7, #28]
 80068a2:	4413      	add	r3, r2
 80068a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068a8:	691a      	ldr	r2, [r3, #16]
 80068aa:	69bb      	ldr	r3, [r7, #24]
 80068ac:	0159      	lsls	r1, r3, #5
 80068ae:	69fb      	ldr	r3, [r7, #28]
 80068b0:	440b      	add	r3, r1
 80068b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068b6:	4619      	mov	r1, r3
 80068b8:	4b61      	ldr	r3, [pc, #388]	; (8006a40 <USB_EPStartXfer+0x48c>)
 80068ba:	4013      	ands	r3, r2
 80068bc:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80068be:	69bb      	ldr	r3, [r7, #24]
 80068c0:	015a      	lsls	r2, r3, #5
 80068c2:	69fb      	ldr	r3, [r7, #28]
 80068c4:	4413      	add	r3, r2
 80068c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068ca:	691a      	ldr	r2, [r3, #16]
 80068cc:	69bb      	ldr	r3, [r7, #24]
 80068ce:	0159      	lsls	r1, r3, #5
 80068d0:	69fb      	ldr	r3, [r7, #28]
 80068d2:	440b      	add	r3, r1
 80068d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068d8:	4619      	mov	r1, r3
 80068da:	4b5a      	ldr	r3, [pc, #360]	; (8006a44 <USB_EPStartXfer+0x490>)
 80068dc:	4013      	ands	r3, r2
 80068de:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	695b      	ldr	r3, [r3, #20]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d123      	bne.n	8006930 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80068e8:	69bb      	ldr	r3, [r7, #24]
 80068ea:	015a      	lsls	r2, r3, #5
 80068ec:	69fb      	ldr	r3, [r7, #28]
 80068ee:	4413      	add	r3, r2
 80068f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068f4:	691a      	ldr	r2, [r3, #16]
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	689b      	ldr	r3, [r3, #8]
 80068fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80068fe:	69b9      	ldr	r1, [r7, #24]
 8006900:	0148      	lsls	r0, r1, #5
 8006902:	69f9      	ldr	r1, [r7, #28]
 8006904:	4401      	add	r1, r0
 8006906:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800690a:	4313      	orrs	r3, r2
 800690c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800690e:	69bb      	ldr	r3, [r7, #24]
 8006910:	015a      	lsls	r2, r3, #5
 8006912:	69fb      	ldr	r3, [r7, #28]
 8006914:	4413      	add	r3, r2
 8006916:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800691a:	691b      	ldr	r3, [r3, #16]
 800691c:	69ba      	ldr	r2, [r7, #24]
 800691e:	0151      	lsls	r1, r2, #5
 8006920:	69fa      	ldr	r2, [r7, #28]
 8006922:	440a      	add	r2, r1
 8006924:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006928:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800692c:	6113      	str	r3, [r2, #16]
 800692e:	e033      	b.n	8006998 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	695a      	ldr	r2, [r3, #20]
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	689b      	ldr	r3, [r3, #8]
 8006938:	4413      	add	r3, r2
 800693a:	1e5a      	subs	r2, r3, #1
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	689b      	ldr	r3, [r3, #8]
 8006940:	fbb2 f3f3 	udiv	r3, r2, r3
 8006944:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006946:	69bb      	ldr	r3, [r7, #24]
 8006948:	015a      	lsls	r2, r3, #5
 800694a:	69fb      	ldr	r3, [r7, #28]
 800694c:	4413      	add	r3, r2
 800694e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006952:	691a      	ldr	r2, [r3, #16]
 8006954:	8afb      	ldrh	r3, [r7, #22]
 8006956:	04d9      	lsls	r1, r3, #19
 8006958:	4b3b      	ldr	r3, [pc, #236]	; (8006a48 <USB_EPStartXfer+0x494>)
 800695a:	400b      	ands	r3, r1
 800695c:	69b9      	ldr	r1, [r7, #24]
 800695e:	0148      	lsls	r0, r1, #5
 8006960:	69f9      	ldr	r1, [r7, #28]
 8006962:	4401      	add	r1, r0
 8006964:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006968:	4313      	orrs	r3, r2
 800696a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800696c:	69bb      	ldr	r3, [r7, #24]
 800696e:	015a      	lsls	r2, r3, #5
 8006970:	69fb      	ldr	r3, [r7, #28]
 8006972:	4413      	add	r3, r2
 8006974:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006978:	691a      	ldr	r2, [r3, #16]
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	689b      	ldr	r3, [r3, #8]
 800697e:	8af9      	ldrh	r1, [r7, #22]
 8006980:	fb01 f303 	mul.w	r3, r1, r3
 8006984:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006988:	69b9      	ldr	r1, [r7, #24]
 800698a:	0148      	lsls	r0, r1, #5
 800698c:	69f9      	ldr	r1, [r7, #28]
 800698e:	4401      	add	r1, r0
 8006990:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006994:	4313      	orrs	r3, r2
 8006996:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006998:	79fb      	ldrb	r3, [r7, #7]
 800699a:	2b01      	cmp	r3, #1
 800699c:	d10d      	bne.n	80069ba <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	68db      	ldr	r3, [r3, #12]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d009      	beq.n	80069ba <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	68d9      	ldr	r1, [r3, #12]
 80069aa:	69bb      	ldr	r3, [r7, #24]
 80069ac:	015a      	lsls	r2, r3, #5
 80069ae:	69fb      	ldr	r3, [r7, #28]
 80069b0:	4413      	add	r3, r2
 80069b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069b6:	460a      	mov	r2, r1
 80069b8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	78db      	ldrb	r3, [r3, #3]
 80069be:	2b01      	cmp	r3, #1
 80069c0:	d128      	bne.n	8006a14 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80069c2:	69fb      	ldr	r3, [r7, #28]
 80069c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069c8:	689b      	ldr	r3, [r3, #8]
 80069ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d110      	bne.n	80069f4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80069d2:	69bb      	ldr	r3, [r7, #24]
 80069d4:	015a      	lsls	r2, r3, #5
 80069d6:	69fb      	ldr	r3, [r7, #28]
 80069d8:	4413      	add	r3, r2
 80069da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	69ba      	ldr	r2, [r7, #24]
 80069e2:	0151      	lsls	r1, r2, #5
 80069e4:	69fa      	ldr	r2, [r7, #28]
 80069e6:	440a      	add	r2, r1
 80069e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069ec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80069f0:	6013      	str	r3, [r2, #0]
 80069f2:	e00f      	b.n	8006a14 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80069f4:	69bb      	ldr	r3, [r7, #24]
 80069f6:	015a      	lsls	r2, r3, #5
 80069f8:	69fb      	ldr	r3, [r7, #28]
 80069fa:	4413      	add	r3, r2
 80069fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	69ba      	ldr	r2, [r7, #24]
 8006a04:	0151      	lsls	r1, r2, #5
 8006a06:	69fa      	ldr	r2, [r7, #28]
 8006a08:	440a      	add	r2, r1
 8006a0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a12:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006a14:	69bb      	ldr	r3, [r7, #24]
 8006a16:	015a      	lsls	r2, r3, #5
 8006a18:	69fb      	ldr	r3, [r7, #28]
 8006a1a:	4413      	add	r3, r2
 8006a1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	69ba      	ldr	r2, [r7, #24]
 8006a24:	0151      	lsls	r1, r2, #5
 8006a26:	69fa      	ldr	r2, [r7, #28]
 8006a28:	440a      	add	r2, r1
 8006a2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a2e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006a32:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006a34:	2300      	movs	r3, #0
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3720      	adds	r7, #32
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}
 8006a3e:	bf00      	nop
 8006a40:	fff80000 	.word	0xfff80000
 8006a44:	e007ffff 	.word	0xe007ffff
 8006a48:	1ff80000 	.word	0x1ff80000

08006a4c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b087      	sub	sp, #28
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	60f8      	str	r0, [r7, #12]
 8006a54:	60b9      	str	r1, [r7, #8]
 8006a56:	4613      	mov	r3, r2
 8006a58:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	781b      	ldrb	r3, [r3, #0]
 8006a62:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	785b      	ldrb	r3, [r3, #1]
 8006a68:	2b01      	cmp	r3, #1
 8006a6a:	f040 80cd 	bne.w	8006c08 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	695b      	ldr	r3, [r3, #20]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d132      	bne.n	8006adc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	015a      	lsls	r2, r3, #5
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	4413      	add	r3, r2
 8006a7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a82:	691a      	ldr	r2, [r3, #16]
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	0159      	lsls	r1, r3, #5
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	440b      	add	r3, r1
 8006a8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a90:	4619      	mov	r1, r3
 8006a92:	4b98      	ldr	r3, [pc, #608]	; (8006cf4 <USB_EP0StartXfer+0x2a8>)
 8006a94:	4013      	ands	r3, r2
 8006a96:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	015a      	lsls	r2, r3, #5
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	4413      	add	r3, r2
 8006aa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006aa4:	691b      	ldr	r3, [r3, #16]
 8006aa6:	693a      	ldr	r2, [r7, #16]
 8006aa8:	0151      	lsls	r1, r2, #5
 8006aaa:	697a      	ldr	r2, [r7, #20]
 8006aac:	440a      	add	r2, r1
 8006aae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ab2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006ab6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	015a      	lsls	r2, r3, #5
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	4413      	add	r3, r2
 8006ac0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ac4:	691a      	ldr	r2, [r3, #16]
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	0159      	lsls	r1, r3, #5
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	440b      	add	r3, r1
 8006ace:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ad2:	4619      	mov	r1, r3
 8006ad4:	4b88      	ldr	r3, [pc, #544]	; (8006cf8 <USB_EP0StartXfer+0x2ac>)
 8006ad6:	4013      	ands	r3, r2
 8006ad8:	610b      	str	r3, [r1, #16]
 8006ada:	e04e      	b.n	8006b7a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	015a      	lsls	r2, r3, #5
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	4413      	add	r3, r2
 8006ae4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ae8:	691a      	ldr	r2, [r3, #16]
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	0159      	lsls	r1, r3, #5
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	440b      	add	r3, r1
 8006af2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006af6:	4619      	mov	r1, r3
 8006af8:	4b7f      	ldr	r3, [pc, #508]	; (8006cf8 <USB_EP0StartXfer+0x2ac>)
 8006afa:	4013      	ands	r3, r2
 8006afc:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	015a      	lsls	r2, r3, #5
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	4413      	add	r3, r2
 8006b06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b0a:	691a      	ldr	r2, [r3, #16]
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	0159      	lsls	r1, r3, #5
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	440b      	add	r3, r1
 8006b14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b18:	4619      	mov	r1, r3
 8006b1a:	4b76      	ldr	r3, [pc, #472]	; (8006cf4 <USB_EP0StartXfer+0x2a8>)
 8006b1c:	4013      	ands	r3, r2
 8006b1e:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	695a      	ldr	r2, [r3, #20]
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	689b      	ldr	r3, [r3, #8]
 8006b28:	429a      	cmp	r2, r3
 8006b2a:	d903      	bls.n	8006b34 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	689a      	ldr	r2, [r3, #8]
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	015a      	lsls	r2, r3, #5
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	4413      	add	r3, r2
 8006b3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b40:	691b      	ldr	r3, [r3, #16]
 8006b42:	693a      	ldr	r2, [r7, #16]
 8006b44:	0151      	lsls	r1, r2, #5
 8006b46:	697a      	ldr	r2, [r7, #20]
 8006b48:	440a      	add	r2, r1
 8006b4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b4e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b52:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	015a      	lsls	r2, r3, #5
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	4413      	add	r3, r2
 8006b5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b60:	691a      	ldr	r2, [r3, #16]
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	695b      	ldr	r3, [r3, #20]
 8006b66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b6a:	6939      	ldr	r1, [r7, #16]
 8006b6c:	0148      	lsls	r0, r1, #5
 8006b6e:	6979      	ldr	r1, [r7, #20]
 8006b70:	4401      	add	r1, r0
 8006b72:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006b76:	4313      	orrs	r3, r2
 8006b78:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006b7a:	79fb      	ldrb	r3, [r7, #7]
 8006b7c:	2b01      	cmp	r3, #1
 8006b7e:	d11e      	bne.n	8006bbe <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	691b      	ldr	r3, [r3, #16]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d009      	beq.n	8006b9c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	015a      	lsls	r2, r3, #5
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	4413      	add	r3, r2
 8006b90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b94:	461a      	mov	r2, r3
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	691b      	ldr	r3, [r3, #16]
 8006b9a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	015a      	lsls	r2, r3, #5
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	4413      	add	r3, r2
 8006ba4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	693a      	ldr	r2, [r7, #16]
 8006bac:	0151      	lsls	r1, r2, #5
 8006bae:	697a      	ldr	r2, [r7, #20]
 8006bb0:	440a      	add	r2, r1
 8006bb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bb6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006bba:	6013      	str	r3, [r2, #0]
 8006bbc:	e092      	b.n	8006ce4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	015a      	lsls	r2, r3, #5
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	4413      	add	r3, r2
 8006bc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	693a      	ldr	r2, [r7, #16]
 8006bce:	0151      	lsls	r1, r2, #5
 8006bd0:	697a      	ldr	r2, [r7, #20]
 8006bd2:	440a      	add	r2, r1
 8006bd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bd8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006bdc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	695b      	ldr	r3, [r3, #20]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d07e      	beq.n	8006ce4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	781b      	ldrb	r3, [r3, #0]
 8006bf2:	f003 030f 	and.w	r3, r3, #15
 8006bf6:	2101      	movs	r1, #1
 8006bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8006bfc:	6979      	ldr	r1, [r7, #20]
 8006bfe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c02:	4313      	orrs	r3, r2
 8006c04:	634b      	str	r3, [r1, #52]	; 0x34
 8006c06:	e06d      	b.n	8006ce4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	015a      	lsls	r2, r3, #5
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	4413      	add	r3, r2
 8006c10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c14:	691a      	ldr	r2, [r3, #16]
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	0159      	lsls	r1, r3, #5
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	440b      	add	r3, r1
 8006c1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c22:	4619      	mov	r1, r3
 8006c24:	4b34      	ldr	r3, [pc, #208]	; (8006cf8 <USB_EP0StartXfer+0x2ac>)
 8006c26:	4013      	ands	r3, r2
 8006c28:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	015a      	lsls	r2, r3, #5
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	4413      	add	r3, r2
 8006c32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c36:	691a      	ldr	r2, [r3, #16]
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	0159      	lsls	r1, r3, #5
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	440b      	add	r3, r1
 8006c40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c44:	4619      	mov	r1, r3
 8006c46:	4b2b      	ldr	r3, [pc, #172]	; (8006cf4 <USB_EP0StartXfer+0x2a8>)
 8006c48:	4013      	ands	r3, r2
 8006c4a:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	695b      	ldr	r3, [r3, #20]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d003      	beq.n	8006c5c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	689a      	ldr	r2, [r3, #8]
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	015a      	lsls	r2, r3, #5
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	4413      	add	r3, r2
 8006c64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c68:	691b      	ldr	r3, [r3, #16]
 8006c6a:	693a      	ldr	r2, [r7, #16]
 8006c6c:	0151      	lsls	r1, r2, #5
 8006c6e:	697a      	ldr	r2, [r7, #20]
 8006c70:	440a      	add	r2, r1
 8006c72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c76:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006c7a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	015a      	lsls	r2, r3, #5
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	4413      	add	r3, r2
 8006c84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c88:	691a      	ldr	r2, [r3, #16]
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	689b      	ldr	r3, [r3, #8]
 8006c8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c92:	6939      	ldr	r1, [r7, #16]
 8006c94:	0148      	lsls	r0, r1, #5
 8006c96:	6979      	ldr	r1, [r7, #20]
 8006c98:	4401      	add	r1, r0
 8006c9a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006ca2:	79fb      	ldrb	r3, [r7, #7]
 8006ca4:	2b01      	cmp	r3, #1
 8006ca6:	d10d      	bne.n	8006cc4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	68db      	ldr	r3, [r3, #12]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d009      	beq.n	8006cc4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	68d9      	ldr	r1, [r3, #12]
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	015a      	lsls	r2, r3, #5
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	4413      	add	r3, r2
 8006cbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cc0:	460a      	mov	r2, r1
 8006cc2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	015a      	lsls	r2, r3, #5
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	4413      	add	r3, r2
 8006ccc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	693a      	ldr	r2, [r7, #16]
 8006cd4:	0151      	lsls	r1, r2, #5
 8006cd6:	697a      	ldr	r2, [r7, #20]
 8006cd8:	440a      	add	r2, r1
 8006cda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cde:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006ce2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006ce4:	2300      	movs	r3, #0
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	371c      	adds	r7, #28
 8006cea:	46bd      	mov	sp, r7
 8006cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf0:	4770      	bx	lr
 8006cf2:	bf00      	nop
 8006cf4:	e007ffff 	.word	0xe007ffff
 8006cf8:	fff80000 	.word	0xfff80000

08006cfc <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b089      	sub	sp, #36	; 0x24
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	60f8      	str	r0, [r7, #12]
 8006d04:	60b9      	str	r1, [r7, #8]
 8006d06:	4611      	mov	r1, r2
 8006d08:	461a      	mov	r2, r3
 8006d0a:	460b      	mov	r3, r1
 8006d0c:	71fb      	strb	r3, [r7, #7]
 8006d0e:	4613      	mov	r3, r2
 8006d10:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8006d1a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d11a      	bne.n	8006d58 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006d22:	88bb      	ldrh	r3, [r7, #4]
 8006d24:	3303      	adds	r3, #3
 8006d26:	089b      	lsrs	r3, r3, #2
 8006d28:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	61bb      	str	r3, [r7, #24]
 8006d2e:	e00f      	b.n	8006d50 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006d30:	79fb      	ldrb	r3, [r7, #7]
 8006d32:	031a      	lsls	r2, r3, #12
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	4413      	add	r3, r2
 8006d38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d3c:	461a      	mov	r2, r3
 8006d3e:	69fb      	ldr	r3, [r7, #28]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006d44:	69fb      	ldr	r3, [r7, #28]
 8006d46:	3304      	adds	r3, #4
 8006d48:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006d4a:	69bb      	ldr	r3, [r7, #24]
 8006d4c:	3301      	adds	r3, #1
 8006d4e:	61bb      	str	r3, [r7, #24]
 8006d50:	69ba      	ldr	r2, [r7, #24]
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	429a      	cmp	r2, r3
 8006d56:	d3eb      	bcc.n	8006d30 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006d58:	2300      	movs	r3, #0
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3724      	adds	r7, #36	; 0x24
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d64:	4770      	bx	lr

08006d66 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006d66:	b480      	push	{r7}
 8006d68:	b089      	sub	sp, #36	; 0x24
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	60f8      	str	r0, [r7, #12]
 8006d6e:	60b9      	str	r1, [r7, #8]
 8006d70:	4613      	mov	r3, r2
 8006d72:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006d7c:	88fb      	ldrh	r3, [r7, #6]
 8006d7e:	3303      	adds	r3, #3
 8006d80:	089b      	lsrs	r3, r3, #2
 8006d82:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8006d84:	2300      	movs	r3, #0
 8006d86:	61bb      	str	r3, [r7, #24]
 8006d88:	e00b      	b.n	8006da2 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d90:	681a      	ldr	r2, [r3, #0]
 8006d92:	69fb      	ldr	r3, [r7, #28]
 8006d94:	601a      	str	r2, [r3, #0]
    pDest++;
 8006d96:	69fb      	ldr	r3, [r7, #28]
 8006d98:	3304      	adds	r3, #4
 8006d9a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006d9c:	69bb      	ldr	r3, [r7, #24]
 8006d9e:	3301      	adds	r3, #1
 8006da0:	61bb      	str	r3, [r7, #24]
 8006da2:	69ba      	ldr	r2, [r7, #24]
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	429a      	cmp	r2, r3
 8006da8:	d3ef      	bcc.n	8006d8a <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8006daa:	69fb      	ldr	r3, [r7, #28]
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	3724      	adds	r7, #36	; 0x24
 8006db0:	46bd      	mov	sp, r7
 8006db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db6:	4770      	bx	lr

08006db8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b085      	sub	sp, #20
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
 8006dc0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	781b      	ldrb	r3, [r3, #0]
 8006dca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	785b      	ldrb	r3, [r3, #1]
 8006dd0:	2b01      	cmp	r3, #1
 8006dd2:	d12c      	bne.n	8006e2e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	015a      	lsls	r2, r3, #5
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	4413      	add	r3, r2
 8006ddc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	db12      	blt.n	8006e0c <USB_EPSetStall+0x54>
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d00f      	beq.n	8006e0c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	015a      	lsls	r2, r3, #5
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	4413      	add	r3, r2
 8006df4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	68ba      	ldr	r2, [r7, #8]
 8006dfc:	0151      	lsls	r1, r2, #5
 8006dfe:	68fa      	ldr	r2, [r7, #12]
 8006e00:	440a      	add	r2, r1
 8006e02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e06:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006e0a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	015a      	lsls	r2, r3, #5
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	4413      	add	r3, r2
 8006e14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	68ba      	ldr	r2, [r7, #8]
 8006e1c:	0151      	lsls	r1, r2, #5
 8006e1e:	68fa      	ldr	r2, [r7, #12]
 8006e20:	440a      	add	r2, r1
 8006e22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e26:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006e2a:	6013      	str	r3, [r2, #0]
 8006e2c:	e02b      	b.n	8006e86 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	015a      	lsls	r2, r3, #5
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	4413      	add	r3, r2
 8006e36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	db12      	blt.n	8006e66 <USB_EPSetStall+0xae>
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d00f      	beq.n	8006e66 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	015a      	lsls	r2, r3, #5
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	4413      	add	r3, r2
 8006e4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	68ba      	ldr	r2, [r7, #8]
 8006e56:	0151      	lsls	r1, r2, #5
 8006e58:	68fa      	ldr	r2, [r7, #12]
 8006e5a:	440a      	add	r2, r1
 8006e5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e60:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006e64:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	015a      	lsls	r2, r3, #5
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	4413      	add	r3, r2
 8006e6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	68ba      	ldr	r2, [r7, #8]
 8006e76:	0151      	lsls	r1, r2, #5
 8006e78:	68fa      	ldr	r2, [r7, #12]
 8006e7a:	440a      	add	r2, r1
 8006e7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e80:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006e84:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006e86:	2300      	movs	r3, #0
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3714      	adds	r7, #20
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e92:	4770      	bx	lr

08006e94 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b085      	sub	sp, #20
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
 8006e9c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	781b      	ldrb	r3, [r3, #0]
 8006ea6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	785b      	ldrb	r3, [r3, #1]
 8006eac:	2b01      	cmp	r3, #1
 8006eae:	d128      	bne.n	8006f02 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	015a      	lsls	r2, r3, #5
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	4413      	add	r3, r2
 8006eb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	68ba      	ldr	r2, [r7, #8]
 8006ec0:	0151      	lsls	r1, r2, #5
 8006ec2:	68fa      	ldr	r2, [r7, #12]
 8006ec4:	440a      	add	r2, r1
 8006ec6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006eca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006ece:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	78db      	ldrb	r3, [r3, #3]
 8006ed4:	2b03      	cmp	r3, #3
 8006ed6:	d003      	beq.n	8006ee0 <USB_EPClearStall+0x4c>
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	78db      	ldrb	r3, [r3, #3]
 8006edc:	2b02      	cmp	r3, #2
 8006ede:	d138      	bne.n	8006f52 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	015a      	lsls	r2, r3, #5
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	4413      	add	r3, r2
 8006ee8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	68ba      	ldr	r2, [r7, #8]
 8006ef0:	0151      	lsls	r1, r2, #5
 8006ef2:	68fa      	ldr	r2, [r7, #12]
 8006ef4:	440a      	add	r2, r1
 8006ef6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006efa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006efe:	6013      	str	r3, [r2, #0]
 8006f00:	e027      	b.n	8006f52 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	015a      	lsls	r2, r3, #5
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	4413      	add	r3, r2
 8006f0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	68ba      	ldr	r2, [r7, #8]
 8006f12:	0151      	lsls	r1, r2, #5
 8006f14:	68fa      	ldr	r2, [r7, #12]
 8006f16:	440a      	add	r2, r1
 8006f18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f1c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006f20:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	78db      	ldrb	r3, [r3, #3]
 8006f26:	2b03      	cmp	r3, #3
 8006f28:	d003      	beq.n	8006f32 <USB_EPClearStall+0x9e>
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	78db      	ldrb	r3, [r3, #3]
 8006f2e:	2b02      	cmp	r3, #2
 8006f30:	d10f      	bne.n	8006f52 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	015a      	lsls	r2, r3, #5
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	4413      	add	r3, r2
 8006f3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	68ba      	ldr	r2, [r7, #8]
 8006f42:	0151      	lsls	r1, r2, #5
 8006f44:	68fa      	ldr	r2, [r7, #12]
 8006f46:	440a      	add	r2, r1
 8006f48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f50:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006f52:	2300      	movs	r3, #0
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	3714      	adds	r7, #20
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5e:	4770      	bx	lr

08006f60 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006f60:	b480      	push	{r7}
 8006f62:	b085      	sub	sp, #20
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
 8006f68:	460b      	mov	r3, r1
 8006f6a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	68fa      	ldr	r2, [r7, #12]
 8006f7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f7e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006f82:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f8a:	681a      	ldr	r2, [r3, #0]
 8006f8c:	78fb      	ldrb	r3, [r7, #3]
 8006f8e:	011b      	lsls	r3, r3, #4
 8006f90:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006f94:	68f9      	ldr	r1, [r7, #12]
 8006f96:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006f9e:	2300      	movs	r3, #0
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	3714      	adds	r7, #20
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006faa:	4770      	bx	lr

08006fac <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b084      	sub	sp, #16
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	68fa      	ldr	r2, [r7, #12]
 8006fc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006fc6:	f023 0302 	bic.w	r3, r3, #2
 8006fca:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8006fcc:	2003      	movs	r0, #3
 8006fce:	f7f9 fc4f 	bl	8000870 <HAL_Delay>

  return HAL_OK;
 8006fd2:	2300      	movs	r3, #0
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3710      	adds	r7, #16
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}

08006fdc <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b084      	sub	sp, #16
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	68fa      	ldr	r2, [r7, #12]
 8006ff2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ff6:	f043 0302 	orr.w	r3, r3, #2
 8006ffa:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8006ffc:	2003      	movs	r0, #3
 8006ffe:	f7f9 fc37 	bl	8000870 <HAL_Delay>

  return HAL_OK;
 8007002:	2300      	movs	r3, #0
}
 8007004:	4618      	mov	r0, r3
 8007006:	3710      	adds	r7, #16
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}

0800700c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800700c:	b480      	push	{r7}
 800700e:	b085      	sub	sp, #20
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	695b      	ldr	r3, [r3, #20]
 8007018:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	699b      	ldr	r3, [r3, #24]
 800701e:	68fa      	ldr	r2, [r7, #12]
 8007020:	4013      	ands	r3, r2
 8007022:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007024:	68fb      	ldr	r3, [r7, #12]
}
 8007026:	4618      	mov	r0, r3
 8007028:	3714      	adds	r7, #20
 800702a:	46bd      	mov	sp, r7
 800702c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007030:	4770      	bx	lr

08007032 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007032:	b480      	push	{r7}
 8007034:	b085      	sub	sp, #20
 8007036:	af00      	add	r7, sp, #0
 8007038:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007044:	699b      	ldr	r3, [r3, #24]
 8007046:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800704e:	69db      	ldr	r3, [r3, #28]
 8007050:	68ba      	ldr	r2, [r7, #8]
 8007052:	4013      	ands	r3, r2
 8007054:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	0c1b      	lsrs	r3, r3, #16
}
 800705a:	4618      	mov	r0, r3
 800705c:	3714      	adds	r7, #20
 800705e:	46bd      	mov	sp, r7
 8007060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007064:	4770      	bx	lr

08007066 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007066:	b480      	push	{r7}
 8007068:	b085      	sub	sp, #20
 800706a:	af00      	add	r7, sp, #0
 800706c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007078:	699b      	ldr	r3, [r3, #24]
 800707a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007082:	69db      	ldr	r3, [r3, #28]
 8007084:	68ba      	ldr	r2, [r7, #8]
 8007086:	4013      	ands	r3, r2
 8007088:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	b29b      	uxth	r3, r3
}
 800708e:	4618      	mov	r0, r3
 8007090:	3714      	adds	r7, #20
 8007092:	46bd      	mov	sp, r7
 8007094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007098:	4770      	bx	lr

0800709a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800709a:	b480      	push	{r7}
 800709c:	b085      	sub	sp, #20
 800709e:	af00      	add	r7, sp, #0
 80070a0:	6078      	str	r0, [r7, #4]
 80070a2:	460b      	mov	r3, r1
 80070a4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80070aa:	78fb      	ldrb	r3, [r7, #3]
 80070ac:	015a      	lsls	r2, r3, #5
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	4413      	add	r3, r2
 80070b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070b6:	689b      	ldr	r3, [r3, #8]
 80070b8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070c0:	695b      	ldr	r3, [r3, #20]
 80070c2:	68ba      	ldr	r2, [r7, #8]
 80070c4:	4013      	ands	r3, r2
 80070c6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80070c8:	68bb      	ldr	r3, [r7, #8]
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	3714      	adds	r7, #20
 80070ce:	46bd      	mov	sp, r7
 80070d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d4:	4770      	bx	lr

080070d6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80070d6:	b480      	push	{r7}
 80070d8:	b087      	sub	sp, #28
 80070da:	af00      	add	r7, sp, #0
 80070dc:	6078      	str	r0, [r7, #4]
 80070de:	460b      	mov	r3, r1
 80070e0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070ec:	691b      	ldr	r3, [r3, #16]
 80070ee:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070f8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80070fa:	78fb      	ldrb	r3, [r7, #3]
 80070fc:	f003 030f 	and.w	r3, r3, #15
 8007100:	68fa      	ldr	r2, [r7, #12]
 8007102:	fa22 f303 	lsr.w	r3, r2, r3
 8007106:	01db      	lsls	r3, r3, #7
 8007108:	b2db      	uxtb	r3, r3
 800710a:	693a      	ldr	r2, [r7, #16]
 800710c:	4313      	orrs	r3, r2
 800710e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007110:	78fb      	ldrb	r3, [r7, #3]
 8007112:	015a      	lsls	r2, r3, #5
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	4413      	add	r3, r2
 8007118:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800711c:	689b      	ldr	r3, [r3, #8]
 800711e:	693a      	ldr	r2, [r7, #16]
 8007120:	4013      	ands	r3, r2
 8007122:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007124:	68bb      	ldr	r3, [r7, #8]
}
 8007126:	4618      	mov	r0, r3
 8007128:	371c      	adds	r7, #28
 800712a:	46bd      	mov	sp, r7
 800712c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007130:	4770      	bx	lr

08007132 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007132:	b480      	push	{r7}
 8007134:	b083      	sub	sp, #12
 8007136:	af00      	add	r7, sp, #0
 8007138:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	695b      	ldr	r3, [r3, #20]
 800713e:	f003 0301 	and.w	r3, r3, #1
}
 8007142:	4618      	mov	r0, r3
 8007144:	370c      	adds	r7, #12
 8007146:	46bd      	mov	sp, r7
 8007148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714c:	4770      	bx	lr
	...

08007150 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007150:	b480      	push	{r7}
 8007152:	b085      	sub	sp, #20
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007162:	681a      	ldr	r2, [r3, #0]
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800716a:	4619      	mov	r1, r3
 800716c:	4b12      	ldr	r3, [pc, #72]	; (80071b8 <USB_ActivateSetup+0x68>)
 800716e:	4013      	ands	r3, r2
 8007170:	600b      	str	r3, [r1, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007178:	689b      	ldr	r3, [r3, #8]
 800717a:	f003 0306 	and.w	r3, r3, #6
 800717e:	2b04      	cmp	r3, #4
 8007180:	d109      	bne.n	8007196 <USB_ActivateSetup+0x46>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	68fa      	ldr	r2, [r7, #12]
 800718c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007190:	f043 0303 	orr.w	r3, r3, #3
 8007194:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800719c:	685b      	ldr	r3, [r3, #4]
 800719e:	68fa      	ldr	r2, [r7, #12]
 80071a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80071a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071a8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80071aa:	2300      	movs	r3, #0
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	3714      	adds	r7, #20
 80071b0:	46bd      	mov	sp, r7
 80071b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b6:	4770      	bx	lr
 80071b8:	fffff800 	.word	0xfffff800

080071bc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80071bc:	b480      	push	{r7}
 80071be:	b087      	sub	sp, #28
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	60f8      	str	r0, [r7, #12]
 80071c4:	460b      	mov	r3, r1
 80071c6:	607a      	str	r2, [r7, #4]
 80071c8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	333c      	adds	r3, #60	; 0x3c
 80071d2:	3304      	adds	r3, #4
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	4a26      	ldr	r2, [pc, #152]	; (8007274 <USB_EP0_OutStart+0xb8>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d90a      	bls.n	80071f6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80071ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80071f0:	d101      	bne.n	80071f6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80071f2:	2300      	movs	r3, #0
 80071f4:	e037      	b.n	8007266 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071fc:	461a      	mov	r2, r3
 80071fe:	2300      	movs	r3, #0
 8007200:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007208:	691b      	ldr	r3, [r3, #16]
 800720a:	697a      	ldr	r2, [r7, #20]
 800720c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007210:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007214:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800721c:	691b      	ldr	r3, [r3, #16]
 800721e:	697a      	ldr	r2, [r7, #20]
 8007220:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007224:	f043 0318 	orr.w	r3, r3, #24
 8007228:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007230:	691b      	ldr	r3, [r3, #16]
 8007232:	697a      	ldr	r2, [r7, #20]
 8007234:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007238:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800723c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800723e:	7afb      	ldrb	r3, [r7, #11]
 8007240:	2b01      	cmp	r3, #1
 8007242:	d10f      	bne.n	8007264 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800724a:	461a      	mov	r2, r3
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	697a      	ldr	r2, [r7, #20]
 800725a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800725e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007262:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007264:	2300      	movs	r3, #0
}
 8007266:	4618      	mov	r0, r3
 8007268:	371c      	adds	r7, #28
 800726a:	46bd      	mov	sp, r7
 800726c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007270:	4770      	bx	lr
 8007272:	bf00      	nop
 8007274:	4f54300a 	.word	0x4f54300a

08007278 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007278:	b480      	push	{r7}
 800727a:	b085      	sub	sp, #20
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007280:	2300      	movs	r3, #0
 8007282:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	3301      	adds	r3, #1
 8007288:	60fb      	str	r3, [r7, #12]
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	4a13      	ldr	r2, [pc, #76]	; (80072dc <USB_CoreReset+0x64>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d901      	bls.n	8007296 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007292:	2303      	movs	r3, #3
 8007294:	e01b      	b.n	80072ce <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	691b      	ldr	r3, [r3, #16]
 800729a:	2b00      	cmp	r3, #0
 800729c:	daf2      	bge.n	8007284 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800729e:	2300      	movs	r3, #0
 80072a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	691b      	ldr	r3, [r3, #16]
 80072a6:	f043 0201 	orr.w	r2, r3, #1
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	3301      	adds	r3, #1
 80072b2:	60fb      	str	r3, [r7, #12]
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	4a09      	ldr	r2, [pc, #36]	; (80072dc <USB_CoreReset+0x64>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d901      	bls.n	80072c0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80072bc:	2303      	movs	r3, #3
 80072be:	e006      	b.n	80072ce <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	691b      	ldr	r3, [r3, #16]
 80072c4:	f003 0301 	and.w	r3, r3, #1
 80072c8:	2b01      	cmp	r3, #1
 80072ca:	d0f0      	beq.n	80072ae <USB_CoreReset+0x36>

  return HAL_OK;
 80072cc:	2300      	movs	r3, #0
}
 80072ce:	4618      	mov	r0, r3
 80072d0:	3714      	adds	r7, #20
 80072d2:	46bd      	mov	sp, r7
 80072d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d8:	4770      	bx	lr
 80072da:	bf00      	nop
 80072dc:	00030d40 	.word	0x00030d40

080072e0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b084      	sub	sp, #16
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
 80072e8:	460b      	mov	r3, r1
 80072ea:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80072ec:	2300      	movs	r3, #0
 80072ee:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	7c1b      	ldrb	r3, [r3, #16]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d115      	bne.n	8007324 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80072f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80072fc:	2202      	movs	r2, #2
 80072fe:	2181      	movs	r1, #129	; 0x81
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f00c fad2 	bl	80138aa <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2201      	movs	r2, #1
 800730a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800730c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007310:	2202      	movs	r2, #2
 8007312:	2101      	movs	r1, #1
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f00c fac8 	bl	80138aa <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2201      	movs	r2, #1
 800731e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8007322:	e012      	b.n	800734a <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007324:	2340      	movs	r3, #64	; 0x40
 8007326:	2202      	movs	r2, #2
 8007328:	2181      	movs	r1, #129	; 0x81
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f00c fabd 	bl	80138aa <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2201      	movs	r2, #1
 8007334:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007336:	2340      	movs	r3, #64	; 0x40
 8007338:	2202      	movs	r2, #2
 800733a:	2101      	movs	r1, #1
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f00c fab4 	bl	80138aa <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2201      	movs	r2, #1
 8007346:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800734a:	2308      	movs	r3, #8
 800734c:	2203      	movs	r2, #3
 800734e:	2182      	movs	r1, #130	; 0x82
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f00c faaa 	bl	80138aa <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2201      	movs	r2, #1
 800735a:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800735c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007360:	f00c fd52 	bl	8013e08 <malloc>
 8007364:	4603      	mov	r3, r0
 8007366:	461a      	mov	r2, r3
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007374:	2b00      	cmp	r3, #0
 8007376:	d102      	bne.n	800737e <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 8007378:	2301      	movs	r3, #1
 800737a:	73fb      	strb	r3, [r7, #15]
 800737c:	e026      	b.n	80073cc <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007384:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	2200      	movs	r2, #0
 8007394:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	2200      	movs	r2, #0
 800739c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	7c1b      	ldrb	r3, [r3, #16]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d109      	bne.n	80073bc <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80073ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80073b2:	2101      	movs	r1, #1
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f00c fb69 	bl	8013a8c <USBD_LL_PrepareReceive>
 80073ba:	e007      	b.n	80073cc <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80073c2:	2340      	movs	r3, #64	; 0x40
 80073c4:	2101      	movs	r1, #1
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f00c fb60 	bl	8013a8c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80073cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3710      	adds	r7, #16
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}

080073d6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80073d6:	b580      	push	{r7, lr}
 80073d8:	b084      	sub	sp, #16
 80073da:	af00      	add	r7, sp, #0
 80073dc:	6078      	str	r0, [r7, #4]
 80073de:	460b      	mov	r3, r1
 80073e0:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80073e2:	2300      	movs	r3, #0
 80073e4:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80073e6:	2181      	movs	r1, #129	; 0x81
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f00c fa84 	bl	80138f6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2200      	movs	r2, #0
 80073f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80073f4:	2101      	movs	r1, #1
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f00c fa7d 	bl	80138f6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2200      	movs	r2, #0
 8007400:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007404:	2182      	movs	r1, #130	; 0x82
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f00c fa75 	bl	80138f6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2200      	movs	r2, #0
 8007410:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007418:	2b00      	cmp	r3, #0
 800741a:	d00e      	beq.n	800743a <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007422:	685b      	ldr	r3, [r3, #4]
 8007424:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800742c:	4618      	mov	r0, r3
 800742e:	f00c fcf3 	bl	8013e18 <free>
    pdev->pClassData = NULL;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2200      	movs	r2, #0
 8007436:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800743a:	7bfb      	ldrb	r3, [r7, #15]
}
 800743c:	4618      	mov	r0, r3
 800743e:	3710      	adds	r7, #16
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}

08007444 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b086      	sub	sp, #24
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
 800744c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007454:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007456:	2300      	movs	r3, #0
 8007458:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800745a:	2300      	movs	r3, #0
 800745c:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800745e:	2300      	movs	r3, #0
 8007460:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	781b      	ldrb	r3, [r3, #0]
 8007466:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800746a:	2b00      	cmp	r3, #0
 800746c:	d039      	beq.n	80074e2 <USBD_CDC_Setup+0x9e>
 800746e:	2b20      	cmp	r3, #32
 8007470:	d17c      	bne.n	800756c <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	88db      	ldrh	r3, [r3, #6]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d029      	beq.n	80074ce <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	781b      	ldrb	r3, [r3, #0]
 800747e:	b25b      	sxtb	r3, r3
 8007480:	2b00      	cmp	r3, #0
 8007482:	da11      	bge.n	80074a8 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800748a:	689b      	ldr	r3, [r3, #8]
 800748c:	683a      	ldr	r2, [r7, #0]
 800748e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8007490:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007492:	683a      	ldr	r2, [r7, #0]
 8007494:	88d2      	ldrh	r2, [r2, #6]
 8007496:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007498:	6939      	ldr	r1, [r7, #16]
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	88db      	ldrh	r3, [r3, #6]
 800749e:	461a      	mov	r2, r3
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f001 fa3f 	bl	8008924 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80074a6:	e068      	b.n	800757a <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	785a      	ldrb	r2, [r3, #1]
 80074ac:	693b      	ldr	r3, [r7, #16]
 80074ae:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	88db      	ldrh	r3, [r3, #6]
 80074b6:	b2da      	uxtb	r2, r3
 80074b8:	693b      	ldr	r3, [r7, #16]
 80074ba:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80074be:	6939      	ldr	r1, [r7, #16]
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	88db      	ldrh	r3, [r3, #6]
 80074c4:	461a      	mov	r2, r3
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f001 fa5a 	bl	8008980 <USBD_CtlPrepareRx>
      break;
 80074cc:	e055      	b.n	800757a <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80074d4:	689b      	ldr	r3, [r3, #8]
 80074d6:	683a      	ldr	r2, [r7, #0]
 80074d8:	7850      	ldrb	r0, [r2, #1]
 80074da:	2200      	movs	r2, #0
 80074dc:	6839      	ldr	r1, [r7, #0]
 80074de:	4798      	blx	r3
      break;
 80074e0:	e04b      	b.n	800757a <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	785b      	ldrb	r3, [r3, #1]
 80074e6:	2b0a      	cmp	r3, #10
 80074e8:	d017      	beq.n	800751a <USBD_CDC_Setup+0xd6>
 80074ea:	2b0b      	cmp	r3, #11
 80074ec:	d029      	beq.n	8007542 <USBD_CDC_Setup+0xfe>
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d133      	bne.n	800755a <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074f8:	2b03      	cmp	r3, #3
 80074fa:	d107      	bne.n	800750c <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80074fc:	f107 030c 	add.w	r3, r7, #12
 8007500:	2202      	movs	r2, #2
 8007502:	4619      	mov	r1, r3
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f001 fa0d 	bl	8008924 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800750a:	e02e      	b.n	800756a <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 800750c:	6839      	ldr	r1, [r7, #0]
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f001 f99d 	bl	800884e <USBD_CtlError>
            ret = USBD_FAIL;
 8007514:	2302      	movs	r3, #2
 8007516:	75fb      	strb	r3, [r7, #23]
          break;
 8007518:	e027      	b.n	800756a <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007520:	2b03      	cmp	r3, #3
 8007522:	d107      	bne.n	8007534 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007524:	f107 030f 	add.w	r3, r7, #15
 8007528:	2201      	movs	r2, #1
 800752a:	4619      	mov	r1, r3
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f001 f9f9 	bl	8008924 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007532:	e01a      	b.n	800756a <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8007534:	6839      	ldr	r1, [r7, #0]
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f001 f989 	bl	800884e <USBD_CtlError>
            ret = USBD_FAIL;
 800753c:	2302      	movs	r3, #2
 800753e:	75fb      	strb	r3, [r7, #23]
          break;
 8007540:	e013      	b.n	800756a <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007548:	2b03      	cmp	r3, #3
 800754a:	d00d      	beq.n	8007568 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 800754c:	6839      	ldr	r1, [r7, #0]
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f001 f97d 	bl	800884e <USBD_CtlError>
            ret = USBD_FAIL;
 8007554:	2302      	movs	r3, #2
 8007556:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007558:	e006      	b.n	8007568 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 800755a:	6839      	ldr	r1, [r7, #0]
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f001 f976 	bl	800884e <USBD_CtlError>
          ret = USBD_FAIL;
 8007562:	2302      	movs	r3, #2
 8007564:	75fb      	strb	r3, [r7, #23]
          break;
 8007566:	e000      	b.n	800756a <USBD_CDC_Setup+0x126>
          break;
 8007568:	bf00      	nop
      }
      break;
 800756a:	e006      	b.n	800757a <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 800756c:	6839      	ldr	r1, [r7, #0]
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f001 f96d 	bl	800884e <USBD_CtlError>
      ret = USBD_FAIL;
 8007574:	2302      	movs	r3, #2
 8007576:	75fb      	strb	r3, [r7, #23]
      break;
 8007578:	bf00      	nop
  }

  return ret;
 800757a:	7dfb      	ldrb	r3, [r7, #23]
}
 800757c:	4618      	mov	r0, r3
 800757e:	3718      	adds	r7, #24
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}

08007584 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b084      	sub	sp, #16
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
 800758c:	460b      	mov	r3, r1
 800758e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007596:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800759e:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d03a      	beq.n	8007620 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80075aa:	78fa      	ldrb	r2, [r7, #3]
 80075ac:	6879      	ldr	r1, [r7, #4]
 80075ae:	4613      	mov	r3, r2
 80075b0:	009b      	lsls	r3, r3, #2
 80075b2:	4413      	add	r3, r2
 80075b4:	009b      	lsls	r3, r3, #2
 80075b6:	440b      	add	r3, r1
 80075b8:	331c      	adds	r3, #28
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d029      	beq.n	8007614 <USBD_CDC_DataIn+0x90>
 80075c0:	78fa      	ldrb	r2, [r7, #3]
 80075c2:	6879      	ldr	r1, [r7, #4]
 80075c4:	4613      	mov	r3, r2
 80075c6:	009b      	lsls	r3, r3, #2
 80075c8:	4413      	add	r3, r2
 80075ca:	009b      	lsls	r3, r3, #2
 80075cc:	440b      	add	r3, r1
 80075ce:	331c      	adds	r3, #28
 80075d0:	681a      	ldr	r2, [r3, #0]
 80075d2:	78f9      	ldrb	r1, [r7, #3]
 80075d4:	68b8      	ldr	r0, [r7, #8]
 80075d6:	460b      	mov	r3, r1
 80075d8:	00db      	lsls	r3, r3, #3
 80075da:	1a5b      	subs	r3, r3, r1
 80075dc:	009b      	lsls	r3, r3, #2
 80075de:	4403      	add	r3, r0
 80075e0:	3344      	adds	r3, #68	; 0x44
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	fbb2 f1f3 	udiv	r1, r2, r3
 80075e8:	fb03 f301 	mul.w	r3, r3, r1
 80075ec:	1ad3      	subs	r3, r2, r3
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d110      	bne.n	8007614 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80075f2:	78fa      	ldrb	r2, [r7, #3]
 80075f4:	6879      	ldr	r1, [r7, #4]
 80075f6:	4613      	mov	r3, r2
 80075f8:	009b      	lsls	r3, r3, #2
 80075fa:	4413      	add	r3, r2
 80075fc:	009b      	lsls	r3, r3, #2
 80075fe:	440b      	add	r3, r1
 8007600:	331c      	adds	r3, #28
 8007602:	2200      	movs	r2, #0
 8007604:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007606:	78f9      	ldrb	r1, [r7, #3]
 8007608:	2300      	movs	r3, #0
 800760a:	2200      	movs	r2, #0
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f00c fa1a 	bl	8013a46 <USBD_LL_Transmit>
 8007612:	e003      	b.n	800761c <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	2200      	movs	r2, #0
 8007618:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800761c:	2300      	movs	r3, #0
 800761e:	e000      	b.n	8007622 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007620:	2302      	movs	r3, #2
  }
}
 8007622:	4618      	mov	r0, r3
 8007624:	3710      	adds	r7, #16
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}

0800762a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800762a:	b580      	push	{r7, lr}
 800762c:	b084      	sub	sp, #16
 800762e:	af00      	add	r7, sp, #0
 8007630:	6078      	str	r0, [r7, #4]
 8007632:	460b      	mov	r3, r1
 8007634:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800763c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800763e:	78fb      	ldrb	r3, [r7, #3]
 8007640:	4619      	mov	r1, r3
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f00c fa45 	bl	8013ad2 <USBD_LL_GetRxDataSize>
 8007648:	4602      	mov	r2, r0
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007656:	2b00      	cmp	r3, #0
 8007658:	d00d      	beq.n	8007676 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007660:	68db      	ldr	r3, [r3, #12]
 8007662:	68fa      	ldr	r2, [r7, #12]
 8007664:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007668:	68fa      	ldr	r2, [r7, #12]
 800766a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800766e:	4611      	mov	r1, r2
 8007670:	4798      	blx	r3

    return USBD_OK;
 8007672:	2300      	movs	r3, #0
 8007674:	e000      	b.n	8007678 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007676:	2302      	movs	r3, #2
  }
}
 8007678:	4618      	mov	r0, r3
 800767a:	3710      	adds	r7, #16
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}

08007680 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b084      	sub	sp, #16
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800768e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007696:	2b00      	cmp	r3, #0
 8007698:	d015      	beq.n	80076c6 <USBD_CDC_EP0_RxReady+0x46>
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80076a0:	2bff      	cmp	r3, #255	; 0xff
 80076a2:	d010      	beq.n	80076c6 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80076aa:	689b      	ldr	r3, [r3, #8]
 80076ac:	68fa      	ldr	r2, [r7, #12]
 80076ae:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80076b2:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80076b4:	68fa      	ldr	r2, [r7, #12]
 80076b6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80076ba:	b292      	uxth	r2, r2
 80076bc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	22ff      	movs	r2, #255	; 0xff
 80076c2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80076c6:	2300      	movs	r3, #0
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	3710      	adds	r7, #16
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd80      	pop	{r7, pc}

080076d0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80076d0:	b480      	push	{r7}
 80076d2:	b083      	sub	sp, #12
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2243      	movs	r2, #67	; 0x43
 80076dc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80076de:	4b03      	ldr	r3, [pc, #12]	; (80076ec <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	370c      	adds	r7, #12
 80076e4:	46bd      	mov	sp, r7
 80076e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ea:	4770      	bx	lr
 80076ec:	20000098 	.word	0x20000098

080076f0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80076f0:	b480      	push	{r7}
 80076f2:	b083      	sub	sp, #12
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2243      	movs	r2, #67	; 0x43
 80076fc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80076fe:	4b03      	ldr	r3, [pc, #12]	; (800770c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007700:	4618      	mov	r0, r3
 8007702:	370c      	adds	r7, #12
 8007704:	46bd      	mov	sp, r7
 8007706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770a:	4770      	bx	lr
 800770c:	20000054 	.word	0x20000054

08007710 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007710:	b480      	push	{r7}
 8007712:	b083      	sub	sp, #12
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2243      	movs	r2, #67	; 0x43
 800771c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800771e:	4b03      	ldr	r3, [pc, #12]	; (800772c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007720:	4618      	mov	r0, r3
 8007722:	370c      	adds	r7, #12
 8007724:	46bd      	mov	sp, r7
 8007726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772a:	4770      	bx	lr
 800772c:	200000dc 	.word	0x200000dc

08007730 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007730:	b480      	push	{r7}
 8007732:	b083      	sub	sp, #12
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	220a      	movs	r2, #10
 800773c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800773e:	4b03      	ldr	r3, [pc, #12]	; (800774c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007740:	4618      	mov	r0, r3
 8007742:	370c      	adds	r7, #12
 8007744:	46bd      	mov	sp, r7
 8007746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774a:	4770      	bx	lr
 800774c:	20000010 	.word	0x20000010

08007750 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007750:	b480      	push	{r7}
 8007752:	b085      	sub	sp, #20
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
 8007758:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800775a:	2302      	movs	r3, #2
 800775c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d005      	beq.n	8007770 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	683a      	ldr	r2, [r7, #0]
 8007768:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800776c:	2300      	movs	r3, #0
 800776e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007770:	7bfb      	ldrb	r3, [r7, #15]
}
 8007772:	4618      	mov	r0, r3
 8007774:	3714      	adds	r7, #20
 8007776:	46bd      	mov	sp, r7
 8007778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777c:	4770      	bx	lr

0800777e <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800777e:	b480      	push	{r7}
 8007780:	b087      	sub	sp, #28
 8007782:	af00      	add	r7, sp, #0
 8007784:	60f8      	str	r0, [r7, #12]
 8007786:	60b9      	str	r1, [r7, #8]
 8007788:	4613      	mov	r3, r2
 800778a:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007792:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007794:	697b      	ldr	r3, [r7, #20]
 8007796:	68ba      	ldr	r2, [r7, #8]
 8007798:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800779c:	88fa      	ldrh	r2, [r7, #6]
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80077a4:	2300      	movs	r3, #0
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	371c      	adds	r7, #28
 80077aa:	46bd      	mov	sp, r7
 80077ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b0:	4770      	bx	lr

080077b2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80077b2:	b480      	push	{r7}
 80077b4:	b085      	sub	sp, #20
 80077b6:	af00      	add	r7, sp, #0
 80077b8:	6078      	str	r0, [r7, #4]
 80077ba:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077c2:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	683a      	ldr	r2, [r7, #0]
 80077c8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80077cc:	2300      	movs	r3, #0
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	3714      	adds	r7, #20
 80077d2:	46bd      	mov	sp, r7
 80077d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d8:	4770      	bx	lr

080077da <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80077da:	b580      	push	{r7, lr}
 80077dc:	b084      	sub	sp, #16
 80077de:	af00      	add	r7, sp, #0
 80077e0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077e8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d01c      	beq.n	800782e <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d115      	bne.n	800782a <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	2201      	movs	r2, #1
 8007802:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800781c:	b29b      	uxth	r3, r3
 800781e:	2181      	movs	r1, #129	; 0x81
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f00c f910 	bl	8013a46 <USBD_LL_Transmit>

      return USBD_OK;
 8007826:	2300      	movs	r3, #0
 8007828:	e002      	b.n	8007830 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800782a:	2301      	movs	r3, #1
 800782c:	e000      	b.n	8007830 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800782e:	2302      	movs	r3, #2
  }
}
 8007830:	4618      	mov	r0, r3
 8007832:	3710      	adds	r7, #16
 8007834:	46bd      	mov	sp, r7
 8007836:	bd80      	pop	{r7, pc}

08007838 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b084      	sub	sp, #16
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007846:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800784e:	2b00      	cmp	r3, #0
 8007850:	d017      	beq.n	8007882 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	7c1b      	ldrb	r3, [r3, #16]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d109      	bne.n	800786e <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007860:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007864:	2101      	movs	r1, #1
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f00c f910 	bl	8013a8c <USBD_LL_PrepareReceive>
 800786c:	e007      	b.n	800787e <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007874:	2340      	movs	r3, #64	; 0x40
 8007876:	2101      	movs	r1, #1
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f00c f907 	bl	8013a8c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800787e:	2300      	movs	r3, #0
 8007880:	e000      	b.n	8007884 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007882:	2302      	movs	r3, #2
  }
}
 8007884:	4618      	mov	r0, r3
 8007886:	3710      	adds	r7, #16
 8007888:	46bd      	mov	sp, r7
 800788a:	bd80      	pop	{r7, pc}

0800788c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b084      	sub	sp, #16
 8007890:	af00      	add	r7, sp, #0
 8007892:	60f8      	str	r0, [r7, #12]
 8007894:	60b9      	str	r1, [r7, #8]
 8007896:	4613      	mov	r3, r2
 8007898:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d101      	bne.n	80078a4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80078a0:	2302      	movs	r3, #2
 80078a2:	e01a      	b.n	80078da <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d003      	beq.n	80078b6 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	2200      	movs	r2, #0
 80078b2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d003      	beq.n	80078c4 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	68ba      	ldr	r2, [r7, #8]
 80078c0:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2201      	movs	r2, #1
 80078c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	79fa      	ldrb	r2, [r7, #7]
 80078d0:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80078d2:	68f8      	ldr	r0, [r7, #12]
 80078d4:	f00b ff7e 	bl	80137d4 <USBD_LL_Init>

  return USBD_OK;
 80078d8:	2300      	movs	r3, #0
}
 80078da:	4618      	mov	r0, r3
 80078dc:	3710      	adds	r7, #16
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}

080078e2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80078e2:	b480      	push	{r7}
 80078e4:	b085      	sub	sp, #20
 80078e6:	af00      	add	r7, sp, #0
 80078e8:	6078      	str	r0, [r7, #4]
 80078ea:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80078ec:	2300      	movs	r3, #0
 80078ee:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d006      	beq.n	8007904 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	683a      	ldr	r2, [r7, #0]
 80078fa:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80078fe:	2300      	movs	r3, #0
 8007900:	73fb      	strb	r3, [r7, #15]
 8007902:	e001      	b.n	8007908 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007904:	2302      	movs	r3, #2
 8007906:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007908:	7bfb      	ldrb	r3, [r7, #15]
}
 800790a:	4618      	mov	r0, r3
 800790c:	3714      	adds	r7, #20
 800790e:	46bd      	mov	sp, r7
 8007910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007914:	4770      	bx	lr

08007916 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007916:	b580      	push	{r7, lr}
 8007918:	b082      	sub	sp, #8
 800791a:	af00      	add	r7, sp, #0
 800791c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f00b ffa8 	bl	8013874 <USBD_LL_Start>

  return USBD_OK;
 8007924:	2300      	movs	r3, #0
}
 8007926:	4618      	mov	r0, r3
 8007928:	3708      	adds	r7, #8
 800792a:	46bd      	mov	sp, r7
 800792c:	bd80      	pop	{r7, pc}

0800792e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800792e:	b480      	push	{r7}
 8007930:	b083      	sub	sp, #12
 8007932:	af00      	add	r7, sp, #0
 8007934:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007936:	2300      	movs	r3, #0
}
 8007938:	4618      	mov	r0, r3
 800793a:	370c      	adds	r7, #12
 800793c:	46bd      	mov	sp, r7
 800793e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007942:	4770      	bx	lr

08007944 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b084      	sub	sp, #16
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
 800794c:	460b      	mov	r3, r1
 800794e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007950:	2302      	movs	r3, #2
 8007952:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800795a:	2b00      	cmp	r3, #0
 800795c:	d00c      	beq.n	8007978 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	78fa      	ldrb	r2, [r7, #3]
 8007968:	4611      	mov	r1, r2
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	4798      	blx	r3
 800796e:	4603      	mov	r3, r0
 8007970:	2b00      	cmp	r3, #0
 8007972:	d101      	bne.n	8007978 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007974:	2300      	movs	r3, #0
 8007976:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007978:	7bfb      	ldrb	r3, [r7, #15]
}
 800797a:	4618      	mov	r0, r3
 800797c:	3710      	adds	r7, #16
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}

08007982 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007982:	b580      	push	{r7, lr}
 8007984:	b082      	sub	sp, #8
 8007986:	af00      	add	r7, sp, #0
 8007988:	6078      	str	r0, [r7, #4]
 800798a:	460b      	mov	r3, r1
 800798c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007994:	685b      	ldr	r3, [r3, #4]
 8007996:	78fa      	ldrb	r2, [r7, #3]
 8007998:	4611      	mov	r1, r2
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	4798      	blx	r3

  return USBD_OK;
 800799e:	2300      	movs	r3, #0
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	3708      	adds	r7, #8
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}

080079a8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b082      	sub	sp, #8
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
 80079b0:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80079b8:	6839      	ldr	r1, [r7, #0]
 80079ba:	4618      	mov	r0, r3
 80079bc:	f000 ff0a 	bl	80087d4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2201      	movs	r2, #1
 80079c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80079ce:	461a      	mov	r2, r3
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80079dc:	f003 031f 	and.w	r3, r3, #31
 80079e0:	2b01      	cmp	r3, #1
 80079e2:	d00c      	beq.n	80079fe <USBD_LL_SetupStage+0x56>
 80079e4:	2b01      	cmp	r3, #1
 80079e6:	d302      	bcc.n	80079ee <USBD_LL_SetupStage+0x46>
 80079e8:	2b02      	cmp	r3, #2
 80079ea:	d010      	beq.n	8007a0e <USBD_LL_SetupStage+0x66>
 80079ec:	e017      	b.n	8007a1e <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80079f4:	4619      	mov	r1, r3
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f000 fa0a 	bl	8007e10 <USBD_StdDevReq>
      break;
 80079fc:	e01a      	b.n	8007a34 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007a04:	4619      	mov	r1, r3
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f000 fa6c 	bl	8007ee4 <USBD_StdItfReq>
      break;
 8007a0c:	e012      	b.n	8007a34 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007a14:	4619      	mov	r1, r3
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f000 faaa 	bl	8007f70 <USBD_StdEPReq>
      break;
 8007a1c:	e00a      	b.n	8007a34 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007a24:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007a28:	b2db      	uxtb	r3, r3
 8007a2a:	4619      	mov	r1, r3
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f00b ff81 	bl	8013934 <USBD_LL_StallEP>
      break;
 8007a32:	bf00      	nop
  }

  return USBD_OK;
 8007a34:	2300      	movs	r3, #0
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3708      	adds	r7, #8
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}

08007a3e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007a3e:	b580      	push	{r7, lr}
 8007a40:	b086      	sub	sp, #24
 8007a42:	af00      	add	r7, sp, #0
 8007a44:	60f8      	str	r0, [r7, #12]
 8007a46:	460b      	mov	r3, r1
 8007a48:	607a      	str	r2, [r7, #4]
 8007a4a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007a4c:	7afb      	ldrb	r3, [r7, #11]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d14b      	bne.n	8007aea <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007a58:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007a60:	2b03      	cmp	r3, #3
 8007a62:	d134      	bne.n	8007ace <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007a64:	697b      	ldr	r3, [r7, #20]
 8007a66:	68da      	ldr	r2, [r3, #12]
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	691b      	ldr	r3, [r3, #16]
 8007a6c:	429a      	cmp	r2, r3
 8007a6e:	d919      	bls.n	8007aa4 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007a70:	697b      	ldr	r3, [r7, #20]
 8007a72:	68da      	ldr	r2, [r3, #12]
 8007a74:	697b      	ldr	r3, [r7, #20]
 8007a76:	691b      	ldr	r3, [r3, #16]
 8007a78:	1ad2      	subs	r2, r2, r3
 8007a7a:	697b      	ldr	r3, [r7, #20]
 8007a7c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007a7e:	697b      	ldr	r3, [r7, #20]
 8007a80:	68da      	ldr	r2, [r3, #12]
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007a86:	429a      	cmp	r2, r3
 8007a88:	d203      	bcs.n	8007a92 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007a8a:	697b      	ldr	r3, [r7, #20]
 8007a8c:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007a8e:	b29b      	uxth	r3, r3
 8007a90:	e002      	b.n	8007a98 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007a96:	b29b      	uxth	r3, r3
 8007a98:	461a      	mov	r2, r3
 8007a9a:	6879      	ldr	r1, [r7, #4]
 8007a9c:	68f8      	ldr	r0, [r7, #12]
 8007a9e:	f000 ff8d 	bl	80089bc <USBD_CtlContinueRx>
 8007aa2:	e038      	b.n	8007b16 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007aaa:	691b      	ldr	r3, [r3, #16]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d00a      	beq.n	8007ac6 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007ab6:	2b03      	cmp	r3, #3
 8007ab8:	d105      	bne.n	8007ac6 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ac0:	691b      	ldr	r3, [r3, #16]
 8007ac2:	68f8      	ldr	r0, [r7, #12]
 8007ac4:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007ac6:	68f8      	ldr	r0, [r7, #12]
 8007ac8:	f000 ff8a 	bl	80089e0 <USBD_CtlSendStatus>
 8007acc:	e023      	b.n	8007b16 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007ad4:	2b05      	cmp	r3, #5
 8007ad6:	d11e      	bne.n	8007b16 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	2200      	movs	r2, #0
 8007adc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007ae0:	2100      	movs	r1, #0
 8007ae2:	68f8      	ldr	r0, [r7, #12]
 8007ae4:	f00b ff26 	bl	8013934 <USBD_LL_StallEP>
 8007ae8:	e015      	b.n	8007b16 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007af0:	699b      	ldr	r3, [r3, #24]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d00d      	beq.n	8007b12 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007afc:	2b03      	cmp	r3, #3
 8007afe:	d108      	bne.n	8007b12 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b06:	699b      	ldr	r3, [r3, #24]
 8007b08:	7afa      	ldrb	r2, [r7, #11]
 8007b0a:	4611      	mov	r1, r2
 8007b0c:	68f8      	ldr	r0, [r7, #12]
 8007b0e:	4798      	blx	r3
 8007b10:	e001      	b.n	8007b16 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007b12:	2302      	movs	r3, #2
 8007b14:	e000      	b.n	8007b18 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007b16:	2300      	movs	r3, #0
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3718      	adds	r7, #24
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}

08007b20 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b086      	sub	sp, #24
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	60f8      	str	r0, [r7, #12]
 8007b28:	460b      	mov	r3, r1
 8007b2a:	607a      	str	r2, [r7, #4]
 8007b2c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007b2e:	7afb      	ldrb	r3, [r7, #11]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d17f      	bne.n	8007c34 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	3314      	adds	r3, #20
 8007b38:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007b40:	2b02      	cmp	r3, #2
 8007b42:	d15c      	bne.n	8007bfe <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007b44:	697b      	ldr	r3, [r7, #20]
 8007b46:	68da      	ldr	r2, [r3, #12]
 8007b48:	697b      	ldr	r3, [r7, #20]
 8007b4a:	691b      	ldr	r3, [r3, #16]
 8007b4c:	429a      	cmp	r2, r3
 8007b4e:	d915      	bls.n	8007b7c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007b50:	697b      	ldr	r3, [r7, #20]
 8007b52:	68da      	ldr	r2, [r3, #12]
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	691b      	ldr	r3, [r3, #16]
 8007b58:	1ad2      	subs	r2, r2, r3
 8007b5a:	697b      	ldr	r3, [r7, #20]
 8007b5c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007b5e:	697b      	ldr	r3, [r7, #20]
 8007b60:	68db      	ldr	r3, [r3, #12]
 8007b62:	b29b      	uxth	r3, r3
 8007b64:	461a      	mov	r2, r3
 8007b66:	6879      	ldr	r1, [r7, #4]
 8007b68:	68f8      	ldr	r0, [r7, #12]
 8007b6a:	f000 fef7 	bl	800895c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007b6e:	2300      	movs	r3, #0
 8007b70:	2200      	movs	r2, #0
 8007b72:	2100      	movs	r1, #0
 8007b74:	68f8      	ldr	r0, [r7, #12]
 8007b76:	f00b ff89 	bl	8013a8c <USBD_LL_PrepareReceive>
 8007b7a:	e04e      	b.n	8007c1a <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007b7c:	697b      	ldr	r3, [r7, #20]
 8007b7e:	689b      	ldr	r3, [r3, #8]
 8007b80:	697a      	ldr	r2, [r7, #20]
 8007b82:	6912      	ldr	r2, [r2, #16]
 8007b84:	fbb3 f1f2 	udiv	r1, r3, r2
 8007b88:	fb02 f201 	mul.w	r2, r2, r1
 8007b8c:	1a9b      	subs	r3, r3, r2
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d11c      	bne.n	8007bcc <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	689a      	ldr	r2, [r3, #8]
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007b9a:	429a      	cmp	r2, r3
 8007b9c:	d316      	bcc.n	8007bcc <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007b9e:	697b      	ldr	r3, [r7, #20]
 8007ba0:	689a      	ldr	r2, [r3, #8]
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007ba8:	429a      	cmp	r2, r3
 8007baa:	d20f      	bcs.n	8007bcc <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007bac:	2200      	movs	r2, #0
 8007bae:	2100      	movs	r1, #0
 8007bb0:	68f8      	ldr	r0, [r7, #12]
 8007bb2:	f000 fed3 	bl	800895c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	2100      	movs	r1, #0
 8007bc4:	68f8      	ldr	r0, [r7, #12]
 8007bc6:	f00b ff61 	bl	8013a8c <USBD_LL_PrepareReceive>
 8007bca:	e026      	b.n	8007c1a <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bd2:	68db      	ldr	r3, [r3, #12]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d00a      	beq.n	8007bee <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007bde:	2b03      	cmp	r3, #3
 8007be0:	d105      	bne.n	8007bee <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007be8:	68db      	ldr	r3, [r3, #12]
 8007bea:	68f8      	ldr	r0, [r7, #12]
 8007bec:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007bee:	2180      	movs	r1, #128	; 0x80
 8007bf0:	68f8      	ldr	r0, [r7, #12]
 8007bf2:	f00b fe9f 	bl	8013934 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007bf6:	68f8      	ldr	r0, [r7, #12]
 8007bf8:	f000 ff05 	bl	8008a06 <USBD_CtlReceiveStatus>
 8007bfc:	e00d      	b.n	8007c1a <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007c04:	2b04      	cmp	r3, #4
 8007c06:	d004      	beq.n	8007c12 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d103      	bne.n	8007c1a <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007c12:	2180      	movs	r1, #128	; 0x80
 8007c14:	68f8      	ldr	r0, [r7, #12]
 8007c16:	f00b fe8d 	bl	8013934 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007c20:	2b01      	cmp	r3, #1
 8007c22:	d11d      	bne.n	8007c60 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007c24:	68f8      	ldr	r0, [r7, #12]
 8007c26:	f7ff fe82 	bl	800792e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007c32:	e015      	b.n	8007c60 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c3a:	695b      	ldr	r3, [r3, #20]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d00d      	beq.n	8007c5c <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007c46:	2b03      	cmp	r3, #3
 8007c48:	d108      	bne.n	8007c5c <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c50:	695b      	ldr	r3, [r3, #20]
 8007c52:	7afa      	ldrb	r2, [r7, #11]
 8007c54:	4611      	mov	r1, r2
 8007c56:	68f8      	ldr	r0, [r7, #12]
 8007c58:	4798      	blx	r3
 8007c5a:	e001      	b.n	8007c60 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007c5c:	2302      	movs	r3, #2
 8007c5e:	e000      	b.n	8007c62 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007c60:	2300      	movs	r3, #0
}
 8007c62:	4618      	mov	r0, r3
 8007c64:	3718      	adds	r7, #24
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bd80      	pop	{r7, pc}

08007c6a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007c6a:	b580      	push	{r7, lr}
 8007c6c:	b082      	sub	sp, #8
 8007c6e:	af00      	add	r7, sp, #0
 8007c70:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007c72:	2340      	movs	r3, #64	; 0x40
 8007c74:	2200      	movs	r2, #0
 8007c76:	2100      	movs	r1, #0
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f00b fe16 	bl	80138aa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2201      	movs	r2, #1
 8007c82:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2240      	movs	r2, #64	; 0x40
 8007c8a:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007c8e:	2340      	movs	r3, #64	; 0x40
 8007c90:	2200      	movs	r2, #0
 8007c92:	2180      	movs	r1, #128	; 0x80
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f00b fe08 	bl	80138aa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2201      	movs	r2, #1
 8007c9e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2240      	movs	r2, #64	; 0x40
 8007ca4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2201      	movs	r2, #1
 8007caa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d009      	beq.n	8007ce2 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cd4:	685b      	ldr	r3, [r3, #4]
 8007cd6:	687a      	ldr	r2, [r7, #4]
 8007cd8:	6852      	ldr	r2, [r2, #4]
 8007cda:	b2d2      	uxtb	r2, r2
 8007cdc:	4611      	mov	r1, r2
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	4798      	blx	r3
  }

  return USBD_OK;
 8007ce2:	2300      	movs	r3, #0
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	3708      	adds	r7, #8
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}

08007cec <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007cec:	b480      	push	{r7}
 8007cee:	b083      	sub	sp, #12
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
 8007cf4:	460b      	mov	r3, r1
 8007cf6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	78fa      	ldrb	r2, [r7, #3]
 8007cfc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007cfe:	2300      	movs	r3, #0
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	370c      	adds	r7, #12
 8007d04:	46bd      	mov	sp, r7
 8007d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0a:	4770      	bx	lr

08007d0c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	b083      	sub	sp, #12
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2204      	movs	r2, #4
 8007d24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007d28:	2300      	movs	r3, #0
}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	370c      	adds	r7, #12
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d34:	4770      	bx	lr

08007d36 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007d36:	b480      	push	{r7}
 8007d38:	b083      	sub	sp, #12
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d44:	2b04      	cmp	r3, #4
 8007d46:	d105      	bne.n	8007d54 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007d54:	2300      	movs	r3, #0
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	370c      	adds	r7, #12
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d60:	4770      	bx	lr

08007d62 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007d62:	b580      	push	{r7, lr}
 8007d64:	b082      	sub	sp, #8
 8007d66:	af00      	add	r7, sp, #0
 8007d68:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d70:	2b03      	cmp	r3, #3
 8007d72:	d10b      	bne.n	8007d8c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d7a:	69db      	ldr	r3, [r3, #28]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d005      	beq.n	8007d8c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d86:	69db      	ldr	r3, [r3, #28]
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007d8c:	2300      	movs	r3, #0
}
 8007d8e:	4618      	mov	r0, r3
 8007d90:	3708      	adds	r7, #8
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bd80      	pop	{r7, pc}

08007d96 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007d96:	b480      	push	{r7}
 8007d98:	b083      	sub	sp, #12
 8007d9a:	af00      	add	r7, sp, #0
 8007d9c:	6078      	str	r0, [r7, #4]
 8007d9e:	460b      	mov	r3, r1
 8007da0:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8007da2:	2300      	movs	r3, #0
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	370c      	adds	r7, #12
 8007da8:	46bd      	mov	sp, r7
 8007daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dae:	4770      	bx	lr

08007db0 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007db0:	b480      	push	{r7}
 8007db2:	b083      	sub	sp, #12
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
 8007db8:	460b      	mov	r3, r1
 8007dba:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8007dbc:	2300      	movs	r3, #0
}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	370c      	adds	r7, #12
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc8:	4770      	bx	lr

08007dca <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007dca:	b480      	push	{r7}
 8007dcc:	b083      	sub	sp, #12
 8007dce:	af00      	add	r7, sp, #0
 8007dd0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007dd2:	2300      	movs	r3, #0
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	370c      	adds	r7, #12
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dde:	4770      	bx	lr

08007de0 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b082      	sub	sp, #8
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2201      	movs	r2, #1
 8007dec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007df6:	685b      	ldr	r3, [r3, #4]
 8007df8:	687a      	ldr	r2, [r7, #4]
 8007dfa:	6852      	ldr	r2, [r2, #4]
 8007dfc:	b2d2      	uxtb	r2, r2
 8007dfe:	4611      	mov	r1, r2
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	4798      	blx	r3

  return USBD_OK;
 8007e04:	2300      	movs	r3, #0
}
 8007e06:	4618      	mov	r0, r3
 8007e08:	3708      	adds	r7, #8
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}
	...

08007e10 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b084      	sub	sp, #16
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
 8007e18:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	781b      	ldrb	r3, [r3, #0]
 8007e22:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007e26:	2b20      	cmp	r3, #32
 8007e28:	d004      	beq.n	8007e34 <USBD_StdDevReq+0x24>
 8007e2a:	2b40      	cmp	r3, #64	; 0x40
 8007e2c:	d002      	beq.n	8007e34 <USBD_StdDevReq+0x24>
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d008      	beq.n	8007e44 <USBD_StdDevReq+0x34>
 8007e32:	e04c      	b.n	8007ece <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e3a:	689b      	ldr	r3, [r3, #8]
 8007e3c:	6839      	ldr	r1, [r7, #0]
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	4798      	blx	r3
      break;
 8007e42:	e049      	b.n	8007ed8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	785b      	ldrb	r3, [r3, #1]
 8007e48:	2b09      	cmp	r3, #9
 8007e4a:	d83a      	bhi.n	8007ec2 <USBD_StdDevReq+0xb2>
 8007e4c:	a201      	add	r2, pc, #4	; (adr r2, 8007e54 <USBD_StdDevReq+0x44>)
 8007e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e52:	bf00      	nop
 8007e54:	08007ea5 	.word	0x08007ea5
 8007e58:	08007eb9 	.word	0x08007eb9
 8007e5c:	08007ec3 	.word	0x08007ec3
 8007e60:	08007eaf 	.word	0x08007eaf
 8007e64:	08007ec3 	.word	0x08007ec3
 8007e68:	08007e87 	.word	0x08007e87
 8007e6c:	08007e7d 	.word	0x08007e7d
 8007e70:	08007ec3 	.word	0x08007ec3
 8007e74:	08007e9b 	.word	0x08007e9b
 8007e78:	08007e91 	.word	0x08007e91
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007e7c:	6839      	ldr	r1, [r7, #0]
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f000 f9d4 	bl	800822c <USBD_GetDescriptor>
          break;
 8007e84:	e022      	b.n	8007ecc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007e86:	6839      	ldr	r1, [r7, #0]
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	f000 fb37 	bl	80084fc <USBD_SetAddress>
          break;
 8007e8e:	e01d      	b.n	8007ecc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007e90:	6839      	ldr	r1, [r7, #0]
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f000 fb74 	bl	8008580 <USBD_SetConfig>
          break;
 8007e98:	e018      	b.n	8007ecc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007e9a:	6839      	ldr	r1, [r7, #0]
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f000 fbfd 	bl	800869c <USBD_GetConfig>
          break;
 8007ea2:	e013      	b.n	8007ecc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007ea4:	6839      	ldr	r1, [r7, #0]
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f000 fc2c 	bl	8008704 <USBD_GetStatus>
          break;
 8007eac:	e00e      	b.n	8007ecc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007eae:	6839      	ldr	r1, [r7, #0]
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f000 fc5a 	bl	800876a <USBD_SetFeature>
          break;
 8007eb6:	e009      	b.n	8007ecc <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007eb8:	6839      	ldr	r1, [r7, #0]
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f000 fc69 	bl	8008792 <USBD_ClrFeature>
          break;
 8007ec0:	e004      	b.n	8007ecc <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007ec2:	6839      	ldr	r1, [r7, #0]
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f000 fcc2 	bl	800884e <USBD_CtlError>
          break;
 8007eca:	bf00      	nop
      }
      break;
 8007ecc:	e004      	b.n	8007ed8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007ece:	6839      	ldr	r1, [r7, #0]
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f000 fcbc 	bl	800884e <USBD_CtlError>
      break;
 8007ed6:	bf00      	nop
  }

  return ret;
 8007ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eda:	4618      	mov	r0, r3
 8007edc:	3710      	adds	r7, #16
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}
 8007ee2:	bf00      	nop

08007ee4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b084      	sub	sp, #16
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
 8007eec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007eee:	2300      	movs	r3, #0
 8007ef0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	781b      	ldrb	r3, [r3, #0]
 8007ef6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007efa:	2b20      	cmp	r3, #32
 8007efc:	d003      	beq.n	8007f06 <USBD_StdItfReq+0x22>
 8007efe:	2b40      	cmp	r3, #64	; 0x40
 8007f00:	d001      	beq.n	8007f06 <USBD_StdItfReq+0x22>
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d12a      	bne.n	8007f5c <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f0c:	3b01      	subs	r3, #1
 8007f0e:	2b02      	cmp	r3, #2
 8007f10:	d81d      	bhi.n	8007f4e <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	889b      	ldrh	r3, [r3, #4]
 8007f16:	b2db      	uxtb	r3, r3
 8007f18:	2b01      	cmp	r3, #1
 8007f1a:	d813      	bhi.n	8007f44 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f22:	689b      	ldr	r3, [r3, #8]
 8007f24:	6839      	ldr	r1, [r7, #0]
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	4798      	blx	r3
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	88db      	ldrh	r3, [r3, #6]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d110      	bne.n	8007f58 <USBD_StdItfReq+0x74>
 8007f36:	7bfb      	ldrb	r3, [r7, #15]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d10d      	bne.n	8007f58 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f000 fd4f 	bl	80089e0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007f42:	e009      	b.n	8007f58 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8007f44:	6839      	ldr	r1, [r7, #0]
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f000 fc81 	bl	800884e <USBD_CtlError>
          break;
 8007f4c:	e004      	b.n	8007f58 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8007f4e:	6839      	ldr	r1, [r7, #0]
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f000 fc7c 	bl	800884e <USBD_CtlError>
          break;
 8007f56:	e000      	b.n	8007f5a <USBD_StdItfReq+0x76>
          break;
 8007f58:	bf00      	nop
      }
      break;
 8007f5a:	e004      	b.n	8007f66 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8007f5c:	6839      	ldr	r1, [r7, #0]
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f000 fc75 	bl	800884e <USBD_CtlError>
      break;
 8007f64:	bf00      	nop
  }

  return USBD_OK;
 8007f66:	2300      	movs	r3, #0
}
 8007f68:	4618      	mov	r0, r3
 8007f6a:	3710      	adds	r7, #16
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}

08007f70 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b084      	sub	sp, #16
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
 8007f78:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	889b      	ldrh	r3, [r3, #4]
 8007f82:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	781b      	ldrb	r3, [r3, #0]
 8007f88:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007f8c:	2b20      	cmp	r3, #32
 8007f8e:	d004      	beq.n	8007f9a <USBD_StdEPReq+0x2a>
 8007f90:	2b40      	cmp	r3, #64	; 0x40
 8007f92:	d002      	beq.n	8007f9a <USBD_StdEPReq+0x2a>
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d008      	beq.n	8007faa <USBD_StdEPReq+0x3a>
 8007f98:	e13d      	b.n	8008216 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fa0:	689b      	ldr	r3, [r3, #8]
 8007fa2:	6839      	ldr	r1, [r7, #0]
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	4798      	blx	r3
      break;
 8007fa8:	e13a      	b.n	8008220 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	781b      	ldrb	r3, [r3, #0]
 8007fae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007fb2:	2b20      	cmp	r3, #32
 8007fb4:	d10a      	bne.n	8007fcc <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fbc:	689b      	ldr	r3, [r3, #8]
 8007fbe:	6839      	ldr	r1, [r7, #0]
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	4798      	blx	r3
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007fc8:	7bfb      	ldrb	r3, [r7, #15]
 8007fca:	e12a      	b.n	8008222 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	785b      	ldrb	r3, [r3, #1]
 8007fd0:	2b01      	cmp	r3, #1
 8007fd2:	d03e      	beq.n	8008052 <USBD_StdEPReq+0xe2>
 8007fd4:	2b03      	cmp	r3, #3
 8007fd6:	d002      	beq.n	8007fde <USBD_StdEPReq+0x6e>
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d070      	beq.n	80080be <USBD_StdEPReq+0x14e>
 8007fdc:	e115      	b.n	800820a <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fe4:	2b02      	cmp	r3, #2
 8007fe6:	d002      	beq.n	8007fee <USBD_StdEPReq+0x7e>
 8007fe8:	2b03      	cmp	r3, #3
 8007fea:	d015      	beq.n	8008018 <USBD_StdEPReq+0xa8>
 8007fec:	e02b      	b.n	8008046 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007fee:	7bbb      	ldrb	r3, [r7, #14]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d00c      	beq.n	800800e <USBD_StdEPReq+0x9e>
 8007ff4:	7bbb      	ldrb	r3, [r7, #14]
 8007ff6:	2b80      	cmp	r3, #128	; 0x80
 8007ff8:	d009      	beq.n	800800e <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007ffa:	7bbb      	ldrb	r3, [r7, #14]
 8007ffc:	4619      	mov	r1, r3
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f00b fc98 	bl	8013934 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008004:	2180      	movs	r1, #128	; 0x80
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f00b fc94 	bl	8013934 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800800c:	e020      	b.n	8008050 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 800800e:	6839      	ldr	r1, [r7, #0]
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f000 fc1c 	bl	800884e <USBD_CtlError>
              break;
 8008016:	e01b      	b.n	8008050 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	885b      	ldrh	r3, [r3, #2]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d10e      	bne.n	800803e <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8008020:	7bbb      	ldrb	r3, [r7, #14]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d00b      	beq.n	800803e <USBD_StdEPReq+0xce>
 8008026:	7bbb      	ldrb	r3, [r7, #14]
 8008028:	2b80      	cmp	r3, #128	; 0x80
 800802a:	d008      	beq.n	800803e <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	88db      	ldrh	r3, [r3, #6]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d104      	bne.n	800803e <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008034:	7bbb      	ldrb	r3, [r7, #14]
 8008036:	4619      	mov	r1, r3
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f00b fc7b 	bl	8013934 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f000 fcce 	bl	80089e0 <USBD_CtlSendStatus>

              break;
 8008044:	e004      	b.n	8008050 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8008046:	6839      	ldr	r1, [r7, #0]
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f000 fc00 	bl	800884e <USBD_CtlError>
              break;
 800804e:	bf00      	nop
          }
          break;
 8008050:	e0e0      	b.n	8008214 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008058:	2b02      	cmp	r3, #2
 800805a:	d002      	beq.n	8008062 <USBD_StdEPReq+0xf2>
 800805c:	2b03      	cmp	r3, #3
 800805e:	d015      	beq.n	800808c <USBD_StdEPReq+0x11c>
 8008060:	e026      	b.n	80080b0 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008062:	7bbb      	ldrb	r3, [r7, #14]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d00c      	beq.n	8008082 <USBD_StdEPReq+0x112>
 8008068:	7bbb      	ldrb	r3, [r7, #14]
 800806a:	2b80      	cmp	r3, #128	; 0x80
 800806c:	d009      	beq.n	8008082 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800806e:	7bbb      	ldrb	r3, [r7, #14]
 8008070:	4619      	mov	r1, r3
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f00b fc5e 	bl	8013934 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008078:	2180      	movs	r1, #128	; 0x80
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f00b fc5a 	bl	8013934 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008080:	e01c      	b.n	80080bc <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8008082:	6839      	ldr	r1, [r7, #0]
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f000 fbe2 	bl	800884e <USBD_CtlError>
              break;
 800808a:	e017      	b.n	80080bc <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	885b      	ldrh	r3, [r3, #2]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d112      	bne.n	80080ba <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008094:	7bbb      	ldrb	r3, [r7, #14]
 8008096:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800809a:	2b00      	cmp	r3, #0
 800809c:	d004      	beq.n	80080a8 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800809e:	7bbb      	ldrb	r3, [r7, #14]
 80080a0:	4619      	mov	r1, r3
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f00b fc65 	bl	8013972 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	f000 fc99 	bl	80089e0 <USBD_CtlSendStatus>
              }
              break;
 80080ae:	e004      	b.n	80080ba <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 80080b0:	6839      	ldr	r1, [r7, #0]
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f000 fbcb 	bl	800884e <USBD_CtlError>
              break;
 80080b8:	e000      	b.n	80080bc <USBD_StdEPReq+0x14c>
              break;
 80080ba:	bf00      	nop
          }
          break;
 80080bc:	e0aa      	b.n	8008214 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080c4:	2b02      	cmp	r3, #2
 80080c6:	d002      	beq.n	80080ce <USBD_StdEPReq+0x15e>
 80080c8:	2b03      	cmp	r3, #3
 80080ca:	d032      	beq.n	8008132 <USBD_StdEPReq+0x1c2>
 80080cc:	e097      	b.n	80081fe <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80080ce:	7bbb      	ldrb	r3, [r7, #14]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d007      	beq.n	80080e4 <USBD_StdEPReq+0x174>
 80080d4:	7bbb      	ldrb	r3, [r7, #14]
 80080d6:	2b80      	cmp	r3, #128	; 0x80
 80080d8:	d004      	beq.n	80080e4 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 80080da:	6839      	ldr	r1, [r7, #0]
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f000 fbb6 	bl	800884e <USBD_CtlError>
                break;
 80080e2:	e091      	b.n	8008208 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80080e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	da0b      	bge.n	8008104 <USBD_StdEPReq+0x194>
 80080ec:	7bbb      	ldrb	r3, [r7, #14]
 80080ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80080f2:	4613      	mov	r3, r2
 80080f4:	009b      	lsls	r3, r3, #2
 80080f6:	4413      	add	r3, r2
 80080f8:	009b      	lsls	r3, r3, #2
 80080fa:	3310      	adds	r3, #16
 80080fc:	687a      	ldr	r2, [r7, #4]
 80080fe:	4413      	add	r3, r2
 8008100:	3304      	adds	r3, #4
 8008102:	e00b      	b.n	800811c <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008104:	7bbb      	ldrb	r3, [r7, #14]
 8008106:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800810a:	4613      	mov	r3, r2
 800810c:	009b      	lsls	r3, r3, #2
 800810e:	4413      	add	r3, r2
 8008110:	009b      	lsls	r3, r3, #2
 8008112:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008116:	687a      	ldr	r2, [r7, #4]
 8008118:	4413      	add	r3, r2
 800811a:	3304      	adds	r3, #4
 800811c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	2200      	movs	r2, #0
 8008122:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	2202      	movs	r2, #2
 8008128:	4619      	mov	r1, r3
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f000 fbfa 	bl	8008924 <USBD_CtlSendData>
              break;
 8008130:	e06a      	b.n	8008208 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008132:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008136:	2b00      	cmp	r3, #0
 8008138:	da11      	bge.n	800815e <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800813a:	7bbb      	ldrb	r3, [r7, #14]
 800813c:	f003 020f 	and.w	r2, r3, #15
 8008140:	6879      	ldr	r1, [r7, #4]
 8008142:	4613      	mov	r3, r2
 8008144:	009b      	lsls	r3, r3, #2
 8008146:	4413      	add	r3, r2
 8008148:	009b      	lsls	r3, r3, #2
 800814a:	440b      	add	r3, r1
 800814c:	3318      	adds	r3, #24
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d117      	bne.n	8008184 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8008154:	6839      	ldr	r1, [r7, #0]
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f000 fb79 	bl	800884e <USBD_CtlError>
                  break;
 800815c:	e054      	b.n	8008208 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800815e:	7bbb      	ldrb	r3, [r7, #14]
 8008160:	f003 020f 	and.w	r2, r3, #15
 8008164:	6879      	ldr	r1, [r7, #4]
 8008166:	4613      	mov	r3, r2
 8008168:	009b      	lsls	r3, r3, #2
 800816a:	4413      	add	r3, r2
 800816c:	009b      	lsls	r3, r3, #2
 800816e:	440b      	add	r3, r1
 8008170:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d104      	bne.n	8008184 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800817a:	6839      	ldr	r1, [r7, #0]
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	f000 fb66 	bl	800884e <USBD_CtlError>
                  break;
 8008182:	e041      	b.n	8008208 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008184:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008188:	2b00      	cmp	r3, #0
 800818a:	da0b      	bge.n	80081a4 <USBD_StdEPReq+0x234>
 800818c:	7bbb      	ldrb	r3, [r7, #14]
 800818e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008192:	4613      	mov	r3, r2
 8008194:	009b      	lsls	r3, r3, #2
 8008196:	4413      	add	r3, r2
 8008198:	009b      	lsls	r3, r3, #2
 800819a:	3310      	adds	r3, #16
 800819c:	687a      	ldr	r2, [r7, #4]
 800819e:	4413      	add	r3, r2
 80081a0:	3304      	adds	r3, #4
 80081a2:	e00b      	b.n	80081bc <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80081a4:	7bbb      	ldrb	r3, [r7, #14]
 80081a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80081aa:	4613      	mov	r3, r2
 80081ac:	009b      	lsls	r3, r3, #2
 80081ae:	4413      	add	r3, r2
 80081b0:	009b      	lsls	r3, r3, #2
 80081b2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80081b6:	687a      	ldr	r2, [r7, #4]
 80081b8:	4413      	add	r3, r2
 80081ba:	3304      	adds	r3, #4
 80081bc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80081be:	7bbb      	ldrb	r3, [r7, #14]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d002      	beq.n	80081ca <USBD_StdEPReq+0x25a>
 80081c4:	7bbb      	ldrb	r3, [r7, #14]
 80081c6:	2b80      	cmp	r3, #128	; 0x80
 80081c8:	d103      	bne.n	80081d2 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	2200      	movs	r2, #0
 80081ce:	601a      	str	r2, [r3, #0]
 80081d0:	e00e      	b.n	80081f0 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80081d2:	7bbb      	ldrb	r3, [r7, #14]
 80081d4:	4619      	mov	r1, r3
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f00b fbea 	bl	80139b0 <USBD_LL_IsStallEP>
 80081dc:	4603      	mov	r3, r0
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d003      	beq.n	80081ea <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	2201      	movs	r2, #1
 80081e6:	601a      	str	r2, [r3, #0]
 80081e8:	e002      	b.n	80081f0 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	2200      	movs	r2, #0
 80081ee:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	2202      	movs	r2, #2
 80081f4:	4619      	mov	r1, r3
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f000 fb94 	bl	8008924 <USBD_CtlSendData>
              break;
 80081fc:	e004      	b.n	8008208 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 80081fe:	6839      	ldr	r1, [r7, #0]
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f000 fb24 	bl	800884e <USBD_CtlError>
              break;
 8008206:	bf00      	nop
          }
          break;
 8008208:	e004      	b.n	8008214 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 800820a:	6839      	ldr	r1, [r7, #0]
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	f000 fb1e 	bl	800884e <USBD_CtlError>
          break;
 8008212:	bf00      	nop
      }
      break;
 8008214:	e004      	b.n	8008220 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8008216:	6839      	ldr	r1, [r7, #0]
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f000 fb18 	bl	800884e <USBD_CtlError>
      break;
 800821e:	bf00      	nop
  }

  return ret;
 8008220:	7bfb      	ldrb	r3, [r7, #15]
}
 8008222:	4618      	mov	r0, r3
 8008224:	3710      	adds	r7, #16
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}
	...

0800822c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b084      	sub	sp, #16
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
 8008234:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008236:	2300      	movs	r3, #0
 8008238:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800823a:	2300      	movs	r3, #0
 800823c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800823e:	2300      	movs	r3, #0
 8008240:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	885b      	ldrh	r3, [r3, #2]
 8008246:	0a1b      	lsrs	r3, r3, #8
 8008248:	b29b      	uxth	r3, r3
 800824a:	3b01      	subs	r3, #1
 800824c:	2b06      	cmp	r3, #6
 800824e:	f200 8128 	bhi.w	80084a2 <USBD_GetDescriptor+0x276>
 8008252:	a201      	add	r2, pc, #4	; (adr r2, 8008258 <USBD_GetDescriptor+0x2c>)
 8008254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008258:	08008275 	.word	0x08008275
 800825c:	0800828d 	.word	0x0800828d
 8008260:	080082cd 	.word	0x080082cd
 8008264:	080084a3 	.word	0x080084a3
 8008268:	080084a3 	.word	0x080084a3
 800826c:	08008443 	.word	0x08008443
 8008270:	0800846f 	.word	0x0800846f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	687a      	ldr	r2, [r7, #4]
 800827e:	7c12      	ldrb	r2, [r2, #16]
 8008280:	f107 0108 	add.w	r1, r7, #8
 8008284:	4610      	mov	r0, r2
 8008286:	4798      	blx	r3
 8008288:	60f8      	str	r0, [r7, #12]
      break;
 800828a:	e112      	b.n	80084b2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	7c1b      	ldrb	r3, [r3, #16]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d10d      	bne.n	80082b0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800829a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800829c:	f107 0208 	add.w	r2, r7, #8
 80082a0:	4610      	mov	r0, r2
 80082a2:	4798      	blx	r3
 80082a4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	3301      	adds	r3, #1
 80082aa:	2202      	movs	r2, #2
 80082ac:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80082ae:	e100      	b.n	80084b2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082b8:	f107 0208 	add.w	r2, r7, #8
 80082bc:	4610      	mov	r0, r2
 80082be:	4798      	blx	r3
 80082c0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	3301      	adds	r3, #1
 80082c6:	2202      	movs	r2, #2
 80082c8:	701a      	strb	r2, [r3, #0]
      break;
 80082ca:	e0f2      	b.n	80084b2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	885b      	ldrh	r3, [r3, #2]
 80082d0:	b2db      	uxtb	r3, r3
 80082d2:	2b05      	cmp	r3, #5
 80082d4:	f200 80ac 	bhi.w	8008430 <USBD_GetDescriptor+0x204>
 80082d8:	a201      	add	r2, pc, #4	; (adr r2, 80082e0 <USBD_GetDescriptor+0xb4>)
 80082da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082de:	bf00      	nop
 80082e0:	080082f9 	.word	0x080082f9
 80082e4:	0800832d 	.word	0x0800832d
 80082e8:	08008361 	.word	0x08008361
 80082ec:	08008395 	.word	0x08008395
 80082f0:	080083c9 	.word	0x080083c9
 80082f4:	080083fd 	.word	0x080083fd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80082fe:	685b      	ldr	r3, [r3, #4]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d00b      	beq.n	800831c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800830a:	685b      	ldr	r3, [r3, #4]
 800830c:	687a      	ldr	r2, [r7, #4]
 800830e:	7c12      	ldrb	r2, [r2, #16]
 8008310:	f107 0108 	add.w	r1, r7, #8
 8008314:	4610      	mov	r0, r2
 8008316:	4798      	blx	r3
 8008318:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800831a:	e091      	b.n	8008440 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800831c:	6839      	ldr	r1, [r7, #0]
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f000 fa95 	bl	800884e <USBD_CtlError>
            err++;
 8008324:	7afb      	ldrb	r3, [r7, #11]
 8008326:	3301      	adds	r3, #1
 8008328:	72fb      	strb	r3, [r7, #11]
          break;
 800832a:	e089      	b.n	8008440 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008332:	689b      	ldr	r3, [r3, #8]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d00b      	beq.n	8008350 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800833e:	689b      	ldr	r3, [r3, #8]
 8008340:	687a      	ldr	r2, [r7, #4]
 8008342:	7c12      	ldrb	r2, [r2, #16]
 8008344:	f107 0108 	add.w	r1, r7, #8
 8008348:	4610      	mov	r0, r2
 800834a:	4798      	blx	r3
 800834c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800834e:	e077      	b.n	8008440 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008350:	6839      	ldr	r1, [r7, #0]
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f000 fa7b 	bl	800884e <USBD_CtlError>
            err++;
 8008358:	7afb      	ldrb	r3, [r7, #11]
 800835a:	3301      	adds	r3, #1
 800835c:	72fb      	strb	r3, [r7, #11]
          break;
 800835e:	e06f      	b.n	8008440 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008366:	68db      	ldr	r3, [r3, #12]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d00b      	beq.n	8008384 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008372:	68db      	ldr	r3, [r3, #12]
 8008374:	687a      	ldr	r2, [r7, #4]
 8008376:	7c12      	ldrb	r2, [r2, #16]
 8008378:	f107 0108 	add.w	r1, r7, #8
 800837c:	4610      	mov	r0, r2
 800837e:	4798      	blx	r3
 8008380:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008382:	e05d      	b.n	8008440 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008384:	6839      	ldr	r1, [r7, #0]
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	f000 fa61 	bl	800884e <USBD_CtlError>
            err++;
 800838c:	7afb      	ldrb	r3, [r7, #11]
 800838e:	3301      	adds	r3, #1
 8008390:	72fb      	strb	r3, [r7, #11]
          break;
 8008392:	e055      	b.n	8008440 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800839a:	691b      	ldr	r3, [r3, #16]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d00b      	beq.n	80083b8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80083a6:	691b      	ldr	r3, [r3, #16]
 80083a8:	687a      	ldr	r2, [r7, #4]
 80083aa:	7c12      	ldrb	r2, [r2, #16]
 80083ac:	f107 0108 	add.w	r1, r7, #8
 80083b0:	4610      	mov	r0, r2
 80083b2:	4798      	blx	r3
 80083b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083b6:	e043      	b.n	8008440 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80083b8:	6839      	ldr	r1, [r7, #0]
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f000 fa47 	bl	800884e <USBD_CtlError>
            err++;
 80083c0:	7afb      	ldrb	r3, [r7, #11]
 80083c2:	3301      	adds	r3, #1
 80083c4:	72fb      	strb	r3, [r7, #11]
          break;
 80083c6:	e03b      	b.n	8008440 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80083ce:	695b      	ldr	r3, [r3, #20]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d00b      	beq.n	80083ec <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80083da:	695b      	ldr	r3, [r3, #20]
 80083dc:	687a      	ldr	r2, [r7, #4]
 80083de:	7c12      	ldrb	r2, [r2, #16]
 80083e0:	f107 0108 	add.w	r1, r7, #8
 80083e4:	4610      	mov	r0, r2
 80083e6:	4798      	blx	r3
 80083e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083ea:	e029      	b.n	8008440 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80083ec:	6839      	ldr	r1, [r7, #0]
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f000 fa2d 	bl	800884e <USBD_CtlError>
            err++;
 80083f4:	7afb      	ldrb	r3, [r7, #11]
 80083f6:	3301      	adds	r3, #1
 80083f8:	72fb      	strb	r3, [r7, #11]
          break;
 80083fa:	e021      	b.n	8008440 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008402:	699b      	ldr	r3, [r3, #24]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d00b      	beq.n	8008420 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800840e:	699b      	ldr	r3, [r3, #24]
 8008410:	687a      	ldr	r2, [r7, #4]
 8008412:	7c12      	ldrb	r2, [r2, #16]
 8008414:	f107 0108 	add.w	r1, r7, #8
 8008418:	4610      	mov	r0, r2
 800841a:	4798      	blx	r3
 800841c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800841e:	e00f      	b.n	8008440 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008420:	6839      	ldr	r1, [r7, #0]
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f000 fa13 	bl	800884e <USBD_CtlError>
            err++;
 8008428:	7afb      	ldrb	r3, [r7, #11]
 800842a:	3301      	adds	r3, #1
 800842c:	72fb      	strb	r3, [r7, #11]
          break;
 800842e:	e007      	b.n	8008440 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008430:	6839      	ldr	r1, [r7, #0]
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f000 fa0b 	bl	800884e <USBD_CtlError>
          err++;
 8008438:	7afb      	ldrb	r3, [r7, #11]
 800843a:	3301      	adds	r3, #1
 800843c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800843e:	e038      	b.n	80084b2 <USBD_GetDescriptor+0x286>
 8008440:	e037      	b.n	80084b2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	7c1b      	ldrb	r3, [r3, #16]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d109      	bne.n	800845e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008452:	f107 0208 	add.w	r2, r7, #8
 8008456:	4610      	mov	r0, r2
 8008458:	4798      	blx	r3
 800845a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800845c:	e029      	b.n	80084b2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800845e:	6839      	ldr	r1, [r7, #0]
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f000 f9f4 	bl	800884e <USBD_CtlError>
        err++;
 8008466:	7afb      	ldrb	r3, [r7, #11]
 8008468:	3301      	adds	r3, #1
 800846a:	72fb      	strb	r3, [r7, #11]
      break;
 800846c:	e021      	b.n	80084b2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	7c1b      	ldrb	r3, [r3, #16]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d10d      	bne.n	8008492 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800847c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800847e:	f107 0208 	add.w	r2, r7, #8
 8008482:	4610      	mov	r0, r2
 8008484:	4798      	blx	r3
 8008486:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	3301      	adds	r3, #1
 800848c:	2207      	movs	r2, #7
 800848e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008490:	e00f      	b.n	80084b2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008492:	6839      	ldr	r1, [r7, #0]
 8008494:	6878      	ldr	r0, [r7, #4]
 8008496:	f000 f9da 	bl	800884e <USBD_CtlError>
        err++;
 800849a:	7afb      	ldrb	r3, [r7, #11]
 800849c:	3301      	adds	r3, #1
 800849e:	72fb      	strb	r3, [r7, #11]
      break;
 80084a0:	e007      	b.n	80084b2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80084a2:	6839      	ldr	r1, [r7, #0]
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f000 f9d2 	bl	800884e <USBD_CtlError>
      err++;
 80084aa:	7afb      	ldrb	r3, [r7, #11]
 80084ac:	3301      	adds	r3, #1
 80084ae:	72fb      	strb	r3, [r7, #11]
      break;
 80084b0:	bf00      	nop
  }

  if (err != 0U)
 80084b2:	7afb      	ldrb	r3, [r7, #11]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d11c      	bne.n	80084f2 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80084b8:	893b      	ldrh	r3, [r7, #8]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d011      	beq.n	80084e2 <USBD_GetDescriptor+0x2b6>
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	88db      	ldrh	r3, [r3, #6]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d00d      	beq.n	80084e2 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	88da      	ldrh	r2, [r3, #6]
 80084ca:	893b      	ldrh	r3, [r7, #8]
 80084cc:	4293      	cmp	r3, r2
 80084ce:	bf28      	it	cs
 80084d0:	4613      	movcs	r3, r2
 80084d2:	b29b      	uxth	r3, r3
 80084d4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80084d6:	893b      	ldrh	r3, [r7, #8]
 80084d8:	461a      	mov	r2, r3
 80084da:	68f9      	ldr	r1, [r7, #12]
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	f000 fa21 	bl	8008924 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	88db      	ldrh	r3, [r3, #6]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d104      	bne.n	80084f4 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f000 fa78 	bl	80089e0 <USBD_CtlSendStatus>
 80084f0:	e000      	b.n	80084f4 <USBD_GetDescriptor+0x2c8>
    return;
 80084f2:	bf00      	nop
    }
  }
}
 80084f4:	3710      	adds	r7, #16
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd80      	pop	{r7, pc}
 80084fa:	bf00      	nop

080084fc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b084      	sub	sp, #16
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
 8008504:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	889b      	ldrh	r3, [r3, #4]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d130      	bne.n	8008570 <USBD_SetAddress+0x74>
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	88db      	ldrh	r3, [r3, #6]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d12c      	bne.n	8008570 <USBD_SetAddress+0x74>
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	885b      	ldrh	r3, [r3, #2]
 800851a:	2b7f      	cmp	r3, #127	; 0x7f
 800851c:	d828      	bhi.n	8008570 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	885b      	ldrh	r3, [r3, #2]
 8008522:	b2db      	uxtb	r3, r3
 8008524:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008528:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008530:	2b03      	cmp	r3, #3
 8008532:	d104      	bne.n	800853e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008534:	6839      	ldr	r1, [r7, #0]
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f000 f989 	bl	800884e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800853c:	e01c      	b.n	8008578 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	7bfa      	ldrb	r2, [r7, #15]
 8008542:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008546:	7bfb      	ldrb	r3, [r7, #15]
 8008548:	4619      	mov	r1, r3
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f00b fa5c 	bl	8013a08 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f000 fa45 	bl	80089e0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008556:	7bfb      	ldrb	r3, [r7, #15]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d004      	beq.n	8008566 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2202      	movs	r2, #2
 8008560:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008564:	e008      	b.n	8008578 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2201      	movs	r2, #1
 800856a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800856e:	e003      	b.n	8008578 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008570:	6839      	ldr	r1, [r7, #0]
 8008572:	6878      	ldr	r0, [r7, #4]
 8008574:	f000 f96b 	bl	800884e <USBD_CtlError>
  }
}
 8008578:	bf00      	nop
 800857a:	3710      	adds	r7, #16
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}

08008580 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b082      	sub	sp, #8
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
 8008588:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	885b      	ldrh	r3, [r3, #2]
 800858e:	b2da      	uxtb	r2, r3
 8008590:	4b41      	ldr	r3, [pc, #260]	; (8008698 <USBD_SetConfig+0x118>)
 8008592:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008594:	4b40      	ldr	r3, [pc, #256]	; (8008698 <USBD_SetConfig+0x118>)
 8008596:	781b      	ldrb	r3, [r3, #0]
 8008598:	2b01      	cmp	r3, #1
 800859a:	d904      	bls.n	80085a6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800859c:	6839      	ldr	r1, [r7, #0]
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f000 f955 	bl	800884e <USBD_CtlError>
 80085a4:	e075      	b.n	8008692 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085ac:	2b02      	cmp	r3, #2
 80085ae:	d002      	beq.n	80085b6 <USBD_SetConfig+0x36>
 80085b0:	2b03      	cmp	r3, #3
 80085b2:	d023      	beq.n	80085fc <USBD_SetConfig+0x7c>
 80085b4:	e062      	b.n	800867c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80085b6:	4b38      	ldr	r3, [pc, #224]	; (8008698 <USBD_SetConfig+0x118>)
 80085b8:	781b      	ldrb	r3, [r3, #0]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d01a      	beq.n	80085f4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80085be:	4b36      	ldr	r3, [pc, #216]	; (8008698 <USBD_SetConfig+0x118>)
 80085c0:	781b      	ldrb	r3, [r3, #0]
 80085c2:	461a      	mov	r2, r3
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2203      	movs	r2, #3
 80085cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80085d0:	4b31      	ldr	r3, [pc, #196]	; (8008698 <USBD_SetConfig+0x118>)
 80085d2:	781b      	ldrb	r3, [r3, #0]
 80085d4:	4619      	mov	r1, r3
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f7ff f9b4 	bl	8007944 <USBD_SetClassConfig>
 80085dc:	4603      	mov	r3, r0
 80085de:	2b02      	cmp	r3, #2
 80085e0:	d104      	bne.n	80085ec <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80085e2:	6839      	ldr	r1, [r7, #0]
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f000 f932 	bl	800884e <USBD_CtlError>
            return;
 80085ea:	e052      	b.n	8008692 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f000 f9f7 	bl	80089e0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80085f2:	e04e      	b.n	8008692 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80085f4:	6878      	ldr	r0, [r7, #4]
 80085f6:	f000 f9f3 	bl	80089e0 <USBD_CtlSendStatus>
        break;
 80085fa:	e04a      	b.n	8008692 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80085fc:	4b26      	ldr	r3, [pc, #152]	; (8008698 <USBD_SetConfig+0x118>)
 80085fe:	781b      	ldrb	r3, [r3, #0]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d112      	bne.n	800862a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2202      	movs	r2, #2
 8008608:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800860c:	4b22      	ldr	r3, [pc, #136]	; (8008698 <USBD_SetConfig+0x118>)
 800860e:	781b      	ldrb	r3, [r3, #0]
 8008610:	461a      	mov	r2, r3
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008616:	4b20      	ldr	r3, [pc, #128]	; (8008698 <USBD_SetConfig+0x118>)
 8008618:	781b      	ldrb	r3, [r3, #0]
 800861a:	4619      	mov	r1, r3
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f7ff f9b0 	bl	8007982 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f000 f9dc 	bl	80089e0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008628:	e033      	b.n	8008692 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800862a:	4b1b      	ldr	r3, [pc, #108]	; (8008698 <USBD_SetConfig+0x118>)
 800862c:	781b      	ldrb	r3, [r3, #0]
 800862e:	461a      	mov	r2, r3
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	685b      	ldr	r3, [r3, #4]
 8008634:	429a      	cmp	r2, r3
 8008636:	d01d      	beq.n	8008674 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	685b      	ldr	r3, [r3, #4]
 800863c:	b2db      	uxtb	r3, r3
 800863e:	4619      	mov	r1, r3
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	f7ff f99e 	bl	8007982 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008646:	4b14      	ldr	r3, [pc, #80]	; (8008698 <USBD_SetConfig+0x118>)
 8008648:	781b      	ldrb	r3, [r3, #0]
 800864a:	461a      	mov	r2, r3
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008650:	4b11      	ldr	r3, [pc, #68]	; (8008698 <USBD_SetConfig+0x118>)
 8008652:	781b      	ldrb	r3, [r3, #0]
 8008654:	4619      	mov	r1, r3
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f7ff f974 	bl	8007944 <USBD_SetClassConfig>
 800865c:	4603      	mov	r3, r0
 800865e:	2b02      	cmp	r3, #2
 8008660:	d104      	bne.n	800866c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008662:	6839      	ldr	r1, [r7, #0]
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	f000 f8f2 	bl	800884e <USBD_CtlError>
            return;
 800866a:	e012      	b.n	8008692 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f000 f9b7 	bl	80089e0 <USBD_CtlSendStatus>
        break;
 8008672:	e00e      	b.n	8008692 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f000 f9b3 	bl	80089e0 <USBD_CtlSendStatus>
        break;
 800867a:	e00a      	b.n	8008692 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800867c:	6839      	ldr	r1, [r7, #0]
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f000 f8e5 	bl	800884e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008684:	4b04      	ldr	r3, [pc, #16]	; (8008698 <USBD_SetConfig+0x118>)
 8008686:	781b      	ldrb	r3, [r3, #0]
 8008688:	4619      	mov	r1, r3
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f7ff f979 	bl	8007982 <USBD_ClrClassConfig>
        break;
 8008690:	bf00      	nop
    }
  }
}
 8008692:	3708      	adds	r7, #8
 8008694:	46bd      	mov	sp, r7
 8008696:	bd80      	pop	{r7, pc}
 8008698:	2000021c 	.word	0x2000021c

0800869c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b082      	sub	sp, #8
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
 80086a4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	88db      	ldrh	r3, [r3, #6]
 80086aa:	2b01      	cmp	r3, #1
 80086ac:	d004      	beq.n	80086b8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80086ae:	6839      	ldr	r1, [r7, #0]
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f000 f8cc 	bl	800884e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80086b6:	e021      	b.n	80086fc <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086be:	2b01      	cmp	r3, #1
 80086c0:	db17      	blt.n	80086f2 <USBD_GetConfig+0x56>
 80086c2:	2b02      	cmp	r3, #2
 80086c4:	dd02      	ble.n	80086cc <USBD_GetConfig+0x30>
 80086c6:	2b03      	cmp	r3, #3
 80086c8:	d00b      	beq.n	80086e2 <USBD_GetConfig+0x46>
 80086ca:	e012      	b.n	80086f2 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2200      	movs	r2, #0
 80086d0:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	3308      	adds	r3, #8
 80086d6:	2201      	movs	r2, #1
 80086d8:	4619      	mov	r1, r3
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	f000 f922 	bl	8008924 <USBD_CtlSendData>
        break;
 80086e0:	e00c      	b.n	80086fc <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	3304      	adds	r3, #4
 80086e6:	2201      	movs	r2, #1
 80086e8:	4619      	mov	r1, r3
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f000 f91a 	bl	8008924 <USBD_CtlSendData>
        break;
 80086f0:	e004      	b.n	80086fc <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 80086f2:	6839      	ldr	r1, [r7, #0]
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f000 f8aa 	bl	800884e <USBD_CtlError>
        break;
 80086fa:	bf00      	nop
}
 80086fc:	bf00      	nop
 80086fe:	3708      	adds	r7, #8
 8008700:	46bd      	mov	sp, r7
 8008702:	bd80      	pop	{r7, pc}

08008704 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b082      	sub	sp, #8
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
 800870c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008714:	3b01      	subs	r3, #1
 8008716:	2b02      	cmp	r3, #2
 8008718:	d81e      	bhi.n	8008758 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	88db      	ldrh	r3, [r3, #6]
 800871e:	2b02      	cmp	r3, #2
 8008720:	d004      	beq.n	800872c <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008722:	6839      	ldr	r1, [r7, #0]
 8008724:	6878      	ldr	r0, [r7, #4]
 8008726:	f000 f892 	bl	800884e <USBD_CtlError>
        break;
 800872a:	e01a      	b.n	8008762 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2201      	movs	r2, #1
 8008730:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008738:	2b00      	cmp	r3, #0
 800873a:	d005      	beq.n	8008748 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	68db      	ldr	r3, [r3, #12]
 8008740:	f043 0202 	orr.w	r2, r3, #2
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	330c      	adds	r3, #12
 800874c:	2202      	movs	r2, #2
 800874e:	4619      	mov	r1, r3
 8008750:	6878      	ldr	r0, [r7, #4]
 8008752:	f000 f8e7 	bl	8008924 <USBD_CtlSendData>
      break;
 8008756:	e004      	b.n	8008762 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008758:	6839      	ldr	r1, [r7, #0]
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f000 f877 	bl	800884e <USBD_CtlError>
      break;
 8008760:	bf00      	nop
  }
}
 8008762:	bf00      	nop
 8008764:	3708      	adds	r7, #8
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}

0800876a <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800876a:	b580      	push	{r7, lr}
 800876c:	b082      	sub	sp, #8
 800876e:	af00      	add	r7, sp, #0
 8008770:	6078      	str	r0, [r7, #4]
 8008772:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	885b      	ldrh	r3, [r3, #2]
 8008778:	2b01      	cmp	r3, #1
 800877a:	d106      	bne.n	800878a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2201      	movs	r2, #1
 8008780:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f000 f92b 	bl	80089e0 <USBD_CtlSendStatus>
  }
}
 800878a:	bf00      	nop
 800878c:	3708      	adds	r7, #8
 800878e:	46bd      	mov	sp, r7
 8008790:	bd80      	pop	{r7, pc}

08008792 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008792:	b580      	push	{r7, lr}
 8008794:	b082      	sub	sp, #8
 8008796:	af00      	add	r7, sp, #0
 8008798:	6078      	str	r0, [r7, #4]
 800879a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087a2:	3b01      	subs	r3, #1
 80087a4:	2b02      	cmp	r3, #2
 80087a6:	d80b      	bhi.n	80087c0 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	885b      	ldrh	r3, [r3, #2]
 80087ac:	2b01      	cmp	r3, #1
 80087ae:	d10c      	bne.n	80087ca <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2200      	movs	r2, #0
 80087b4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80087b8:	6878      	ldr	r0, [r7, #4]
 80087ba:	f000 f911 	bl	80089e0 <USBD_CtlSendStatus>
      }
      break;
 80087be:	e004      	b.n	80087ca <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80087c0:	6839      	ldr	r1, [r7, #0]
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f000 f843 	bl	800884e <USBD_CtlError>
      break;
 80087c8:	e000      	b.n	80087cc <USBD_ClrFeature+0x3a>
      break;
 80087ca:	bf00      	nop
  }
}
 80087cc:	bf00      	nop
 80087ce:	3708      	adds	r7, #8
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bd80      	pop	{r7, pc}

080087d4 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80087d4:	b480      	push	{r7}
 80087d6:	b083      	sub	sp, #12
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
 80087dc:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	781a      	ldrb	r2, [r3, #0]
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	785a      	ldrb	r2, [r3, #1]
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	3302      	adds	r3, #2
 80087f2:	781b      	ldrb	r3, [r3, #0]
 80087f4:	b29a      	uxth	r2, r3
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	3303      	adds	r3, #3
 80087fa:	781b      	ldrb	r3, [r3, #0]
 80087fc:	b29b      	uxth	r3, r3
 80087fe:	021b      	lsls	r3, r3, #8
 8008800:	b29b      	uxth	r3, r3
 8008802:	4413      	add	r3, r2
 8008804:	b29a      	uxth	r2, r3
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	3304      	adds	r3, #4
 800880e:	781b      	ldrb	r3, [r3, #0]
 8008810:	b29a      	uxth	r2, r3
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	3305      	adds	r3, #5
 8008816:	781b      	ldrb	r3, [r3, #0]
 8008818:	b29b      	uxth	r3, r3
 800881a:	021b      	lsls	r3, r3, #8
 800881c:	b29b      	uxth	r3, r3
 800881e:	4413      	add	r3, r2
 8008820:	b29a      	uxth	r2, r3
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	3306      	adds	r3, #6
 800882a:	781b      	ldrb	r3, [r3, #0]
 800882c:	b29a      	uxth	r2, r3
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	3307      	adds	r3, #7
 8008832:	781b      	ldrb	r3, [r3, #0]
 8008834:	b29b      	uxth	r3, r3
 8008836:	021b      	lsls	r3, r3, #8
 8008838:	b29b      	uxth	r3, r3
 800883a:	4413      	add	r3, r2
 800883c:	b29a      	uxth	r2, r3
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	80da      	strh	r2, [r3, #6]

}
 8008842:	bf00      	nop
 8008844:	370c      	adds	r7, #12
 8008846:	46bd      	mov	sp, r7
 8008848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884c:	4770      	bx	lr

0800884e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800884e:	b580      	push	{r7, lr}
 8008850:	b082      	sub	sp, #8
 8008852:	af00      	add	r7, sp, #0
 8008854:	6078      	str	r0, [r7, #4]
 8008856:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008858:	2180      	movs	r1, #128	; 0x80
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f00b f86a 	bl	8013934 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008860:	2100      	movs	r1, #0
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f00b f866 	bl	8013934 <USBD_LL_StallEP>
}
 8008868:	bf00      	nop
 800886a:	3708      	adds	r7, #8
 800886c:	46bd      	mov	sp, r7
 800886e:	bd80      	pop	{r7, pc}

08008870 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b086      	sub	sp, #24
 8008874:	af00      	add	r7, sp, #0
 8008876:	60f8      	str	r0, [r7, #12]
 8008878:	60b9      	str	r1, [r7, #8]
 800887a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800887c:	2300      	movs	r3, #0
 800887e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d032      	beq.n	80088ec <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008886:	68f8      	ldr	r0, [r7, #12]
 8008888:	f000 f834 	bl	80088f4 <USBD_GetLen>
 800888c:	4603      	mov	r3, r0
 800888e:	3301      	adds	r3, #1
 8008890:	b29b      	uxth	r3, r3
 8008892:	005b      	lsls	r3, r3, #1
 8008894:	b29a      	uxth	r2, r3
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800889a:	7dfb      	ldrb	r3, [r7, #23]
 800889c:	1c5a      	adds	r2, r3, #1
 800889e:	75fa      	strb	r2, [r7, #23]
 80088a0:	461a      	mov	r2, r3
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	4413      	add	r3, r2
 80088a6:	687a      	ldr	r2, [r7, #4]
 80088a8:	7812      	ldrb	r2, [r2, #0]
 80088aa:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80088ac:	7dfb      	ldrb	r3, [r7, #23]
 80088ae:	1c5a      	adds	r2, r3, #1
 80088b0:	75fa      	strb	r2, [r7, #23]
 80088b2:	461a      	mov	r2, r3
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	4413      	add	r3, r2
 80088b8:	2203      	movs	r2, #3
 80088ba:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80088bc:	e012      	b.n	80088e4 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	1c5a      	adds	r2, r3, #1
 80088c2:	60fa      	str	r2, [r7, #12]
 80088c4:	7dfa      	ldrb	r2, [r7, #23]
 80088c6:	1c51      	adds	r1, r2, #1
 80088c8:	75f9      	strb	r1, [r7, #23]
 80088ca:	4611      	mov	r1, r2
 80088cc:	68ba      	ldr	r2, [r7, #8]
 80088ce:	440a      	add	r2, r1
 80088d0:	781b      	ldrb	r3, [r3, #0]
 80088d2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80088d4:	7dfb      	ldrb	r3, [r7, #23]
 80088d6:	1c5a      	adds	r2, r3, #1
 80088d8:	75fa      	strb	r2, [r7, #23]
 80088da:	461a      	mov	r2, r3
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	4413      	add	r3, r2
 80088e0:	2200      	movs	r2, #0
 80088e2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	781b      	ldrb	r3, [r3, #0]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d1e8      	bne.n	80088be <USBD_GetString+0x4e>
    }
  }
}
 80088ec:	bf00      	nop
 80088ee:	3718      	adds	r7, #24
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}

080088f4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80088f4:	b480      	push	{r7}
 80088f6:	b085      	sub	sp, #20
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80088fc:	2300      	movs	r3, #0
 80088fe:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008900:	e005      	b.n	800890e <USBD_GetLen+0x1a>
  {
    len++;
 8008902:	7bfb      	ldrb	r3, [r7, #15]
 8008904:	3301      	adds	r3, #1
 8008906:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	3301      	adds	r3, #1
 800890c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	781b      	ldrb	r3, [r3, #0]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d1f5      	bne.n	8008902 <USBD_GetLen+0xe>
  }

  return len;
 8008916:	7bfb      	ldrb	r3, [r7, #15]
}
 8008918:	4618      	mov	r0, r3
 800891a:	3714      	adds	r7, #20
 800891c:	46bd      	mov	sp, r7
 800891e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008922:	4770      	bx	lr

08008924 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b084      	sub	sp, #16
 8008928:	af00      	add	r7, sp, #0
 800892a:	60f8      	str	r0, [r7, #12]
 800892c:	60b9      	str	r1, [r7, #8]
 800892e:	4613      	mov	r3, r2
 8008930:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	2202      	movs	r2, #2
 8008936:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800893a:	88fa      	ldrh	r2, [r7, #6]
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008940:	88fa      	ldrh	r2, [r7, #6]
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008946:	88fb      	ldrh	r3, [r7, #6]
 8008948:	68ba      	ldr	r2, [r7, #8]
 800894a:	2100      	movs	r1, #0
 800894c:	68f8      	ldr	r0, [r7, #12]
 800894e:	f00b f87a 	bl	8013a46 <USBD_LL_Transmit>

  return USBD_OK;
 8008952:	2300      	movs	r3, #0
}
 8008954:	4618      	mov	r0, r3
 8008956:	3710      	adds	r7, #16
 8008958:	46bd      	mov	sp, r7
 800895a:	bd80      	pop	{r7, pc}

0800895c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b084      	sub	sp, #16
 8008960:	af00      	add	r7, sp, #0
 8008962:	60f8      	str	r0, [r7, #12]
 8008964:	60b9      	str	r1, [r7, #8]
 8008966:	4613      	mov	r3, r2
 8008968:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800896a:	88fb      	ldrh	r3, [r7, #6]
 800896c:	68ba      	ldr	r2, [r7, #8]
 800896e:	2100      	movs	r1, #0
 8008970:	68f8      	ldr	r0, [r7, #12]
 8008972:	f00b f868 	bl	8013a46 <USBD_LL_Transmit>

  return USBD_OK;
 8008976:	2300      	movs	r3, #0
}
 8008978:	4618      	mov	r0, r3
 800897a:	3710      	adds	r7, #16
 800897c:	46bd      	mov	sp, r7
 800897e:	bd80      	pop	{r7, pc}

08008980 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b084      	sub	sp, #16
 8008984:	af00      	add	r7, sp, #0
 8008986:	60f8      	str	r0, [r7, #12]
 8008988:	60b9      	str	r1, [r7, #8]
 800898a:	4613      	mov	r3, r2
 800898c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	2203      	movs	r2, #3
 8008992:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008996:	88fa      	ldrh	r2, [r7, #6]
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800899e:	88fa      	ldrh	r2, [r7, #6]
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80089a6:	88fb      	ldrh	r3, [r7, #6]
 80089a8:	68ba      	ldr	r2, [r7, #8]
 80089aa:	2100      	movs	r1, #0
 80089ac:	68f8      	ldr	r0, [r7, #12]
 80089ae:	f00b f86d 	bl	8013a8c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80089b2:	2300      	movs	r3, #0
}
 80089b4:	4618      	mov	r0, r3
 80089b6:	3710      	adds	r7, #16
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}

080089bc <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b084      	sub	sp, #16
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	60f8      	str	r0, [r7, #12]
 80089c4:	60b9      	str	r1, [r7, #8]
 80089c6:	4613      	mov	r3, r2
 80089c8:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80089ca:	88fb      	ldrh	r3, [r7, #6]
 80089cc:	68ba      	ldr	r2, [r7, #8]
 80089ce:	2100      	movs	r1, #0
 80089d0:	68f8      	ldr	r0, [r7, #12]
 80089d2:	f00b f85b 	bl	8013a8c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80089d6:	2300      	movs	r3, #0
}
 80089d8:	4618      	mov	r0, r3
 80089da:	3710      	adds	r7, #16
 80089dc:	46bd      	mov	sp, r7
 80089de:	bd80      	pop	{r7, pc}

080089e0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b082      	sub	sp, #8
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2204      	movs	r2, #4
 80089ec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80089f0:	2300      	movs	r3, #0
 80089f2:	2200      	movs	r2, #0
 80089f4:	2100      	movs	r1, #0
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f00b f825 	bl	8013a46 <USBD_LL_Transmit>

  return USBD_OK;
 80089fc:	2300      	movs	r3, #0
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	3708      	adds	r7, #8
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd80      	pop	{r7, pc}

08008a06 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008a06:	b580      	push	{r7, lr}
 8008a08:	b082      	sub	sp, #8
 8008a0a:	af00      	add	r7, sp, #0
 8008a0c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2205      	movs	r2, #5
 8008a12:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008a16:	2300      	movs	r3, #0
 8008a18:	2200      	movs	r2, #0
 8008a1a:	2100      	movs	r1, #0
 8008a1c:	6878      	ldr	r0, [r7, #4]
 8008a1e:	f00b f835 	bl	8013a8c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a22:	2300      	movs	r3, #0
}
 8008a24:	4618      	mov	r0, r3
 8008a26:	3708      	adds	r7, #8
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	bd80      	pop	{r7, pc}

08008a2c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8008a2c:	b480      	push	{r7}
 8008a2e:	b083      	sub	sp, #12
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	4603      	mov	r3, r0
 8008a34:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 8008a36:	88fb      	ldrh	r3, [r7, #6]
 8008a38:	ba5b      	rev16	r3, r3
 8008a3a:	b29b      	uxth	r3, r3
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	370c      	adds	r7, #12
 8008a40:	46bd      	mov	sp, r7
 8008a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a46:	4770      	bx	lr

08008a48 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8008a48:	b480      	push	{r7}
 8008a4a:	b083      	sub	sp, #12
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
  return (u32_t)PP_HTONL(n);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	061a      	lsls	r2, r3, #24
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	021b      	lsls	r3, r3, #8
 8008a58:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008a5c:	431a      	orrs	r2, r3
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	0a1b      	lsrs	r3, r3, #8
 8008a62:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008a66:	431a      	orrs	r2, r3
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	0e1b      	lsrs	r3, r3, #24
 8008a6c:	4313      	orrs	r3, r2
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	370c      	adds	r7, #12
 8008a72:	46bd      	mov	sp, r7
 8008a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a78:	4770      	bx	lr

08008a7a <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8008a7a:	b580      	push	{r7, lr}
 8008a7c:	b082      	sub	sp, #8
 8008a7e:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8008a80:	2300      	movs	r3, #0
 8008a82:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8008a84:	f000 f8a6 	bl	8008bd4 <mem_init>
  memp_init();
 8008a88:	f000 fb36 	bl	80090f8 <memp_init>
  pbuf_init();
  netif_init();
 8008a8c:	f000 fc34 	bl	80092f8 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8008a90:	f006 ff62 	bl	800f958 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8008a94:	f001 fc24 	bl	800a2e0 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 8008a98:	f006 fe40 	bl	800f71c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8008a9c:	bf00      	nop
 8008a9e:	3708      	adds	r7, #8
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd80      	pop	{r7, pc}

08008aa4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b084      	sub	sp, #16
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8008aac:	4b40      	ldr	r3, [pc, #256]	; (8008bb0 <plug_holes+0x10c>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	687a      	ldr	r2, [r7, #4]
 8008ab2:	429a      	cmp	r2, r3
 8008ab4:	d206      	bcs.n	8008ac4 <plug_holes+0x20>
 8008ab6:	4b3f      	ldr	r3, [pc, #252]	; (8008bb4 <plug_holes+0x110>)
 8008ab8:	f240 125d 	movw	r2, #349	; 0x15d
 8008abc:	493e      	ldr	r1, [pc, #248]	; (8008bb8 <plug_holes+0x114>)
 8008abe:	483f      	ldr	r0, [pc, #252]	; (8008bbc <plug_holes+0x118>)
 8008ac0:	f00b fa7c 	bl	8013fbc <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8008ac4:	4b3e      	ldr	r3, [pc, #248]	; (8008bc0 <plug_holes+0x11c>)
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	687a      	ldr	r2, [r7, #4]
 8008aca:	429a      	cmp	r2, r3
 8008acc:	d306      	bcc.n	8008adc <plug_holes+0x38>
 8008ace:	4b39      	ldr	r3, [pc, #228]	; (8008bb4 <plug_holes+0x110>)
 8008ad0:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8008ad4:	493b      	ldr	r1, [pc, #236]	; (8008bc4 <plug_holes+0x120>)
 8008ad6:	4839      	ldr	r0, [pc, #228]	; (8008bbc <plug_holes+0x118>)
 8008ad8:	f00b fa70 	bl	8013fbc <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	791b      	ldrb	r3, [r3, #4]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d006      	beq.n	8008af2 <plug_holes+0x4e>
 8008ae4:	4b33      	ldr	r3, [pc, #204]	; (8008bb4 <plug_holes+0x110>)
 8008ae6:	f240 125f 	movw	r2, #351	; 0x15f
 8008aea:	4937      	ldr	r1, [pc, #220]	; (8008bc8 <plug_holes+0x124>)
 8008aec:	4833      	ldr	r0, [pc, #204]	; (8008bbc <plug_holes+0x118>)
 8008aee:	f00b fa65 	bl	8013fbc <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	881b      	ldrh	r3, [r3, #0]
 8008af6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008afa:	d906      	bls.n	8008b0a <plug_holes+0x66>
 8008afc:	4b2d      	ldr	r3, [pc, #180]	; (8008bb4 <plug_holes+0x110>)
 8008afe:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8008b02:	4932      	ldr	r1, [pc, #200]	; (8008bcc <plug_holes+0x128>)
 8008b04:	482d      	ldr	r0, [pc, #180]	; (8008bbc <plug_holes+0x118>)
 8008b06:	f00b fa59 	bl	8013fbc <iprintf>

  nmem = (struct mem *)(void *)&ram[mem->next];
 8008b0a:	4b29      	ldr	r3, [pc, #164]	; (8008bb0 <plug_holes+0x10c>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	687a      	ldr	r2, [r7, #4]
 8008b10:	8812      	ldrh	r2, [r2, #0]
 8008b12:	4413      	add	r3, r2
 8008b14:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8008b16:	687a      	ldr	r2, [r7, #4]
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	429a      	cmp	r2, r3
 8008b1c:	d01f      	beq.n	8008b5e <plug_holes+0xba>
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	791b      	ldrb	r3, [r3, #4]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d11b      	bne.n	8008b5e <plug_holes+0xba>
 8008b26:	4b26      	ldr	r3, [pc, #152]	; (8008bc0 <plug_holes+0x11c>)
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	68fa      	ldr	r2, [r7, #12]
 8008b2c:	429a      	cmp	r2, r3
 8008b2e:	d016      	beq.n	8008b5e <plug_holes+0xba>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8008b30:	4b27      	ldr	r3, [pc, #156]	; (8008bd0 <plug_holes+0x12c>)
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	68fa      	ldr	r2, [r7, #12]
 8008b36:	429a      	cmp	r2, r3
 8008b38:	d102      	bne.n	8008b40 <plug_holes+0x9c>
      lfree = mem;
 8008b3a:	4a25      	ldr	r2, [pc, #148]	; (8008bd0 <plug_holes+0x12c>)
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	881a      	ldrh	r2, [r3, #0]
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	4a19      	ldr	r2, [pc, #100]	; (8008bb0 <plug_holes+0x10c>)
 8008b4c:	6812      	ldr	r2, [r2, #0]
 8008b4e:	1a99      	subs	r1, r3, r2
 8008b50:	4b17      	ldr	r3, [pc, #92]	; (8008bb0 <plug_holes+0x10c>)
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	68fa      	ldr	r2, [r7, #12]
 8008b56:	8812      	ldrh	r2, [r2, #0]
 8008b58:	4413      	add	r3, r2
 8008b5a:	b28a      	uxth	r2, r1
 8008b5c:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 8008b5e:	4b14      	ldr	r3, [pc, #80]	; (8008bb0 <plug_holes+0x10c>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	687a      	ldr	r2, [r7, #4]
 8008b64:	8852      	ldrh	r2, [r2, #2]
 8008b66:	4413      	add	r3, r2
 8008b68:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8008b6a:	68ba      	ldr	r2, [r7, #8]
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	429a      	cmp	r2, r3
 8008b70:	d01a      	beq.n	8008ba8 <plug_holes+0x104>
 8008b72:	68bb      	ldr	r3, [r7, #8]
 8008b74:	791b      	ldrb	r3, [r3, #4]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d116      	bne.n	8008ba8 <plug_holes+0x104>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8008b7a:	4b15      	ldr	r3, [pc, #84]	; (8008bd0 <plug_holes+0x12c>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	687a      	ldr	r2, [r7, #4]
 8008b80:	429a      	cmp	r2, r3
 8008b82:	d102      	bne.n	8008b8a <plug_holes+0xe6>
      lfree = pmem;
 8008b84:	4a12      	ldr	r2, [pc, #72]	; (8008bd0 <plug_holes+0x12c>)
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	881a      	ldrh	r2, [r3, #0]
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 8008b92:	68bb      	ldr	r3, [r7, #8]
 8008b94:	4a06      	ldr	r2, [pc, #24]	; (8008bb0 <plug_holes+0x10c>)
 8008b96:	6812      	ldr	r2, [r2, #0]
 8008b98:	1a99      	subs	r1, r3, r2
 8008b9a:	4b05      	ldr	r3, [pc, #20]	; (8008bb0 <plug_holes+0x10c>)
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	687a      	ldr	r2, [r7, #4]
 8008ba0:	8812      	ldrh	r2, [r2, #0]
 8008ba2:	4413      	add	r3, r2
 8008ba4:	b28a      	uxth	r2, r1
 8008ba6:	805a      	strh	r2, [r3, #2]
  }
}
 8008ba8:	bf00      	nop
 8008baa:	3710      	adds	r7, #16
 8008bac:	46bd      	mov	sp, r7
 8008bae:	bd80      	pop	{r7, pc}
 8008bb0:	20000220 	.word	0x20000220
 8008bb4:	08014d14 	.word	0x08014d14
 8008bb8:	08014d7c 	.word	0x08014d7c
 8008bbc:	08014d94 	.word	0x08014d94
 8008bc0:	20000224 	.word	0x20000224
 8008bc4:	08014dbc 	.word	0x08014dbc
 8008bc8:	08014dd8 	.word	0x08014dd8
 8008bcc:	08014df4 	.word	0x08014df4
 8008bd0:	20000228 	.word	0x20000228

08008bd4 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b083      	sub	sp, #12
 8008bd8:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8008bda:	4b17      	ldr	r3, [pc, #92]	; (8008c38 <mem_init+0x64>)
 8008bdc:	4a17      	ldr	r2, [pc, #92]	; (8008c3c <mem_init+0x68>)
 8008bde:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8008be0:	4b15      	ldr	r3, [pc, #84]	; (8008c38 <mem_init+0x64>)
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8008bec:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 8008bfa:	4b0f      	ldr	r3, [pc, #60]	; (8008c38 <mem_init+0x64>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8008c02:	4a0f      	ldr	r2, [pc, #60]	; (8008c40 <mem_init+0x6c>)
 8008c04:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8008c06:	4b0e      	ldr	r3, [pc, #56]	; (8008c40 <mem_init+0x6c>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	2201      	movs	r2, #1
 8008c0c:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8008c0e:	4b0c      	ldr	r3, [pc, #48]	; (8008c40 <mem_init+0x6c>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8008c16:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8008c18:	4b09      	ldr	r3, [pc, #36]	; (8008c40 <mem_init+0x6c>)
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8008c20:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8008c22:	4b05      	ldr	r3, [pc, #20]	; (8008c38 <mem_init+0x64>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	4a07      	ldr	r2, [pc, #28]	; (8008c44 <mem_init+0x70>)
 8008c28:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8008c2a:	bf00      	nop
 8008c2c:	370c      	adds	r7, #12
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c34:	4770      	bx	lr
 8008c36:	bf00      	nop
 8008c38:	20000220 	.word	0x20000220
 8008c3c:	30044000 	.word	0x30044000
 8008c40:	20000224 	.word	0x20000224
 8008c44:	20000228 	.word	0x20000228

08008c48 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b084      	sub	sp, #16
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d043      	beq.n	8008cde <mem_free+0x96>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	f003 0303 	and.w	r3, r3, #3
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d006      	beq.n	8008c6e <mem_free+0x26>
 8008c60:	4b22      	ldr	r3, [pc, #136]	; (8008cec <mem_free+0xa4>)
 8008c62:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 8008c66:	4922      	ldr	r1, [pc, #136]	; (8008cf0 <mem_free+0xa8>)
 8008c68:	4822      	ldr	r0, [pc, #136]	; (8008cf4 <mem_free+0xac>)
 8008c6a:	f00b f9a7 	bl	8013fbc <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8008c6e:	4b22      	ldr	r3, [pc, #136]	; (8008cf8 <mem_free+0xb0>)
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	687a      	ldr	r2, [r7, #4]
 8008c74:	429a      	cmp	r2, r3
 8008c76:	d304      	bcc.n	8008c82 <mem_free+0x3a>
 8008c78:	4b20      	ldr	r3, [pc, #128]	; (8008cfc <mem_free+0xb4>)
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	687a      	ldr	r2, [r7, #4]
 8008c7e:	429a      	cmp	r2, r3
 8008c80:	d306      	bcc.n	8008c90 <mem_free+0x48>
 8008c82:	4b1a      	ldr	r3, [pc, #104]	; (8008cec <mem_free+0xa4>)
 8008c84:	f240 12af 	movw	r2, #431	; 0x1af
 8008c88:	491d      	ldr	r1, [pc, #116]	; (8008d00 <mem_free+0xb8>)
 8008c8a:	481a      	ldr	r0, [pc, #104]	; (8008cf4 <mem_free+0xac>)
 8008c8c:	f00b f996 	bl	8013fbc <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8008c90:	4b19      	ldr	r3, [pc, #100]	; (8008cf8 <mem_free+0xb0>)
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	687a      	ldr	r2, [r7, #4]
 8008c96:	429a      	cmp	r2, r3
 8008c98:	d323      	bcc.n	8008ce2 <mem_free+0x9a>
 8008c9a:	4b18      	ldr	r3, [pc, #96]	; (8008cfc <mem_free+0xb4>)
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	687a      	ldr	r2, [r7, #4]
 8008ca0:	429a      	cmp	r2, r3
 8008ca2:	d21e      	bcs.n	8008ce2 <mem_free+0x9a>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	3b08      	subs	r3, #8
 8008ca8:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	791b      	ldrb	r3, [r3, #4]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d106      	bne.n	8008cc0 <mem_free+0x78>
 8008cb2:	4b0e      	ldr	r3, [pc, #56]	; (8008cec <mem_free+0xa4>)
 8008cb4:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8008cb8:	4912      	ldr	r1, [pc, #72]	; (8008d04 <mem_free+0xbc>)
 8008cba:	480e      	ldr	r0, [pc, #56]	; (8008cf4 <mem_free+0xac>)
 8008cbc:	f00b f97e 	bl	8013fbc <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8008cc6:	4b10      	ldr	r3, [pc, #64]	; (8008d08 <mem_free+0xc0>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	68fa      	ldr	r2, [r7, #12]
 8008ccc:	429a      	cmp	r2, r3
 8008cce:	d202      	bcs.n	8008cd6 <mem_free+0x8e>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8008cd0:	4a0d      	ldr	r2, [pc, #52]	; (8008d08 <mem_free+0xc0>)
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8008cd6:	68f8      	ldr	r0, [r7, #12]
 8008cd8:	f7ff fee4 	bl	8008aa4 <plug_holes>
 8008cdc:	e002      	b.n	8008ce4 <mem_free+0x9c>
    return;
 8008cde:	bf00      	nop
 8008ce0:	e000      	b.n	8008ce4 <mem_free+0x9c>
    return;
 8008ce2:	bf00      	nop
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8008ce4:	3710      	adds	r7, #16
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}
 8008cea:	bf00      	nop
 8008cec:	08014d14 	.word	0x08014d14
 8008cf0:	08014e20 	.word	0x08014e20
 8008cf4:	08014d94 	.word	0x08014d94
 8008cf8:	20000220 	.word	0x20000220
 8008cfc:	20000224 	.word	0x20000224
 8008d00:	08014e44 	.word	0x08014e44
 8008d04:	08014e5c 	.word	0x08014e5c
 8008d08:	20000228 	.word	0x20000228

08008d0c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b086      	sub	sp, #24
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
 8008d14:	460b      	mov	r3, r1
 8008d16:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 8008d18:	887b      	ldrh	r3, [r7, #2]
 8008d1a:	3303      	adds	r3, #3
 8008d1c:	b29b      	uxth	r3, r3
 8008d1e:	f023 0303 	bic.w	r3, r3, #3
 8008d22:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 8008d24:	887b      	ldrh	r3, [r7, #2]
 8008d26:	2b0b      	cmp	r3, #11
 8008d28:	d801      	bhi.n	8008d2e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8008d2a:	230c      	movs	r3, #12
 8008d2c:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 8008d2e:	887b      	ldrh	r3, [r7, #2]
 8008d30:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008d34:	d901      	bls.n	8008d3a <mem_trim+0x2e>
    return NULL;
 8008d36:	2300      	movs	r3, #0
 8008d38:	e0b1      	b.n	8008e9e <mem_trim+0x192>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8008d3a:	4b5b      	ldr	r3, [pc, #364]	; (8008ea8 <mem_trim+0x19c>)
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	687a      	ldr	r2, [r7, #4]
 8008d40:	429a      	cmp	r2, r3
 8008d42:	d304      	bcc.n	8008d4e <mem_trim+0x42>
 8008d44:	4b59      	ldr	r3, [pc, #356]	; (8008eac <mem_trim+0x1a0>)
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	687a      	ldr	r2, [r7, #4]
 8008d4a:	429a      	cmp	r2, r3
 8008d4c:	d306      	bcc.n	8008d5c <mem_trim+0x50>
 8008d4e:	4b58      	ldr	r3, [pc, #352]	; (8008eb0 <mem_trim+0x1a4>)
 8008d50:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8008d54:	4957      	ldr	r1, [pc, #348]	; (8008eb4 <mem_trim+0x1a8>)
 8008d56:	4858      	ldr	r0, [pc, #352]	; (8008eb8 <mem_trim+0x1ac>)
 8008d58:	f00b f930 	bl	8013fbc <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8008d5c:	4b52      	ldr	r3, [pc, #328]	; (8008ea8 <mem_trim+0x19c>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	687a      	ldr	r2, [r7, #4]
 8008d62:	429a      	cmp	r2, r3
 8008d64:	d304      	bcc.n	8008d70 <mem_trim+0x64>
 8008d66:	4b51      	ldr	r3, [pc, #324]	; (8008eac <mem_trim+0x1a0>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	687a      	ldr	r2, [r7, #4]
 8008d6c:	429a      	cmp	r2, r3
 8008d6e:	d301      	bcc.n	8008d74 <mem_trim+0x68>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
    return rmem;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	e094      	b.n	8008e9e <mem_trim+0x192>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	3b08      	subs	r3, #8
 8008d78:	617b      	str	r3, [r7, #20]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 8008d7a:	697b      	ldr	r3, [r7, #20]
 8008d7c:	4a4a      	ldr	r2, [pc, #296]	; (8008ea8 <mem_trim+0x19c>)
 8008d7e:	6812      	ldr	r2, [r2, #0]
 8008d80:	1a9b      	subs	r3, r3, r2
 8008d82:	827b      	strh	r3, [r7, #18]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 8008d84:	697b      	ldr	r3, [r7, #20]
 8008d86:	881a      	ldrh	r2, [r3, #0]
 8008d88:	8a7b      	ldrh	r3, [r7, #18]
 8008d8a:	1ad3      	subs	r3, r2, r3
 8008d8c:	b29b      	uxth	r3, r3
 8008d8e:	3b08      	subs	r3, #8
 8008d90:	823b      	strh	r3, [r7, #16]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8008d92:	887a      	ldrh	r2, [r7, #2]
 8008d94:	8a3b      	ldrh	r3, [r7, #16]
 8008d96:	429a      	cmp	r2, r3
 8008d98:	d906      	bls.n	8008da8 <mem_trim+0x9c>
 8008d9a:	4b45      	ldr	r3, [pc, #276]	; (8008eb0 <mem_trim+0x1a4>)
 8008d9c:	f240 2206 	movw	r2, #518	; 0x206
 8008da0:	4946      	ldr	r1, [pc, #280]	; (8008ebc <mem_trim+0x1b0>)
 8008da2:	4845      	ldr	r0, [pc, #276]	; (8008eb8 <mem_trim+0x1ac>)
 8008da4:	f00b f90a 	bl	8013fbc <iprintf>
  if (newsize > size) {
 8008da8:	887a      	ldrh	r2, [r7, #2]
 8008daa:	8a3b      	ldrh	r3, [r7, #16]
 8008dac:	429a      	cmp	r2, r3
 8008dae:	d901      	bls.n	8008db4 <mem_trim+0xa8>
    /* not supported */
    return NULL;
 8008db0:	2300      	movs	r3, #0
 8008db2:	e074      	b.n	8008e9e <mem_trim+0x192>
  }
  if (newsize == size) {
 8008db4:	887a      	ldrh	r2, [r7, #2]
 8008db6:	8a3b      	ldrh	r3, [r7, #16]
 8008db8:	429a      	cmp	r2, r3
 8008dba:	d101      	bne.n	8008dc0 <mem_trim+0xb4>
    /* No change in size, simply return */
    return rmem;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	e06e      	b.n	8008e9e <mem_trim+0x192>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = (struct mem *)(void *)&ram[mem->next];
 8008dc0:	4b39      	ldr	r3, [pc, #228]	; (8008ea8 <mem_trim+0x19c>)
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	697a      	ldr	r2, [r7, #20]
 8008dc6:	8812      	ldrh	r2, [r2, #0]
 8008dc8:	4413      	add	r3, r2
 8008dca:	60fb      	str	r3, [r7, #12]
  if (mem2->used == 0) {
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	791b      	ldrb	r3, [r3, #4]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d131      	bne.n	8008e38 <mem_trim+0x12c>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	881b      	ldrh	r3, [r3, #0]
 8008dd8:	813b      	strh	r3, [r7, #8]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8008dda:	8a7a      	ldrh	r2, [r7, #18]
 8008ddc:	887b      	ldrh	r3, [r7, #2]
 8008dde:	4413      	add	r3, r2
 8008de0:	b29b      	uxth	r3, r3
 8008de2:	3308      	adds	r3, #8
 8008de4:	817b      	strh	r3, [r7, #10]
    if (lfree == mem2) {
 8008de6:	4b36      	ldr	r3, [pc, #216]	; (8008ec0 <mem_trim+0x1b4>)
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	68fa      	ldr	r2, [r7, #12]
 8008dec:	429a      	cmp	r2, r3
 8008dee:	d105      	bne.n	8008dfc <mem_trim+0xf0>
      lfree = (struct mem *)(void *)&ram[ptr2];
 8008df0:	4b2d      	ldr	r3, [pc, #180]	; (8008ea8 <mem_trim+0x19c>)
 8008df2:	681a      	ldr	r2, [r3, #0]
 8008df4:	897b      	ldrh	r3, [r7, #10]
 8008df6:	4413      	add	r3, r2
 8008df8:	4a31      	ldr	r2, [pc, #196]	; (8008ec0 <mem_trim+0x1b4>)
 8008dfa:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8008dfc:	4b2a      	ldr	r3, [pc, #168]	; (8008ea8 <mem_trim+0x19c>)
 8008dfe:	681a      	ldr	r2, [r3, #0]
 8008e00:	897b      	ldrh	r3, [r7, #10]
 8008e02:	4413      	add	r3, r2
 8008e04:	60fb      	str	r3, [r7, #12]
    mem2->used = 0;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	2200      	movs	r2, #0
 8008e0a:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	893a      	ldrh	r2, [r7, #8]
 8008e10:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	8a7a      	ldrh	r2, [r7, #18]
 8008e16:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8008e18:	697b      	ldr	r3, [r7, #20]
 8008e1a:	897a      	ldrh	r2, [r7, #10]
 8008e1c:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	881b      	ldrh	r3, [r3, #0]
 8008e22:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008e26:	d039      	beq.n	8008e9c <mem_trim+0x190>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8008e28:	4b1f      	ldr	r3, [pc, #124]	; (8008ea8 <mem_trim+0x19c>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	68fa      	ldr	r2, [r7, #12]
 8008e2e:	8812      	ldrh	r2, [r2, #0]
 8008e30:	4413      	add	r3, r2
 8008e32:	897a      	ldrh	r2, [r7, #10]
 8008e34:	805a      	strh	r2, [r3, #2]
 8008e36:	e031      	b.n	8008e9c <mem_trim+0x190>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8008e38:	887b      	ldrh	r3, [r7, #2]
 8008e3a:	f103 0214 	add.w	r2, r3, #20
 8008e3e:	8a3b      	ldrh	r3, [r7, #16]
 8008e40:	429a      	cmp	r2, r3
 8008e42:	d82b      	bhi.n	8008e9c <mem_trim+0x190>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8008e44:	8a7a      	ldrh	r2, [r7, #18]
 8008e46:	887b      	ldrh	r3, [r7, #2]
 8008e48:	4413      	add	r3, r2
 8008e4a:	b29b      	uxth	r3, r3
 8008e4c:	3308      	adds	r3, #8
 8008e4e:	817b      	strh	r3, [r7, #10]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8008e50:	4b15      	ldr	r3, [pc, #84]	; (8008ea8 <mem_trim+0x19c>)
 8008e52:	681a      	ldr	r2, [r3, #0]
 8008e54:	897b      	ldrh	r3, [r7, #10]
 8008e56:	4413      	add	r3, r2
 8008e58:	60fb      	str	r3, [r7, #12]
    if (mem2 < lfree) {
 8008e5a:	4b19      	ldr	r3, [pc, #100]	; (8008ec0 <mem_trim+0x1b4>)
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	68fa      	ldr	r2, [r7, #12]
 8008e60:	429a      	cmp	r2, r3
 8008e62:	d202      	bcs.n	8008e6a <mem_trim+0x15e>
      lfree = mem2;
 8008e64:	4a16      	ldr	r2, [pc, #88]	; (8008ec0 <mem_trim+0x1b4>)
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8008e70:	697b      	ldr	r3, [r7, #20]
 8008e72:	881a      	ldrh	r2, [r3, #0]
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	8a7a      	ldrh	r2, [r7, #18]
 8008e7c:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8008e7e:	697b      	ldr	r3, [r7, #20]
 8008e80:	897a      	ldrh	r2, [r7, #10]
 8008e82:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	881b      	ldrh	r3, [r3, #0]
 8008e88:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008e8c:	d006      	beq.n	8008e9c <mem_trim+0x190>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8008e8e:	4b06      	ldr	r3, [pc, #24]	; (8008ea8 <mem_trim+0x19c>)
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	68fa      	ldr	r2, [r7, #12]
 8008e94:	8812      	ldrh	r2, [r2, #0]
 8008e96:	4413      	add	r3, r2
 8008e98:	897a      	ldrh	r2, [r7, #10]
 8008e9a:	805a      	strh	r2, [r3, #2]
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8008e9c:	687b      	ldr	r3, [r7, #4]
}
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	3718      	adds	r7, #24
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}
 8008ea6:	bf00      	nop
 8008ea8:	20000220 	.word	0x20000220
 8008eac:	20000224 	.word	0x20000224
 8008eb0:	08014d14 	.word	0x08014d14
 8008eb4:	08014e70 	.word	0x08014e70
 8008eb8:	08014d94 	.word	0x08014d94
 8008ebc:	08014e88 	.word	0x08014e88
 8008ec0:	20000228 	.word	0x20000228

08008ec4 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b088      	sub	sp, #32
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	4603      	mov	r3, r0
 8008ecc:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 8008ece:	88fb      	ldrh	r3, [r7, #6]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d101      	bne.n	8008ed8 <mem_malloc+0x14>
    return NULL;
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	e0c8      	b.n	800906a <mem_malloc+0x1a6>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 8008ed8:	88fb      	ldrh	r3, [r7, #6]
 8008eda:	3303      	adds	r3, #3
 8008edc:	b29b      	uxth	r3, r3
 8008ede:	f023 0303 	bic.w	r3, r3, #3
 8008ee2:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 8008ee4:	88fb      	ldrh	r3, [r7, #6]
 8008ee6:	2b0b      	cmp	r3, #11
 8008ee8:	d801      	bhi.n	8008eee <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8008eea:	230c      	movs	r3, #12
 8008eec:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 8008eee:	88fb      	ldrh	r3, [r7, #6]
 8008ef0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008ef4:	d901      	bls.n	8008efa <mem_malloc+0x36>
    return NULL;
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	e0b7      	b.n	800906a <mem_malloc+0x1a6>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8008efa:	4b5e      	ldr	r3, [pc, #376]	; (8009074 <mem_malloc+0x1b0>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	461a      	mov	r2, r3
 8008f00:	4b5d      	ldr	r3, [pc, #372]	; (8009078 <mem_malloc+0x1b4>)
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	1ad3      	subs	r3, r2, r3
 8008f06:	83fb      	strh	r3, [r7, #30]
 8008f08:	e0a7      	b.n	800905a <mem_malloc+0x196>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 8008f0a:	4b5b      	ldr	r3, [pc, #364]	; (8009078 <mem_malloc+0x1b4>)
 8008f0c:	681a      	ldr	r2, [r3, #0]
 8008f0e:	8bfb      	ldrh	r3, [r7, #30]
 8008f10:	4413      	add	r3, r2
 8008f12:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8008f14:	697b      	ldr	r3, [r7, #20]
 8008f16:	791b      	ldrb	r3, [r3, #4]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	f040 8098 	bne.w	800904e <mem_malloc+0x18a>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8008f1e:	697b      	ldr	r3, [r7, #20]
 8008f20:	881b      	ldrh	r3, [r3, #0]
 8008f22:	461a      	mov	r2, r3
 8008f24:	8bfb      	ldrh	r3, [r7, #30]
 8008f26:	1ad3      	subs	r3, r2, r3
 8008f28:	f1a3 0208 	sub.w	r2, r3, #8
 8008f2c:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 8008f2e:	429a      	cmp	r2, r3
 8008f30:	f0c0 808d 	bcc.w	800904e <mem_malloc+0x18a>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8008f34:	697b      	ldr	r3, [r7, #20]
 8008f36:	881b      	ldrh	r3, [r3, #0]
 8008f38:	461a      	mov	r2, r3
 8008f3a:	8bfb      	ldrh	r3, [r7, #30]
 8008f3c:	1ad3      	subs	r3, r2, r3
 8008f3e:	f1a3 0208 	sub.w	r2, r3, #8
 8008f42:	88fb      	ldrh	r3, [r7, #6]
 8008f44:	3314      	adds	r3, #20
 8008f46:	429a      	cmp	r2, r3
 8008f48:	d327      	bcc.n	8008f9a <mem_malloc+0xd6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 8008f4a:	8bfa      	ldrh	r2, [r7, #30]
 8008f4c:	88fb      	ldrh	r3, [r7, #6]
 8008f4e:	4413      	add	r3, r2
 8008f50:	b29b      	uxth	r3, r3
 8008f52:	3308      	adds	r3, #8
 8008f54:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 8008f56:	4b48      	ldr	r3, [pc, #288]	; (8009078 <mem_malloc+0x1b4>)
 8008f58:	681a      	ldr	r2, [r3, #0]
 8008f5a:	8a7b      	ldrh	r3, [r7, #18]
 8008f5c:	4413      	add	r3, r2
 8008f5e:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	2200      	movs	r2, #0
 8008f64:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8008f66:	697b      	ldr	r3, [r7, #20]
 8008f68:	881a      	ldrh	r2, [r3, #0]
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	8bfa      	ldrh	r2, [r7, #30]
 8008f72:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8008f74:	697b      	ldr	r3, [r7, #20]
 8008f76:	8a7a      	ldrh	r2, [r7, #18]
 8008f78:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8008f7a:	697b      	ldr	r3, [r7, #20]
 8008f7c:	2201      	movs	r2, #1
 8008f7e:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	881b      	ldrh	r3, [r3, #0]
 8008f84:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008f88:	d00a      	beq.n	8008fa0 <mem_malloc+0xdc>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8008f8a:	4b3b      	ldr	r3, [pc, #236]	; (8009078 <mem_malloc+0x1b4>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	68fa      	ldr	r2, [r7, #12]
 8008f90:	8812      	ldrh	r2, [r2, #0]
 8008f92:	4413      	add	r3, r2
 8008f94:	8a7a      	ldrh	r2, [r7, #18]
 8008f96:	805a      	strh	r2, [r3, #2]
 8008f98:	e002      	b.n	8008fa0 <mem_malloc+0xdc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8008f9a:	697b      	ldr	r3, [r7, #20]
 8008f9c:	2201      	movs	r2, #1
 8008f9e:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8008fa0:	4b34      	ldr	r3, [pc, #208]	; (8009074 <mem_malloc+0x1b0>)
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	697a      	ldr	r2, [r7, #20]
 8008fa6:	429a      	cmp	r2, r3
 8008fa8:	d127      	bne.n	8008ffa <mem_malloc+0x136>
          struct mem *cur = lfree;
 8008faa:	4b32      	ldr	r3, [pc, #200]	; (8009074 <mem_malloc+0x1b0>)
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8008fb0:	e005      	b.n	8008fbe <mem_malloc+0xfa>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 8008fb2:	4b31      	ldr	r3, [pc, #196]	; (8009078 <mem_malloc+0x1b4>)
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	69ba      	ldr	r2, [r7, #24]
 8008fb8:	8812      	ldrh	r2, [r2, #0]
 8008fba:	4413      	add	r3, r2
 8008fbc:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 8008fbe:	69bb      	ldr	r3, [r7, #24]
 8008fc0:	791b      	ldrb	r3, [r3, #4]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d004      	beq.n	8008fd0 <mem_malloc+0x10c>
 8008fc6:	4b2d      	ldr	r3, [pc, #180]	; (800907c <mem_malloc+0x1b8>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	69ba      	ldr	r2, [r7, #24]
 8008fcc:	429a      	cmp	r2, r3
 8008fce:	d1f0      	bne.n	8008fb2 <mem_malloc+0xee>
          }
          lfree = cur;
 8008fd0:	4a28      	ldr	r2, [pc, #160]	; (8009074 <mem_malloc+0x1b0>)
 8008fd2:	69bb      	ldr	r3, [r7, #24]
 8008fd4:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8008fd6:	4b27      	ldr	r3, [pc, #156]	; (8009074 <mem_malloc+0x1b0>)
 8008fd8:	681a      	ldr	r2, [r3, #0]
 8008fda:	4b28      	ldr	r3, [pc, #160]	; (800907c <mem_malloc+0x1b8>)
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	429a      	cmp	r2, r3
 8008fe0:	d00b      	beq.n	8008ffa <mem_malloc+0x136>
 8008fe2:	4b24      	ldr	r3, [pc, #144]	; (8009074 <mem_malloc+0x1b0>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	791b      	ldrb	r3, [r3, #4]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d006      	beq.n	8008ffa <mem_malloc+0x136>
 8008fec:	4b24      	ldr	r3, [pc, #144]	; (8009080 <mem_malloc+0x1bc>)
 8008fee:	f240 22cf 	movw	r2, #719	; 0x2cf
 8008ff2:	4924      	ldr	r1, [pc, #144]	; (8009084 <mem_malloc+0x1c0>)
 8008ff4:	4824      	ldr	r0, [pc, #144]	; (8009088 <mem_malloc+0x1c4>)
 8008ff6:	f00a ffe1 	bl	8013fbc <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8008ffa:	88fa      	ldrh	r2, [r7, #6]
 8008ffc:	697b      	ldr	r3, [r7, #20]
 8008ffe:	4413      	add	r3, r2
 8009000:	3308      	adds	r3, #8
 8009002:	4a1e      	ldr	r2, [pc, #120]	; (800907c <mem_malloc+0x1b8>)
 8009004:	6812      	ldr	r2, [r2, #0]
 8009006:	4293      	cmp	r3, r2
 8009008:	d906      	bls.n	8009018 <mem_malloc+0x154>
 800900a:	4b1d      	ldr	r3, [pc, #116]	; (8009080 <mem_malloc+0x1bc>)
 800900c:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8009010:	491e      	ldr	r1, [pc, #120]	; (800908c <mem_malloc+0x1c8>)
 8009012:	481d      	ldr	r0, [pc, #116]	; (8009088 <mem_malloc+0x1c4>)
 8009014:	f00a ffd2 	bl	8013fbc <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8009018:	697b      	ldr	r3, [r7, #20]
 800901a:	f003 0303 	and.w	r3, r3, #3
 800901e:	2b00      	cmp	r3, #0
 8009020:	d006      	beq.n	8009030 <mem_malloc+0x16c>
 8009022:	4b17      	ldr	r3, [pc, #92]	; (8009080 <mem_malloc+0x1bc>)
 8009024:	f240 22d6 	movw	r2, #726	; 0x2d6
 8009028:	4919      	ldr	r1, [pc, #100]	; (8009090 <mem_malloc+0x1cc>)
 800902a:	4817      	ldr	r0, [pc, #92]	; (8009088 <mem_malloc+0x1c4>)
 800902c:	f00a ffc6 	bl	8013fbc <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8009030:	697b      	ldr	r3, [r7, #20]
 8009032:	f003 0303 	and.w	r3, r3, #3
 8009036:	2b00      	cmp	r3, #0
 8009038:	d006      	beq.n	8009048 <mem_malloc+0x184>
 800903a:	4b11      	ldr	r3, [pc, #68]	; (8009080 <mem_malloc+0x1bc>)
 800903c:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 8009040:	4914      	ldr	r1, [pc, #80]	; (8009094 <mem_malloc+0x1d0>)
 8009042:	4811      	ldr	r0, [pc, #68]	; (8009088 <mem_malloc+0x1c4>)
 8009044:	f00a ffba 	bl	8013fbc <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 8009048:	697b      	ldr	r3, [r7, #20]
 800904a:	3308      	adds	r3, #8
 800904c:	e00d      	b.n	800906a <mem_malloc+0x1a6>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 800904e:	4b0a      	ldr	r3, [pc, #40]	; (8009078 <mem_malloc+0x1b4>)
 8009050:	681a      	ldr	r2, [r3, #0]
 8009052:	8bfb      	ldrh	r3, [r7, #30]
 8009054:	4413      	add	r3, r2
 8009056:	881b      	ldrh	r3, [r3, #0]
 8009058:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800905a:	8bfa      	ldrh	r2, [r7, #30]
 800905c:	88fb      	ldrh	r3, [r7, #6]
 800905e:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8009062:	429a      	cmp	r2, r3
 8009064:	f4ff af51 	bcc.w	8008f0a <mem_malloc+0x46>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  return NULL;
 8009068:	2300      	movs	r3, #0
}
 800906a:	4618      	mov	r0, r3
 800906c:	3720      	adds	r7, #32
 800906e:	46bd      	mov	sp, r7
 8009070:	bd80      	pop	{r7, pc}
 8009072:	bf00      	nop
 8009074:	20000228 	.word	0x20000228
 8009078:	20000220 	.word	0x20000220
 800907c:	20000224 	.word	0x20000224
 8009080:	08014d14 	.word	0x08014d14
 8009084:	08014ea8 	.word	0x08014ea8
 8009088:	08014d94 	.word	0x08014d94
 800908c:	08014ec4 	.word	0x08014ec4
 8009090:	08014ef4 	.word	0x08014ef4
 8009094:	08014f24 	.word	0x08014f24

08009098 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8009098:	b480      	push	{r7}
 800909a:	b085      	sub	sp, #20
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	689b      	ldr	r3, [r3, #8]
 80090a4:	2200      	movs	r2, #0
 80090a6:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	685b      	ldr	r3, [r3, #4]
 80090ac:	3303      	adds	r3, #3
 80090ae:	f023 0303 	bic.w	r3, r3, #3
 80090b2:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80090b4:	2300      	movs	r3, #0
 80090b6:	60fb      	str	r3, [r7, #12]
 80090b8:	e011      	b.n	80090de <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	689b      	ldr	r3, [r3, #8]
 80090be:	681a      	ldr	r2, [r3, #0]
 80090c0:	68bb      	ldr	r3, [r7, #8]
 80090c2:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	689b      	ldr	r3, [r3, #8]
 80090c8:	68ba      	ldr	r2, [r7, #8]
 80090ca:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	881b      	ldrh	r3, [r3, #0]
 80090d0:	461a      	mov	r2, r3
 80090d2:	68bb      	ldr	r3, [r7, #8]
 80090d4:	4413      	add	r3, r2
 80090d6:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	3301      	adds	r3, #1
 80090dc:	60fb      	str	r3, [r7, #12]
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	885b      	ldrh	r3, [r3, #2]
 80090e2:	461a      	mov	r2, r3
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	4293      	cmp	r3, r2
 80090e8:	dbe7      	blt.n	80090ba <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80090ea:	bf00      	nop
 80090ec:	3714      	adds	r7, #20
 80090ee:	46bd      	mov	sp, r7
 80090f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f4:	4770      	bx	lr
	...

080090f8 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b082      	sub	sp, #8
 80090fc:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80090fe:	2300      	movs	r3, #0
 8009100:	80fb      	strh	r3, [r7, #6]
 8009102:	e009      	b.n	8009118 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8009104:	88fb      	ldrh	r3, [r7, #6]
 8009106:	4a08      	ldr	r2, [pc, #32]	; (8009128 <memp_init+0x30>)
 8009108:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800910c:	4618      	mov	r0, r3
 800910e:	f7ff ffc3 	bl	8009098 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8009112:	88fb      	ldrh	r3, [r7, #6]
 8009114:	3301      	adds	r3, #1
 8009116:	80fb      	strh	r3, [r7, #6]
 8009118:	88fb      	ldrh	r3, [r7, #6]
 800911a:	2b08      	cmp	r3, #8
 800911c:	d9f2      	bls.n	8009104 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800911e:	bf00      	nop
 8009120:	3708      	adds	r7, #8
 8009122:	46bd      	mov	sp, r7
 8009124:	bd80      	pop	{r7, pc}
 8009126:	bf00      	nop
 8009128:	08016de4 	.word	0x08016de4

0800912c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b084      	sub	sp, #16
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	689b      	ldr	r3, [r3, #8]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d012      	beq.n	8009168 <do_memp_malloc_pool+0x3c>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	689b      	ldr	r3, [r3, #8]
 8009146:	68fa      	ldr	r2, [r7, #12]
 8009148:	6812      	ldr	r2, [r2, #0]
 800914a:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	f003 0303 	and.w	r3, r3, #3
 8009152:	2b00      	cmp	r3, #0
 8009154:	d006      	beq.n	8009164 <do_memp_malloc_pool+0x38>
 8009156:	4b07      	ldr	r3, [pc, #28]	; (8009174 <do_memp_malloc_pool+0x48>)
 8009158:	f240 1249 	movw	r2, #329	; 0x149
 800915c:	4906      	ldr	r1, [pc, #24]	; (8009178 <do_memp_malloc_pool+0x4c>)
 800915e:	4807      	ldr	r0, [pc, #28]	; (800917c <do_memp_malloc_pool+0x50>)
 8009160:	f00a ff2c 	bl	8013fbc <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	e000      	b.n	800916a <do_memp_malloc_pool+0x3e>
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
  return NULL;
 8009168:	2300      	movs	r3, #0
}
 800916a:	4618      	mov	r0, r3
 800916c:	3710      	adds	r7, #16
 800916e:	46bd      	mov	sp, r7
 8009170:	bd80      	pop	{r7, pc}
 8009172:	bf00      	nop
 8009174:	08014f48 	.word	0x08014f48
 8009178:	08014fb0 	.word	0x08014fb0
 800917c:	08014fd4 	.word	0x08014fd4

08009180 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b082      	sub	sp, #8
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d106      	bne.n	800919c <memp_malloc_pool+0x1c>
 800918e:	4b0a      	ldr	r3, [pc, #40]	; (80091b8 <memp_malloc_pool+0x38>)
 8009190:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8009194:	4909      	ldr	r1, [pc, #36]	; (80091bc <memp_malloc_pool+0x3c>)
 8009196:	480a      	ldr	r0, [pc, #40]	; (80091c0 <memp_malloc_pool+0x40>)
 8009198:	f00a ff10 	bl	8013fbc <iprintf>
  if (desc == NULL) {
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d101      	bne.n	80091a6 <memp_malloc_pool+0x26>
    return NULL;
 80091a2:	2300      	movs	r3, #0
 80091a4:	e003      	b.n	80091ae <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	f7ff ffc0 	bl	800912c <do_memp_malloc_pool>
 80091ac:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 80091ae:	4618      	mov	r0, r3
 80091b0:	3708      	adds	r7, #8
 80091b2:	46bd      	mov	sp, r7
 80091b4:	bd80      	pop	{r7, pc}
 80091b6:	bf00      	nop
 80091b8:	08014f48 	.word	0x08014f48
 80091bc:	08014ffc 	.word	0x08014ffc
 80091c0:	08014fd4 	.word	0x08014fd4

080091c4 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b084      	sub	sp, #16
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	4603      	mov	r3, r0
 80091cc:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80091ce:	79fb      	ldrb	r3, [r7, #7]
 80091d0:	2b08      	cmp	r3, #8
 80091d2:	d908      	bls.n	80091e6 <memp_malloc+0x22>
 80091d4:	4b0a      	ldr	r3, [pc, #40]	; (8009200 <memp_malloc+0x3c>)
 80091d6:	f240 1287 	movw	r2, #391	; 0x187
 80091da:	490a      	ldr	r1, [pc, #40]	; (8009204 <memp_malloc+0x40>)
 80091dc:	480a      	ldr	r0, [pc, #40]	; (8009208 <memp_malloc+0x44>)
 80091de:	f00a feed 	bl	8013fbc <iprintf>
 80091e2:	2300      	movs	r3, #0
 80091e4:	e008      	b.n	80091f8 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80091e6:	79fb      	ldrb	r3, [r7, #7]
 80091e8:	4a08      	ldr	r2, [pc, #32]	; (800920c <memp_malloc+0x48>)
 80091ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80091ee:	4618      	mov	r0, r3
 80091f0:	f7ff ff9c 	bl	800912c <do_memp_malloc_pool>
 80091f4:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80091f6:	68fb      	ldr	r3, [r7, #12]
}
 80091f8:	4618      	mov	r0, r3
 80091fa:	3710      	adds	r7, #16
 80091fc:	46bd      	mov	sp, r7
 80091fe:	bd80      	pop	{r7, pc}
 8009200:	08014f48 	.word	0x08014f48
 8009204:	08015010 	.word	0x08015010
 8009208:	08014fd4 	.word	0x08014fd4
 800920c:	08016de4 	.word	0x08016de4

08009210 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b084      	sub	sp, #16
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
 8009218:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	f003 0303 	and.w	r3, r3, #3
 8009220:	2b00      	cmp	r3, #0
 8009222:	d006      	beq.n	8009232 <do_memp_free_pool+0x22>
 8009224:	4b0a      	ldr	r3, [pc, #40]	; (8009250 <do_memp_free_pool+0x40>)
 8009226:	f240 129d 	movw	r2, #413	; 0x19d
 800922a:	490a      	ldr	r1, [pc, #40]	; (8009254 <do_memp_free_pool+0x44>)
 800922c:	480a      	ldr	r0, [pc, #40]	; (8009258 <do_memp_free_pool+0x48>)
 800922e:	f00a fec5 	bl	8013fbc <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	689b      	ldr	r3, [r3, #8]
 800923a:	681a      	ldr	r2, [r3, #0]
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	689b      	ldr	r3, [r3, #8]
 8009244:	68fa      	ldr	r2, [r7, #12]
 8009246:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8009248:	bf00      	nop
 800924a:	3710      	adds	r7, #16
 800924c:	46bd      	mov	sp, r7
 800924e:	bd80      	pop	{r7, pc}
 8009250:	08014f48 	.word	0x08014f48
 8009254:	08015030 	.word	0x08015030
 8009258:	08014fd4 	.word	0x08014fd4

0800925c <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc* desc, void *mem)
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b082      	sub	sp, #8
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
 8009264:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d106      	bne.n	800927a <memp_free_pool+0x1e>
 800926c:	4b0a      	ldr	r3, [pc, #40]	; (8009298 <memp_free_pool+0x3c>)
 800926e:	f44f 72e3 	mov.w	r2, #454	; 0x1c6
 8009272:	490a      	ldr	r1, [pc, #40]	; (800929c <memp_free_pool+0x40>)
 8009274:	480a      	ldr	r0, [pc, #40]	; (80092a0 <memp_free_pool+0x44>)
 8009276:	f00a fea1 	bl	8013fbc <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d007      	beq.n	8009290 <memp_free_pool+0x34>
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d004      	beq.n	8009290 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8009286:	6839      	ldr	r1, [r7, #0]
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	f7ff ffc1 	bl	8009210 <do_memp_free_pool>
 800928e:	e000      	b.n	8009292 <memp_free_pool+0x36>
    return;
 8009290:	bf00      	nop
}
 8009292:	3708      	adds	r7, #8
 8009294:	46bd      	mov	sp, r7
 8009296:	bd80      	pop	{r7, pc}
 8009298:	08014f48 	.word	0x08014f48
 800929c:	08014ffc 	.word	0x08014ffc
 80092a0:	08014fd4 	.word	0x08014fd4

080092a4 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b082      	sub	sp, #8
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	4603      	mov	r3, r0
 80092ac:	6039      	str	r1, [r7, #0]
 80092ae:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80092b0:	79fb      	ldrb	r3, [r7, #7]
 80092b2:	2b08      	cmp	r3, #8
 80092b4:	d907      	bls.n	80092c6 <memp_free+0x22>
 80092b6:	4b0c      	ldr	r3, [pc, #48]	; (80092e8 <memp_free+0x44>)
 80092b8:	f240 12db 	movw	r2, #475	; 0x1db
 80092bc:	490b      	ldr	r1, [pc, #44]	; (80092ec <memp_free+0x48>)
 80092be:	480c      	ldr	r0, [pc, #48]	; (80092f0 <memp_free+0x4c>)
 80092c0:	f00a fe7c 	bl	8013fbc <iprintf>
 80092c4:	e00c      	b.n	80092e0 <memp_free+0x3c>

  if (mem == NULL) {
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d008      	beq.n	80092de <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80092cc:	79fb      	ldrb	r3, [r7, #7]
 80092ce:	4a09      	ldr	r2, [pc, #36]	; (80092f4 <memp_free+0x50>)
 80092d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80092d4:	6839      	ldr	r1, [r7, #0]
 80092d6:	4618      	mov	r0, r3
 80092d8:	f7ff ff9a 	bl	8009210 <do_memp_free_pool>
 80092dc:	e000      	b.n	80092e0 <memp_free+0x3c>
    return;
 80092de:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80092e0:	3708      	adds	r7, #8
 80092e2:	46bd      	mov	sp, r7
 80092e4:	bd80      	pop	{r7, pc}
 80092e6:	bf00      	nop
 80092e8:	08014f48 	.word	0x08014f48
 80092ec:	08015050 	.word	0x08015050
 80092f0:	08014fd4 	.word	0x08014fd4
 80092f4:	08016de4 	.word	0x08016de4

080092f8 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80092f8:	b480      	push	{r7}
 80092fa:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80092fc:	bf00      	nop
 80092fe:	46bd      	mov	sp, r7
 8009300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009304:	4770      	bx	lr
	...

08009308 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b084      	sub	sp, #16
 800930c:	af00      	add	r7, sp, #0
 800930e:	60f8      	str	r0, [r7, #12]
 8009310:	60b9      	str	r1, [r7, #8]
 8009312:	607a      	str	r2, [r7, #4]
 8009314:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 8009316:	69fb      	ldr	r3, [r7, #28]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d105      	bne.n	8009328 <netif_add+0x20>
 800931c:	4b22      	ldr	r3, [pc, #136]	; (80093a8 <netif_add+0xa0>)
 800931e:	22fb      	movs	r2, #251	; 0xfb
 8009320:	4922      	ldr	r1, [pc, #136]	; (80093ac <netif_add+0xa4>)
 8009322:	4823      	ldr	r0, [pc, #140]	; (80093b0 <netif_add+0xa8>)
 8009324:	f00a fe4a 	bl	8013fbc <iprintf>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	2200      	movs	r2, #0
 800932c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	2200      	movs	r2, #0
 8009332:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	2200      	movs	r2, #0
 8009338:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	2200      	movs	r2, #0
 800933e:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	2203      	movs	r2, #3
 8009346:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	2200      	movs	r2, #0
 800934e:	61da      	str	r2, [r3, #28]
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	2200      	movs	r2, #0
 8009354:	621a      	str	r2, [r3, #32]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	69ba      	ldr	r2, [r7, #24]
 800935a:	625a      	str	r2, [r3, #36]	; 0x24
  netif->num = netif_num++;
 800935c:	4b15      	ldr	r3, [pc, #84]	; (80093b4 <netif_add+0xac>)
 800935e:	781b      	ldrb	r3, [r3, #0]
 8009360:	1c5a      	adds	r2, r3, #1
 8009362:	b2d1      	uxtb	r1, r2
 8009364:	4a13      	ldr	r2, [pc, #76]	; (80093b4 <netif_add+0xac>)
 8009366:	7011      	strb	r1, [r2, #0]
 8009368:	68fa      	ldr	r2, [r7, #12]
 800936a:	f882 3036 	strb.w	r3, [r2, #54]	; 0x36
  netif->input = input;
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	6a3a      	ldr	r2, [r7, #32]
 8009372:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	687a      	ldr	r2, [r7, #4]
 8009378:	68b9      	ldr	r1, [r7, #8]
 800937a:	68f8      	ldr	r0, [r7, #12]
 800937c:	f000 f81e 	bl	80093bc <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8009380:	69fb      	ldr	r3, [r7, #28]
 8009382:	68f8      	ldr	r0, [r7, #12]
 8009384:	4798      	blx	r3
 8009386:	4603      	mov	r3, r0
 8009388:	2b00      	cmp	r3, #0
 800938a:	d001      	beq.n	8009390 <netif_add+0x88>
    return NULL;
 800938c:	2300      	movs	r3, #0
 800938e:	e007      	b.n	80093a0 <netif_add+0x98>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8009390:	4b09      	ldr	r3, [pc, #36]	; (80093b8 <netif_add+0xb0>)
 8009392:	681a      	ldr	r2, [r3, #0]
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8009398:	4a07      	ldr	r2, [pc, #28]	; (80093b8 <netif_add+0xb0>)
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	6013      	str	r3, [r2, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 800939e:	68fb      	ldr	r3, [r7, #12]
}
 80093a0:	4618      	mov	r0, r3
 80093a2:	3710      	adds	r7, #16
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bd80      	pop	{r7, pc}
 80093a8:	0801506c 	.word	0x0801506c
 80093ac:	080150d4 	.word	0x080150d4
 80093b0:	080150ec 	.word	0x080150ec
 80093b4:	20000250 	.word	0x20000250
 80093b8:	20003274 	.word	0x20003274

080093bc <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b084      	sub	sp, #16
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	60f8      	str	r0, [r7, #12]
 80093c4:	60b9      	str	r1, [r7, #8]
 80093c6:	607a      	str	r2, [r7, #4]
 80093c8:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 80093ca:	68bb      	ldr	r3, [r7, #8]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d003      	beq.n	80093d8 <netif_set_addr+0x1c>
 80093d0:	68bb      	ldr	r3, [r7, #8]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d10c      	bne.n	80093f2 <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 80093d8:	68b9      	ldr	r1, [r7, #8]
 80093da:	68f8      	ldr	r0, [r7, #12]
 80093dc:	f000 f81a 	bl	8009414 <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 80093e0:	6879      	ldr	r1, [r7, #4]
 80093e2:	68f8      	ldr	r0, [r7, #12]
 80093e4:	f000 f86a 	bl	80094bc <netif_set_netmask>
    netif_set_gw(netif, gw);
 80093e8:	6839      	ldr	r1, [r7, #0]
 80093ea:	68f8      	ldr	r0, [r7, #12]
 80093ec:	f000 f852 	bl	8009494 <netif_set_gw>
 80093f0:	e00b      	b.n	800940a <netif_set_addr+0x4e>
  } else {
    netif_set_netmask(netif, netmask);
 80093f2:	6879      	ldr	r1, [r7, #4]
 80093f4:	68f8      	ldr	r0, [r7, #12]
 80093f6:	f000 f861 	bl	80094bc <netif_set_netmask>
    netif_set_gw(netif, gw);
 80093fa:	6839      	ldr	r1, [r7, #0]
 80093fc:	68f8      	ldr	r0, [r7, #12]
 80093fe:	f000 f849 	bl	8009494 <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 8009402:	68b9      	ldr	r1, [r7, #8]
 8009404:	68f8      	ldr	r0, [r7, #12]
 8009406:	f000 f805 	bl	8009414 <netif_set_ipaddr>
  }
}
 800940a:	bf00      	nop
 800940c:	3710      	adds	r7, #16
 800940e:	46bd      	mov	sp, r7
 8009410:	bd80      	pop	{r7, pc}
	...

08009414 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b084      	sub	sp, #16
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
 800941c:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d003      	beq.n	800942c <netif_set_ipaddr+0x18>
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	60fb      	str	r3, [r7, #12]
 800942a:	e002      	b.n	8009432 <netif_set_ipaddr+0x1e>
 800942c:	4b18      	ldr	r3, [pc, #96]	; (8009490 <netif_set_ipaddr+0x7c>)
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 8009432:	68fa      	ldr	r2, [r7, #12]
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	3304      	adds	r3, #4
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	429a      	cmp	r2, r3
 800943c:	d024      	beq.n	8009488 <netif_set_ipaddr+0x74>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	3304      	adds	r3, #4
 8009442:	f107 020c 	add.w	r2, r7, #12
 8009446:	4611      	mov	r1, r2
 8009448:	4618      	mov	r0, r3
 800944a:	f002 fb2f 	bl	800baac <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	3304      	adds	r3, #4
 8009452:	f107 020c 	add.w	r2, r7, #12
 8009456:	4611      	mov	r1, r2
 8009458:	4618      	mov	r0, r3
 800945a:	f006 fba7 	bl	800fbac <udp_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d002      	beq.n	800946a <netif_set_ipaddr+0x56>
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	e000      	b.n	800946c <netif_set_ipaddr+0x58>
 800946a:	2300      	movs	r3, #0
 800946c:	687a      	ldr	r2, [r7, #4]
 800946e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8009470:	2101      	movs	r1, #1
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f000 f871 	bl	800955a <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	69db      	ldr	r3, [r3, #28]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d003      	beq.n	8009488 <netif_set_ipaddr+0x74>
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	69db      	ldr	r3, [r3, #28]
 8009484:	6878      	ldr	r0, [r7, #4]
 8009486:	4798      	blx	r3
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 8009488:	bf00      	nop
 800948a:	3710      	adds	r7, #16
 800948c:	46bd      	mov	sp, r7
 800948e:	bd80      	pop	{r7, pc}
 8009490:	08016e48 	.word	0x08016e48

08009494 <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 8009494:	b480      	push	{r7}
 8009496:	b083      	sub	sp, #12
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
 800949c:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d002      	beq.n	80094aa <netif_set_gw+0x16>
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	e000      	b.n	80094ac <netif_set_gw+0x18>
 80094aa:	2300      	movs	r3, #0
 80094ac:	687a      	ldr	r2, [r7, #4]
 80094ae:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 80094b0:	bf00      	nop
 80094b2:	370c      	adds	r7, #12
 80094b4:	46bd      	mov	sp, r7
 80094b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ba:	4770      	bx	lr

080094bc <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 80094bc:	b480      	push	{r7}
 80094be:	b083      	sub	sp, #12
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
 80094c4:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d002      	beq.n	80094d2 <netif_set_netmask+0x16>
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	e000      	b.n	80094d4 <netif_set_netmask+0x18>
 80094d2:	2300      	movs	r3, #0
 80094d4:	687a      	ldr	r2, [r7, #4]
 80094d6:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 80094d8:	bf00      	nop
 80094da:	370c      	adds	r7, #12
 80094dc:	46bd      	mov	sp, r7
 80094de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e2:	4770      	bx	lr

080094e4 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80094e4:	b480      	push	{r7}
 80094e6:	b083      	sub	sp, #12
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80094ec:	4a04      	ldr	r2, [pc, #16]	; (8009500 <netif_set_default+0x1c>)
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80094f2:	bf00      	nop
 80094f4:	370c      	adds	r7, #12
 80094f6:	46bd      	mov	sp, r7
 80094f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fc:	4770      	bx	lr
 80094fe:	bf00      	nop
 8009500:	20003278 	.word	0x20003278

08009504 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b082      	sub	sp, #8
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8009512:	f003 0301 	and.w	r3, r3, #1
 8009516:	2b00      	cmp	r3, #0
 8009518:	d11b      	bne.n	8009552 <netif_set_up+0x4e>
    netif->flags |= NETIF_FLAG_UP;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8009520:	f043 0301 	orr.w	r3, r3, #1
 8009524:	b2da      	uxtb	r2, r3
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	69db      	ldr	r3, [r3, #28]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d003      	beq.n	800953c <netif_set_up+0x38>
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	69db      	ldr	r3, [r3, #28]
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	4798      	blx	r3

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8009542:	f003 0304 	and.w	r3, r3, #4
 8009546:	2b00      	cmp	r3, #0
 8009548:	d003      	beq.n	8009552 <netif_set_up+0x4e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 800954a:	2103      	movs	r1, #3
 800954c:	6878      	ldr	r0, [r7, #4]
 800954e:	f000 f804 	bl	800955a <netif_issue_reports>
    }
  }
}
 8009552:	bf00      	nop
 8009554:	3708      	adds	r7, #8
 8009556:	46bd      	mov	sp, r7
 8009558:	bd80      	pop	{r7, pc}

0800955a <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 800955a:	b580      	push	{r7, lr}
 800955c:	b082      	sub	sp, #8
 800955e:	af00      	add	r7, sp, #0
 8009560:	6078      	str	r0, [r7, #4]
 8009562:	460b      	mov	r3, r1
 8009564:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8009566:	78fb      	ldrb	r3, [r7, #3]
 8009568:	f003 0301 	and.w	r3, r3, #1
 800956c:	2b00      	cmp	r3, #0
 800956e:	d011      	beq.n	8009594 <netif_issue_reports+0x3a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	3304      	adds	r3, #4
 8009574:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8009576:	2b00      	cmp	r3, #0
 8009578:	d00c      	beq.n	8009594 <netif_issue_reports+0x3a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8009580:	f003 0308 	and.w	r3, r3, #8
 8009584:	2b00      	cmp	r3, #0
 8009586:	d005      	beq.n	8009594 <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	3304      	adds	r3, #4
 800958c:	4619      	mov	r1, r3
 800958e:	6878      	ldr	r0, [r7, #4]
 8009590:	f007 fa40 	bl	8010a14 <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 8009594:	bf00      	nop
 8009596:	3708      	adds	r7, #8
 8009598:	46bd      	mov	sp, r7
 800959a:	bd80      	pop	{r7, pc}

0800959c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b082      	sub	sp, #8
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_UP) {
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80095aa:	f003 0301 	and.w	r3, r3, #1
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d01a      	beq.n	80095e8 <netif_set_down+0x4c>
    netif->flags &= ~NETIF_FLAG_UP;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80095b8:	f023 0301 	bic.w	r3, r3, #1
 80095bc:	b2da      	uxtb	r2, r3
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80095ca:	f003 0308 	and.w	r3, r3, #8
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d002      	beq.n	80095d8 <netif_set_down+0x3c>
      etharp_cleanup_netif(netif);
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	f006 fde4 	bl	80101a0 <etharp_cleanup_netif>

#if LWIP_IPV6
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	69db      	ldr	r3, [r3, #28]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d003      	beq.n	80095e8 <netif_set_down+0x4c>
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	69db      	ldr	r3, [r3, #28]
 80095e4:	6878      	ldr	r0, [r7, #4]
 80095e6:	4798      	blx	r3
  }
}
 80095e8:	bf00      	nop
 80095ea:	3708      	adds	r7, #8
 80095ec:	46bd      	mov	sp, r7
 80095ee:	bd80      	pop	{r7, pc}

080095f0 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b082      	sub	sp, #8
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80095fe:	f003 0304 	and.w	r3, r3, #4
 8009602:	2b00      	cmp	r3, #0
 8009604:	d11b      	bne.n	800963e <netif_set_link_up+0x4e>
    netif->flags |= NETIF_FLAG_LINK_UP;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800960c:	f043 0304 	orr.w	r3, r3, #4
 8009610:	b2da      	uxtb	r2, r3
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    if (netif->flags & NETIF_FLAG_UP) {
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800961e:	f003 0301 	and.w	r3, r3, #1
 8009622:	2b00      	cmp	r3, #0
 8009624:	d003      	beq.n	800962e <netif_set_link_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 8009626:	2103      	movs	r1, #3
 8009628:	6878      	ldr	r0, [r7, #4]
 800962a:	f7ff ff96 	bl	800955a <netif_issue_reports>
    }
    NETIF_LINK_CALLBACK(netif);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	6a1b      	ldr	r3, [r3, #32]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d003      	beq.n	800963e <netif_set_link_up+0x4e>
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	6a1b      	ldr	r3, [r3, #32]
 800963a:	6878      	ldr	r0, [r7, #4]
 800963c:	4798      	blx	r3
  }
}
 800963e:	bf00      	nop
 8009640:	3708      	adds	r7, #8
 8009642:	46bd      	mov	sp, r7
 8009644:	bd80      	pop	{r7, pc}

08009646 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif )
{
 8009646:	b580      	push	{r7, lr}
 8009648:	b082      	sub	sp, #8
 800964a:	af00      	add	r7, sp, #0
 800964c:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8009654:	f003 0304 	and.w	r3, r3, #4
 8009658:	2b00      	cmp	r3, #0
 800965a:	d010      	beq.n	800967e <netif_set_link_down+0x38>
    netif->flags &= ~NETIF_FLAG_LINK_UP;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8009662:	f023 0304 	bic.w	r3, r3, #4
 8009666:	b2da      	uxtb	r2, r3
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
    NETIF_LINK_CALLBACK(netif);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6a1b      	ldr	r3, [r3, #32]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d003      	beq.n	800967e <netif_set_link_down+0x38>
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	6a1b      	ldr	r3, [r3, #32]
 800967a:	6878      	ldr	r0, [r7, #4]
 800967c:	4798      	blx	r3
  }
}
 800967e:	bf00      	nop
 8009680:	3708      	adds	r7, #8
 8009682:	46bd      	mov	sp, r7
 8009684:	bd80      	pop	{r7, pc}

08009686 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8009686:	b480      	push	{r7}
 8009688:	b083      	sub	sp, #12
 800968a:	af00      	add	r7, sp, #0
 800968c:	6078      	str	r0, [r7, #4]
 800968e:	6039      	str	r1, [r7, #0]
  if (netif) {
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d002      	beq.n	800969c <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	683a      	ldr	r2, [r7, #0]
 800969a:	621a      	str	r2, [r3, #32]
  }
}
 800969c:	bf00      	nop
 800969e:	370c      	adds	r7, #12
 80096a0:	46bd      	mov	sp, r7
 80096a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a6:	4770      	bx	lr

080096a8 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b082      	sub	sp, #8
 80096ac:	af00      	add	r7, sp, #0
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80096ae:	4b0e      	ldr	r3, [pc, #56]	; (80096e8 <pbuf_free_ooseq+0x40>)
 80096b0:	2200      	movs	r2, #0
 80096b2:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80096b4:	4b0d      	ldr	r3, [pc, #52]	; (80096ec <pbuf_free_ooseq+0x44>)
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	607b      	str	r3, [r7, #4]
 80096ba:	e00f      	b.n	80096dc <pbuf_free_ooseq+0x34>
    if (NULL != pcb->ooseq) {
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d008      	beq.n	80096d6 <pbuf_free_ooseq+0x2e>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096c8:	4618      	mov	r0, r3
 80096ca:	f001 fe62 	bl	800b392 <tcp_segs_free>
      pcb->ooseq = NULL;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	2200      	movs	r2, #0
 80096d2:	671a      	str	r2, [r3, #112]	; 0x70
      return;
 80096d4:	e005      	b.n	80096e2 <pbuf_free_ooseq+0x3a>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	68db      	ldr	r3, [r3, #12]
 80096da:	607b      	str	r3, [r7, #4]
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d1ec      	bne.n	80096bc <pbuf_free_ooseq+0x14>
    }
  }
}
 80096e2:	3708      	adds	r7, #8
 80096e4:	46bd      	mov	sp, r7
 80096e6:	bd80      	pop	{r7, pc}
 80096e8:	2000327c 	.word	0x2000327c
 80096ec:	20003284 	.word	0x20003284

080096f0 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80096f0:	b480      	push	{r7}
 80096f2:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 80096f4:	4b03      	ldr	r3, [pc, #12]	; (8009704 <pbuf_pool_is_empty+0x14>)
 80096f6:	2201      	movs	r2, #1
 80096f8:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80096fa:	bf00      	nop
 80096fc:	46bd      	mov	sp, r7
 80096fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009702:	4770      	bx	lr
 8009704:	2000327c 	.word	0x2000327c

08009708 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b088      	sub	sp, #32
 800970c:	af00      	add	r7, sp, #0
 800970e:	4603      	mov	r3, r0
 8009710:	71fb      	strb	r3, [r7, #7]
 8009712:	460b      	mov	r3, r1
 8009714:	80bb      	strh	r3, [r7, #4]
 8009716:	4613      	mov	r3, r2
 8009718:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 800971a:	79fb      	ldrb	r3, [r7, #7]
 800971c:	2b04      	cmp	r3, #4
 800971e:	d81c      	bhi.n	800975a <pbuf_alloc+0x52>
 8009720:	a201      	add	r2, pc, #4	; (adr r2, 8009728 <pbuf_alloc+0x20>)
 8009722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009726:	bf00      	nop
 8009728:	0800973d 	.word	0x0800973d
 800972c:	08009743 	.word	0x08009743
 8009730:	08009749 	.word	0x08009749
 8009734:	0800974f 	.word	0x0800974f
 8009738:	08009755 	.word	0x08009755
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 800973c:	2336      	movs	r3, #54	; 0x36
 800973e:	82fb      	strh	r3, [r7, #22]
    break;
 8009740:	e014      	b.n	800976c <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8009742:	2322      	movs	r3, #34	; 0x22
 8009744:	82fb      	strh	r3, [r7, #22]
    break;
 8009746:	e011      	b.n	800976c <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8009748:	230e      	movs	r3, #14
 800974a:	82fb      	strh	r3, [r7, #22]
    break;
 800974c:	e00e      	b.n	800976c <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800974e:	2300      	movs	r3, #0
 8009750:	82fb      	strh	r3, [r7, #22]
    break;
 8009752:	e00b      	b.n	800976c <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 8009754:	2300      	movs	r3, #0
 8009756:	82fb      	strh	r3, [r7, #22]
    break;
 8009758:	e008      	b.n	800976c <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 800975a:	4ba5      	ldr	r3, [pc, #660]	; (80099f0 <pbuf_alloc+0x2e8>)
 800975c:	f44f 728b 	mov.w	r2, #278	; 0x116
 8009760:	49a4      	ldr	r1, [pc, #656]	; (80099f4 <pbuf_alloc+0x2ec>)
 8009762:	48a5      	ldr	r0, [pc, #660]	; (80099f8 <pbuf_alloc+0x2f0>)
 8009764:	f00a fc2a 	bl	8013fbc <iprintf>
    return NULL;
 8009768:	2300      	movs	r3, #0
 800976a:	e15d      	b.n	8009a28 <pbuf_alloc+0x320>
  }

  switch (type) {
 800976c:	79bb      	ldrb	r3, [r7, #6]
 800976e:	2b03      	cmp	r3, #3
 8009770:	f200 8134 	bhi.w	80099dc <pbuf_alloc+0x2d4>
 8009774:	a201      	add	r2, pc, #4	; (adr r2, 800977c <pbuf_alloc+0x74>)
 8009776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800977a:	bf00      	nop
 800977c:	0800991d 	.word	0x0800991d
 8009780:	080099a9 	.word	0x080099a9
 8009784:	080099a9 	.word	0x080099a9
 8009788:	0800978d 	.word	0x0800978d
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800978c:	2008      	movs	r0, #8
 800978e:	f7ff fd19 	bl	80091c4 <memp_malloc>
 8009792:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 8009794:	69fb      	ldr	r3, [r7, #28]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d103      	bne.n	80097a2 <pbuf_alloc+0x9a>
      PBUF_POOL_IS_EMPTY();
 800979a:	f7ff ffa9 	bl	80096f0 <pbuf_pool_is_empty>
      return NULL;
 800979e:	2300      	movs	r3, #0
 80097a0:	e142      	b.n	8009a28 <pbuf_alloc+0x320>
    }
    p->type = type;
 80097a2:	69fb      	ldr	r3, [r7, #28]
 80097a4:	79ba      	ldrb	r2, [r7, #6]
 80097a6:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 80097a8:	69fb      	ldr	r3, [r7, #28]
 80097aa:	2200      	movs	r2, #0
 80097ac:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 80097ae:	8afb      	ldrh	r3, [r7, #22]
 80097b0:	3310      	adds	r3, #16
 80097b2:	69fa      	ldr	r2, [r7, #28]
 80097b4:	4413      	add	r3, r2
 80097b6:	3303      	adds	r3, #3
 80097b8:	f023 0303 	bic.w	r3, r3, #3
 80097bc:	461a      	mov	r2, r3
 80097be:	69fb      	ldr	r3, [r7, #28]
 80097c0:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 80097c2:	69fb      	ldr	r3, [r7, #28]
 80097c4:	685b      	ldr	r3, [r3, #4]
 80097c6:	f003 0303 	and.w	r3, r3, #3
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d006      	beq.n	80097dc <pbuf_alloc+0xd4>
 80097ce:	4b88      	ldr	r3, [pc, #544]	; (80099f0 <pbuf_alloc+0x2e8>)
 80097d0:	f240 1229 	movw	r2, #297	; 0x129
 80097d4:	4989      	ldr	r1, [pc, #548]	; (80099fc <pbuf_alloc+0x2f4>)
 80097d6:	4888      	ldr	r0, [pc, #544]	; (80099f8 <pbuf_alloc+0x2f0>)
 80097d8:	f00a fbf0 	bl	8013fbc <iprintf>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 80097dc:	69fb      	ldr	r3, [r7, #28]
 80097de:	88ba      	ldrh	r2, [r7, #4]
 80097e0:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 80097e2:	8afb      	ldrh	r3, [r7, #22]
 80097e4:	3303      	adds	r3, #3
 80097e6:	f023 0303 	bic.w	r3, r3, #3
 80097ea:	f5c3 7214 	rsb	r2, r3, #592	; 0x250
 80097ee:	88bb      	ldrh	r3, [r7, #4]
 80097f0:	4293      	cmp	r3, r2
 80097f2:	bf28      	it	cs
 80097f4:	4613      	movcs	r3, r2
 80097f6:	b29a      	uxth	r2, r3
 80097f8:	69fb      	ldr	r3, [r7, #28]
 80097fa:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 80097fc:	69fb      	ldr	r3, [r7, #28]
 80097fe:	685b      	ldr	r3, [r3, #4]
 8009800:	69fa      	ldr	r2, [r7, #28]
 8009802:	8952      	ldrh	r2, [r2, #10]
 8009804:	441a      	add	r2, r3
 8009806:	69fb      	ldr	r3, [r7, #28]
 8009808:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800980c:	429a      	cmp	r2, r3
 800980e:	d906      	bls.n	800981e <pbuf_alloc+0x116>
 8009810:	4b77      	ldr	r3, [pc, #476]	; (80099f0 <pbuf_alloc+0x2e8>)
 8009812:	f44f 7298 	mov.w	r2, #304	; 0x130
 8009816:	497a      	ldr	r1, [pc, #488]	; (8009a00 <pbuf_alloc+0x2f8>)
 8009818:	4877      	ldr	r0, [pc, #476]	; (80099f8 <pbuf_alloc+0x2f0>)
 800981a:	f00a fbcf 	bl	8013fbc <iprintf>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800981e:	8afb      	ldrh	r3, [r7, #22]
 8009820:	3303      	adds	r3, #3
 8009822:	f023 0303 	bic.w	r3, r3, #3
 8009826:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800982a:	d106      	bne.n	800983a <pbuf_alloc+0x132>
 800982c:	4b70      	ldr	r3, [pc, #448]	; (80099f0 <pbuf_alloc+0x2e8>)
 800982e:	f44f 7299 	mov.w	r2, #306	; 0x132
 8009832:	4974      	ldr	r1, [pc, #464]	; (8009a04 <pbuf_alloc+0x2fc>)
 8009834:	4870      	ldr	r0, [pc, #448]	; (80099f8 <pbuf_alloc+0x2f0>)
 8009836:	f00a fbc1 	bl	8013fbc <iprintf>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 800983a:	69fb      	ldr	r3, [r7, #28]
 800983c:	2201      	movs	r2, #1
 800983e:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 8009840:	69fb      	ldr	r3, [r7, #28]
 8009842:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 8009844:	88bb      	ldrh	r3, [r7, #4]
 8009846:	69fa      	ldr	r2, [r7, #28]
 8009848:	8952      	ldrh	r2, [r2, #10]
 800984a:	1a9b      	subs	r3, r3, r2
 800984c:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 800984e:	e061      	b.n	8009914 <pbuf_alloc+0x20c>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8009850:	2008      	movs	r0, #8
 8009852:	f7ff fcb7 	bl	80091c4 <memp_malloc>
 8009856:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d106      	bne.n	800986c <pbuf_alloc+0x164>
        PBUF_POOL_IS_EMPTY();
 800985e:	f7ff ff47 	bl	80096f0 <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 8009862:	69f8      	ldr	r0, [r7, #28]
 8009864:	f000 fac2 	bl	8009dec <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 8009868:	2300      	movs	r3, #0
 800986a:	e0dd      	b.n	8009a28 <pbuf_alloc+0x320>
      }
      q->type = type;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	79ba      	ldrb	r2, [r7, #6]
 8009870:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	2200      	movs	r2, #0
 8009876:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	2200      	movs	r2, #0
 800987c:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 800987e:	69bb      	ldr	r3, [r7, #24]
 8009880:	68fa      	ldr	r2, [r7, #12]
 8009882:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8009884:	693b      	ldr	r3, [r7, #16]
 8009886:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800988a:	4293      	cmp	r3, r2
 800988c:	dd06      	ble.n	800989c <pbuf_alloc+0x194>
 800988e:	4b58      	ldr	r3, [pc, #352]	; (80099f0 <pbuf_alloc+0x2e8>)
 8009890:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 8009894:	495c      	ldr	r1, [pc, #368]	; (8009a08 <pbuf_alloc+0x300>)
 8009896:	4858      	ldr	r0, [pc, #352]	; (80099f8 <pbuf_alloc+0x2f0>)
 8009898:	f00a fb90 	bl	8013fbc <iprintf>
      q->tot_len = (u16_t)rem_len;
 800989c:	693b      	ldr	r3, [r7, #16]
 800989e:	b29a      	uxth	r2, r3
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 80098a4:	693b      	ldr	r3, [r7, #16]
 80098a6:	b29b      	uxth	r3, r3
 80098a8:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 80098ac:	bf28      	it	cs
 80098ae:	f44f 7314 	movcs.w	r3, #592	; 0x250
 80098b2:	b29a      	uxth	r2, r3
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	f103 0210 	add.w	r2, r3, #16
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	685b      	ldr	r3, [r3, #4]
 80098c6:	f003 0303 	and.w	r3, r3, #3
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d006      	beq.n	80098dc <pbuf_alloc+0x1d4>
 80098ce:	4b48      	ldr	r3, [pc, #288]	; (80099f0 <pbuf_alloc+0x2e8>)
 80098d0:	f44f 72a9 	mov.w	r2, #338	; 0x152
 80098d4:	494d      	ldr	r1, [pc, #308]	; (8009a0c <pbuf_alloc+0x304>)
 80098d6:	4848      	ldr	r0, [pc, #288]	; (80099f8 <pbuf_alloc+0x2f0>)
 80098d8:	f00a fb70 	bl	8013fbc <iprintf>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 80098dc:	69fb      	ldr	r3, [r7, #28]
 80098de:	685b      	ldr	r3, [r3, #4]
 80098e0:	69fa      	ldr	r2, [r7, #28]
 80098e2:	8952      	ldrh	r2, [r2, #10]
 80098e4:	441a      	add	r2, r3
 80098e6:	69fb      	ldr	r3, [r7, #28]
 80098e8:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80098ec:	429a      	cmp	r2, r3
 80098ee:	d906      	bls.n	80098fe <pbuf_alloc+0x1f6>
 80098f0:	4b3f      	ldr	r3, [pc, #252]	; (80099f0 <pbuf_alloc+0x2e8>)
 80098f2:	f240 1255 	movw	r2, #341	; 0x155
 80098f6:	4942      	ldr	r1, [pc, #264]	; (8009a00 <pbuf_alloc+0x2f8>)
 80098f8:	483f      	ldr	r0, [pc, #252]	; (80099f8 <pbuf_alloc+0x2f0>)
 80098fa:	f00a fb5f 	bl	8013fbc <iprintf>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	2201      	movs	r2, #1
 8009902:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	895b      	ldrh	r3, [r3, #10]
 8009908:	461a      	mov	r2, r3
 800990a:	693b      	ldr	r3, [r7, #16]
 800990c:	1a9b      	subs	r3, r3, r2
 800990e:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 8009914:	693b      	ldr	r3, [r7, #16]
 8009916:	2b00      	cmp	r3, #0
 8009918:	dc9a      	bgt.n	8009850 <pbuf_alloc+0x148>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 800991a:	e07e      	b.n	8009a1a <pbuf_alloc+0x312>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 800991c:	8afb      	ldrh	r3, [r7, #22]
 800991e:	3313      	adds	r3, #19
 8009920:	b29b      	uxth	r3, r3
 8009922:	f023 0303 	bic.w	r3, r3, #3
 8009926:	b29a      	uxth	r2, r3
 8009928:	88bb      	ldrh	r3, [r7, #4]
 800992a:	3303      	adds	r3, #3
 800992c:	b29b      	uxth	r3, r3
 800992e:	f023 0303 	bic.w	r3, r3, #3
 8009932:	b29b      	uxth	r3, r3
 8009934:	4413      	add	r3, r2
 8009936:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 8009938:	897a      	ldrh	r2, [r7, #10]
 800993a:	88bb      	ldrh	r3, [r7, #4]
 800993c:	3303      	adds	r3, #3
 800993e:	f023 0303 	bic.w	r3, r3, #3
 8009942:	429a      	cmp	r2, r3
 8009944:	d201      	bcs.n	800994a <pbuf_alloc+0x242>
        return NULL;
 8009946:	2300      	movs	r3, #0
 8009948:	e06e      	b.n	8009a28 <pbuf_alloc+0x320>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 800994a:	897b      	ldrh	r3, [r7, #10]
 800994c:	4618      	mov	r0, r3
 800994e:	f7ff fab9 	bl	8008ec4 <mem_malloc>
 8009952:	61f8      	str	r0, [r7, #28]
    }

    if (p == NULL) {
 8009954:	69fb      	ldr	r3, [r7, #28]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d101      	bne.n	800995e <pbuf_alloc+0x256>
      return NULL;
 800995a:	2300      	movs	r3, #0
 800995c:	e064      	b.n	8009a28 <pbuf_alloc+0x320>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 800995e:	8afb      	ldrh	r3, [r7, #22]
 8009960:	3310      	adds	r3, #16
 8009962:	69fa      	ldr	r2, [r7, #28]
 8009964:	4413      	add	r3, r2
 8009966:	3303      	adds	r3, #3
 8009968:	f023 0303 	bic.w	r3, r3, #3
 800996c:	461a      	mov	r2, r3
 800996e:	69fb      	ldr	r3, [r7, #28]
 8009970:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 8009972:	69fb      	ldr	r3, [r7, #28]
 8009974:	88ba      	ldrh	r2, [r7, #4]
 8009976:	811a      	strh	r2, [r3, #8]
 8009978:	69fb      	ldr	r3, [r7, #28]
 800997a:	891a      	ldrh	r2, [r3, #8]
 800997c:	69fb      	ldr	r3, [r7, #28]
 800997e:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 8009980:	69fb      	ldr	r3, [r7, #28]
 8009982:	2200      	movs	r2, #0
 8009984:	601a      	str	r2, [r3, #0]
    p->type = type;
 8009986:	69fb      	ldr	r3, [r7, #28]
 8009988:	79ba      	ldrb	r2, [r7, #6]
 800998a:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800998c:	69fb      	ldr	r3, [r7, #28]
 800998e:	685b      	ldr	r3, [r3, #4]
 8009990:	f003 0303 	and.w	r3, r3, #3
 8009994:	2b00      	cmp	r3, #0
 8009996:	d03f      	beq.n	8009a18 <pbuf_alloc+0x310>
 8009998:	4b15      	ldr	r3, [pc, #84]	; (80099f0 <pbuf_alloc+0x2e8>)
 800999a:	f240 1277 	movw	r2, #375	; 0x177
 800999e:	491c      	ldr	r1, [pc, #112]	; (8009a10 <pbuf_alloc+0x308>)
 80099a0:	4815      	ldr	r0, [pc, #84]	; (80099f8 <pbuf_alloc+0x2f0>)
 80099a2:	f00a fb0b 	bl	8013fbc <iprintf>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 80099a6:	e037      	b.n	8009a18 <pbuf_alloc+0x310>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80099a8:	2007      	movs	r0, #7
 80099aa:	f7ff fc0b 	bl	80091c4 <memp_malloc>
 80099ae:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 80099b0:	69fb      	ldr	r3, [r7, #28]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d101      	bne.n	80099ba <pbuf_alloc+0x2b2>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 80099b6:	2300      	movs	r3, #0
 80099b8:	e036      	b.n	8009a28 <pbuf_alloc+0x320>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 80099ba:	69fb      	ldr	r3, [r7, #28]
 80099bc:	2200      	movs	r2, #0
 80099be:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 80099c0:	69fb      	ldr	r3, [r7, #28]
 80099c2:	88ba      	ldrh	r2, [r7, #4]
 80099c4:	811a      	strh	r2, [r3, #8]
 80099c6:	69fb      	ldr	r3, [r7, #28]
 80099c8:	891a      	ldrh	r2, [r3, #8]
 80099ca:	69fb      	ldr	r3, [r7, #28]
 80099cc:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 80099ce:	69fb      	ldr	r3, [r7, #28]
 80099d0:	2200      	movs	r2, #0
 80099d2:	601a      	str	r2, [r3, #0]
    p->type = type;
 80099d4:	69fb      	ldr	r3, [r7, #28]
 80099d6:	79ba      	ldrb	r2, [r7, #6]
 80099d8:	731a      	strb	r2, [r3, #12]
    break;
 80099da:	e01e      	b.n	8009a1a <pbuf_alloc+0x312>
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80099dc:	4b04      	ldr	r3, [pc, #16]	; (80099f0 <pbuf_alloc+0x2e8>)
 80099de:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 80099e2:	490c      	ldr	r1, [pc, #48]	; (8009a14 <pbuf_alloc+0x30c>)
 80099e4:	4804      	ldr	r0, [pc, #16]	; (80099f8 <pbuf_alloc+0x2f0>)
 80099e6:	f00a fae9 	bl	8013fbc <iprintf>
    return NULL;
 80099ea:	2300      	movs	r3, #0
 80099ec:	e01c      	b.n	8009a28 <pbuf_alloc+0x320>
 80099ee:	bf00      	nop
 80099f0:	08015114 	.word	0x08015114
 80099f4:	0801517c 	.word	0x0801517c
 80099f8:	08015198 	.word	0x08015198
 80099fc:	080151c0 	.word	0x080151c0
 8009a00:	080151f0 	.word	0x080151f0
 8009a04:	08015224 	.word	0x08015224
 8009a08:	08015258 	.word	0x08015258
 8009a0c:	0801526c 	.word	0x0801526c
 8009a10:	0801529c 	.word	0x0801529c
 8009a14:	080152c8 	.word	0x080152c8
    break;
 8009a18:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 8009a1a:	69fb      	ldr	r3, [r7, #28]
 8009a1c:	2201      	movs	r2, #1
 8009a1e:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 8009a20:	69fb      	ldr	r3, [r7, #28]
 8009a22:	2200      	movs	r2, #0
 8009a24:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8009a26:	69fb      	ldr	r3, [r7, #28]
}
 8009a28:	4618      	mov	r0, r3
 8009a2a:	3720      	adds	r7, #32
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	bd80      	pop	{r7, pc}

08009a30 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b084      	sub	sp, #16
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	603b      	str	r3, [r7, #0]
 8009a38:	4603      	mov	r3, r0
 8009a3a:	71fb      	strb	r3, [r7, #7]
 8009a3c:	460b      	mov	r3, r1
 8009a3e:	80bb      	strh	r3, [r7, #4]
 8009a40:	4613      	mov	r3, r2
 8009a42:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 8009a44:	79fb      	ldrb	r3, [r7, #7]
 8009a46:	2b04      	cmp	r3, #4
 8009a48:	d81b      	bhi.n	8009a82 <pbuf_alloced_custom+0x52>
 8009a4a:	a201      	add	r2, pc, #4	; (adr r2, 8009a50 <pbuf_alloced_custom+0x20>)
 8009a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a50:	08009a65 	.word	0x08009a65
 8009a54:	08009a6b 	.word	0x08009a6b
 8009a58:	08009a71 	.word	0x08009a71
 8009a5c:	08009a77 	.word	0x08009a77
 8009a60:	08009a7d 	.word	0x08009a7d
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8009a64:	2336      	movs	r3, #54	; 0x36
 8009a66:	81fb      	strh	r3, [r7, #14]
    break;
 8009a68:	e014      	b.n	8009a94 <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8009a6a:	2322      	movs	r3, #34	; 0x22
 8009a6c:	81fb      	strh	r3, [r7, #14]
    break;
 8009a6e:	e011      	b.n	8009a94 <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8009a70:	230e      	movs	r3, #14
 8009a72:	81fb      	strh	r3, [r7, #14]
    break;
 8009a74:	e00e      	b.n	8009a94 <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 8009a76:	2300      	movs	r3, #0
 8009a78:	81fb      	strh	r3, [r7, #14]
    break;
 8009a7a:	e00b      	b.n	8009a94 <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	81fb      	strh	r3, [r7, #14]
    break;
 8009a80:	e008      	b.n	8009a94 <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 8009a82:	4b1d      	ldr	r3, [pc, #116]	; (8009af8 <pbuf_alloced_custom+0xc8>)
 8009a84:	f240 12c5 	movw	r2, #453	; 0x1c5
 8009a88:	491c      	ldr	r1, [pc, #112]	; (8009afc <pbuf_alloced_custom+0xcc>)
 8009a8a:	481d      	ldr	r0, [pc, #116]	; (8009b00 <pbuf_alloced_custom+0xd0>)
 8009a8c:	f00a fa96 	bl	8013fbc <iprintf>
    return NULL;
 8009a90:	2300      	movs	r3, #0
 8009a92:	e02d      	b.n	8009af0 <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8009a94:	89fb      	ldrh	r3, [r7, #14]
 8009a96:	3303      	adds	r3, #3
 8009a98:	f023 0203 	bic.w	r2, r3, #3
 8009a9c:	88bb      	ldrh	r3, [r7, #4]
 8009a9e:	441a      	add	r2, r3
 8009aa0:	8bbb      	ldrh	r3, [r7, #28]
 8009aa2:	429a      	cmp	r2, r3
 8009aa4:	d901      	bls.n	8009aaa <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	e022      	b.n	8009af0 <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	2200      	movs	r2, #0
 8009aae:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 8009ab0:	69bb      	ldr	r3, [r7, #24]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d008      	beq.n	8009ac8 <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8009ab6:	89fb      	ldrh	r3, [r7, #14]
 8009ab8:	3303      	adds	r3, #3
 8009aba:	f023 0303 	bic.w	r3, r3, #3
 8009abe:	69ba      	ldr	r2, [r7, #24]
 8009ac0:	441a      	add	r2, r3
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	605a      	str	r2, [r3, #4]
 8009ac6:	e002      	b.n	8009ace <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 8009ac8:	683b      	ldr	r3, [r7, #0]
 8009aca:	2200      	movs	r2, #0
 8009acc:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	2202      	movs	r2, #2
 8009ad2:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 8009ad4:	683b      	ldr	r3, [r7, #0]
 8009ad6:	88ba      	ldrh	r2, [r7, #4]
 8009ad8:	811a      	strh	r2, [r3, #8]
 8009ada:	683b      	ldr	r3, [r7, #0]
 8009adc:	891a      	ldrh	r2, [r3, #8]
 8009ade:	683b      	ldr	r3, [r7, #0]
 8009ae0:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	79ba      	ldrb	r2, [r7, #6]
 8009ae6:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	2201      	movs	r2, #1
 8009aec:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 8009aee:	683b      	ldr	r3, [r7, #0]
}
 8009af0:	4618      	mov	r0, r3
 8009af2:	3710      	adds	r7, #16
 8009af4:	46bd      	mov	sp, r7
 8009af6:	bd80      	pop	{r7, pc}
 8009af8:	08015114 	.word	0x08015114
 8009afc:	080152e4 	.word	0x080152e4
 8009b00:	08015198 	.word	0x08015198

08009b04 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b086      	sub	sp, #24
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
 8009b0c:	460b      	mov	r3, r1
 8009b0e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d106      	bne.n	8009b24 <pbuf_realloc+0x20>
 8009b16:	4b4b      	ldr	r3, [pc, #300]	; (8009c44 <pbuf_realloc+0x140>)
 8009b18:	f240 12f3 	movw	r2, #499	; 0x1f3
 8009b1c:	494a      	ldr	r1, [pc, #296]	; (8009c48 <pbuf_realloc+0x144>)
 8009b1e:	484b      	ldr	r0, [pc, #300]	; (8009c4c <pbuf_realloc+0x148>)
 8009b20:	f00a fa4c 	bl	8013fbc <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	7b1b      	ldrb	r3, [r3, #12]
 8009b28:	2b03      	cmp	r3, #3
 8009b2a:	d012      	beq.n	8009b52 <pbuf_realloc+0x4e>
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	7b1b      	ldrb	r3, [r3, #12]
 8009b30:	2b01      	cmp	r3, #1
 8009b32:	d00e      	beq.n	8009b52 <pbuf_realloc+0x4e>
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	7b1b      	ldrb	r3, [r3, #12]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d00a      	beq.n	8009b52 <pbuf_realloc+0x4e>
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	7b1b      	ldrb	r3, [r3, #12]
 8009b40:	2b02      	cmp	r3, #2
 8009b42:	d006      	beq.n	8009b52 <pbuf_realloc+0x4e>
 8009b44:	4b3f      	ldr	r3, [pc, #252]	; (8009c44 <pbuf_realloc+0x140>)
 8009b46:	f240 12f7 	movw	r2, #503	; 0x1f7
 8009b4a:	4941      	ldr	r1, [pc, #260]	; (8009c50 <pbuf_realloc+0x14c>)
 8009b4c:	483f      	ldr	r0, [pc, #252]	; (8009c4c <pbuf_realloc+0x148>)
 8009b4e:	f00a fa35 	bl	8013fbc <iprintf>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	891b      	ldrh	r3, [r3, #8]
 8009b56:	887a      	ldrh	r2, [r7, #2]
 8009b58:	429a      	cmp	r2, r3
 8009b5a:	d26f      	bcs.n	8009c3c <pbuf_realloc+0x138>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 8009b5c:	887b      	ldrh	r3, [r7, #2]
 8009b5e:	687a      	ldr	r2, [r7, #4]
 8009b60:	8912      	ldrh	r2, [r2, #8]
 8009b62:	1a9b      	subs	r3, r3, r2
 8009b64:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8009b66:	887b      	ldrh	r3, [r7, #2]
 8009b68:	827b      	strh	r3, [r7, #18]
  q = p;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8009b6e:	e025      	b.n	8009bbc <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 8009b70:	697b      	ldr	r3, [r7, #20]
 8009b72:	895b      	ldrh	r3, [r3, #10]
 8009b74:	8a7a      	ldrh	r2, [r7, #18]
 8009b76:	1ad3      	subs	r3, r2, r3
 8009b78:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009b80:	4293      	cmp	r3, r2
 8009b82:	dd06      	ble.n	8009b92 <pbuf_realloc+0x8e>
 8009b84:	4b2f      	ldr	r3, [pc, #188]	; (8009c44 <pbuf_realloc+0x140>)
 8009b86:	f240 220b 	movw	r2, #523	; 0x20b
 8009b8a:	4932      	ldr	r1, [pc, #200]	; (8009c54 <pbuf_realloc+0x150>)
 8009b8c:	482f      	ldr	r0, [pc, #188]	; (8009c4c <pbuf_realloc+0x148>)
 8009b8e:	f00a fa15 	bl	8013fbc <iprintf>
    q->tot_len += (u16_t)grow;
 8009b92:	697b      	ldr	r3, [r7, #20]
 8009b94:	891a      	ldrh	r2, [r3, #8]
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	b29b      	uxth	r3, r3
 8009b9a:	4413      	add	r3, r2
 8009b9c:	b29a      	uxth	r2, r3
 8009b9e:	697b      	ldr	r3, [r7, #20]
 8009ba0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8009ba2:	697b      	ldr	r3, [r7, #20]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8009ba8:	697b      	ldr	r3, [r7, #20]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d106      	bne.n	8009bbc <pbuf_realloc+0xb8>
 8009bae:	4b25      	ldr	r3, [pc, #148]	; (8009c44 <pbuf_realloc+0x140>)
 8009bb0:	f240 220f 	movw	r2, #527	; 0x20f
 8009bb4:	4928      	ldr	r1, [pc, #160]	; (8009c58 <pbuf_realloc+0x154>)
 8009bb6:	4825      	ldr	r0, [pc, #148]	; (8009c4c <pbuf_realloc+0x148>)
 8009bb8:	f00a fa00 	bl	8013fbc <iprintf>
  while (rem_len > q->len) {
 8009bbc:	697b      	ldr	r3, [r7, #20]
 8009bbe:	895b      	ldrh	r3, [r3, #10]
 8009bc0:	8a7a      	ldrh	r2, [r7, #18]
 8009bc2:	429a      	cmp	r2, r3
 8009bc4:	d8d4      	bhi.n	8009b70 <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 8009bc6:	697b      	ldr	r3, [r7, #20]
 8009bc8:	7b1b      	ldrb	r3, [r3, #12]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d122      	bne.n	8009c14 <pbuf_realloc+0x110>
 8009bce:	697b      	ldr	r3, [r7, #20]
 8009bd0:	895b      	ldrh	r3, [r3, #10]
 8009bd2:	8a7a      	ldrh	r2, [r7, #18]
 8009bd4:	429a      	cmp	r2, r3
 8009bd6:	d01d      	beq.n	8009c14 <pbuf_realloc+0x110>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8009bd8:	697b      	ldr	r3, [r7, #20]
 8009bda:	7b5b      	ldrb	r3, [r3, #13]
 8009bdc:	f003 0302 	and.w	r3, r3, #2
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d117      	bne.n	8009c14 <pbuf_realloc+0x110>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 8009be4:	697b      	ldr	r3, [r7, #20]
 8009be6:	685b      	ldr	r3, [r3, #4]
 8009be8:	461a      	mov	r2, r3
 8009bea:	697b      	ldr	r3, [r7, #20]
 8009bec:	1ad3      	subs	r3, r2, r3
 8009bee:	b29a      	uxth	r2, r3
 8009bf0:	8a7b      	ldrh	r3, [r7, #18]
 8009bf2:	4413      	add	r3, r2
 8009bf4:	b29b      	uxth	r3, r3
 8009bf6:	4619      	mov	r1, r3
 8009bf8:	6978      	ldr	r0, [r7, #20]
 8009bfa:	f7ff f887 	bl	8008d0c <mem_trim>
 8009bfe:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8009c00:	697b      	ldr	r3, [r7, #20]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d106      	bne.n	8009c14 <pbuf_realloc+0x110>
 8009c06:	4b0f      	ldr	r3, [pc, #60]	; (8009c44 <pbuf_realloc+0x140>)
 8009c08:	f240 221d 	movw	r2, #541	; 0x21d
 8009c0c:	4913      	ldr	r1, [pc, #76]	; (8009c5c <pbuf_realloc+0x158>)
 8009c0e:	480f      	ldr	r0, [pc, #60]	; (8009c4c <pbuf_realloc+0x148>)
 8009c10:	f00a f9d4 	bl	8013fbc <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8009c14:	697b      	ldr	r3, [r7, #20]
 8009c16:	8a7a      	ldrh	r2, [r7, #18]
 8009c18:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8009c1a:	697b      	ldr	r3, [r7, #20]
 8009c1c:	895a      	ldrh	r2, [r3, #10]
 8009c1e:	697b      	ldr	r3, [r7, #20]
 8009c20:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8009c22:	697b      	ldr	r3, [r7, #20]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d004      	beq.n	8009c34 <pbuf_realloc+0x130>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8009c2a:	697b      	ldr	r3, [r7, #20]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	4618      	mov	r0, r3
 8009c30:	f000 f8dc 	bl	8009dec <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8009c34:	697b      	ldr	r3, [r7, #20]
 8009c36:	2200      	movs	r2, #0
 8009c38:	601a      	str	r2, [r3, #0]
 8009c3a:	e000      	b.n	8009c3e <pbuf_realloc+0x13a>
    return;
 8009c3c:	bf00      	nop

}
 8009c3e:	3718      	adds	r7, #24
 8009c40:	46bd      	mov	sp, r7
 8009c42:	bd80      	pop	{r7, pc}
 8009c44:	08015114 	.word	0x08015114
 8009c48:	08015308 	.word	0x08015308
 8009c4c:	08015198 	.word	0x08015198
 8009c50:	08015320 	.word	0x08015320
 8009c54:	0801533c 	.word	0x0801533c
 8009c58:	08015350 	.word	0x08015350
 8009c5c:	08015368 	.word	0x08015368

08009c60 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b084      	sub	sp, #16
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
 8009c68:	460b      	mov	r3, r1
 8009c6a:	807b      	strh	r3, [r7, #2]
 8009c6c:	4613      	mov	r3, r2
 8009c6e:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d106      	bne.n	8009c84 <pbuf_header_impl+0x24>
 8009c76:	4b46      	ldr	r3, [pc, #280]	; (8009d90 <pbuf_header_impl+0x130>)
 8009c78:	f240 223f 	movw	r2, #575	; 0x23f
 8009c7c:	4945      	ldr	r1, [pc, #276]	; (8009d94 <pbuf_header_impl+0x134>)
 8009c7e:	4846      	ldr	r0, [pc, #280]	; (8009d98 <pbuf_header_impl+0x138>)
 8009c80:	f00a f99c 	bl	8013fbc <iprintf>
  if ((header_size_increment == 0) || (p == NULL)) {
 8009c84:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d002      	beq.n	8009c92 <pbuf_header_impl+0x32>
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d101      	bne.n	8009c96 <pbuf_header_impl+0x36>
    return 0;
 8009c92:	2300      	movs	r3, #0
 8009c94:	e078      	b.n	8009d88 <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 8009c96:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	da10      	bge.n	8009cc0 <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 8009c9e:	887b      	ldrh	r3, [r7, #2]
 8009ca0:	425b      	negs	r3, r3
 8009ca2:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	895b      	ldrh	r3, [r3, #10]
 8009ca8:	89fa      	ldrh	r2, [r7, #14]
 8009caa:	429a      	cmp	r2, r3
 8009cac:	d90a      	bls.n	8009cc4 <pbuf_header_impl+0x64>
 8009cae:	4b38      	ldr	r3, [pc, #224]	; (8009d90 <pbuf_header_impl+0x130>)
 8009cb0:	f240 2247 	movw	r2, #583	; 0x247
 8009cb4:	4939      	ldr	r1, [pc, #228]	; (8009d9c <pbuf_header_impl+0x13c>)
 8009cb6:	4838      	ldr	r0, [pc, #224]	; (8009d98 <pbuf_header_impl+0x138>)
 8009cb8:	f00a f980 	bl	8013fbc <iprintf>
 8009cbc:	2301      	movs	r3, #1
 8009cbe:	e063      	b.n	8009d88 <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 8009cc0:	887b      	ldrh	r3, [r7, #2]
 8009cc2:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	7b1b      	ldrb	r3, [r3, #12]
 8009cc8:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	685b      	ldr	r3, [r3, #4]
 8009cce:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 8009cd0:	89bb      	ldrh	r3, [r7, #12]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d002      	beq.n	8009cdc <pbuf_header_impl+0x7c>
 8009cd6:	89bb      	ldrh	r3, [r7, #12]
 8009cd8:	2b03      	cmp	r3, #3
 8009cda:	d112      	bne.n	8009d02 <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	685a      	ldr	r2, [r3, #4]
 8009ce0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009ce4:	425b      	negs	r3, r3
 8009ce6:	441a      	add	r2, r3
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	685a      	ldr	r2, [r3, #4]
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	3310      	adds	r3, #16
 8009cf4:	429a      	cmp	r2, r3
 8009cf6:	d238      	bcs.n	8009d6a <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	68ba      	ldr	r2, [r7, #8]
 8009cfc:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 8009cfe:	2301      	movs	r3, #1
 8009d00:	e042      	b.n	8009d88 <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 8009d02:	89bb      	ldrh	r3, [r7, #12]
 8009d04:	2b02      	cmp	r3, #2
 8009d06:	d002      	beq.n	8009d0e <pbuf_header_impl+0xae>
 8009d08:	89bb      	ldrh	r3, [r7, #12]
 8009d0a:	2b01      	cmp	r3, #1
 8009d0c:	d124      	bne.n	8009d58 <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8009d0e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	da0d      	bge.n	8009d32 <pbuf_header_impl+0xd2>
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	895b      	ldrh	r3, [r3, #10]
 8009d1a:	89fa      	ldrh	r2, [r7, #14]
 8009d1c:	429a      	cmp	r2, r3
 8009d1e:	d808      	bhi.n	8009d32 <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	685a      	ldr	r2, [r3, #4]
 8009d24:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009d28:	425b      	negs	r3, r3
 8009d2a:	441a      	add	r2, r3
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	605a      	str	r2, [r3, #4]
 8009d30:	e011      	b.n	8009d56 <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 8009d32:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	dd0b      	ble.n	8009d52 <pbuf_header_impl+0xf2>
 8009d3a:	787b      	ldrb	r3, [r7, #1]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d008      	beq.n	8009d52 <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	685a      	ldr	r2, [r3, #4]
 8009d44:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009d48:	425b      	negs	r3, r3
 8009d4a:	441a      	add	r2, r3
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	605a      	str	r2, [r3, #4]
 8009d50:	e001      	b.n	8009d56 <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8009d52:	2301      	movs	r3, #1
 8009d54:	e018      	b.n	8009d88 <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8009d56:	e008      	b.n	8009d6a <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 8009d58:	4b0d      	ldr	r3, [pc, #52]	; (8009d90 <pbuf_header_impl+0x130>)
 8009d5a:	f240 2277 	movw	r2, #631	; 0x277
 8009d5e:	4910      	ldr	r1, [pc, #64]	; (8009da0 <pbuf_header_impl+0x140>)
 8009d60:	480d      	ldr	r0, [pc, #52]	; (8009d98 <pbuf_header_impl+0x138>)
 8009d62:	f00a f92b 	bl	8013fbc <iprintf>
    return 1;
 8009d66:	2301      	movs	r3, #1
 8009d68:	e00e      	b.n	8009d88 <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	895a      	ldrh	r2, [r3, #10]
 8009d6e:	887b      	ldrh	r3, [r7, #2]
 8009d70:	4413      	add	r3, r2
 8009d72:	b29a      	uxth	r2, r3
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	891a      	ldrh	r2, [r3, #8]
 8009d7c:	887b      	ldrh	r3, [r7, #2]
 8009d7e:	4413      	add	r3, r2
 8009d80:	b29a      	uxth	r2, r3
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 8009d86:	2300      	movs	r3, #0
}
 8009d88:	4618      	mov	r0, r3
 8009d8a:	3710      	adds	r7, #16
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	bd80      	pop	{r7, pc}
 8009d90:	08015114 	.word	0x08015114
 8009d94:	08015384 	.word	0x08015384
 8009d98:	08015198 	.word	0x08015198
 8009d9c:	08015390 	.word	0x08015390
 8009da0:	080153b0 	.word	0x080153b0

08009da4 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b082      	sub	sp, #8
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
 8009dac:	460b      	mov	r3, r1
 8009dae:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 8009db0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009db4:	2200      	movs	r2, #0
 8009db6:	4619      	mov	r1, r3
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	f7ff ff51 	bl	8009c60 <pbuf_header_impl>
 8009dbe:	4603      	mov	r3, r0
}
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	3708      	adds	r7, #8
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	bd80      	pop	{r7, pc}

08009dc8 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b082      	sub	sp, #8
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
 8009dd0:	460b      	mov	r3, r1
 8009dd2:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 8009dd4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009dd8:	2201      	movs	r2, #1
 8009dda:	4619      	mov	r1, r3
 8009ddc:	6878      	ldr	r0, [r7, #4]
 8009dde:	f7ff ff3f 	bl	8009c60 <pbuf_header_impl>
 8009de2:	4603      	mov	r3, r0
}
 8009de4:	4618      	mov	r0, r3
 8009de6:	3708      	adds	r7, #8
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bd80      	pop	{r7, pc}

08009dec <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b086      	sub	sp, #24
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d10b      	bne.n	8009e12 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d106      	bne.n	8009e0e <pbuf_free+0x22>
 8009e00:	4b3e      	ldr	r3, [pc, #248]	; (8009efc <pbuf_free+0x110>)
 8009e02:	f240 22d2 	movw	r2, #722	; 0x2d2
 8009e06:	493e      	ldr	r1, [pc, #248]	; (8009f00 <pbuf_free+0x114>)
 8009e08:	483e      	ldr	r0, [pc, #248]	; (8009f04 <pbuf_free+0x118>)
 8009e0a:	f00a f8d7 	bl	8013fbc <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8009e0e:	2300      	movs	r3, #0
 8009e10:	e070      	b.n	8009ef4 <pbuf_free+0x108>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	7b1b      	ldrb	r3, [r3, #12]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d012      	beq.n	8009e40 <pbuf_free+0x54>
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	7b1b      	ldrb	r3, [r3, #12]
 8009e1e:	2b01      	cmp	r3, #1
 8009e20:	d00e      	beq.n	8009e40 <pbuf_free+0x54>
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	7b1b      	ldrb	r3, [r3, #12]
 8009e26:	2b02      	cmp	r3, #2
 8009e28:	d00a      	beq.n	8009e40 <pbuf_free+0x54>
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	7b1b      	ldrb	r3, [r3, #12]
 8009e2e:	2b03      	cmp	r3, #3
 8009e30:	d006      	beq.n	8009e40 <pbuf_free+0x54>
 8009e32:	4b32      	ldr	r3, [pc, #200]	; (8009efc <pbuf_free+0x110>)
 8009e34:	f240 22de 	movw	r2, #734	; 0x2de
 8009e38:	4933      	ldr	r1, [pc, #204]	; (8009f08 <pbuf_free+0x11c>)
 8009e3a:	4832      	ldr	r0, [pc, #200]	; (8009f04 <pbuf_free+0x118>)
 8009e3c:	f00a f8be 	bl	8013fbc <iprintf>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 8009e40:	2300      	movs	r3, #0
 8009e42:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8009e44:	e052      	b.n	8009eec <pbuf_free+0x100>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	89db      	ldrh	r3, [r3, #14]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d106      	bne.n	8009e5c <pbuf_free+0x70>
 8009e4e:	4b2b      	ldr	r3, [pc, #172]	; (8009efc <pbuf_free+0x110>)
 8009e50:	f240 22eb 	movw	r2, #747	; 0x2eb
 8009e54:	492d      	ldr	r1, [pc, #180]	; (8009f0c <pbuf_free+0x120>)
 8009e56:	482b      	ldr	r0, [pc, #172]	; (8009f04 <pbuf_free+0x118>)
 8009e58:	f00a f8b0 	bl	8013fbc <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	89db      	ldrh	r3, [r3, #14]
 8009e60:	3b01      	subs	r3, #1
 8009e62:	b29a      	uxth	r2, r3
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	81da      	strh	r2, [r3, #14]
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	89db      	ldrh	r3, [r3, #14]
 8009e6c:	82bb      	strh	r3, [r7, #20]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8009e6e:	8abb      	ldrh	r3, [r7, #20]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d139      	bne.n	8009ee8 <pbuf_free+0xfc>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	7b1b      	ldrb	r3, [r3, #12]
 8009e7e:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	7b5b      	ldrb	r3, [r3, #13]
 8009e84:	f003 0302 	and.w	r3, r3, #2
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d011      	beq.n	8009eb0 <pbuf_free+0xc4>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8009e90:	68bb      	ldr	r3, [r7, #8]
 8009e92:	691b      	ldr	r3, [r3, #16]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d106      	bne.n	8009ea6 <pbuf_free+0xba>
 8009e98:	4b18      	ldr	r3, [pc, #96]	; (8009efc <pbuf_free+0x110>)
 8009e9a:	f240 22f9 	movw	r2, #761	; 0x2f9
 8009e9e:	491c      	ldr	r1, [pc, #112]	; (8009f10 <pbuf_free+0x124>)
 8009ea0:	4818      	ldr	r0, [pc, #96]	; (8009f04 <pbuf_free+0x118>)
 8009ea2:	f00a f88b 	bl	8013fbc <iprintf>
        pc->custom_free_function(p);
 8009ea6:	68bb      	ldr	r3, [r7, #8]
 8009ea8:	691b      	ldr	r3, [r3, #16]
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	4798      	blx	r3
 8009eae:	e015      	b.n	8009edc <pbuf_free+0xf0>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 8009eb0:	89fb      	ldrh	r3, [r7, #14]
 8009eb2:	2b03      	cmp	r3, #3
 8009eb4:	d104      	bne.n	8009ec0 <pbuf_free+0xd4>
          memp_free(MEMP_PBUF_POOL, p);
 8009eb6:	6879      	ldr	r1, [r7, #4]
 8009eb8:	2008      	movs	r0, #8
 8009eba:	f7ff f9f3 	bl	80092a4 <memp_free>
 8009ebe:	e00d      	b.n	8009edc <pbuf_free+0xf0>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 8009ec0:	89fb      	ldrh	r3, [r7, #14]
 8009ec2:	2b01      	cmp	r3, #1
 8009ec4:	d002      	beq.n	8009ecc <pbuf_free+0xe0>
 8009ec6:	89fb      	ldrh	r3, [r7, #14]
 8009ec8:	2b02      	cmp	r3, #2
 8009eca:	d104      	bne.n	8009ed6 <pbuf_free+0xea>
          memp_free(MEMP_PBUF, p);
 8009ecc:	6879      	ldr	r1, [r7, #4]
 8009ece:	2007      	movs	r0, #7
 8009ed0:	f7ff f9e8 	bl	80092a4 <memp_free>
 8009ed4:	e002      	b.n	8009edc <pbuf_free+0xf0>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	f7fe feb6 	bl	8008c48 <mem_free>
        }
      }
      count++;
 8009edc:	7dfb      	ldrb	r3, [r7, #23]
 8009ede:	3301      	adds	r3, #1
 8009ee0:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8009ee2:	693b      	ldr	r3, [r7, #16]
 8009ee4:	607b      	str	r3, [r7, #4]
 8009ee6:	e001      	b.n	8009eec <pbuf_free+0x100>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 8009ee8:	2300      	movs	r3, #0
 8009eea:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d1a9      	bne.n	8009e46 <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8009ef2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	3718      	adds	r7, #24
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	bd80      	pop	{r7, pc}
 8009efc:	08015114 	.word	0x08015114
 8009f00:	08015384 	.word	0x08015384
 8009f04:	08015198 	.word	0x08015198
 8009f08:	080153c0 	.word	0x080153c0
 8009f0c:	080153d8 	.word	0x080153d8
 8009f10:	080153f0 	.word	0x080153f0

08009f14 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8009f14:	b480      	push	{r7}
 8009f16:	b085      	sub	sp, #20
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8009f20:	e005      	b.n	8009f2e <pbuf_clen+0x1a>
    ++len;
 8009f22:	89fb      	ldrh	r3, [r7, #14]
 8009f24:	3301      	adds	r3, #1
 8009f26:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d1f6      	bne.n	8009f22 <pbuf_clen+0xe>
  }
  return len;
 8009f34:	89fb      	ldrh	r3, [r7, #14]
}
 8009f36:	4618      	mov	r0, r3
 8009f38:	3714      	adds	r7, #20
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f40:	4770      	bx	lr
	...

08009f44 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b082      	sub	sp, #8
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d010      	beq.n	8009f74 <pbuf_ref+0x30>
    SYS_ARCH_INC(p->ref, 1);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	89db      	ldrh	r3, [r3, #14]
 8009f56:	3301      	adds	r3, #1
 8009f58:	b29a      	uxth	r2, r3
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	81da      	strh	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	89db      	ldrh	r3, [r3, #14]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d106      	bne.n	8009f74 <pbuf_ref+0x30>
 8009f66:	4b05      	ldr	r3, [pc, #20]	; (8009f7c <pbuf_ref+0x38>)
 8009f68:	f240 3239 	movw	r2, #825	; 0x339
 8009f6c:	4904      	ldr	r1, [pc, #16]	; (8009f80 <pbuf_ref+0x3c>)
 8009f6e:	4805      	ldr	r0, [pc, #20]	; (8009f84 <pbuf_ref+0x40>)
 8009f70:	f00a f824 	bl	8013fbc <iprintf>
  }
}
 8009f74:	bf00      	nop
 8009f76:	3708      	adds	r7, #8
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	bd80      	pop	{r7, pc}
 8009f7c:	08015114 	.word	0x08015114
 8009f80:	08015414 	.word	0x08015414
 8009f84:	08015198 	.word	0x08015198

08009f88 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b084      	sub	sp, #16
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
 8009f90:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d002      	beq.n	8009f9e <pbuf_cat+0x16>
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d107      	bne.n	8009fae <pbuf_cat+0x26>
 8009f9e:	4b20      	ldr	r3, [pc, #128]	; (800a020 <pbuf_cat+0x98>)
 8009fa0:	f240 324d 	movw	r2, #845	; 0x34d
 8009fa4:	491f      	ldr	r1, [pc, #124]	; (800a024 <pbuf_cat+0x9c>)
 8009fa6:	4820      	ldr	r0, [pc, #128]	; (800a028 <pbuf_cat+0xa0>)
 8009fa8:	f00a f808 	bl	8013fbc <iprintf>
 8009fac:	e034      	b.n	800a018 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	60fb      	str	r3, [r7, #12]
 8009fb2:	e00a      	b.n	8009fca <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	891a      	ldrh	r2, [r3, #8]
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	891b      	ldrh	r3, [r3, #8]
 8009fbc:	4413      	add	r3, r2
 8009fbe:	b29a      	uxth	r2, r3
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	60fb      	str	r3, [r7, #12]
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d1f0      	bne.n	8009fb4 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	891a      	ldrh	r2, [r3, #8]
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	895b      	ldrh	r3, [r3, #10]
 8009fda:	429a      	cmp	r2, r3
 8009fdc:	d006      	beq.n	8009fec <pbuf_cat+0x64>
 8009fde:	4b10      	ldr	r3, [pc, #64]	; (800a020 <pbuf_cat+0x98>)
 8009fe0:	f240 3255 	movw	r2, #853	; 0x355
 8009fe4:	4911      	ldr	r1, [pc, #68]	; (800a02c <pbuf_cat+0xa4>)
 8009fe6:	4810      	ldr	r0, [pc, #64]	; (800a028 <pbuf_cat+0xa0>)
 8009fe8:	f009 ffe8 	bl	8013fbc <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d006      	beq.n	800a002 <pbuf_cat+0x7a>
 8009ff4:	4b0a      	ldr	r3, [pc, #40]	; (800a020 <pbuf_cat+0x98>)
 8009ff6:	f240 3256 	movw	r2, #854	; 0x356
 8009ffa:	490d      	ldr	r1, [pc, #52]	; (800a030 <pbuf_cat+0xa8>)
 8009ffc:	480a      	ldr	r0, [pc, #40]	; (800a028 <pbuf_cat+0xa0>)
 8009ffe:	f009 ffdd 	bl	8013fbc <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	891a      	ldrh	r2, [r3, #8]
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	891b      	ldrh	r3, [r3, #8]
 800a00a:	4413      	add	r3, r2
 800a00c:	b29a      	uxth	r2, r3
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	683a      	ldr	r2, [r7, #0]
 800a016:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800a018:	3710      	adds	r7, #16
 800a01a:	46bd      	mov	sp, r7
 800a01c:	bd80      	pop	{r7, pc}
 800a01e:	bf00      	nop
 800a020:	08015114 	.word	0x08015114
 800a024:	08015428 	.word	0x08015428
 800a028:	08015198 	.word	0x08015198
 800a02c:	08015460 	.word	0x08015460
 800a030:	08015490 	.word	0x08015490

0800a034 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800a034:	b580      	push	{r7, lr}
 800a036:	b082      	sub	sp, #8
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
 800a03c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800a03e:	6839      	ldr	r1, [r7, #0]
 800a040:	6878      	ldr	r0, [r7, #4]
 800a042:	f7ff ffa1 	bl	8009f88 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800a046:	6838      	ldr	r0, [r7, #0]
 800a048:	f7ff ff7c 	bl	8009f44 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800a04c:	bf00      	nop
 800a04e:	3708      	adds	r7, #8
 800a050:	46bd      	mov	sp, r7
 800a052:	bd80      	pop	{r7, pc}

0800a054 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800a054:	b580      	push	{r7, lr}
 800a056:	b084      	sub	sp, #16
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]
 800a05c:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 800a05e:	2300      	movs	r3, #0
 800a060:	81fb      	strh	r3, [r7, #14]
 800a062:	2300      	movs	r3, #0
 800a064:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d008      	beq.n	800a07e <pbuf_copy+0x2a>
 800a06c:	683b      	ldr	r3, [r7, #0]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d005      	beq.n	800a07e <pbuf_copy+0x2a>
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	891a      	ldrh	r2, [r3, #8]
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	891b      	ldrh	r3, [r3, #8]
 800a07a:	429a      	cmp	r2, r3
 800a07c:	d209      	bcs.n	800a092 <pbuf_copy+0x3e>
 800a07e:	4b54      	ldr	r3, [pc, #336]	; (800a1d0 <pbuf_copy+0x17c>)
 800a080:	f240 32bd 	movw	r2, #957	; 0x3bd
 800a084:	4953      	ldr	r1, [pc, #332]	; (800a1d4 <pbuf_copy+0x180>)
 800a086:	4854      	ldr	r0, [pc, #336]	; (800a1d8 <pbuf_copy+0x184>)
 800a088:	f009 ff98 	bl	8013fbc <iprintf>
 800a08c:	f06f 030f 	mvn.w	r3, #15
 800a090:	e099      	b.n	800a1c6 <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	895b      	ldrh	r3, [r3, #10]
 800a096:	461a      	mov	r2, r3
 800a098:	89fb      	ldrh	r3, [r7, #14]
 800a09a:	1ad2      	subs	r2, r2, r3
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	895b      	ldrh	r3, [r3, #10]
 800a0a0:	4619      	mov	r1, r3
 800a0a2:	89bb      	ldrh	r3, [r7, #12]
 800a0a4:	1acb      	subs	r3, r1, r3
 800a0a6:	429a      	cmp	r2, r3
 800a0a8:	db05      	blt.n	800a0b6 <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800a0aa:	683b      	ldr	r3, [r7, #0]
 800a0ac:	895a      	ldrh	r2, [r3, #10]
 800a0ae:	89bb      	ldrh	r3, [r7, #12]
 800a0b0:	1ad3      	subs	r3, r2, r3
 800a0b2:	817b      	strh	r3, [r7, #10]
 800a0b4:	e004      	b.n	800a0c0 <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	895a      	ldrh	r2, [r3, #10]
 800a0ba:	89fb      	ldrh	r3, [r7, #14]
 800a0bc:	1ad3      	subs	r3, r2, r3
 800a0be:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	685a      	ldr	r2, [r3, #4]
 800a0c4:	89fb      	ldrh	r3, [r7, #14]
 800a0c6:	18d0      	adds	r0, r2, r3
 800a0c8:	683b      	ldr	r3, [r7, #0]
 800a0ca:	685a      	ldr	r2, [r3, #4]
 800a0cc:	89bb      	ldrh	r3, [r7, #12]
 800a0ce:	4413      	add	r3, r2
 800a0d0:	897a      	ldrh	r2, [r7, #10]
 800a0d2:	4619      	mov	r1, r3
 800a0d4:	f009 feb7 	bl	8013e46 <memcpy>
    offset_to += len;
 800a0d8:	89fa      	ldrh	r2, [r7, #14]
 800a0da:	897b      	ldrh	r3, [r7, #10]
 800a0dc:	4413      	add	r3, r2
 800a0de:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 800a0e0:	89ba      	ldrh	r2, [r7, #12]
 800a0e2:	897b      	ldrh	r3, [r7, #10]
 800a0e4:	4413      	add	r3, r2
 800a0e6:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	895b      	ldrh	r3, [r3, #10]
 800a0ec:	89fa      	ldrh	r2, [r7, #14]
 800a0ee:	429a      	cmp	r2, r3
 800a0f0:	d906      	bls.n	800a100 <pbuf_copy+0xac>
 800a0f2:	4b37      	ldr	r3, [pc, #220]	; (800a1d0 <pbuf_copy+0x17c>)
 800a0f4:	f240 32cd 	movw	r2, #973	; 0x3cd
 800a0f8:	4938      	ldr	r1, [pc, #224]	; (800a1dc <pbuf_copy+0x188>)
 800a0fa:	4837      	ldr	r0, [pc, #220]	; (800a1d8 <pbuf_copy+0x184>)
 800a0fc:	f009 ff5e 	bl	8013fbc <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800a100:	683b      	ldr	r3, [r7, #0]
 800a102:	895b      	ldrh	r3, [r3, #10]
 800a104:	89ba      	ldrh	r2, [r7, #12]
 800a106:	429a      	cmp	r2, r3
 800a108:	d906      	bls.n	800a118 <pbuf_copy+0xc4>
 800a10a:	4b31      	ldr	r3, [pc, #196]	; (800a1d0 <pbuf_copy+0x17c>)
 800a10c:	f240 32ce 	movw	r2, #974	; 0x3ce
 800a110:	4933      	ldr	r1, [pc, #204]	; (800a1e0 <pbuf_copy+0x18c>)
 800a112:	4831      	ldr	r0, [pc, #196]	; (800a1d8 <pbuf_copy+0x184>)
 800a114:	f009 ff52 	bl	8013fbc <iprintf>
    if (offset_from >= p_from->len) {
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	895b      	ldrh	r3, [r3, #10]
 800a11c:	89ba      	ldrh	r2, [r7, #12]
 800a11e:	429a      	cmp	r2, r3
 800a120:	d304      	bcc.n	800a12c <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 800a122:	2300      	movs	r3, #0
 800a124:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 800a126:	683b      	ldr	r3, [r7, #0]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	895b      	ldrh	r3, [r3, #10]
 800a130:	89fa      	ldrh	r2, [r7, #14]
 800a132:	429a      	cmp	r2, r3
 800a134:	d114      	bne.n	800a160 <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 800a136:	2300      	movs	r3, #0
 800a138:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d10c      	bne.n	800a160 <pbuf_copy+0x10c>
 800a146:	683b      	ldr	r3, [r7, #0]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d009      	beq.n	800a160 <pbuf_copy+0x10c>
 800a14c:	4b20      	ldr	r3, [pc, #128]	; (800a1d0 <pbuf_copy+0x17c>)
 800a14e:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800a152:	4924      	ldr	r1, [pc, #144]	; (800a1e4 <pbuf_copy+0x190>)
 800a154:	4820      	ldr	r0, [pc, #128]	; (800a1d8 <pbuf_copy+0x184>)
 800a156:	f009 ff31 	bl	8013fbc <iprintf>
 800a15a:	f06f 030f 	mvn.w	r3, #15
 800a15e:	e032      	b.n	800a1c6 <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d013      	beq.n	800a18e <pbuf_copy+0x13a>
 800a166:	683b      	ldr	r3, [r7, #0]
 800a168:	895a      	ldrh	r2, [r3, #10]
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	891b      	ldrh	r3, [r3, #8]
 800a16e:	429a      	cmp	r2, r3
 800a170:	d10d      	bne.n	800a18e <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d009      	beq.n	800a18e <pbuf_copy+0x13a>
 800a17a:	4b15      	ldr	r3, [pc, #84]	; (800a1d0 <pbuf_copy+0x17c>)
 800a17c:	f240 32de 	movw	r2, #990	; 0x3de
 800a180:	4919      	ldr	r1, [pc, #100]	; (800a1e8 <pbuf_copy+0x194>)
 800a182:	4815      	ldr	r0, [pc, #84]	; (800a1d8 <pbuf_copy+0x184>)
 800a184:	f009 ff1a 	bl	8013fbc <iprintf>
 800a188:	f06f 0305 	mvn.w	r3, #5
 800a18c:	e01b      	b.n	800a1c6 <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d013      	beq.n	800a1bc <pbuf_copy+0x168>
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	895a      	ldrh	r2, [r3, #10]
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	891b      	ldrh	r3, [r3, #8]
 800a19c:	429a      	cmp	r2, r3
 800a19e:	d10d      	bne.n	800a1bc <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d009      	beq.n	800a1bc <pbuf_copy+0x168>
 800a1a8:	4b09      	ldr	r3, [pc, #36]	; (800a1d0 <pbuf_copy+0x17c>)
 800a1aa:	f240 32e3 	movw	r2, #995	; 0x3e3
 800a1ae:	490e      	ldr	r1, [pc, #56]	; (800a1e8 <pbuf_copy+0x194>)
 800a1b0:	4809      	ldr	r0, [pc, #36]	; (800a1d8 <pbuf_copy+0x184>)
 800a1b2:	f009 ff03 	bl	8013fbc <iprintf>
 800a1b6:	f06f 0305 	mvn.w	r3, #5
 800a1ba:	e004      	b.n	800a1c6 <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800a1bc:	683b      	ldr	r3, [r7, #0]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	f47f af67 	bne.w	800a092 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800a1c4:	2300      	movs	r3, #0
}
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	3710      	adds	r7, #16
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	bd80      	pop	{r7, pc}
 800a1ce:	bf00      	nop
 800a1d0:	08015114 	.word	0x08015114
 800a1d4:	080154dc 	.word	0x080154dc
 800a1d8:	08015198 	.word	0x08015198
 800a1dc:	0801550c 	.word	0x0801550c
 800a1e0:	08015524 	.word	0x08015524
 800a1e4:	08015540 	.word	0x08015540
 800a1e8:	08015550 	.word	0x08015550

0800a1ec <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b088      	sub	sp, #32
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	60f8      	str	r0, [r7, #12]
 800a1f4:	60b9      	str	r1, [r7, #8]
 800a1f6:	4611      	mov	r1, r2
 800a1f8:	461a      	mov	r2, r3
 800a1fa:	460b      	mov	r3, r1
 800a1fc:	80fb      	strh	r3, [r7, #6]
 800a1fe:	4613      	mov	r3, r2
 800a200:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800a202:	2300      	movs	r3, #0
 800a204:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d108      	bne.n	800a21e <pbuf_copy_partial+0x32>
 800a20c:	4b30      	ldr	r3, [pc, #192]	; (800a2d0 <pbuf_copy_partial+0xe4>)
 800a20e:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800a212:	4930      	ldr	r1, [pc, #192]	; (800a2d4 <pbuf_copy_partial+0xe8>)
 800a214:	4830      	ldr	r0, [pc, #192]	; (800a2d8 <pbuf_copy_partial+0xec>)
 800a216:	f009 fed1 	bl	8013fbc <iprintf>
 800a21a:	2300      	movs	r3, #0
 800a21c:	e054      	b.n	800a2c8 <pbuf_copy_partial+0xdc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800a21e:	68bb      	ldr	r3, [r7, #8]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d108      	bne.n	800a236 <pbuf_copy_partial+0x4a>
 800a224:	4b2a      	ldr	r3, [pc, #168]	; (800a2d0 <pbuf_copy_partial+0xe4>)
 800a226:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800a22a:	492c      	ldr	r1, [pc, #176]	; (800a2dc <pbuf_copy_partial+0xf0>)
 800a22c:	482a      	ldr	r0, [pc, #168]	; (800a2d8 <pbuf_copy_partial+0xec>)
 800a22e:	f009 fec5 	bl	8013fbc <iprintf>
 800a232:	2300      	movs	r3, #0
 800a234:	e048      	b.n	800a2c8 <pbuf_copy_partial+0xdc>

  left = 0;
 800a236:	2300      	movs	r3, #0
 800a238:	837b      	strh	r3, [r7, #26]

  if ((buf == NULL) || (dataptr == NULL)) {
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d002      	beq.n	800a246 <pbuf_copy_partial+0x5a>
 800a240:	68bb      	ldr	r3, [r7, #8]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d101      	bne.n	800a24a <pbuf_copy_partial+0x5e>
    return 0;
 800a246:	2300      	movs	r3, #0
 800a248:	e03e      	b.n	800a2c8 <pbuf_copy_partial+0xdc>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	61fb      	str	r3, [r7, #28]
 800a24e:	e034      	b.n	800a2ba <pbuf_copy_partial+0xce>
    if ((offset != 0) && (offset >= p->len)) {
 800a250:	88bb      	ldrh	r3, [r7, #4]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d00a      	beq.n	800a26c <pbuf_copy_partial+0x80>
 800a256:	69fb      	ldr	r3, [r7, #28]
 800a258:	895b      	ldrh	r3, [r3, #10]
 800a25a:	88ba      	ldrh	r2, [r7, #4]
 800a25c:	429a      	cmp	r2, r3
 800a25e:	d305      	bcc.n	800a26c <pbuf_copy_partial+0x80>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 800a260:	69fb      	ldr	r3, [r7, #28]
 800a262:	895b      	ldrh	r3, [r3, #10]
 800a264:	88ba      	ldrh	r2, [r7, #4]
 800a266:	1ad3      	subs	r3, r2, r3
 800a268:	80bb      	strh	r3, [r7, #4]
 800a26a:	e023      	b.n	800a2b4 <pbuf_copy_partial+0xc8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 800a26c:	69fb      	ldr	r3, [r7, #28]
 800a26e:	895a      	ldrh	r2, [r3, #10]
 800a270:	88bb      	ldrh	r3, [r7, #4]
 800a272:	1ad3      	subs	r3, r2, r3
 800a274:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800a276:	8b3a      	ldrh	r2, [r7, #24]
 800a278:	88fb      	ldrh	r3, [r7, #6]
 800a27a:	429a      	cmp	r2, r3
 800a27c:	d901      	bls.n	800a282 <pbuf_copy_partial+0x96>
        buf_copy_len = len;
 800a27e:	88fb      	ldrh	r3, [r7, #6]
 800a280:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 800a282:	8b7b      	ldrh	r3, [r7, #26]
 800a284:	68ba      	ldr	r2, [r7, #8]
 800a286:	18d0      	adds	r0, r2, r3
 800a288:	69fb      	ldr	r3, [r7, #28]
 800a28a:	685a      	ldr	r2, [r3, #4]
 800a28c:	88bb      	ldrh	r3, [r7, #4]
 800a28e:	4413      	add	r3, r2
 800a290:	8b3a      	ldrh	r2, [r7, #24]
 800a292:	4619      	mov	r1, r3
 800a294:	f009 fdd7 	bl	8013e46 <memcpy>
      copied_total += buf_copy_len;
 800a298:	8afa      	ldrh	r2, [r7, #22]
 800a29a:	8b3b      	ldrh	r3, [r7, #24]
 800a29c:	4413      	add	r3, r2
 800a29e:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
 800a2a0:	8b7a      	ldrh	r2, [r7, #26]
 800a2a2:	8b3b      	ldrh	r3, [r7, #24]
 800a2a4:	4413      	add	r3, r2
 800a2a6:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
 800a2a8:	88fa      	ldrh	r2, [r7, #6]
 800a2aa:	8b3b      	ldrh	r3, [r7, #24]
 800a2ac:	1ad3      	subs	r3, r2, r3
 800a2ae:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800a2b4:	69fb      	ldr	r3, [r7, #28]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	61fb      	str	r3, [r7, #28]
 800a2ba:	88fb      	ldrh	r3, [r7, #6]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d002      	beq.n	800a2c6 <pbuf_copy_partial+0xda>
 800a2c0:	69fb      	ldr	r3, [r7, #28]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d1c4      	bne.n	800a250 <pbuf_copy_partial+0x64>
    }
  }
  return copied_total;
 800a2c6:	8afb      	ldrh	r3, [r7, #22]
}
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	3720      	adds	r7, #32
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	bd80      	pop	{r7, pc}
 800a2d0:	08015114 	.word	0x08015114
 800a2d4:	0801557c 	.word	0x0801557c
 800a2d8:	08015198 	.word	0x08015198
 800a2dc:	0801559c 	.word	0x0801559c

0800a2e0 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800a2e0:	b480      	push	{r7}
 800a2e2:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 800a2e4:	bf00      	nop
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ec:	4770      	bx	lr
	...

0800a2f0 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800a2f4:	f000 ff80 	bl	800b1f8 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800a2f8:	4b07      	ldr	r3, [pc, #28]	; (800a318 <tcp_tmr+0x28>)
 800a2fa:	781b      	ldrb	r3, [r3, #0]
 800a2fc:	3301      	adds	r3, #1
 800a2fe:	b2da      	uxtb	r2, r3
 800a300:	4b05      	ldr	r3, [pc, #20]	; (800a318 <tcp_tmr+0x28>)
 800a302:	701a      	strb	r2, [r3, #0]
 800a304:	4b04      	ldr	r3, [pc, #16]	; (800a318 <tcp_tmr+0x28>)
 800a306:	781b      	ldrb	r3, [r3, #0]
 800a308:	f003 0301 	and.w	r3, r3, #1
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d001      	beq.n	800a314 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800a310:	f000 fcb2 	bl	800ac78 <tcp_slowtmr>
  }
}
 800a314:	bf00      	nop
 800a316:	bd80      	pop	{r7, pc}
 800a318:	20000251 	.word	0x20000251

0800a31c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800a31c:	b480      	push	{r7}
 800a31e:	b085      	sub	sp, #20
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
 800a324:	6039      	str	r1, [r7, #0]
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	60fb      	str	r3, [r7, #12]
 800a32a:	e00a      	b.n	800a342 <tcp_remove_listener+0x26>
      if (pcb->listener == lpcb) {
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a330:	683a      	ldr	r2, [r7, #0]
 800a332:	429a      	cmp	r2, r3
 800a334:	d102      	bne.n	800a33c <tcp_remove_listener+0x20>
         pcb->listener = NULL;
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	2200      	movs	r2, #0
 800a33a:	679a      	str	r2, [r3, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	68db      	ldr	r3, [r3, #12]
 800a340:	60fb      	str	r3, [r7, #12]
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d1f1      	bne.n	800a32c <tcp_remove_listener+0x10>
      }
   }
}
 800a348:	bf00      	nop
 800a34a:	3714      	adds	r7, #20
 800a34c:	46bd      	mov	sp, r7
 800a34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a352:	4770      	bx	lr

0800a354 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b084      	sub	sp, #16
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d105      	bne.n	800a36e <tcp_listen_closed+0x1a>
 800a362:	4b13      	ldr	r3, [pc, #76]	; (800a3b0 <tcp_listen_closed+0x5c>)
 800a364:	22c0      	movs	r2, #192	; 0xc0
 800a366:	4913      	ldr	r1, [pc, #76]	; (800a3b4 <tcp_listen_closed+0x60>)
 800a368:	4813      	ldr	r0, [pc, #76]	; (800a3b8 <tcp_listen_closed+0x64>)
 800a36a:	f009 fe27 	bl	8013fbc <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	7d1b      	ldrb	r3, [r3, #20]
 800a372:	2b01      	cmp	r3, #1
 800a374:	d005      	beq.n	800a382 <tcp_listen_closed+0x2e>
 800a376:	4b0e      	ldr	r3, [pc, #56]	; (800a3b0 <tcp_listen_closed+0x5c>)
 800a378:	22c1      	movs	r2, #193	; 0xc1
 800a37a:	4910      	ldr	r1, [pc, #64]	; (800a3bc <tcp_listen_closed+0x68>)
 800a37c:	480e      	ldr	r0, [pc, #56]	; (800a3b8 <tcp_listen_closed+0x64>)
 800a37e:	f009 fe1d 	bl	8013fbc <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800a382:	2301      	movs	r3, #1
 800a384:	60fb      	str	r3, [r7, #12]
 800a386:	e00b      	b.n	800a3a0 <tcp_listen_closed+0x4c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 800a388:	4a0d      	ldr	r2, [pc, #52]	; (800a3c0 <tcp_listen_closed+0x6c>)
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	6879      	ldr	r1, [r7, #4]
 800a394:	4618      	mov	r0, r3
 800a396:	f7ff ffc1 	bl	800a31c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	3301      	adds	r3, #1
 800a39e:	60fb      	str	r3, [r7, #12]
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	2b03      	cmp	r3, #3
 800a3a4:	d9f0      	bls.n	800a388 <tcp_listen_closed+0x34>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800a3a6:	bf00      	nop
 800a3a8:	3710      	adds	r7, #16
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	bd80      	pop	{r7, pc}
 800a3ae:	bf00      	nop
 800a3b0:	080156d0 	.word	0x080156d0
 800a3b4:	08015738 	.word	0x08015738
 800a3b8:	08015744 	.word	0x08015744
 800a3bc:	0801576c 	.word	0x0801576c
 800a3c0:	08016e20 	.word	0x08016e20

0800a3c4 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800a3c4:	b5b0      	push	{r4, r5, r7, lr}
 800a3c6:	b086      	sub	sp, #24
 800a3c8:	af02      	add	r7, sp, #8
 800a3ca:	6078      	str	r0, [r7, #4]
 800a3cc:	460b      	mov	r3, r1
 800a3ce:	70fb      	strb	r3, [r7, #3]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800a3d0:	78fb      	ldrb	r3, [r7, #3]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d075      	beq.n	800a4c2 <tcp_close_shutdown+0xfe>
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	7d1b      	ldrb	r3, [r3, #20]
 800a3da:	2b04      	cmp	r3, #4
 800a3dc:	d003      	beq.n	800a3e6 <tcp_close_shutdown+0x22>
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	7d1b      	ldrb	r3, [r3, #20]
 800a3e2:	2b07      	cmp	r3, #7
 800a3e4:	d16d      	bne.n	800a4c2 <tcp_close_shutdown+0xfe>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d104      	bne.n	800a3f8 <tcp_close_shutdown+0x34>
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a3f2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800a3f6:	d064      	beq.n	800a4c2 <tcp_close_shutdown+0xfe>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	7e9b      	ldrb	r3, [r3, #26]
 800a3fc:	f003 0310 	and.w	r3, r3, #16
 800a400:	2b00      	cmp	r3, #0
 800a402:	d106      	bne.n	800a412 <tcp_close_shutdown+0x4e>
 800a404:	4b59      	ldr	r3, [pc, #356]	; (800a56c <tcp_close_shutdown+0x1a8>)
 800a406:	f240 120f 	movw	r2, #271	; 0x10f
 800a40a:	4959      	ldr	r1, [pc, #356]	; (800a570 <tcp_close_shutdown+0x1ac>)
 800a40c:	4859      	ldr	r0, [pc, #356]	; (800a574 <tcp_close_shutdown+0x1b0>)
 800a40e:	f009 fdd5 	bl	8013fbc <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800a41a:	687c      	ldr	r4, [r7, #4]
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	1d1d      	adds	r5, r3, #4
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	8adb      	ldrh	r3, [r3, #22]
 800a424:	687a      	ldr	r2, [r7, #4]
 800a426:	8b12      	ldrh	r2, [r2, #24]
 800a428:	9201      	str	r2, [sp, #4]
 800a42a:	9300      	str	r3, [sp, #0]
 800a42c:	462b      	mov	r3, r5
 800a42e:	4622      	mov	r2, r4
 800a430:	f004 feec 	bl	800f20c <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800a434:	6878      	ldr	r0, [r7, #4]
 800a436:	f001 fa1d 	bl	800b874 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800a43a:	4b4f      	ldr	r3, [pc, #316]	; (800a578 <tcp_close_shutdown+0x1b4>)
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	687a      	ldr	r2, [r7, #4]
 800a440:	429a      	cmp	r2, r3
 800a442:	d105      	bne.n	800a450 <tcp_close_shutdown+0x8c>
 800a444:	4b4c      	ldr	r3, [pc, #304]	; (800a578 <tcp_close_shutdown+0x1b4>)
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	68db      	ldr	r3, [r3, #12]
 800a44a:	4a4b      	ldr	r2, [pc, #300]	; (800a578 <tcp_close_shutdown+0x1b4>)
 800a44c:	6013      	str	r3, [r2, #0]
 800a44e:	e013      	b.n	800a478 <tcp_close_shutdown+0xb4>
 800a450:	4b49      	ldr	r3, [pc, #292]	; (800a578 <tcp_close_shutdown+0x1b4>)
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	60fb      	str	r3, [r7, #12]
 800a456:	e00c      	b.n	800a472 <tcp_close_shutdown+0xae>
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	68db      	ldr	r3, [r3, #12]
 800a45c:	687a      	ldr	r2, [r7, #4]
 800a45e:	429a      	cmp	r2, r3
 800a460:	d104      	bne.n	800a46c <tcp_close_shutdown+0xa8>
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	68da      	ldr	r2, [r3, #12]
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	60da      	str	r2, [r3, #12]
 800a46a:	e005      	b.n	800a478 <tcp_close_shutdown+0xb4>
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	68db      	ldr	r3, [r3, #12]
 800a470:	60fb      	str	r3, [r7, #12]
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d1ef      	bne.n	800a458 <tcp_close_shutdown+0x94>
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	2200      	movs	r2, #0
 800a47c:	60da      	str	r2, [r3, #12]
 800a47e:	4b3f      	ldr	r3, [pc, #252]	; (800a57c <tcp_close_shutdown+0x1b8>)
 800a480:	2201      	movs	r2, #1
 800a482:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	7d1b      	ldrb	r3, [r3, #20]
 800a488:	2b04      	cmp	r3, #4
 800a48a:	d10c      	bne.n	800a4a6 <tcp_close_shutdown+0xe2>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	220a      	movs	r2, #10
 800a490:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800a492:	4b3b      	ldr	r3, [pc, #236]	; (800a580 <tcp_close_shutdown+0x1bc>)
 800a494:	681a      	ldr	r2, [r3, #0]
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	60da      	str	r2, [r3, #12]
 800a49a:	4a39      	ldr	r2, [pc, #228]	; (800a580 <tcp_close_shutdown+0x1bc>)
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	6013      	str	r3, [r2, #0]
 800a4a0:	f005 f906 	bl	800f6b0 <tcp_timer_needed>
 800a4a4:	e00b      	b.n	800a4be <tcp_close_shutdown+0xfa>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
 800a4a6:	4b37      	ldr	r3, [pc, #220]	; (800a584 <tcp_close_shutdown+0x1c0>)
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	687a      	ldr	r2, [r7, #4]
 800a4ac:	429a      	cmp	r2, r3
 800a4ae:	d102      	bne.n	800a4b6 <tcp_close_shutdown+0xf2>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
 800a4b0:	f003 fd44 	bl	800df3c <tcp_trigger_input_pcb_close>
 800a4b4:	e003      	b.n	800a4be <tcp_close_shutdown+0xfa>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
 800a4b6:	6879      	ldr	r1, [r7, #4]
 800a4b8:	2001      	movs	r0, #1
 800a4ba:	f7fe fef3 	bl	80092a4 <memp_free>
        }
      }
      return ERR_OK;
 800a4be:	2300      	movs	r3, #0
 800a4c0:	e050      	b.n	800a564 <tcp_close_shutdown+0x1a0>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	7d1b      	ldrb	r3, [r3, #20]
 800a4c6:	2b01      	cmp	r3, #1
 800a4c8:	d02e      	beq.n	800a528 <tcp_close_shutdown+0x164>
 800a4ca:	2b02      	cmp	r3, #2
 800a4cc:	d038      	beq.n	800a540 <tcp_close_shutdown+0x17c>
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d142      	bne.n	800a558 <tcp_close_shutdown+0x194>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	8adb      	ldrh	r3, [r3, #22]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d021      	beq.n	800a51e <tcp_close_shutdown+0x15a>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800a4da:	4b2b      	ldr	r3, [pc, #172]	; (800a588 <tcp_close_shutdown+0x1c4>)
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	687a      	ldr	r2, [r7, #4]
 800a4e0:	429a      	cmp	r2, r3
 800a4e2:	d105      	bne.n	800a4f0 <tcp_close_shutdown+0x12c>
 800a4e4:	4b28      	ldr	r3, [pc, #160]	; (800a588 <tcp_close_shutdown+0x1c4>)
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	68db      	ldr	r3, [r3, #12]
 800a4ea:	4a27      	ldr	r2, [pc, #156]	; (800a588 <tcp_close_shutdown+0x1c4>)
 800a4ec:	6013      	str	r3, [r2, #0]
 800a4ee:	e013      	b.n	800a518 <tcp_close_shutdown+0x154>
 800a4f0:	4b25      	ldr	r3, [pc, #148]	; (800a588 <tcp_close_shutdown+0x1c4>)
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	60bb      	str	r3, [r7, #8]
 800a4f6:	e00c      	b.n	800a512 <tcp_close_shutdown+0x14e>
 800a4f8:	68bb      	ldr	r3, [r7, #8]
 800a4fa:	68db      	ldr	r3, [r3, #12]
 800a4fc:	687a      	ldr	r2, [r7, #4]
 800a4fe:	429a      	cmp	r2, r3
 800a500:	d104      	bne.n	800a50c <tcp_close_shutdown+0x148>
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	68da      	ldr	r2, [r3, #12]
 800a506:	68bb      	ldr	r3, [r7, #8]
 800a508:	60da      	str	r2, [r3, #12]
 800a50a:	e005      	b.n	800a518 <tcp_close_shutdown+0x154>
 800a50c:	68bb      	ldr	r3, [r7, #8]
 800a50e:	68db      	ldr	r3, [r3, #12]
 800a510:	60bb      	str	r3, [r7, #8]
 800a512:	68bb      	ldr	r3, [r7, #8]
 800a514:	2b00      	cmp	r3, #0
 800a516:	d1ef      	bne.n	800a4f8 <tcp_close_shutdown+0x134>
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2200      	movs	r2, #0
 800a51c:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 800a51e:	6879      	ldr	r1, [r7, #4]
 800a520:	2001      	movs	r0, #1
 800a522:	f7fe febf 	bl	80092a4 <memp_free>
    break;
 800a526:	e01c      	b.n	800a562 <tcp_close_shutdown+0x19e>
  case LISTEN:
    tcp_listen_closed(pcb);
 800a528:	6878      	ldr	r0, [r7, #4]
 800a52a:	f7ff ff13 	bl	800a354 <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800a52e:	6879      	ldr	r1, [r7, #4]
 800a530:	4816      	ldr	r0, [pc, #88]	; (800a58c <tcp_close_shutdown+0x1c8>)
 800a532:	f001 f9e1 	bl	800b8f8 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800a536:	6879      	ldr	r1, [r7, #4]
 800a538:	2002      	movs	r0, #2
 800a53a:	f7fe feb3 	bl	80092a4 <memp_free>
    break;
 800a53e:	e010      	b.n	800a562 <tcp_close_shutdown+0x19e>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
 800a540:	6879      	ldr	r1, [r7, #4]
 800a542:	480d      	ldr	r0, [pc, #52]	; (800a578 <tcp_close_shutdown+0x1b4>)
 800a544:	f001 f9d8 	bl	800b8f8 <tcp_pcb_remove>
 800a548:	4b0c      	ldr	r3, [pc, #48]	; (800a57c <tcp_close_shutdown+0x1b8>)
 800a54a:	2201      	movs	r2, #1
 800a54c:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 800a54e:	6879      	ldr	r1, [r7, #4]
 800a550:	2001      	movs	r0, #1
 800a552:	f7fe fea7 	bl	80092a4 <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
    break;
 800a556:	e004      	b.n	800a562 <tcp_close_shutdown+0x19e>
  default:
    return tcp_close_shutdown_fin(pcb);
 800a558:	6878      	ldr	r0, [r7, #4]
 800a55a:	f000 f819 	bl	800a590 <tcp_close_shutdown_fin>
 800a55e:	4603      	mov	r3, r0
 800a560:	e000      	b.n	800a564 <tcp_close_shutdown+0x1a0>
  }
  return ERR_OK;
 800a562:	2300      	movs	r3, #0
}
 800a564:	4618      	mov	r0, r3
 800a566:	3710      	adds	r7, #16
 800a568:	46bd      	mov	sp, r7
 800a56a:	bdb0      	pop	{r4, r5, r7, pc}
 800a56c:	080156d0 	.word	0x080156d0
 800a570:	08015784 	.word	0x08015784
 800a574:	08015744 	.word	0x08015744
 800a578:	20003284 	.word	0x20003284
 800a57c:	20003280 	.word	0x20003280
 800a580:	20003294 	.word	0x20003294
 800a584:	20003298 	.word	0x20003298
 800a588:	20003290 	.word	0x20003290
 800a58c:	2000328c 	.word	0x2000328c

0800a590 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b084      	sub	sp, #16
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d106      	bne.n	800a5ac <tcp_close_shutdown_fin+0x1c>
 800a59e:	4b2c      	ldr	r3, [pc, #176]	; (800a650 <tcp_close_shutdown_fin+0xc0>)
 800a5a0:	f240 124d 	movw	r2, #333	; 0x14d
 800a5a4:	492b      	ldr	r1, [pc, #172]	; (800a654 <tcp_close_shutdown_fin+0xc4>)
 800a5a6:	482c      	ldr	r0, [pc, #176]	; (800a658 <tcp_close_shutdown_fin+0xc8>)
 800a5a8:	f009 fd08 	bl	8013fbc <iprintf>

  switch (pcb->state) {
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	7d1b      	ldrb	r3, [r3, #20]
 800a5b0:	2b04      	cmp	r3, #4
 800a5b2:	d010      	beq.n	800a5d6 <tcp_close_shutdown_fin+0x46>
 800a5b4:	2b07      	cmp	r3, #7
 800a5b6:	d01b      	beq.n	800a5f0 <tcp_close_shutdown_fin+0x60>
 800a5b8:	2b03      	cmp	r3, #3
 800a5ba:	d126      	bne.n	800a60a <tcp_close_shutdown_fin+0x7a>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 800a5bc:	6878      	ldr	r0, [r7, #4]
 800a5be:	f003 fd49 	bl	800e054 <tcp_send_fin>
 800a5c2:	4603      	mov	r3, r0
 800a5c4:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800a5c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d11f      	bne.n	800a60e <tcp_close_shutdown_fin+0x7e>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	2205      	movs	r2, #5
 800a5d2:	751a      	strb	r2, [r3, #20]
    }
    break;
 800a5d4:	e01b      	b.n	800a60e <tcp_close_shutdown_fin+0x7e>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 800a5d6:	6878      	ldr	r0, [r7, #4]
 800a5d8:	f003 fd3c 	bl	800e054 <tcp_send_fin>
 800a5dc:	4603      	mov	r3, r0
 800a5de:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800a5e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d114      	bne.n	800a612 <tcp_close_shutdown_fin+0x82>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = FIN_WAIT_1;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2205      	movs	r2, #5
 800a5ec:	751a      	strb	r2, [r3, #20]
    }
    break;
 800a5ee:	e010      	b.n	800a612 <tcp_close_shutdown_fin+0x82>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 800a5f0:	6878      	ldr	r0, [r7, #4]
 800a5f2:	f003 fd2f 	bl	800e054 <tcp_send_fin>
 800a5f6:	4603      	mov	r3, r0
 800a5f8:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800a5fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d109      	bne.n	800a616 <tcp_close_shutdown_fin+0x86>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	2209      	movs	r2, #9
 800a606:	751a      	strb	r2, [r3, #20]
    }
    break;
 800a608:	e005      	b.n	800a616 <tcp_close_shutdown_fin+0x86>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
 800a60a:	2300      	movs	r3, #0
 800a60c:	e01c      	b.n	800a648 <tcp_close_shutdown_fin+0xb8>
    break;
 800a60e:	bf00      	nop
 800a610:	e002      	b.n	800a618 <tcp_close_shutdown_fin+0x88>
    break;
 800a612:	bf00      	nop
 800a614:	e000      	b.n	800a618 <tcp_close_shutdown_fin+0x88>
    break;
 800a616:	bf00      	nop
  }

  if (err == ERR_OK) {
 800a618:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d103      	bne.n	800a628 <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800a620:	6878      	ldr	r0, [r7, #4]
 800a622:	f004 fb69 	bl	800ecf8 <tcp_output>
 800a626:	e00d      	b.n	800a644 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 800a628:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a62c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a630:	d108      	bne.n	800a644 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	7e9b      	ldrb	r3, [r3, #26]
 800a636:	f043 0308 	orr.w	r3, r3, #8
 800a63a:	b2da      	uxtb	r2, r3
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	769a      	strb	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800a640:	2300      	movs	r3, #0
 800a642:	e001      	b.n	800a648 <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 800a644:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a648:	4618      	mov	r0, r3
 800a64a:	3710      	adds	r7, #16
 800a64c:	46bd      	mov	sp, r7
 800a64e:	bd80      	pop	{r7, pc}
 800a650:	080156d0 	.word	0x080156d0
 800a654:	08015738 	.word	0x08015738
 800a658:	08015744 	.word	0x08015744

0800a65c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b082      	sub	sp, #8
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	7d1b      	ldrb	r3, [r3, #20]
 800a668:	2b01      	cmp	r3, #1
 800a66a:	d006      	beq.n	800a67a <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	7e9b      	ldrb	r3, [r3, #26]
 800a670:	f043 0310 	orr.w	r3, r3, #16
 800a674:	b2da      	uxtb	r2, r3
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	769a      	strb	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800a67a:	2101      	movs	r1, #1
 800a67c:	6878      	ldr	r0, [r7, #4]
 800a67e:	f7ff fea1 	bl	800a3c4 <tcp_close_shutdown>
 800a682:	4603      	mov	r3, r0
}
 800a684:	4618      	mov	r0, r3
 800a686:	3708      	adds	r7, #8
 800a688:	46bd      	mov	sp, r7
 800a68a:	bd80      	pop	{r7, pc}

0800a68c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b08c      	sub	sp, #48	; 0x30
 800a690:	af02      	add	r7, sp, #8
 800a692:	6078      	str	r0, [r7, #4]
 800a694:	6039      	str	r1, [r7, #0]
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	7d1b      	ldrb	r3, [r3, #20]
 800a69a:	2b01      	cmp	r3, #1
 800a69c:	d106      	bne.n	800a6ac <tcp_abandon+0x20>
 800a69e:	4b4d      	ldr	r3, [pc, #308]	; (800a7d4 <tcp_abandon+0x148>)
 800a6a0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800a6a4:	494c      	ldr	r1, [pc, #304]	; (800a7d8 <tcp_abandon+0x14c>)
 800a6a6:	484d      	ldr	r0, [pc, #308]	; (800a7dc <tcp_abandon+0x150>)
 800a6a8:	f009 fc88 	bl	8013fbc <iprintf>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	7d1b      	ldrb	r3, [r3, #20]
 800a6b0:	2b0a      	cmp	r3, #10
 800a6b2:	d108      	bne.n	800a6c6 <tcp_abandon+0x3a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800a6b4:	6879      	ldr	r1, [r7, #4]
 800a6b6:	484a      	ldr	r0, [pc, #296]	; (800a7e0 <tcp_abandon+0x154>)
 800a6b8:	f001 f91e 	bl	800b8f8 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 800a6bc:	6879      	ldr	r1, [r7, #4]
 800a6be:	2001      	movs	r0, #1
 800a6c0:	f7fe fdf0 	bl	80092a4 <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
 800a6c4:	e081      	b.n	800a7ca <tcp_abandon+0x13e>
    int send_rst = 0;
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	847b      	strh	r3, [r7, #34]	; 0x22
    seqno = pcb->snd_nxt;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a6d2:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6d8:	617b      	str	r3, [r7, #20]
    errf = pcb->errf;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a6e0:	613b      	str	r3, [r7, #16]
    errf_arg = pcb->callback_arg;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	691b      	ldr	r3, [r3, #16]
 800a6e6:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	7d1b      	ldrb	r3, [r3, #20]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d126      	bne.n	800a73e <tcp_abandon+0xb2>
      if (pcb->local_port != 0) {
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	8adb      	ldrh	r3, [r3, #22]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d02e      	beq.n	800a756 <tcp_abandon+0xca>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800a6f8:	4b3a      	ldr	r3, [pc, #232]	; (800a7e4 <tcp_abandon+0x158>)
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	687a      	ldr	r2, [r7, #4]
 800a6fe:	429a      	cmp	r2, r3
 800a700:	d105      	bne.n	800a70e <tcp_abandon+0x82>
 800a702:	4b38      	ldr	r3, [pc, #224]	; (800a7e4 <tcp_abandon+0x158>)
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	68db      	ldr	r3, [r3, #12]
 800a708:	4a36      	ldr	r2, [pc, #216]	; (800a7e4 <tcp_abandon+0x158>)
 800a70a:	6013      	str	r3, [r2, #0]
 800a70c:	e013      	b.n	800a736 <tcp_abandon+0xaa>
 800a70e:	4b35      	ldr	r3, [pc, #212]	; (800a7e4 <tcp_abandon+0x158>)
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	61fb      	str	r3, [r7, #28]
 800a714:	e00c      	b.n	800a730 <tcp_abandon+0xa4>
 800a716:	69fb      	ldr	r3, [r7, #28]
 800a718:	68db      	ldr	r3, [r3, #12]
 800a71a:	687a      	ldr	r2, [r7, #4]
 800a71c:	429a      	cmp	r2, r3
 800a71e:	d104      	bne.n	800a72a <tcp_abandon+0x9e>
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	68da      	ldr	r2, [r3, #12]
 800a724:	69fb      	ldr	r3, [r7, #28]
 800a726:	60da      	str	r2, [r3, #12]
 800a728:	e005      	b.n	800a736 <tcp_abandon+0xaa>
 800a72a:	69fb      	ldr	r3, [r7, #28]
 800a72c:	68db      	ldr	r3, [r3, #12]
 800a72e:	61fb      	str	r3, [r7, #28]
 800a730:	69fb      	ldr	r3, [r7, #28]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d1ef      	bne.n	800a716 <tcp_abandon+0x8a>
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	2200      	movs	r2, #0
 800a73a:	60da      	str	r2, [r3, #12]
 800a73c:	e00b      	b.n	800a756 <tcp_abandon+0xca>
      send_rst = reset;
 800a73e:	683b      	ldr	r3, [r7, #0]
 800a740:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	8adb      	ldrh	r3, [r3, #22]
 800a746:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800a748:	6879      	ldr	r1, [r7, #4]
 800a74a:	4827      	ldr	r0, [pc, #156]	; (800a7e8 <tcp_abandon+0x15c>)
 800a74c:	f001 f8d4 	bl	800b8f8 <tcp_pcb_remove>
 800a750:	4b26      	ldr	r3, [pc, #152]	; (800a7ec <tcp_abandon+0x160>)
 800a752:	2201      	movs	r2, #1
 800a754:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d004      	beq.n	800a768 <tcp_abandon+0xdc>
      tcp_segs_free(pcb->unacked);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a762:	4618      	mov	r0, r3
 800a764:	f000 fe15 	bl	800b392 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d004      	beq.n	800a77a <tcp_abandon+0xee>
      tcp_segs_free(pcb->unsent);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a774:	4618      	mov	r0, r3
 800a776:	f000 fe0c 	bl	800b392 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d004      	beq.n	800a78c <tcp_abandon+0x100>
      tcp_segs_free(pcb->ooseq);
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a786:	4618      	mov	r0, r3
 800a788:	f000 fe03 	bl	800b392 <tcp_segs_free>
    if (send_rst) {
 800a78c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d00c      	beq.n	800a7ac <tcp_abandon+0x120>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800a792:	687a      	ldr	r2, [r7, #4]
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	1d19      	adds	r1, r3, #4
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	8b1b      	ldrh	r3, [r3, #24]
 800a79c:	9301      	str	r3, [sp, #4]
 800a79e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a7a0:	9300      	str	r3, [sp, #0]
 800a7a2:	460b      	mov	r3, r1
 800a7a4:	6979      	ldr	r1, [r7, #20]
 800a7a6:	69b8      	ldr	r0, [r7, #24]
 800a7a8:	f004 fd30 	bl	800f20c <tcp_rst>
    last_state = pcb->state;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	7d1b      	ldrb	r3, [r3, #20]
 800a7b0:	72fb      	strb	r3, [r7, #11]
    memp_free(MEMP_TCP_PCB, pcb);
 800a7b2:	6879      	ldr	r1, [r7, #4]
 800a7b4:	2001      	movs	r0, #1
 800a7b6:	f7fe fd75 	bl	80092a4 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800a7ba:	693b      	ldr	r3, [r7, #16]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d004      	beq.n	800a7ca <tcp_abandon+0x13e>
 800a7c0:	693b      	ldr	r3, [r7, #16]
 800a7c2:	f06f 010c 	mvn.w	r1, #12
 800a7c6:	68f8      	ldr	r0, [r7, #12]
 800a7c8:	4798      	blx	r3
}
 800a7ca:	bf00      	nop
 800a7cc:	3728      	adds	r7, #40	; 0x28
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	bd80      	pop	{r7, pc}
 800a7d2:	bf00      	nop
 800a7d4:	080156d0 	.word	0x080156d0
 800a7d8:	080157a0 	.word	0x080157a0
 800a7dc:	08015744 	.word	0x08015744
 800a7e0:	20003294 	.word	0x20003294
 800a7e4:	20003290 	.word	0x20003290
 800a7e8:	20003284 	.word	0x20003284
 800a7ec:	20003280 	.word	0x20003280

0800a7f0 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b082      	sub	sp, #8
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800a7f8:	2101      	movs	r1, #1
 800a7fa:	6878      	ldr	r0, [r7, #4]
 800a7fc:	f7ff ff46 	bl	800a68c <tcp_abandon>
}
 800a800:	bf00      	nop
 800a802:	3708      	adds	r7, #8
 800a804:	46bd      	mov	sp, r7
 800a806:	bd80      	pop	{r7, pc}

0800a808 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	b088      	sub	sp, #32
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	60f8      	str	r0, [r7, #12]
 800a810:	60b9      	str	r1, [r7, #8]
 800a812:	4613      	mov	r3, r2
 800a814:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800a816:	2304      	movs	r3, #4
 800a818:	617b      	str	r3, [r7, #20]
  struct tcp_pcb *cpcb;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800a81a:	68bb      	ldr	r3, [r7, #8]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d101      	bne.n	800a824 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800a820:	4b3c      	ldr	r3, [pc, #240]	; (800a914 <tcp_bind+0x10c>)
 800a822:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d002      	beq.n	800a830 <tcp_bind+0x28>
 800a82a:	68bb      	ldr	r3, [r7, #8]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d102      	bne.n	800a836 <tcp_bind+0x2e>
    return ERR_VAL;
 800a830:	f06f 0305 	mvn.w	r3, #5
 800a834:	e06a      	b.n	800a90c <tcp_bind+0x104>
  }

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	7d1b      	ldrb	r3, [r3, #20]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d009      	beq.n	800a852 <tcp_bind+0x4a>
 800a83e:	4b36      	ldr	r3, [pc, #216]	; (800a918 <tcp_bind+0x110>)
 800a840:	f44f 7211 	mov.w	r2, #580	; 0x244
 800a844:	4935      	ldr	r1, [pc, #212]	; (800a91c <tcp_bind+0x114>)
 800a846:	4836      	ldr	r0, [pc, #216]	; (800a920 <tcp_bind+0x118>)
 800a848:	f009 fbb8 	bl	8013fbc <iprintf>
 800a84c:	f06f 0305 	mvn.w	r3, #5
 800a850:	e05c      	b.n	800a90c <tcp_bind+0x104>
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
    max_pcb_list = NUM_TCP_PCB_LISTS_NO_TIME_WAIT;
  }
#endif /* SO_REUSE */

  if (port == 0) {
 800a852:	88fb      	ldrh	r3, [r7, #6]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d109      	bne.n	800a86c <tcp_bind+0x64>
    port = tcp_new_port();
 800a858:	f000 f9ca 	bl	800abf0 <tcp_new_port>
 800a85c:	4603      	mov	r3, r0
 800a85e:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800a860:	88fb      	ldrh	r3, [r7, #6]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d135      	bne.n	800a8d2 <tcp_bind+0xca>
      return ERR_BUF;
 800a866:	f06f 0301 	mvn.w	r3, #1
 800a86a:	e04f      	b.n	800a90c <tcp_bind+0x104>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800a86c:	2300      	movs	r3, #0
 800a86e:	61fb      	str	r3, [r7, #28]
 800a870:	e02b      	b.n	800a8ca <tcp_bind+0xc2>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800a872:	4a2c      	ldr	r2, [pc, #176]	; (800a924 <tcp_bind+0x11c>)
 800a874:	69fb      	ldr	r3, [r7, #28]
 800a876:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	61bb      	str	r3, [r7, #24]
 800a87e:	e01e      	b.n	800a8be <tcp_bind+0xb6>
        if (cpcb->local_port == port) {
 800a880:	69bb      	ldr	r3, [r7, #24]
 800a882:	8adb      	ldrh	r3, [r3, #22]
 800a884:	88fa      	ldrh	r2, [r7, #6]
 800a886:	429a      	cmp	r2, r3
 800a888:	d116      	bne.n	800a8b8 <tcp_bind+0xb0>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800a88a:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d010      	beq.n	800a8b2 <tcp_bind+0xaa>
                (ip_addr_isany(&cpcb->local_ip) ||
 800a890:	69bb      	ldr	r3, [r7, #24]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d00c      	beq.n	800a8b2 <tcp_bind+0xaa>
 800a898:	68bb      	ldr	r3, [r7, #8]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d009      	beq.n	800a8b2 <tcp_bind+0xaa>
                ip_addr_isany(ipaddr) ||
 800a89e:	68bb      	ldr	r3, [r7, #8]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d005      	beq.n	800a8b2 <tcp_bind+0xaa>
                ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800a8a6:	69bb      	ldr	r3, [r7, #24]
 800a8a8:	681a      	ldr	r2, [r3, #0]
 800a8aa:	68bb      	ldr	r3, [r7, #8]
 800a8ac:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800a8ae:	429a      	cmp	r2, r3
 800a8b0:	d102      	bne.n	800a8b8 <tcp_bind+0xb0>
              return ERR_USE;
 800a8b2:	f06f 0307 	mvn.w	r3, #7
 800a8b6:	e029      	b.n	800a90c <tcp_bind+0x104>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800a8b8:	69bb      	ldr	r3, [r7, #24]
 800a8ba:	68db      	ldr	r3, [r3, #12]
 800a8bc:	61bb      	str	r3, [r7, #24]
 800a8be:	69bb      	ldr	r3, [r7, #24]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d1dd      	bne.n	800a880 <tcp_bind+0x78>
    for (i = 0; i < max_pcb_list; i++) {
 800a8c4:	69fb      	ldr	r3, [r7, #28]
 800a8c6:	3301      	adds	r3, #1
 800a8c8:	61fb      	str	r3, [r7, #28]
 800a8ca:	69fa      	ldr	r2, [r7, #28]
 800a8cc:	697b      	ldr	r3, [r7, #20]
 800a8ce:	429a      	cmp	r2, r3
 800a8d0:	dbcf      	blt.n	800a872 <tcp_bind+0x6a>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)) {
 800a8d2:	68bb      	ldr	r3, [r7, #8]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d00c      	beq.n	800a8f2 <tcp_bind+0xea>
 800a8d8:	68bb      	ldr	r3, [r7, #8]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d008      	beq.n	800a8f2 <tcp_bind+0xea>
    ip_addr_set(&pcb->local_ip, ipaddr);
 800a8e0:	68bb      	ldr	r3, [r7, #8]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d002      	beq.n	800a8ec <tcp_bind+0xe4>
 800a8e6:	68bb      	ldr	r3, [r7, #8]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	e000      	b.n	800a8ee <tcp_bind+0xe6>
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	68fa      	ldr	r2, [r7, #12]
 800a8f0:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	88fa      	ldrh	r2, [r7, #6]
 800a8f6:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800a8f8:	4b0b      	ldr	r3, [pc, #44]	; (800a928 <tcp_bind+0x120>)
 800a8fa:	681a      	ldr	r2, [r3, #0]
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	60da      	str	r2, [r3, #12]
 800a900:	4a09      	ldr	r2, [pc, #36]	; (800a928 <tcp_bind+0x120>)
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	6013      	str	r3, [r2, #0]
 800a906:	f004 fed3 	bl	800f6b0 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800a90a:	2300      	movs	r3, #0
}
 800a90c:	4618      	mov	r0, r3
 800a90e:	3720      	adds	r7, #32
 800a910:	46bd      	mov	sp, r7
 800a912:	bd80      	pop	{r7, pc}
 800a914:	08016e48 	.word	0x08016e48
 800a918:	080156d0 	.word	0x080156d0
 800a91c:	080157d4 	.word	0x080157d4
 800a920:	08015744 	.word	0x08015744
 800a924:	08016e20 	.word	0x08016e20
 800a928:	20003290 	.word	0x20003290

0800a92c <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b084      	sub	sp, #16
 800a930:	af00      	add	r7, sp, #0
 800a932:	60f8      	str	r0, [r7, #12]
 800a934:	60b9      	str	r1, [r7, #8]
 800a936:	4613      	mov	r3, r2
 800a938:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  tcp_abort(pcb);
 800a93a:	68b8      	ldr	r0, [r7, #8]
 800a93c:	f7ff ff58 	bl	800a7f0 <tcp_abort>

  return ERR_ABRT;
 800a940:	f06f 030c 	mvn.w	r3, #12
}
 800a944:	4618      	mov	r0, r3
 800a946:	3710      	adds	r7, #16
 800a948:	46bd      	mov	sp, r7
 800a94a:	bd80      	pop	{r7, pc}

0800a94c <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 800a94c:	b580      	push	{r7, lr}
 800a94e:	b082      	sub	sp, #8
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]
 800a954:	460b      	mov	r3, r1
 800a956:	70fb      	strb	r3, [r7, #3]
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800a958:	78fb      	ldrb	r3, [r7, #3]
 800a95a:	2200      	movs	r2, #0
 800a95c:	4619      	mov	r1, r3
 800a95e:	6878      	ldr	r0, [r7, #4]
 800a960:	f000 f806 	bl	800a970 <tcp_listen_with_backlog_and_err>
 800a964:	4603      	mov	r3, r0
}
 800a966:	4618      	mov	r0, r3
 800a968:	3708      	adds	r7, #8
 800a96a:	46bd      	mov	sp, r7
 800a96c:	bd80      	pop	{r7, pc}
	...

0800a970 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b088      	sub	sp, #32
 800a974:	af00      	add	r7, sp, #0
 800a976:	60f8      	str	r0, [r7, #12]
 800a978:	460b      	mov	r3, r1
 800a97a:	607a      	str	r2, [r7, #4]
 800a97c:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800a97e:	2300      	movs	r3, #0
 800a980:	61fb      	str	r3, [r7, #28]
  err_t res;

  LWIP_UNUSED_ARG(backlog);
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	7d1b      	ldrb	r3, [r3, #20]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d009      	beq.n	800a99e <tcp_listen_with_backlog_and_err+0x2e>
 800a98a:	4b3f      	ldr	r3, [pc, #252]	; (800aa88 <tcp_listen_with_backlog_and_err+0x118>)
 800a98c:	f44f 722d 	mov.w	r2, #692	; 0x2b4
 800a990:	493e      	ldr	r1, [pc, #248]	; (800aa8c <tcp_listen_with_backlog_and_err+0x11c>)
 800a992:	483f      	ldr	r0, [pc, #252]	; (800aa90 <tcp_listen_with_backlog_and_err+0x120>)
 800a994:	f009 fb12 	bl	8013fbc <iprintf>
 800a998:	23f1      	movs	r3, #241	; 0xf1
 800a99a:	76fb      	strb	r3, [r7, #27]
 800a99c:	e069      	b.n	800aa72 <tcp_listen_with_backlog_and_err+0x102>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	7d1b      	ldrb	r3, [r3, #20]
 800a9a2:	2b01      	cmp	r3, #1
 800a9a4:	d104      	bne.n	800a9b0 <tcp_listen_with_backlog_and_err+0x40>
    lpcb = (struct tcp_pcb_listen*)pcb;
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800a9aa:	23f7      	movs	r3, #247	; 0xf7
 800a9ac:	76fb      	strb	r3, [r7, #27]
    goto done;
 800a9ae:	e060      	b.n	800aa72 <tcp_listen_with_backlog_and_err+0x102>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800a9b0:	2002      	movs	r0, #2
 800a9b2:	f7fe fc07 	bl	80091c4 <memp_malloc>
 800a9b6:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800a9b8:	69fb      	ldr	r3, [r7, #28]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d102      	bne.n	800a9c4 <tcp_listen_with_backlog_and_err+0x54>
    res = ERR_MEM;
 800a9be:	23ff      	movs	r3, #255	; 0xff
 800a9c0:	76fb      	strb	r3, [r7, #27]
    goto done;
 800a9c2:	e056      	b.n	800aa72 <tcp_listen_with_backlog_and_err+0x102>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	691a      	ldr	r2, [r3, #16]
 800a9c8:	69fb      	ldr	r3, [r7, #28]
 800a9ca:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	8ada      	ldrh	r2, [r3, #22]
 800a9d0:	69fb      	ldr	r3, [r7, #28]
 800a9d2:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800a9d4:	69fb      	ldr	r3, [r7, #28]
 800a9d6:	2201      	movs	r2, #1
 800a9d8:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	7d5a      	ldrb	r2, [r3, #21]
 800a9de:	69fb      	ldr	r3, [r7, #28]
 800a9e0:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	7a1a      	ldrb	r2, [r3, #8]
 800a9e6:	69fb      	ldr	r3, [r7, #28]
 800a9e8:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	7a9a      	ldrb	r2, [r3, #10]
 800a9ee:	69fb      	ldr	r3, [r7, #28]
 800a9f0:	729a      	strb	r2, [r3, #10]
  lpcb->tos = pcb->tos;
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	7a5a      	ldrb	r2, [r3, #9]
 800a9f6:	69fb      	ldr	r3, [r7, #28]
 800a9f8:	725a      	strb	r2, [r3, #9]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	681a      	ldr	r2, [r3, #0]
 800a9fe:	69fb      	ldr	r3, [r7, #28]
 800aa00:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	8adb      	ldrh	r3, [r3, #22]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d021      	beq.n	800aa4e <tcp_listen_with_backlog_and_err+0xde>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800aa0a:	4b22      	ldr	r3, [pc, #136]	; (800aa94 <tcp_listen_with_backlog_and_err+0x124>)
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	68fa      	ldr	r2, [r7, #12]
 800aa10:	429a      	cmp	r2, r3
 800aa12:	d105      	bne.n	800aa20 <tcp_listen_with_backlog_and_err+0xb0>
 800aa14:	4b1f      	ldr	r3, [pc, #124]	; (800aa94 <tcp_listen_with_backlog_and_err+0x124>)
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	68db      	ldr	r3, [r3, #12]
 800aa1a:	4a1e      	ldr	r2, [pc, #120]	; (800aa94 <tcp_listen_with_backlog_and_err+0x124>)
 800aa1c:	6013      	str	r3, [r2, #0]
 800aa1e:	e013      	b.n	800aa48 <tcp_listen_with_backlog_and_err+0xd8>
 800aa20:	4b1c      	ldr	r3, [pc, #112]	; (800aa94 <tcp_listen_with_backlog_and_err+0x124>)
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	617b      	str	r3, [r7, #20]
 800aa26:	e00c      	b.n	800aa42 <tcp_listen_with_backlog_and_err+0xd2>
 800aa28:	697b      	ldr	r3, [r7, #20]
 800aa2a:	68db      	ldr	r3, [r3, #12]
 800aa2c:	68fa      	ldr	r2, [r7, #12]
 800aa2e:	429a      	cmp	r2, r3
 800aa30:	d104      	bne.n	800aa3c <tcp_listen_with_backlog_and_err+0xcc>
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	68da      	ldr	r2, [r3, #12]
 800aa36:	697b      	ldr	r3, [r7, #20]
 800aa38:	60da      	str	r2, [r3, #12]
 800aa3a:	e005      	b.n	800aa48 <tcp_listen_with_backlog_and_err+0xd8>
 800aa3c:	697b      	ldr	r3, [r7, #20]
 800aa3e:	68db      	ldr	r3, [r3, #12]
 800aa40:	617b      	str	r3, [r7, #20]
 800aa42:	697b      	ldr	r3, [r7, #20]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d1ef      	bne.n	800aa28 <tcp_listen_with_backlog_and_err+0xb8>
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	60da      	str	r2, [r3, #12]
  }
  memp_free(MEMP_TCP_PCB, pcb);
 800aa4e:	68f9      	ldr	r1, [r7, #12]
 800aa50:	2001      	movs	r0, #1
 800aa52:	f7fe fc27 	bl	80092a4 <memp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800aa56:	69fb      	ldr	r3, [r7, #28]
 800aa58:	4a0f      	ldr	r2, [pc, #60]	; (800aa98 <tcp_listen_with_backlog_and_err+0x128>)
 800aa5a:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800aa5c:	4b0f      	ldr	r3, [pc, #60]	; (800aa9c <tcp_listen_with_backlog_and_err+0x12c>)
 800aa5e:	681a      	ldr	r2, [r3, #0]
 800aa60:	69fb      	ldr	r3, [r7, #28]
 800aa62:	60da      	str	r2, [r3, #12]
 800aa64:	4a0d      	ldr	r2, [pc, #52]	; (800aa9c <tcp_listen_with_backlog_and_err+0x12c>)
 800aa66:	69fb      	ldr	r3, [r7, #28]
 800aa68:	6013      	str	r3, [r2, #0]
 800aa6a:	f004 fe21 	bl	800f6b0 <tcp_timer_needed>
  res = ERR_OK;
 800aa6e:	2300      	movs	r3, #0
 800aa70:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d002      	beq.n	800aa7e <tcp_listen_with_backlog_and_err+0x10e>
    *err = res;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	7efa      	ldrb	r2, [r7, #27]
 800aa7c:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800aa7e:	69fb      	ldr	r3, [r7, #28]
}
 800aa80:	4618      	mov	r0, r3
 800aa82:	3720      	adds	r7, #32
 800aa84:	46bd      	mov	sp, r7
 800aa86:	bd80      	pop	{r7, pc}
 800aa88:	080156d0 	.word	0x080156d0
 800aa8c:	080157fc 	.word	0x080157fc
 800aa90:	08015744 	.word	0x08015744
 800aa94:	20003290 	.word	0x20003290
 800aa98:	0800a92d 	.word	0x0800a92d
 800aa9c:	2000328c 	.word	0x2000328c

0800aaa0 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b084      	sub	sp, #16
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaac:	687a      	ldr	r2, [r7, #4]
 800aaae:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800aab0:	4413      	add	r3, r2
 800aab2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aab8:	687a      	ldr	r2, [r7, #4]
 800aaba:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800aabc:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800aac0:	bf28      	it	cs
 800aac2:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800aac6:	b292      	uxth	r2, r2
 800aac8:	4413      	add	r3, r2
 800aaca:	68fa      	ldr	r2, [r7, #12]
 800aacc:	1ad3      	subs	r3, r2, r3
 800aace:	2b00      	cmp	r3, #0
 800aad0:	db08      	blt.n	800aae4 <tcp_update_rcv_ann_wnd+0x44>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aade:	68fa      	ldr	r2, [r7, #12]
 800aae0:	1ad3      	subs	r3, r2, r3
 800aae2:	e020      	b.n	800ab26 <tcp_update_rcv_ann_wnd+0x86>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaec:	1ad3      	subs	r3, r2, r3
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	dd03      	ble.n	800aafa <tcp_update_rcv_ann_wnd+0x5a>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	855a      	strh	r2, [r3, #42]	; 0x2a
 800aaf8:	e014      	b.n	800ab24 <tcp_update_rcv_ann_wnd+0x84>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab02:	1ad3      	subs	r3, r2, r3
 800ab04:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800ab06:	68bb      	ldr	r3, [r7, #8]
 800ab08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab0c:	d306      	bcc.n	800ab1c <tcp_update_rcv_ann_wnd+0x7c>
 800ab0e:	4b08      	ldr	r3, [pc, #32]	; (800ab30 <tcp_update_rcv_ann_wnd+0x90>)
 800ab10:	f44f 7242 	mov.w	r2, #776	; 0x308
 800ab14:	4907      	ldr	r1, [pc, #28]	; (800ab34 <tcp_update_rcv_ann_wnd+0x94>)
 800ab16:	4808      	ldr	r0, [pc, #32]	; (800ab38 <tcp_update_rcv_ann_wnd+0x98>)
 800ab18:	f009 fa50 	bl	8013fbc <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800ab1c:	68bb      	ldr	r3, [r7, #8]
 800ab1e:	b29a      	uxth	r2, r3
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800ab24:	2300      	movs	r3, #0
  }
}
 800ab26:	4618      	mov	r0, r3
 800ab28:	3710      	adds	r7, #16
 800ab2a:	46bd      	mov	sp, r7
 800ab2c:	bd80      	pop	{r7, pc}
 800ab2e:	bf00      	nop
 800ab30:	080156d0 	.word	0x080156d0
 800ab34:	08015820 	.word	0x08015820
 800ab38:	08015744 	.word	0x08015744

0800ab3c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b084      	sub	sp, #16
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
 800ab44:	460b      	mov	r3, r1
 800ab46:	807b      	strh	r3, [r7, #2]
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	7d1b      	ldrb	r3, [r3, #20]
 800ab4c:	2b01      	cmp	r3, #1
 800ab4e:	d106      	bne.n	800ab5e <tcp_recved+0x22>
 800ab50:	4b23      	ldr	r3, [pc, #140]	; (800abe0 <tcp_recved+0xa4>)
 800ab52:	f44f 7248 	mov.w	r2, #800	; 0x320
 800ab56:	4923      	ldr	r1, [pc, #140]	; (800abe4 <tcp_recved+0xa8>)
 800ab58:	4823      	ldr	r0, [pc, #140]	; (800abe8 <tcp_recved+0xac>)
 800ab5a:	f009 fa2f 	bl	8013fbc <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ab62:	887b      	ldrh	r3, [r7, #2]
 800ab64:	4413      	add	r3, r2
 800ab66:	b29a      	uxth	r2, r3
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	851a      	strh	r2, [r3, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ab70:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ab74:	d904      	bls.n	800ab80 <tcp_recved+0x44>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800ab7c:	851a      	strh	r2, [r3, #40]	; 0x28
 800ab7e:	e017      	b.n	800abb0 <tcp_recved+0x74>
  } else if (pcb->rcv_wnd == 0) {
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d113      	bne.n	800abb0 <tcp_recved+0x74>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	7d1b      	ldrb	r3, [r3, #20]
 800ab8c:	2b07      	cmp	r3, #7
 800ab8e:	d003      	beq.n	800ab98 <tcp_recved+0x5c>
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	7d1b      	ldrb	r3, [r3, #20]
 800ab94:	2b09      	cmp	r3, #9
 800ab96:	d104      	bne.n	800aba2 <tcp_recved+0x66>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800ab9e:	851a      	strh	r2, [r3, #40]	; 0x28
 800aba0:	e006      	b.n	800abb0 <tcp_recved+0x74>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 800aba2:	4b0f      	ldr	r3, [pc, #60]	; (800abe0 <tcp_recved+0xa4>)
 800aba4:	f240 322d 	movw	r2, #813	; 0x32d
 800aba8:	4910      	ldr	r1, [pc, #64]	; (800abec <tcp_recved+0xb0>)
 800abaa:	480f      	ldr	r0, [pc, #60]	; (800abe8 <tcp_recved+0xac>)
 800abac:	f009 fa06 	bl	8013fbc <iprintf>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800abb0:	6878      	ldr	r0, [r7, #4]
 800abb2:	f7ff ff75 	bl	800aaa0 <tcp_update_rcv_ann_wnd>
 800abb6:	4603      	mov	r3, r0
 800abb8:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800abc0:	db09      	blt.n	800abd6 <tcp_recved+0x9a>
    tcp_ack_now(pcb);
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	7e9b      	ldrb	r3, [r3, #26]
 800abc6:	f043 0302 	orr.w	r3, r3, #2
 800abca:	b2da      	uxtb	r2, r3
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800abd0:	6878      	ldr	r0, [r7, #4]
 800abd2:	f004 f891 	bl	800ecf8 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800abd6:	bf00      	nop
 800abd8:	3710      	adds	r7, #16
 800abda:	46bd      	mov	sp, r7
 800abdc:	bd80      	pop	{r7, pc}
 800abde:	bf00      	nop
 800abe0:	080156d0 	.word	0x080156d0
 800abe4:	0801583c 	.word	0x0801583c
 800abe8:	08015744 	.word	0x08015744
 800abec:	08015864 	.word	0x08015864

0800abf0 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800abf0:	b480      	push	{r7}
 800abf2:	b083      	sub	sp, #12
 800abf4:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800abf6:	2300      	movs	r3, #0
 800abf8:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 800abfa:	4b1d      	ldr	r3, [pc, #116]	; (800ac70 <tcp_new_port+0x80>)
 800abfc:	881b      	ldrh	r3, [r3, #0]
 800abfe:	1c5a      	adds	r2, r3, #1
 800ac00:	b291      	uxth	r1, r2
 800ac02:	4a1b      	ldr	r2, [pc, #108]	; (800ac70 <tcp_new_port+0x80>)
 800ac04:	8011      	strh	r1, [r2, #0]
 800ac06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ac0a:	4293      	cmp	r3, r2
 800ac0c:	d103      	bne.n	800ac16 <tcp_new_port+0x26>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800ac0e:	4b18      	ldr	r3, [pc, #96]	; (800ac70 <tcp_new_port+0x80>)
 800ac10:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800ac14:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800ac16:	2300      	movs	r3, #0
 800ac18:	71fb      	strb	r3, [r7, #7]
 800ac1a:	e01e      	b.n	800ac5a <tcp_new_port+0x6a>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800ac1c:	79fb      	ldrb	r3, [r7, #7]
 800ac1e:	4a15      	ldr	r2, [pc, #84]	; (800ac74 <tcp_new_port+0x84>)
 800ac20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	603b      	str	r3, [r7, #0]
 800ac28:	e011      	b.n	800ac4e <tcp_new_port+0x5e>
      if (pcb->local_port == tcp_port) {
 800ac2a:	683b      	ldr	r3, [r7, #0]
 800ac2c:	8ada      	ldrh	r2, [r3, #22]
 800ac2e:	4b10      	ldr	r3, [pc, #64]	; (800ac70 <tcp_new_port+0x80>)
 800ac30:	881b      	ldrh	r3, [r3, #0]
 800ac32:	429a      	cmp	r2, r3
 800ac34:	d108      	bne.n	800ac48 <tcp_new_port+0x58>
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800ac36:	88bb      	ldrh	r3, [r7, #4]
 800ac38:	3301      	adds	r3, #1
 800ac3a:	80bb      	strh	r3, [r7, #4]
 800ac3c:	88bb      	ldrh	r3, [r7, #4]
 800ac3e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ac42:	d3da      	bcc.n	800abfa <tcp_new_port+0xa>
          return 0;
 800ac44:	2300      	movs	r3, #0
 800ac46:	e00d      	b.n	800ac64 <tcp_new_port+0x74>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800ac48:	683b      	ldr	r3, [r7, #0]
 800ac4a:	68db      	ldr	r3, [r3, #12]
 800ac4c:	603b      	str	r3, [r7, #0]
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d1ea      	bne.n	800ac2a <tcp_new_port+0x3a>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800ac54:	79fb      	ldrb	r3, [r7, #7]
 800ac56:	3301      	adds	r3, #1
 800ac58:	71fb      	strb	r3, [r7, #7]
 800ac5a:	79fb      	ldrb	r3, [r7, #7]
 800ac5c:	2b03      	cmp	r3, #3
 800ac5e:	d9dd      	bls.n	800ac1c <tcp_new_port+0x2c>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800ac60:	4b03      	ldr	r3, [pc, #12]	; (800ac70 <tcp_new_port+0x80>)
 800ac62:	881b      	ldrh	r3, [r3, #0]
}
 800ac64:	4618      	mov	r0, r3
 800ac66:	370c      	adds	r7, #12
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6e:	4770      	bx	lr
 800ac70:	20000120 	.word	0x20000120
 800ac74:	08016e20 	.word	0x08016e20

0800ac78 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800ac78:	b5b0      	push	{r4, r5, r7, lr}
 800ac7a:	b08c      	sub	sp, #48	; 0x30
 800ac7c:	af02      	add	r7, sp, #8
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800ac7e:	2300      	movs	r3, #0
 800ac80:	777b      	strb	r3, [r7, #29]

  ++tcp_ticks;
 800ac82:	4b96      	ldr	r3, [pc, #600]	; (800aedc <tcp_slowtmr+0x264>)
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	3301      	adds	r3, #1
 800ac88:	4a94      	ldr	r2, [pc, #592]	; (800aedc <tcp_slowtmr+0x264>)
 800ac8a:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800ac8c:	4b94      	ldr	r3, [pc, #592]	; (800aee0 <tcp_slowtmr+0x268>)
 800ac8e:	781b      	ldrb	r3, [r3, #0]
 800ac90:	3301      	adds	r3, #1
 800ac92:	b2da      	uxtb	r2, r3
 800ac94:	4b92      	ldr	r3, [pc, #584]	; (800aee0 <tcp_slowtmr+0x268>)
 800ac96:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800ac98:	2300      	movs	r3, #0
 800ac9a:	623b      	str	r3, [r7, #32]
  pcb = tcp_active_pcbs;
 800ac9c:	4b91      	ldr	r3, [pc, #580]	; (800aee4 <tcp_slowtmr+0x26c>)
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	627b      	str	r3, [r7, #36]	; 0x24
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800aca2:	e227      	b.n	800b0f4 <tcp_slowtmr+0x47c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800aca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aca6:	7d1b      	ldrb	r3, [r3, #20]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d106      	bne.n	800acba <tcp_slowtmr+0x42>
 800acac:	4b8e      	ldr	r3, [pc, #568]	; (800aee8 <tcp_slowtmr+0x270>)
 800acae:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 800acb2:	498e      	ldr	r1, [pc, #568]	; (800aeec <tcp_slowtmr+0x274>)
 800acb4:	488e      	ldr	r0, [pc, #568]	; (800aef0 <tcp_slowtmr+0x278>)
 800acb6:	f009 f981 	bl	8013fbc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800acba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acbc:	7d1b      	ldrb	r3, [r3, #20]
 800acbe:	2b01      	cmp	r3, #1
 800acc0:	d106      	bne.n	800acd0 <tcp_slowtmr+0x58>
 800acc2:	4b89      	ldr	r3, [pc, #548]	; (800aee8 <tcp_slowtmr+0x270>)
 800acc4:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800acc8:	498a      	ldr	r1, [pc, #552]	; (800aef4 <tcp_slowtmr+0x27c>)
 800acca:	4889      	ldr	r0, [pc, #548]	; (800aef0 <tcp_slowtmr+0x278>)
 800accc:	f009 f976 	bl	8013fbc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800acd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acd2:	7d1b      	ldrb	r3, [r3, #20]
 800acd4:	2b0a      	cmp	r3, #10
 800acd6:	d106      	bne.n	800ace6 <tcp_slowtmr+0x6e>
 800acd8:	4b83      	ldr	r3, [pc, #524]	; (800aee8 <tcp_slowtmr+0x270>)
 800acda:	f240 32f2 	movw	r2, #1010	; 0x3f2
 800acde:	4986      	ldr	r1, [pc, #536]	; (800aef8 <tcp_slowtmr+0x280>)
 800ace0:	4883      	ldr	r0, [pc, #524]	; (800aef0 <tcp_slowtmr+0x278>)
 800ace2:	f009 f96b 	bl	8013fbc <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800ace6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ace8:	7f5a      	ldrb	r2, [r3, #29]
 800acea:	4b7d      	ldr	r3, [pc, #500]	; (800aee0 <tcp_slowtmr+0x268>)
 800acec:	781b      	ldrb	r3, [r3, #0]
 800acee:	429a      	cmp	r2, r3
 800acf0:	d103      	bne.n	800acfa <tcp_slowtmr+0x82>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
 800acf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acf4:	68db      	ldr	r3, [r3, #12]
 800acf6:	627b      	str	r3, [r7, #36]	; 0x24
      continue;
 800acf8:	e1fc      	b.n	800b0f4 <tcp_slowtmr+0x47c>
    }
    pcb->last_timer = tcp_timer_ctr;
 800acfa:	4b79      	ldr	r3, [pc, #484]	; (800aee0 <tcp_slowtmr+0x268>)
 800acfc:	781a      	ldrb	r2, [r3, #0]
 800acfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad00:	775a      	strb	r2, [r3, #29]

    pcb_remove = 0;
 800ad02:	2300      	movs	r3, #0
 800ad04:	77fb      	strb	r3, [r7, #31]
    pcb_reset = 0;
 800ad06:	2300      	movs	r3, #0
 800ad08:	77bb      	strb	r3, [r7, #30]

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800ad0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad0c:	7d1b      	ldrb	r3, [r3, #20]
 800ad0e:	2b02      	cmp	r3, #2
 800ad10:	d108      	bne.n	800ad24 <tcp_slowtmr+0xac>
 800ad12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad14:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ad18:	2b05      	cmp	r3, #5
 800ad1a:	d903      	bls.n	800ad24 <tcp_slowtmr+0xac>
      ++pcb_remove;
 800ad1c:	7ffb      	ldrb	r3, [r7, #31]
 800ad1e:	3301      	adds	r3, #1
 800ad20:	77fb      	strb	r3, [r7, #31]
 800ad22:	e0a2      	b.n	800ae6a <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx >= TCP_MAXRTX) {
 800ad24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad26:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ad2a:	2b0b      	cmp	r3, #11
 800ad2c:	d903      	bls.n	800ad36 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800ad2e:	7ffb      	ldrb	r3, [r7, #31]
 800ad30:	3301      	adds	r3, #1
 800ad32:	77fb      	strb	r3, [r7, #31]
 800ad34:	e099      	b.n	800ae6a <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800ad36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad38:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d032      	beq.n	800ada6 <tcp_slowtmr+0x12e>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 800ad40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad42:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800ad46:	3b01      	subs	r3, #1
 800ad48:	4a6c      	ldr	r2, [pc, #432]	; (800aefc <tcp_slowtmr+0x284>)
 800ad4a:	5cd3      	ldrb	r3, [r2, r3]
 800ad4c:	74fb      	strb	r3, [r7, #19]
        if (pcb->persist_cnt < backoff_cnt) {
 800ad4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad50:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800ad54:	7cfa      	ldrb	r2, [r7, #19]
 800ad56:	429a      	cmp	r2, r3
 800ad58:	d907      	bls.n	800ad6a <tcp_slowtmr+0xf2>
          pcb->persist_cnt++;
 800ad5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad5c:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800ad60:	3301      	adds	r3, #1
 800ad62:	b2da      	uxtb	r2, r3
 800ad64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad66:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        }
        if (pcb->persist_cnt >= backoff_cnt) {
 800ad6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad6c:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800ad70:	7cfa      	ldrb	r2, [r7, #19]
 800ad72:	429a      	cmp	r2, r3
 800ad74:	d879      	bhi.n	800ae6a <tcp_slowtmr+0x1f2>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 800ad76:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ad78:	f004 fbda 	bl	800f530 <tcp_zero_window_probe>
 800ad7c:	4603      	mov	r3, r0
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d173      	bne.n	800ae6a <tcp_slowtmr+0x1f2>
            pcb->persist_cnt = 0;
 800ad82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad84:	2200      	movs	r2, #0
 800ad86:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800ad8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad8c:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800ad90:	2b06      	cmp	r3, #6
 800ad92:	d86a      	bhi.n	800ae6a <tcp_slowtmr+0x1f2>
              pcb->persist_backoff++;
 800ad94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad96:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800ad9a:	3301      	adds	r3, #1
 800ad9c:	b2da      	uxtb	r2, r3
 800ad9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ada0:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 800ada4:	e061      	b.n	800ae6a <tcp_slowtmr+0x1f2>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if (pcb->rtime >= 0) {
 800ada6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ada8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800adac:	2b00      	cmp	r3, #0
 800adae:	db08      	blt.n	800adc2 <tcp_slowtmr+0x14a>
          ++pcb->rtime;
 800adb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adb2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800adb6:	b29b      	uxth	r3, r3
 800adb8:	3301      	adds	r3, #1
 800adba:	b29b      	uxth	r3, r3
 800adbc:	b21a      	sxth	r2, r3
 800adbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adc0:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 800adc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d04f      	beq.n	800ae6a <tcp_slowtmr+0x1f2>
 800adca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adcc:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800add0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800add2:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800add6:	429a      	cmp	r2, r3
 800add8:	db47      	blt.n	800ae6a <tcp_slowtmr+0x1f2>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
 800adda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800addc:	7d1b      	ldrb	r3, [r3, #20]
 800adde:	2b02      	cmp	r3, #2
 800ade0:	d018      	beq.n	800ae14 <tcp_slowtmr+0x19c>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 800ade2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ade4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ade8:	2b0c      	cmp	r3, #12
 800adea:	bf28      	it	cs
 800adec:	230c      	movcs	r3, #12
 800adee:	75fb      	strb	r3, [r7, #23]
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800adf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adf2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800adf6:	10db      	asrs	r3, r3, #3
 800adf8:	b21b      	sxth	r3, r3
 800adfa:	461a      	mov	r2, r3
 800adfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adfe:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ae02:	4413      	add	r3, r2
 800ae04:	7dfa      	ldrb	r2, [r7, #23]
 800ae06:	493e      	ldr	r1, [pc, #248]	; (800af00 <tcp_slowtmr+0x288>)
 800ae08:	5c8a      	ldrb	r2, [r1, r2]
 800ae0a:	4093      	lsls	r3, r2
 800ae0c:	b21a      	sxth	r2, r3
 800ae0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae10:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
 800ae14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae16:	2200      	movs	r2, #0
 800ae18:	861a      	strh	r2, [r3, #48]	; 0x30

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800ae1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae1c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800ae20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae22:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ae26:	4293      	cmp	r3, r2
 800ae28:	bf28      	it	cs
 800ae2a:	4613      	movcs	r3, r2
 800ae2c:	82bb      	strh	r3, [r7, #20]
          pcb->ssthresh = eff_wnd >> 1;
 800ae2e:	8abb      	ldrh	r3, [r7, #20]
 800ae30:	085b      	lsrs	r3, r3, #1
 800ae32:	b29a      	uxth	r2, r3
 800ae34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae36:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800ae3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae3c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800ae40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae42:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ae44:	005b      	lsls	r3, r3, #1
 800ae46:	b29b      	uxth	r3, r3
 800ae48:	429a      	cmp	r2, r3
 800ae4a:	d206      	bcs.n	800ae5a <tcp_slowtmr+0x1e2>
            pcb->ssthresh = (pcb->mss << 1);
 800ae4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae4e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ae50:	005b      	lsls	r3, r3, #1
 800ae52:	b29a      	uxth	r2, r3
 800ae54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae56:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          }
          pcb->cwnd = pcb->mss;
 800ae5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae5c:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800ae5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae60:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
 800ae64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ae66:	f004 fa47 	bl	800f2f8 <tcp_rexmit_rto>
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800ae6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae6c:	7d1b      	ldrb	r3, [r3, #20]
 800ae6e:	2b06      	cmp	r3, #6
 800ae70:	d10f      	bne.n	800ae92 <tcp_slowtmr+0x21a>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800ae72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae74:	7e9b      	ldrb	r3, [r3, #26]
 800ae76:	f003 0310 	and.w	r3, r3, #16
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d009      	beq.n	800ae92 <tcp_slowtmr+0x21a>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ae7e:	4b17      	ldr	r3, [pc, #92]	; (800aedc <tcp_slowtmr+0x264>)
 800ae80:	681a      	ldr	r2, [r3, #0]
 800ae82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae84:	6a1b      	ldr	r3, [r3, #32]
 800ae86:	1ad3      	subs	r3, r2, r3
 800ae88:	2b28      	cmp	r3, #40	; 0x28
 800ae8a:	d902      	bls.n	800ae92 <tcp_slowtmr+0x21a>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800ae8c:	7ffb      	ldrb	r3, [r7, #31]
 800ae8e:	3301      	adds	r3, #1
 800ae90:	77fb      	strb	r3, [r7, #31]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800ae92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae94:	7a1b      	ldrb	r3, [r3, #8]
 800ae96:	f003 0308 	and.w	r3, r3, #8
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d05d      	beq.n	800af5a <tcp_slowtmr+0x2e2>
       ((pcb->state == ESTABLISHED) ||
 800ae9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aea0:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800aea2:	2b04      	cmp	r3, #4
 800aea4:	d003      	beq.n	800aeae <tcp_slowtmr+0x236>
        (pcb->state == CLOSE_WAIT))) {
 800aea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aea8:	7d1b      	ldrb	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
 800aeaa:	2b07      	cmp	r3, #7
 800aeac:	d155      	bne.n	800af5a <tcp_slowtmr+0x2e2>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800aeae:	4b0b      	ldr	r3, [pc, #44]	; (800aedc <tcp_slowtmr+0x264>)
 800aeb0:	681a      	ldr	r2, [r3, #0]
 800aeb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeb4:	6a1b      	ldr	r3, [r3, #32]
 800aeb6:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 800aeb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeba:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 800aebe:	4b11      	ldr	r3, [pc, #68]	; (800af04 <tcp_slowtmr+0x28c>)
 800aec0:	440b      	add	r3, r1
 800aec2:	4911      	ldr	r1, [pc, #68]	; (800af08 <tcp_slowtmr+0x290>)
 800aec4:	fba1 1303 	umull	r1, r3, r1, r3
 800aec8:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800aeca:	429a      	cmp	r2, r3
 800aecc:	d91e      	bls.n	800af0c <tcp_slowtmr+0x294>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print(TCP_DEBUG, &pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800aece:	7ffb      	ldrb	r3, [r7, #31]
 800aed0:	3301      	adds	r3, #1
 800aed2:	77fb      	strb	r3, [r7, #31]
        ++pcb_reset;
 800aed4:	7fbb      	ldrb	r3, [r7, #30]
 800aed6:	3301      	adds	r3, #1
 800aed8:	77bb      	strb	r3, [r7, #30]
 800aeda:	e03e      	b.n	800af5a <tcp_slowtmr+0x2e2>
 800aedc:	20003288 	.word	0x20003288
 800aee0:	20000252 	.word	0x20000252
 800aee4:	20003284 	.word	0x20003284
 800aee8:	080156d0 	.word	0x080156d0
 800aeec:	080158b8 	.word	0x080158b8
 800aef0:	08015744 	.word	0x08015744
 800aef4:	080158e4 	.word	0x080158e4
 800aef8:	08015910 	.word	0x08015910
 800aefc:	08016e18 	.word	0x08016e18
 800af00:	08016e08 	.word	0x08016e08
 800af04:	000a4cb8 	.word	0x000a4cb8
 800af08:	10624dd3 	.word	0x10624dd3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800af0c:	4b97      	ldr	r3, [pc, #604]	; (800b16c <tcp_slowtmr+0x4f4>)
 800af0e:	681a      	ldr	r2, [r3, #0]
 800af10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af12:	6a1b      	ldr	r3, [r3, #32]
 800af14:	1ad2      	subs	r2, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800af16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af18:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 800af1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af1e:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800af22:	4618      	mov	r0, r3
 800af24:	4b92      	ldr	r3, [pc, #584]	; (800b170 <tcp_slowtmr+0x4f8>)
 800af26:	fb03 f300 	mul.w	r3, r3, r0
 800af2a:	440b      	add	r3, r1
                / TCP_SLOW_INTERVAL)
 800af2c:	4991      	ldr	r1, [pc, #580]	; (800b174 <tcp_slowtmr+0x4fc>)
 800af2e:	fba1 1303 	umull	r1, r3, r1, r3
 800af32:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800af34:	429a      	cmp	r2, r3
 800af36:	d910      	bls.n	800af5a <tcp_slowtmr+0x2e2>
      {
        err = tcp_keepalive(pcb);
 800af38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800af3a:	f004 fabc 	bl	800f4b6 <tcp_keepalive>
 800af3e:	4603      	mov	r3, r0
 800af40:	777b      	strb	r3, [r7, #29]
        if (err == ERR_OK) {
 800af42:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d107      	bne.n	800af5a <tcp_slowtmr+0x2e2>
          pcb->keep_cnt_sent++;
 800af4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af4c:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800af50:	3301      	adds	r3, #1
 800af52:	b2da      	uxtb	r2, r3
 800af54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af56:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800af5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d016      	beq.n	800af90 <tcp_slowtmr+0x318>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 800af62:	4b82      	ldr	r3, [pc, #520]	; (800b16c <tcp_slowtmr+0x4f4>)
 800af64:	681a      	ldr	r2, [r3, #0]
 800af66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af68:	6a1b      	ldr	r3, [r3, #32]
 800af6a:	1ad2      	subs	r2, r2, r3
 800af6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af6e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800af72:	4619      	mov	r1, r3
 800af74:	460b      	mov	r3, r1
 800af76:	005b      	lsls	r3, r3, #1
 800af78:	440b      	add	r3, r1
 800af7a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800af7c:	429a      	cmp	r2, r3
 800af7e:	d307      	bcc.n	800af90 <tcp_slowtmr+0x318>
      tcp_segs_free(pcb->ooseq);
 800af80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af84:	4618      	mov	r0, r3
 800af86:	f000 fa04 	bl	800b392 <tcp_segs_free>
      pcb->ooseq = NULL;
 800af8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af8c:	2200      	movs	r2, #0
 800af8e:	671a      	str	r2, [r3, #112]	; 0x70
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800af90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af92:	7d1b      	ldrb	r3, [r3, #20]
 800af94:	2b03      	cmp	r3, #3
 800af96:	d109      	bne.n	800afac <tcp_slowtmr+0x334>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800af98:	4b74      	ldr	r3, [pc, #464]	; (800b16c <tcp_slowtmr+0x4f4>)
 800af9a:	681a      	ldr	r2, [r3, #0]
 800af9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af9e:	6a1b      	ldr	r3, [r3, #32]
 800afa0:	1ad3      	subs	r3, r2, r3
 800afa2:	2b28      	cmp	r3, #40	; 0x28
 800afa4:	d902      	bls.n	800afac <tcp_slowtmr+0x334>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800afa6:	7ffb      	ldrb	r3, [r7, #31]
 800afa8:	3301      	adds	r3, #1
 800afaa:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800afac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afae:	7d1b      	ldrb	r3, [r3, #20]
 800afb0:	2b09      	cmp	r3, #9
 800afb2:	d109      	bne.n	800afc8 <tcp_slowtmr+0x350>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800afb4:	4b6d      	ldr	r3, [pc, #436]	; (800b16c <tcp_slowtmr+0x4f4>)
 800afb6:	681a      	ldr	r2, [r3, #0]
 800afb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afba:	6a1b      	ldr	r3, [r3, #32]
 800afbc:	1ad3      	subs	r3, r2, r3
 800afbe:	2bf0      	cmp	r3, #240	; 0xf0
 800afc0:	d902      	bls.n	800afc8 <tcp_slowtmr+0x350>
        ++pcb_remove;
 800afc2:	7ffb      	ldrb	r3, [r7, #31]
 800afc4:	3301      	adds	r3, #1
 800afc6:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800afc8:	7ffb      	ldrb	r3, [r7, #31]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d05d      	beq.n	800b08a <tcp_slowtmr+0x412>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800afce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800afd4:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800afd6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800afd8:	f000 fc4c 	bl	800b874 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800afdc:	6a3b      	ldr	r3, [r7, #32]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d010      	beq.n	800b004 <tcp_slowtmr+0x38c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800afe2:	4b65      	ldr	r3, [pc, #404]	; (800b178 <tcp_slowtmr+0x500>)
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800afe8:	429a      	cmp	r2, r3
 800afea:	d106      	bne.n	800affa <tcp_slowtmr+0x382>
 800afec:	4b63      	ldr	r3, [pc, #396]	; (800b17c <tcp_slowtmr+0x504>)
 800afee:	f240 4289 	movw	r2, #1161	; 0x489
 800aff2:	4963      	ldr	r1, [pc, #396]	; (800b180 <tcp_slowtmr+0x508>)
 800aff4:	4863      	ldr	r0, [pc, #396]	; (800b184 <tcp_slowtmr+0x50c>)
 800aff6:	f008 ffe1 	bl	8013fbc <iprintf>
        prev->next = pcb->next;
 800affa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800affc:	68da      	ldr	r2, [r3, #12]
 800affe:	6a3b      	ldr	r3, [r7, #32]
 800b000:	60da      	str	r2, [r3, #12]
 800b002:	e00f      	b.n	800b024 <tcp_slowtmr+0x3ac>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800b004:	4b5c      	ldr	r3, [pc, #368]	; (800b178 <tcp_slowtmr+0x500>)
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b00a:	429a      	cmp	r2, r3
 800b00c:	d006      	beq.n	800b01c <tcp_slowtmr+0x3a4>
 800b00e:	4b5b      	ldr	r3, [pc, #364]	; (800b17c <tcp_slowtmr+0x504>)
 800b010:	f240 428d 	movw	r2, #1165	; 0x48d
 800b014:	495c      	ldr	r1, [pc, #368]	; (800b188 <tcp_slowtmr+0x510>)
 800b016:	485b      	ldr	r0, [pc, #364]	; (800b184 <tcp_slowtmr+0x50c>)
 800b018:	f008 ffd0 	bl	8013fbc <iprintf>
        tcp_active_pcbs = pcb->next;
 800b01c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b01e:	68db      	ldr	r3, [r3, #12]
 800b020:	4a55      	ldr	r2, [pc, #340]	; (800b178 <tcp_slowtmr+0x500>)
 800b022:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800b024:	7fbb      	ldrb	r3, [r7, #30]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d010      	beq.n	800b04c <tcp_slowtmr+0x3d4>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800b02a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b02c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800b02e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b030:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800b032:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800b034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b036:	1d1d      	adds	r5, r3, #4
 800b038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b03a:	8adb      	ldrh	r3, [r3, #22]
 800b03c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b03e:	8b12      	ldrh	r2, [r2, #24]
 800b040:	9201      	str	r2, [sp, #4]
 800b042:	9300      	str	r3, [sp, #0]
 800b044:	462b      	mov	r3, r5
 800b046:	4622      	mov	r2, r4
 800b048:	f004 f8e0 	bl	800f20c <tcp_rst>
                 pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800b04c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b04e:	691b      	ldr	r3, [r3, #16]
 800b050:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800b052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b054:	7d1b      	ldrb	r3, [r3, #20]
 800b056:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800b058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b05a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800b05c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b05e:	68db      	ldr	r3, [r3, #12]
 800b060:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 800b062:	6839      	ldr	r1, [r7, #0]
 800b064:	2001      	movs	r0, #1
 800b066:	f7fe f91d 	bl	80092a4 <memp_free>

      tcp_active_pcbs_changed = 0;
 800b06a:	4b48      	ldr	r3, [pc, #288]	; (800b18c <tcp_slowtmr+0x514>)
 800b06c:	2200      	movs	r2, #0
 800b06e:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	2b00      	cmp	r3, #0
 800b074:	d004      	beq.n	800b080 <tcp_slowtmr+0x408>
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	f06f 010c 	mvn.w	r1, #12
 800b07c:	68b8      	ldr	r0, [r7, #8]
 800b07e:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800b080:	4b42      	ldr	r3, [pc, #264]	; (800b18c <tcp_slowtmr+0x514>)
 800b082:	781b      	ldrb	r3, [r3, #0]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d035      	beq.n	800b0f4 <tcp_slowtmr+0x47c>
        goto tcp_slowtmr_start;
 800b088:	e606      	b.n	800ac98 <tcp_slowtmr+0x20>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800b08a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b08c:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 800b08e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b090:	68db      	ldr	r3, [r3, #12]
 800b092:	627b      	str	r3, [r7, #36]	; 0x24

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800b094:	6a3b      	ldr	r3, [r7, #32]
 800b096:	7edb      	ldrb	r3, [r3, #27]
 800b098:	3301      	adds	r3, #1
 800b09a:	b2da      	uxtb	r2, r3
 800b09c:	6a3b      	ldr	r3, [r7, #32]
 800b09e:	76da      	strb	r2, [r3, #27]
      if (prev->polltmr >= prev->pollinterval) {
 800b0a0:	6a3b      	ldr	r3, [r7, #32]
 800b0a2:	7eda      	ldrb	r2, [r3, #27]
 800b0a4:	6a3b      	ldr	r3, [r7, #32]
 800b0a6:	7f1b      	ldrb	r3, [r3, #28]
 800b0a8:	429a      	cmp	r2, r3
 800b0aa:	d323      	bcc.n	800b0f4 <tcp_slowtmr+0x47c>
        prev->polltmr = 0;
 800b0ac:	6a3b      	ldr	r3, [r7, #32]
 800b0ae:	2200      	movs	r2, #0
 800b0b0:	76da      	strb	r2, [r3, #27]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800b0b2:	4b36      	ldr	r3, [pc, #216]	; (800b18c <tcp_slowtmr+0x514>)
 800b0b4:	2200      	movs	r2, #0
 800b0b6:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800b0b8:	6a3b      	ldr	r3, [r7, #32]
 800b0ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d00a      	beq.n	800b0d8 <tcp_slowtmr+0x460>
 800b0c2:	6a3b      	ldr	r3, [r7, #32]
 800b0c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0c8:	6a3a      	ldr	r2, [r7, #32]
 800b0ca:	6912      	ldr	r2, [r2, #16]
 800b0cc:	6a39      	ldr	r1, [r7, #32]
 800b0ce:	4610      	mov	r0, r2
 800b0d0:	4798      	blx	r3
 800b0d2:	4603      	mov	r3, r0
 800b0d4:	777b      	strb	r3, [r7, #29]
 800b0d6:	e001      	b.n	800b0dc <tcp_slowtmr+0x464>
 800b0d8:	2300      	movs	r3, #0
 800b0da:	777b      	strb	r3, [r7, #29]
        if (tcp_active_pcbs_changed) {
 800b0dc:	4b2b      	ldr	r3, [pc, #172]	; (800b18c <tcp_slowtmr+0x514>)
 800b0de:	781b      	ldrb	r3, [r3, #0]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d000      	beq.n	800b0e6 <tcp_slowtmr+0x46e>
          goto tcp_slowtmr_start;
 800b0e4:	e5d8      	b.n	800ac98 <tcp_slowtmr+0x20>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800b0e6:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d102      	bne.n	800b0f4 <tcp_slowtmr+0x47c>
          tcp_output(prev);
 800b0ee:	6a38      	ldr	r0, [r7, #32]
 800b0f0:	f003 fe02 	bl	800ecf8 <tcp_output>
  while (pcb != NULL) {
 800b0f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	f47f add4 	bne.w	800aca4 <tcp_slowtmr+0x2c>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	623b      	str	r3, [r7, #32]
  pcb = tcp_tw_pcbs;
 800b100:	4b23      	ldr	r3, [pc, #140]	; (800b190 <tcp_slowtmr+0x518>)
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 800b106:	e068      	b.n	800b1da <tcp_slowtmr+0x562>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800b108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b10a:	7d1b      	ldrb	r3, [r3, #20]
 800b10c:	2b0a      	cmp	r3, #10
 800b10e:	d006      	beq.n	800b11e <tcp_slowtmr+0x4a6>
 800b110:	4b1a      	ldr	r3, [pc, #104]	; (800b17c <tcp_slowtmr+0x504>)
 800b112:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800b116:	491f      	ldr	r1, [pc, #124]	; (800b194 <tcp_slowtmr+0x51c>)
 800b118:	481a      	ldr	r0, [pc, #104]	; (800b184 <tcp_slowtmr+0x50c>)
 800b11a:	f008 ff4f 	bl	8013fbc <iprintf>
    pcb_remove = 0;
 800b11e:	2300      	movs	r3, #0
 800b120:	77fb      	strb	r3, [r7, #31]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800b122:	4b12      	ldr	r3, [pc, #72]	; (800b16c <tcp_slowtmr+0x4f4>)
 800b124:	681a      	ldr	r2, [r3, #0]
 800b126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b128:	6a1b      	ldr	r3, [r3, #32]
 800b12a:	1ad3      	subs	r3, r2, r3
 800b12c:	2bf0      	cmp	r3, #240	; 0xf0
 800b12e:	d902      	bls.n	800b136 <tcp_slowtmr+0x4be>
      ++pcb_remove;
 800b130:	7ffb      	ldrb	r3, [r7, #31]
 800b132:	3301      	adds	r3, #1
 800b134:	77fb      	strb	r3, [r7, #31]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800b136:	7ffb      	ldrb	r3, [r7, #31]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d049      	beq.n	800b1d0 <tcp_slowtmr+0x558>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800b13c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b13e:	f000 fb99 	bl	800b874 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800b142:	6a3b      	ldr	r3, [r7, #32]
 800b144:	2b00      	cmp	r3, #0
 800b146:	d029      	beq.n	800b19c <tcp_slowtmr+0x524>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800b148:	4b11      	ldr	r3, [pc, #68]	; (800b190 <tcp_slowtmr+0x518>)
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b14e:	429a      	cmp	r2, r3
 800b150:	d106      	bne.n	800b160 <tcp_slowtmr+0x4e8>
 800b152:	4b0a      	ldr	r3, [pc, #40]	; (800b17c <tcp_slowtmr+0x504>)
 800b154:	f240 42cb 	movw	r2, #1227	; 0x4cb
 800b158:	490f      	ldr	r1, [pc, #60]	; (800b198 <tcp_slowtmr+0x520>)
 800b15a:	480a      	ldr	r0, [pc, #40]	; (800b184 <tcp_slowtmr+0x50c>)
 800b15c:	f008 ff2e 	bl	8013fbc <iprintf>
        prev->next = pcb->next;
 800b160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b162:	68da      	ldr	r2, [r3, #12]
 800b164:	6a3b      	ldr	r3, [r7, #32]
 800b166:	60da      	str	r2, [r3, #12]
 800b168:	e028      	b.n	800b1bc <tcp_slowtmr+0x544>
 800b16a:	bf00      	nop
 800b16c:	20003288 	.word	0x20003288
 800b170:	000124f8 	.word	0x000124f8
 800b174:	10624dd3 	.word	0x10624dd3
 800b178:	20003284 	.word	0x20003284
 800b17c:	080156d0 	.word	0x080156d0
 800b180:	08015940 	.word	0x08015940
 800b184:	08015744 	.word	0x08015744
 800b188:	0801596c 	.word	0x0801596c
 800b18c:	20003280 	.word	0x20003280
 800b190:	20003294 	.word	0x20003294
 800b194:	08015998 	.word	0x08015998
 800b198:	080159c8 	.word	0x080159c8
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800b19c:	4b12      	ldr	r3, [pc, #72]	; (800b1e8 <tcp_slowtmr+0x570>)
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1a2:	429a      	cmp	r2, r3
 800b1a4:	d006      	beq.n	800b1b4 <tcp_slowtmr+0x53c>
 800b1a6:	4b11      	ldr	r3, [pc, #68]	; (800b1ec <tcp_slowtmr+0x574>)
 800b1a8:	f240 42cf 	movw	r2, #1231	; 0x4cf
 800b1ac:	4910      	ldr	r1, [pc, #64]	; (800b1f0 <tcp_slowtmr+0x578>)
 800b1ae:	4811      	ldr	r0, [pc, #68]	; (800b1f4 <tcp_slowtmr+0x57c>)
 800b1b0:	f008 ff04 	bl	8013fbc <iprintf>
        tcp_tw_pcbs = pcb->next;
 800b1b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1b6:	68db      	ldr	r3, [r3, #12]
 800b1b8:	4a0b      	ldr	r2, [pc, #44]	; (800b1e8 <tcp_slowtmr+0x570>)
 800b1ba:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800b1bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1be:	61bb      	str	r3, [r7, #24]
      pcb = pcb->next;
 800b1c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1c2:	68db      	ldr	r3, [r3, #12]
 800b1c4:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 800b1c6:	69b9      	ldr	r1, [r7, #24]
 800b1c8:	2001      	movs	r0, #1
 800b1ca:	f7fe f86b 	bl	80092a4 <memp_free>
 800b1ce:	e004      	b.n	800b1da <tcp_slowtmr+0x562>
    } else {
      prev = pcb;
 800b1d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1d2:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 800b1d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1d6:	68db      	ldr	r3, [r3, #12]
 800b1d8:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 800b1da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d193      	bne.n	800b108 <tcp_slowtmr+0x490>
    }
  }
}
 800b1e0:	bf00      	nop
 800b1e2:	3728      	adds	r7, #40	; 0x28
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	bdb0      	pop	{r4, r5, r7, pc}
 800b1e8:	20003294 	.word	0x20003294
 800b1ec:	080156d0 	.word	0x080156d0
 800b1f0:	080159f0 	.word	0x080159f0
 800b1f4:	08015744 	.word	0x08015744

0800b1f8 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800b1f8:	b580      	push	{r7, lr}
 800b1fa:	b082      	sub	sp, #8
 800b1fc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800b1fe:	4b2d      	ldr	r3, [pc, #180]	; (800b2b4 <tcp_fasttmr+0xbc>)
 800b200:	781b      	ldrb	r3, [r3, #0]
 800b202:	3301      	adds	r3, #1
 800b204:	b2da      	uxtb	r2, r3
 800b206:	4b2b      	ldr	r3, [pc, #172]	; (800b2b4 <tcp_fasttmr+0xbc>)
 800b208:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800b20a:	4b2b      	ldr	r3, [pc, #172]	; (800b2b8 <tcp_fasttmr+0xc0>)
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800b210:	e048      	b.n	800b2a4 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	7f5a      	ldrb	r2, [r3, #29]
 800b216:	4b27      	ldr	r3, [pc, #156]	; (800b2b4 <tcp_fasttmr+0xbc>)
 800b218:	781b      	ldrb	r3, [r3, #0]
 800b21a:	429a      	cmp	r2, r3
 800b21c:	d03f      	beq.n	800b29e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800b21e:	4b25      	ldr	r3, [pc, #148]	; (800b2b4 <tcp_fasttmr+0xbc>)
 800b220:	781a      	ldrb	r2, [r3, #0]
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	775a      	strb	r2, [r3, #29]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	7e9b      	ldrb	r3, [r3, #26]
 800b22a:	f003 0301 	and.w	r3, r3, #1
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d010      	beq.n	800b254 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	7e9b      	ldrb	r3, [r3, #26]
 800b236:	f043 0302 	orr.w	r3, r3, #2
 800b23a:	b2da      	uxtb	r2, r3
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	769a      	strb	r2, [r3, #26]
        tcp_output(pcb);
 800b240:	6878      	ldr	r0, [r7, #4]
 800b242:	f003 fd59 	bl	800ecf8 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	7e9b      	ldrb	r3, [r3, #26]
 800b24a:	f023 0303 	bic.w	r3, r3, #3
 800b24e:	b2da      	uxtb	r2, r3
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	769a      	strb	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	7e9b      	ldrb	r3, [r3, #26]
 800b258:	f003 0308 	and.w	r3, r3, #8
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d009      	beq.n	800b274 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	7e9b      	ldrb	r3, [r3, #26]
 800b264:	f023 0308 	bic.w	r3, r3, #8
 800b268:	b2da      	uxtb	r2, r3
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	769a      	strb	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800b26e:	6878      	ldr	r0, [r7, #4]
 800b270:	f7ff f98e 	bl	800a590 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	68db      	ldr	r3, [r3, #12]
 800b278:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d00a      	beq.n	800b298 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800b282:	4b0e      	ldr	r3, [pc, #56]	; (800b2bc <tcp_fasttmr+0xc4>)
 800b284:	2200      	movs	r2, #0
 800b286:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800b288:	6878      	ldr	r0, [r7, #4]
 800b28a:	f000 f819 	bl	800b2c0 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800b28e:	4b0b      	ldr	r3, [pc, #44]	; (800b2bc <tcp_fasttmr+0xc4>)
 800b290:	781b      	ldrb	r3, [r3, #0]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d000      	beq.n	800b298 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800b296:	e7b8      	b.n	800b20a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800b298:	683b      	ldr	r3, [r7, #0]
 800b29a:	607b      	str	r3, [r7, #4]
 800b29c:	e002      	b.n	800b2a4 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	68db      	ldr	r3, [r3, #12]
 800b2a2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d1b3      	bne.n	800b212 <tcp_fasttmr+0x1a>
    }
  }
}
 800b2aa:	bf00      	nop
 800b2ac:	3708      	adds	r7, #8
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	bd80      	pop	{r7, pc}
 800b2b2:	bf00      	nop
 800b2b4:	20000252 	.word	0x20000252
 800b2b8:	20003284 	.word	0x20003284
 800b2bc:	20003280 	.word	0x20003280

0800b2c0 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800b2c0:	b590      	push	{r4, r7, lr}
 800b2c2:	b085      	sub	sp, #20
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b2cc:	7b5b      	ldrb	r3, [r3, #13]
 800b2ce:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b2d4:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	2200      	movs	r2, #0
 800b2da:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d00b      	beq.n	800b2fe <tcp_process_refused_data+0x3e>
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	6918      	ldr	r0, [r3, #16]
 800b2f0:	2300      	movs	r3, #0
 800b2f2:	68ba      	ldr	r2, [r7, #8]
 800b2f4:	6879      	ldr	r1, [r7, #4]
 800b2f6:	47a0      	blx	r4
 800b2f8:	4603      	mov	r3, r0
 800b2fa:	73fb      	strb	r3, [r7, #15]
 800b2fc:	e007      	b.n	800b30e <tcp_process_refused_data+0x4e>
 800b2fe:	2300      	movs	r3, #0
 800b300:	68ba      	ldr	r2, [r7, #8]
 800b302:	6879      	ldr	r1, [r7, #4]
 800b304:	2000      	movs	r0, #0
 800b306:	f000 f89b 	bl	800b440 <tcp_recv_null>
 800b30a:	4603      	mov	r3, r0
 800b30c:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800b30e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b312:	2b00      	cmp	r3, #0
 800b314:	d12a      	bne.n	800b36c <tcp_process_refused_data+0xac>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
 800b316:	7bbb      	ldrb	r3, [r7, #14]
 800b318:	f003 0320 	and.w	r3, r3, #32
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d033      	beq.n	800b388 <tcp_process_refused_data+0xc8>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b324:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800b328:	d005      	beq.n	800b336 <tcp_process_refused_data+0x76>
          pcb->rcv_wnd++;
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b32e:	3301      	adds	r3, #1
 800b330:	b29a      	uxth	r2, r3
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d00b      	beq.n	800b358 <tcp_process_refused_data+0x98>
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	6918      	ldr	r0, [r3, #16]
 800b34a:	2300      	movs	r3, #0
 800b34c:	2200      	movs	r2, #0
 800b34e:	6879      	ldr	r1, [r7, #4]
 800b350:	47a0      	blx	r4
 800b352:	4603      	mov	r3, r0
 800b354:	73fb      	strb	r3, [r7, #15]
 800b356:	e001      	b.n	800b35c <tcp_process_refused_data+0x9c>
 800b358:	2300      	movs	r3, #0
 800b35a:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800b35c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b360:	f113 0f0d 	cmn.w	r3, #13
 800b364:	d110      	bne.n	800b388 <tcp_process_refused_data+0xc8>
          return ERR_ABRT;
 800b366:	f06f 030c 	mvn.w	r3, #12
 800b36a:	e00e      	b.n	800b38a <tcp_process_refused_data+0xca>
        }
      }
    } else if (err == ERR_ABRT) {
 800b36c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b370:	f113 0f0d 	cmn.w	r3, #13
 800b374:	d102      	bne.n	800b37c <tcp_process_refused_data+0xbc>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800b376:	f06f 030c 	mvn.w	r3, #12
 800b37a:	e006      	b.n	800b38a <tcp_process_refused_data+0xca>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	68ba      	ldr	r2, [r7, #8]
 800b380:	675a      	str	r2, [r3, #116]	; 0x74
      return ERR_INPROGRESS;
 800b382:	f06f 0304 	mvn.w	r3, #4
 800b386:	e000      	b.n	800b38a <tcp_process_refused_data+0xca>
    }
  }
  return ERR_OK;
 800b388:	2300      	movs	r3, #0
}
 800b38a:	4618      	mov	r0, r3
 800b38c:	3714      	adds	r7, #20
 800b38e:	46bd      	mov	sp, r7
 800b390:	bd90      	pop	{r4, r7, pc}

0800b392 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800b392:	b580      	push	{r7, lr}
 800b394:	b084      	sub	sp, #16
 800b396:	af00      	add	r7, sp, #0
 800b398:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800b39a:	e007      	b.n	800b3ac <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800b3a2:	6878      	ldr	r0, [r7, #4]
 800b3a4:	f000 f809 	bl	800b3ba <tcp_seg_free>
    seg = next;
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d1f4      	bne.n	800b39c <tcp_segs_free+0xa>
  }
}
 800b3b2:	bf00      	nop
 800b3b4:	3710      	adds	r7, #16
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	bd80      	pop	{r7, pc}

0800b3ba <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800b3ba:	b580      	push	{r7, lr}
 800b3bc:	b082      	sub	sp, #8
 800b3be:	af00      	add	r7, sp, #0
 800b3c0:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d00c      	beq.n	800b3e2 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	685b      	ldr	r3, [r3, #4]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d004      	beq.n	800b3da <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	685b      	ldr	r3, [r3, #4]
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	f7fe fd09 	bl	8009dec <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800b3da:	6879      	ldr	r1, [r7, #4]
 800b3dc:	2003      	movs	r0, #3
 800b3de:	f7fd ff61 	bl	80092a4 <memp_free>
  }
}
 800b3e2:	bf00      	nop
 800b3e4:	3708      	adds	r7, #8
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	bd80      	pop	{r7, pc}

0800b3ea <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 800b3ea:	b480      	push	{r7}
 800b3ec:	b083      	sub	sp, #12
 800b3ee:	af00      	add	r7, sp, #0
 800b3f0:	6078      	str	r0, [r7, #4]
 800b3f2:	460b      	mov	r3, r1
 800b3f4:	70fb      	strb	r3, [r7, #3]
  pcb->prio = prio;
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	78fa      	ldrb	r2, [r7, #3]
 800b3fa:	755a      	strb	r2, [r3, #21]
}
 800b3fc:	bf00      	nop
 800b3fe:	370c      	adds	r7, #12
 800b400:	46bd      	mov	sp, r7
 800b402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b406:	4770      	bx	lr

0800b408 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b084      	sub	sp, #16
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800b410:	2003      	movs	r0, #3
 800b412:	f7fd fed7 	bl	80091c4 <memp_malloc>
 800b416:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d101      	bne.n	800b422 <tcp_seg_copy+0x1a>
    return NULL;
 800b41e:	2300      	movs	r3, #0
 800b420:	e00a      	b.n	800b438 <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800b422:	2210      	movs	r2, #16
 800b424:	6879      	ldr	r1, [r7, #4]
 800b426:	68f8      	ldr	r0, [r7, #12]
 800b428:	f008 fd0d 	bl	8013e46 <memcpy>
  pbuf_ref(cseg->p);
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	685b      	ldr	r3, [r3, #4]
 800b430:	4618      	mov	r0, r3
 800b432:	f7fe fd87 	bl	8009f44 <pbuf_ref>
  return cseg;
 800b436:	68fb      	ldr	r3, [r7, #12]
}
 800b438:	4618      	mov	r0, r3
 800b43a:	3710      	adds	r7, #16
 800b43c:	46bd      	mov	sp, r7
 800b43e:	bd80      	pop	{r7, pc}

0800b440 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b084      	sub	sp, #16
 800b444:	af00      	add	r7, sp, #0
 800b446:	60f8      	str	r0, [r7, #12]
 800b448:	60b9      	str	r1, [r7, #8]
 800b44a:	607a      	str	r2, [r7, #4]
 800b44c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d009      	beq.n	800b468 <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	891b      	ldrh	r3, [r3, #8]
 800b458:	4619      	mov	r1, r3
 800b45a:	68b8      	ldr	r0, [r7, #8]
 800b45c:	f7ff fb6e 	bl	800ab3c <tcp_recved>
    pbuf_free(p);
 800b460:	6878      	ldr	r0, [r7, #4]
 800b462:	f7fe fcc3 	bl	8009dec <pbuf_free>
 800b466:	e008      	b.n	800b47a <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
 800b468:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d104      	bne.n	800b47a <tcp_recv_null+0x3a>
    return tcp_close(pcb);
 800b470:	68b8      	ldr	r0, [r7, #8]
 800b472:	f7ff f8f3 	bl	800a65c <tcp_close>
 800b476:	4603      	mov	r3, r0
 800b478:	e000      	b.n	800b47c <tcp_recv_null+0x3c>
  }
  return ERR_OK;
 800b47a:	2300      	movs	r3, #0
}
 800b47c:	4618      	mov	r0, r3
 800b47e:	3710      	adds	r7, #16
 800b480:	46bd      	mov	sp, r7
 800b482:	bd80      	pop	{r7, pc}

0800b484 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800b484:	b580      	push	{r7, lr}
 800b486:	b086      	sub	sp, #24
 800b488:	af00      	add	r7, sp, #0
 800b48a:	4603      	mov	r3, r0
 800b48c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800b48e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b492:	2b00      	cmp	r3, #0
 800b494:	db01      	blt.n	800b49a <tcp_kill_prio+0x16>
 800b496:	79fb      	ldrb	r3, [r7, #7]
 800b498:	e000      	b.n	800b49c <tcp_kill_prio+0x18>
 800b49a:	237f      	movs	r3, #127	; 0x7f
 800b49c:	72fb      	strb	r3, [r7, #11]

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 800b49e:	2300      	movs	r3, #0
 800b4a0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b4a6:	4b16      	ldr	r3, [pc, #88]	; (800b500 <tcp_kill_prio+0x7c>)
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	617b      	str	r3, [r7, #20]
 800b4ac:	e01a      	b.n	800b4e4 <tcp_kill_prio+0x60>
    if (pcb->prio <= mprio &&
 800b4ae:	697b      	ldr	r3, [r7, #20]
 800b4b0:	7d5b      	ldrb	r3, [r3, #21]
 800b4b2:	7afa      	ldrb	r2, [r7, #11]
 800b4b4:	429a      	cmp	r2, r3
 800b4b6:	d312      	bcc.n	800b4de <tcp_kill_prio+0x5a>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800b4b8:	4b12      	ldr	r3, [pc, #72]	; (800b504 <tcp_kill_prio+0x80>)
 800b4ba:	681a      	ldr	r2, [r3, #0]
 800b4bc:	697b      	ldr	r3, [r7, #20]
 800b4be:	6a1b      	ldr	r3, [r3, #32]
 800b4c0:	1ad3      	subs	r3, r2, r3
    if (pcb->prio <= mprio &&
 800b4c2:	68fa      	ldr	r2, [r7, #12]
 800b4c4:	429a      	cmp	r2, r3
 800b4c6:	d80a      	bhi.n	800b4de <tcp_kill_prio+0x5a>
      inactivity = tcp_ticks - pcb->tmr;
 800b4c8:	4b0e      	ldr	r3, [pc, #56]	; (800b504 <tcp_kill_prio+0x80>)
 800b4ca:	681a      	ldr	r2, [r3, #0]
 800b4cc:	697b      	ldr	r3, [r7, #20]
 800b4ce:	6a1b      	ldr	r3, [r3, #32]
 800b4d0:	1ad3      	subs	r3, r2, r3
 800b4d2:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
 800b4d4:	697b      	ldr	r3, [r7, #20]
 800b4d6:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
 800b4d8:	697b      	ldr	r3, [r7, #20]
 800b4da:	7d5b      	ldrb	r3, [r3, #21]
 800b4dc:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b4de:	697b      	ldr	r3, [r7, #20]
 800b4e0:	68db      	ldr	r3, [r3, #12]
 800b4e2:	617b      	str	r3, [r7, #20]
 800b4e4:	697b      	ldr	r3, [r7, #20]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d1e1      	bne.n	800b4ae <tcp_kill_prio+0x2a>
    }
  }
  if (inactive != NULL) {
 800b4ea:	693b      	ldr	r3, [r7, #16]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d002      	beq.n	800b4f6 <tcp_kill_prio+0x72>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 800b4f0:	6938      	ldr	r0, [r7, #16]
 800b4f2:	f7ff f97d 	bl	800a7f0 <tcp_abort>
  }
}
 800b4f6:	bf00      	nop
 800b4f8:	3718      	adds	r7, #24
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	bd80      	pop	{r7, pc}
 800b4fe:	bf00      	nop
 800b500:	20003284 	.word	0x20003284
 800b504:	20003288 	.word	0x20003288

0800b508 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	b086      	sub	sp, #24
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	4603      	mov	r3, r0
 800b510:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800b512:	79fb      	ldrb	r3, [r7, #7]
 800b514:	2b08      	cmp	r3, #8
 800b516:	d009      	beq.n	800b52c <tcp_kill_state+0x24>
 800b518:	79fb      	ldrb	r3, [r7, #7]
 800b51a:	2b09      	cmp	r3, #9
 800b51c:	d006      	beq.n	800b52c <tcp_kill_state+0x24>
 800b51e:	4b1a      	ldr	r3, [pc, #104]	; (800b588 <tcp_kill_state+0x80>)
 800b520:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800b524:	4919      	ldr	r1, [pc, #100]	; (800b58c <tcp_kill_state+0x84>)
 800b526:	481a      	ldr	r0, [pc, #104]	; (800b590 <tcp_kill_state+0x88>)
 800b528:	f008 fd48 	bl	8013fbc <iprintf>

  inactivity = 0;
 800b52c:	2300      	movs	r3, #0
 800b52e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800b530:	2300      	movs	r3, #0
 800b532:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b534:	4b17      	ldr	r3, [pc, #92]	; (800b594 <tcp_kill_state+0x8c>)
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	617b      	str	r3, [r7, #20]
 800b53a:	e017      	b.n	800b56c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800b53c:	697b      	ldr	r3, [r7, #20]
 800b53e:	7d1b      	ldrb	r3, [r3, #20]
 800b540:	79fa      	ldrb	r2, [r7, #7]
 800b542:	429a      	cmp	r2, r3
 800b544:	d10f      	bne.n	800b566 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800b546:	4b14      	ldr	r3, [pc, #80]	; (800b598 <tcp_kill_state+0x90>)
 800b548:	681a      	ldr	r2, [r3, #0]
 800b54a:	697b      	ldr	r3, [r7, #20]
 800b54c:	6a1b      	ldr	r3, [r3, #32]
 800b54e:	1ad3      	subs	r3, r2, r3
 800b550:	68fa      	ldr	r2, [r7, #12]
 800b552:	429a      	cmp	r2, r3
 800b554:	d807      	bhi.n	800b566 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800b556:	4b10      	ldr	r3, [pc, #64]	; (800b598 <tcp_kill_state+0x90>)
 800b558:	681a      	ldr	r2, [r3, #0]
 800b55a:	697b      	ldr	r3, [r7, #20]
 800b55c:	6a1b      	ldr	r3, [r3, #32]
 800b55e:	1ad3      	subs	r3, r2, r3
 800b560:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800b562:	697b      	ldr	r3, [r7, #20]
 800b564:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b566:	697b      	ldr	r3, [r7, #20]
 800b568:	68db      	ldr	r3, [r3, #12]
 800b56a:	617b      	str	r3, [r7, #20]
 800b56c:	697b      	ldr	r3, [r7, #20]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d1e4      	bne.n	800b53c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800b572:	693b      	ldr	r3, [r7, #16]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d003      	beq.n	800b580 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800b578:	2100      	movs	r1, #0
 800b57a:	6938      	ldr	r0, [r7, #16]
 800b57c:	f7ff f886 	bl	800a68c <tcp_abandon>
  }
}
 800b580:	bf00      	nop
 800b582:	3718      	adds	r7, #24
 800b584:	46bd      	mov	sp, r7
 800b586:	bd80      	pop	{r7, pc}
 800b588:	080156d0 	.word	0x080156d0
 800b58c:	08015a18 	.word	0x08015a18
 800b590:	08015744 	.word	0x08015744
 800b594:	20003284 	.word	0x20003284
 800b598:	20003288 	.word	0x20003288

0800b59c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b084      	sub	sp, #16
 800b5a0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b5aa:	4b12      	ldr	r3, [pc, #72]	; (800b5f4 <tcp_kill_timewait+0x58>)
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	60fb      	str	r3, [r7, #12]
 800b5b0:	e012      	b.n	800b5d8 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800b5b2:	4b11      	ldr	r3, [pc, #68]	; (800b5f8 <tcp_kill_timewait+0x5c>)
 800b5b4:	681a      	ldr	r2, [r3, #0]
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	6a1b      	ldr	r3, [r3, #32]
 800b5ba:	1ad3      	subs	r3, r2, r3
 800b5bc:	687a      	ldr	r2, [r7, #4]
 800b5be:	429a      	cmp	r2, r3
 800b5c0:	d807      	bhi.n	800b5d2 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800b5c2:	4b0d      	ldr	r3, [pc, #52]	; (800b5f8 <tcp_kill_timewait+0x5c>)
 800b5c4:	681a      	ldr	r2, [r3, #0]
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	6a1b      	ldr	r3, [r3, #32]
 800b5ca:	1ad3      	subs	r3, r2, r3
 800b5cc:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	68db      	ldr	r3, [r3, #12]
 800b5d6:	60fb      	str	r3, [r7, #12]
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d1e9      	bne.n	800b5b2 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800b5de:	68bb      	ldr	r3, [r7, #8]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d002      	beq.n	800b5ea <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 800b5e4:	68b8      	ldr	r0, [r7, #8]
 800b5e6:	f7ff f903 	bl	800a7f0 <tcp_abort>
  }
}
 800b5ea:	bf00      	nop
 800b5ec:	3710      	adds	r7, #16
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	bd80      	pop	{r7, pc}
 800b5f2:	bf00      	nop
 800b5f4:	20003294 	.word	0x20003294
 800b5f8:	20003288 	.word	0x20003288

0800b5fc <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	b084      	sub	sp, #16
 800b600:	af00      	add	r7, sp, #0
 800b602:	4603      	mov	r3, r0
 800b604:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b606:	2001      	movs	r0, #1
 800b608:	f7fd fddc 	bl	80091c4 <memp_malloc>
 800b60c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	2b00      	cmp	r3, #0
 800b612:	d124      	bne.n	800b65e <tcp_alloc+0x62>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800b614:	f7ff ffc2 	bl	800b59c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b618:	2001      	movs	r0, #1
 800b61a:	f7fd fdd3 	bl	80091c4 <memp_malloc>
 800b61e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d11b      	bne.n	800b65e <tcp_alloc+0x62>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800b626:	2009      	movs	r0, #9
 800b628:	f7ff ff6e 	bl	800b508 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b62c:	2001      	movs	r0, #1
 800b62e:	f7fd fdc9 	bl	80091c4 <memp_malloc>
 800b632:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	2b00      	cmp	r3, #0
 800b638:	d111      	bne.n	800b65e <tcp_alloc+0x62>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800b63a:	2008      	movs	r0, #8
 800b63c:	f7ff ff64 	bl	800b508 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b640:	2001      	movs	r0, #1
 800b642:	f7fd fdbf 	bl	80091c4 <memp_malloc>
 800b646:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d107      	bne.n	800b65e <tcp_alloc+0x62>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800b64e:	79fb      	ldrb	r3, [r7, #7]
 800b650:	4618      	mov	r0, r3
 800b652:	f7ff ff17 	bl	800b484 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b656:	2001      	movs	r0, #1
 800b658:	f7fd fdb4 	bl	80091c4 <memp_malloc>
 800b65c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d03f      	beq.n	800b6e4 <tcp_alloc+0xe8>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800b664:	2298      	movs	r2, #152	; 0x98
 800b666:	2100      	movs	r1, #0
 800b668:	68f8      	ldr	r0, [r7, #12]
 800b66a:	f008 fbf7 	bl	8013e5c <memset>
    pcb->prio = prio;
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	79fa      	ldrb	r2, [r7, #7]
 800b672:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800b67a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800b684:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	22ff      	movs	r2, #255	; 0xff
 800b692:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	f44f 7206 	mov.w	r2, #536	; 0x218
 800b69a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	2206      	movs	r2, #6
 800b6a0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	2206      	movs	r2, #6
 800b6a8:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b6b0:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	2201      	movs	r2, #1
 800b6b6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800b6ba:	4b0d      	ldr	r3, [pc, #52]	; (800b6f0 <tcp_alloc+0xf4>)
 800b6bc:	681a      	ldr	r2, [r3, #0]
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800b6c2:	4b0c      	ldr	r3, [pc, #48]	; (800b6f4 <tcp_alloc+0xf8>)
 800b6c4:	781a      	ldrb	r2, [r3, #0]
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	775a      	strb	r2, [r3, #29]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800b6d0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	4a08      	ldr	r2, [pc, #32]	; (800b6f8 <tcp_alloc+0xfc>)
 800b6d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	4a07      	ldr	r2, [pc, #28]	; (800b6fc <tcp_alloc+0x100>)
 800b6e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800b6e4:	68fb      	ldr	r3, [r7, #12]
}
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	3710      	adds	r7, #16
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	bd80      	pop	{r7, pc}
 800b6ee:	bf00      	nop
 800b6f0:	20003288 	.word	0x20003288
 800b6f4:	20000252 	.word	0x20000252
 800b6f8:	0800b441 	.word	0x0800b441
 800b6fc:	006ddd00 	.word	0x006ddd00

0800b700 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 800b700:	b580      	push	{r7, lr}
 800b702:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 800b704:	2040      	movs	r0, #64	; 0x40
 800b706:	f7ff ff79 	bl	800b5fc <tcp_alloc>
 800b70a:	4603      	mov	r3, r0
}
 800b70c:	4618      	mov	r0, r3
 800b70e:	bd80      	pop	{r7, pc}

0800b710 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800b710:	b480      	push	{r7}
 800b712:	b083      	sub	sp, #12
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
 800b718:	6039      	str	r1, [r7, #0]
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d002      	beq.n	800b726 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	683a      	ldr	r2, [r7, #0]
 800b724:	611a      	str	r2, [r3, #16]
  }
}
 800b726:	bf00      	nop
 800b728:	370c      	adds	r7, #12
 800b72a:	46bd      	mov	sp, r7
 800b72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b730:	4770      	bx	lr
	...

0800b734 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800b734:	b580      	push	{r7, lr}
 800b736:	b082      	sub	sp, #8
 800b738:	af00      	add	r7, sp, #0
 800b73a:	6078      	str	r0, [r7, #4]
 800b73c:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d00e      	beq.n	800b762 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	7d1b      	ldrb	r3, [r3, #20]
 800b748:	2b01      	cmp	r3, #1
 800b74a:	d106      	bne.n	800b75a <tcp_recv+0x26>
 800b74c:	4b07      	ldr	r3, [pc, #28]	; (800b76c <tcp_recv+0x38>)
 800b74e:	f240 62bb 	movw	r2, #1723	; 0x6bb
 800b752:	4907      	ldr	r1, [pc, #28]	; (800b770 <tcp_recv+0x3c>)
 800b754:	4807      	ldr	r0, [pc, #28]	; (800b774 <tcp_recv+0x40>)
 800b756:	f008 fc31 	bl	8013fbc <iprintf>
    pcb->recv = recv;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	683a      	ldr	r2, [r7, #0]
 800b75e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800b762:	bf00      	nop
 800b764:	3708      	adds	r7, #8
 800b766:	46bd      	mov	sp, r7
 800b768:	bd80      	pop	{r7, pc}
 800b76a:	bf00      	nop
 800b76c:	080156d0 	.word	0x080156d0
 800b770:	08015a28 	.word	0x08015a28
 800b774:	08015744 	.word	0x08015744

0800b778 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	b082      	sub	sp, #8
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	6078      	str	r0, [r7, #4]
 800b780:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d00d      	beq.n	800b7a4 <tcp_sent+0x2c>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	7d1b      	ldrb	r3, [r3, #20]
 800b78c:	2b01      	cmp	r3, #1
 800b78e:	d106      	bne.n	800b79e <tcp_sent+0x26>
 800b790:	4b06      	ldr	r3, [pc, #24]	; (800b7ac <tcp_sent+0x34>)
 800b792:	f240 62cc 	movw	r2, #1740	; 0x6cc
 800b796:	4906      	ldr	r1, [pc, #24]	; (800b7b0 <tcp_sent+0x38>)
 800b798:	4806      	ldr	r0, [pc, #24]	; (800b7b4 <tcp_sent+0x3c>)
 800b79a:	f008 fc0f 	bl	8013fbc <iprintf>
    pcb->sent = sent;
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	683a      	ldr	r2, [r7, #0]
 800b7a2:	67da      	str	r2, [r3, #124]	; 0x7c
  }
}
 800b7a4:	bf00      	nop
 800b7a6:	3708      	adds	r7, #8
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	bd80      	pop	{r7, pc}
 800b7ac:	080156d0 	.word	0x080156d0
 800b7b0:	08015a50 	.word	0x08015a50
 800b7b4:	08015744 	.word	0x08015744

0800b7b8 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	b082      	sub	sp, #8
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	6078      	str	r0, [r7, #4]
 800b7c0:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d00e      	beq.n	800b7e6 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	7d1b      	ldrb	r3, [r3, #20]
 800b7cc:	2b01      	cmp	r3, #1
 800b7ce:	d106      	bne.n	800b7de <tcp_err+0x26>
 800b7d0:	4b07      	ldr	r3, [pc, #28]	; (800b7f0 <tcp_err+0x38>)
 800b7d2:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 800b7d6:	4907      	ldr	r1, [pc, #28]	; (800b7f4 <tcp_err+0x3c>)
 800b7d8:	4807      	ldr	r0, [pc, #28]	; (800b7f8 <tcp_err+0x40>)
 800b7da:	f008 fbef 	bl	8013fbc <iprintf>
    pcb->errf = err;
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	683a      	ldr	r2, [r7, #0]
 800b7e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }
}
 800b7e6:	bf00      	nop
 800b7e8:	3708      	adds	r7, #8
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	bd80      	pop	{r7, pc}
 800b7ee:	bf00      	nop
 800b7f0:	080156d0 	.word	0x080156d0
 800b7f4:	08015a78 	.word	0x08015a78
 800b7f8:	08015744 	.word	0x08015744

0800b7fc <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800b7fc:	b480      	push	{r7}
 800b7fe:	b085      	sub	sp, #20
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
 800b804:	6039      	str	r1, [r7, #0]
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d008      	beq.n	800b81e <tcp_accept+0x22>
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	7d1b      	ldrb	r3, [r3, #20]
 800b810:	2b01      	cmp	r3, #1
 800b812:	d104      	bne.n	800b81e <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen*)pcb;
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	683a      	ldr	r2, [r7, #0]
 800b81c:	619a      	str	r2, [r3, #24]
  }
}
 800b81e:	bf00      	nop
 800b820:	3714      	adds	r7, #20
 800b822:	46bd      	mov	sp, r7
 800b824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b828:	4770      	bx	lr
	...

0800b82c <tcp_poll>:
 * timer interval, which is called twice a second.
 *
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800b82c:	b580      	push	{r7, lr}
 800b82e:	b084      	sub	sp, #16
 800b830:	af00      	add	r7, sp, #0
 800b832:	60f8      	str	r0, [r7, #12]
 800b834:	60b9      	str	r1, [r7, #8]
 800b836:	4613      	mov	r3, r2
 800b838:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	7d1b      	ldrb	r3, [r3, #20]
 800b83e:	2b01      	cmp	r3, #1
 800b840:	d106      	bne.n	800b850 <tcp_poll+0x24>
 800b842:	4b09      	ldr	r3, [pc, #36]	; (800b868 <tcp_poll+0x3c>)
 800b844:	f240 7203 	movw	r2, #1795	; 0x703
 800b848:	4908      	ldr	r1, [pc, #32]	; (800b86c <tcp_poll+0x40>)
 800b84a:	4809      	ldr	r0, [pc, #36]	; (800b870 <tcp_poll+0x44>)
 800b84c:	f008 fbb6 	bl	8013fbc <iprintf>
#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	68ba      	ldr	r2, [r7, #8]
 800b854:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	79fa      	ldrb	r2, [r7, #7]
 800b85c:	771a      	strb	r2, [r3, #28]
}
 800b85e:	bf00      	nop
 800b860:	3710      	adds	r7, #16
 800b862:	46bd      	mov	sp, r7
 800b864:	bd80      	pop	{r7, pc}
 800b866:	bf00      	nop
 800b868:	080156d0 	.word	0x080156d0
 800b86c:	08015aa0 	.word	0x08015aa0
 800b870:	08015744 	.word	0x08015744

0800b874 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800b874:	b580      	push	{r7, lr}
 800b876:	b082      	sub	sp, #8
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	7d1b      	ldrb	r3, [r3, #20]
 800b880:	2b00      	cmp	r3, #0
 800b882:	d034      	beq.n	800b8ee <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800b888:	2b0a      	cmp	r3, #10
 800b88a:	d030      	beq.n	800b8ee <tcp_pcb_purge+0x7a>
     pcb->state != LISTEN) {
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	7d1b      	ldrb	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
 800b890:	2b01      	cmp	r3, #1
 800b892:	d02c      	beq.n	800b8ee <tcp_pcb_purge+0x7a>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d007      	beq.n	800b8ac <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	f7fe faa3 	bl	8009dec <pbuf_free>
      pcb->refused_data = NULL;
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	2200      	movs	r2, #0
 800b8aa:	675a      	str	r2, [r3, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	f7ff fd6e 	bl	800b392 <tcp_segs_free>
    pcb->ooseq = NULL;
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	2200      	movs	r2, #0
 800b8ba:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b8c2:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	f7ff fd62 	bl	800b392 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	f7ff fd5d 	bl	800b392 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	2200      	movs	r2, #0
 800b8dc:	669a      	str	r2, [r3, #104]	; 0x68
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	66da      	str	r2, [r3, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	2200      	movs	r2, #0
 800b8ea:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */
  }
}
 800b8ee:	bf00      	nop
 800b8f0:	3708      	adds	r7, #8
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	bd80      	pop	{r7, pc}
	...

0800b8f8 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	b084      	sub	sp, #16
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	6078      	str	r0, [r7, #4]
 800b900:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	683a      	ldr	r2, [r7, #0]
 800b908:	429a      	cmp	r2, r3
 800b90a:	d105      	bne.n	800b918 <tcp_pcb_remove+0x20>
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	68da      	ldr	r2, [r3, #12]
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	601a      	str	r2, [r3, #0]
 800b916:	e013      	b.n	800b940 <tcp_pcb_remove+0x48>
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	60fb      	str	r3, [r7, #12]
 800b91e:	e00c      	b.n	800b93a <tcp_pcb_remove+0x42>
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	68db      	ldr	r3, [r3, #12]
 800b924:	683a      	ldr	r2, [r7, #0]
 800b926:	429a      	cmp	r2, r3
 800b928:	d104      	bne.n	800b934 <tcp_pcb_remove+0x3c>
 800b92a:	683b      	ldr	r3, [r7, #0]
 800b92c:	68da      	ldr	r2, [r3, #12]
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	60da      	str	r2, [r3, #12]
 800b932:	e005      	b.n	800b940 <tcp_pcb_remove+0x48>
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	68db      	ldr	r3, [r3, #12]
 800b938:	60fb      	str	r3, [r7, #12]
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d1ef      	bne.n	800b920 <tcp_pcb_remove+0x28>
 800b940:	683b      	ldr	r3, [r7, #0]
 800b942:	2200      	movs	r2, #0
 800b944:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800b946:	6838      	ldr	r0, [r7, #0]
 800b948:	f7ff ff94 	bl	800b874 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 800b94c:	683b      	ldr	r3, [r7, #0]
 800b94e:	7d1b      	ldrb	r3, [r3, #20]
 800b950:	2b0a      	cmp	r3, #10
 800b952:	d013      	beq.n	800b97c <tcp_pcb_remove+0x84>
     pcb->state != LISTEN &&
 800b954:	683b      	ldr	r3, [r7, #0]
 800b956:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
 800b958:	2b01      	cmp	r3, #1
 800b95a:	d00f      	beq.n	800b97c <tcp_pcb_remove+0x84>
     pcb->flags & TF_ACK_DELAY) {
 800b95c:	683b      	ldr	r3, [r7, #0]
 800b95e:	7e9b      	ldrb	r3, [r3, #26]
 800b960:	f003 0301 	and.w	r3, r3, #1
     pcb->state != LISTEN &&
 800b964:	2b00      	cmp	r3, #0
 800b966:	d009      	beq.n	800b97c <tcp_pcb_remove+0x84>
    pcb->flags |= TF_ACK_NOW;
 800b968:	683b      	ldr	r3, [r7, #0]
 800b96a:	7e9b      	ldrb	r3, [r3, #26]
 800b96c:	f043 0302 	orr.w	r3, r3, #2
 800b970:	b2da      	uxtb	r2, r3
 800b972:	683b      	ldr	r3, [r7, #0]
 800b974:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800b976:	6838      	ldr	r0, [r7, #0]
 800b978:	f003 f9be 	bl	800ecf8 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800b97c:	683b      	ldr	r3, [r7, #0]
 800b97e:	7d1b      	ldrb	r3, [r3, #20]
 800b980:	2b01      	cmp	r3, #1
 800b982:	d020      	beq.n	800b9c6 <tcp_pcb_remove+0xce>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800b984:	683b      	ldr	r3, [r7, #0]
 800b986:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d006      	beq.n	800b99a <tcp_pcb_remove+0xa2>
 800b98c:	4b13      	ldr	r3, [pc, #76]	; (800b9dc <tcp_pcb_remove+0xe4>)
 800b98e:	f240 7253 	movw	r2, #1875	; 0x753
 800b992:	4913      	ldr	r1, [pc, #76]	; (800b9e0 <tcp_pcb_remove+0xe8>)
 800b994:	4813      	ldr	r0, [pc, #76]	; (800b9e4 <tcp_pcb_remove+0xec>)
 800b996:	f008 fb11 	bl	8013fbc <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800b99a:	683b      	ldr	r3, [r7, #0]
 800b99c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d006      	beq.n	800b9b0 <tcp_pcb_remove+0xb8>
 800b9a2:	4b0e      	ldr	r3, [pc, #56]	; (800b9dc <tcp_pcb_remove+0xe4>)
 800b9a4:	f240 7254 	movw	r2, #1876	; 0x754
 800b9a8:	490f      	ldr	r1, [pc, #60]	; (800b9e8 <tcp_pcb_remove+0xf0>)
 800b9aa:	480e      	ldr	r0, [pc, #56]	; (800b9e4 <tcp_pcb_remove+0xec>)
 800b9ac:	f008 fb06 	bl	8013fbc <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800b9b0:	683b      	ldr	r3, [r7, #0]
 800b9b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d006      	beq.n	800b9c6 <tcp_pcb_remove+0xce>
 800b9b8:	4b08      	ldr	r3, [pc, #32]	; (800b9dc <tcp_pcb_remove+0xe4>)
 800b9ba:	f240 7256 	movw	r2, #1878	; 0x756
 800b9be:	490b      	ldr	r1, [pc, #44]	; (800b9ec <tcp_pcb_remove+0xf4>)
 800b9c0:	4808      	ldr	r0, [pc, #32]	; (800b9e4 <tcp_pcb_remove+0xec>)
 800b9c2:	f008 fafb 	bl	8013fbc <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800b9c6:	683b      	ldr	r3, [r7, #0]
 800b9c8:	2200      	movs	r2, #0
 800b9ca:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800b9cc:	683b      	ldr	r3, [r7, #0]
 800b9ce:	2200      	movs	r2, #0
 800b9d0:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800b9d2:	bf00      	nop
 800b9d4:	3710      	adds	r7, #16
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	bd80      	pop	{r7, pc}
 800b9da:	bf00      	nop
 800b9dc:	080156d0 	.word	0x080156d0
 800b9e0:	08015ac0 	.word	0x08015ac0
 800b9e4:	08015744 	.word	0x08015744
 800b9e8:	08015ad8 	.word	0x08015ad8
 800b9ec:	08015af4 	.word	0x08015af4

0800b9f0 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800b9f0:	b480      	push	{r7}
 800b9f2:	b083      	sub	sp, #12
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800b9f8:	4b07      	ldr	r3, [pc, #28]	; (800ba18 <tcp_next_iss+0x28>)
 800b9fa:	681a      	ldr	r2, [r3, #0]
 800b9fc:	4b07      	ldr	r3, [pc, #28]	; (800ba1c <tcp_next_iss+0x2c>)
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	4413      	add	r3, r2
 800ba02:	4a05      	ldr	r2, [pc, #20]	; (800ba18 <tcp_next_iss+0x28>)
 800ba04:	6013      	str	r3, [r2, #0]
  return iss;
 800ba06:	4b04      	ldr	r3, [pc, #16]	; (800ba18 <tcp_next_iss+0x28>)
 800ba08:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	370c      	adds	r7, #12
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba14:	4770      	bx	lr
 800ba16:	bf00      	nop
 800ba18:	20000124 	.word	0x20000124
 800ba1c:	20003288 	.word	0x20003288

0800ba20 <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
 800ba20:	b580      	push	{r7, lr}
 800ba22:	b084      	sub	sp, #16
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	4603      	mov	r3, r0
 800ba28:	6039      	str	r1, [r7, #0]
 800ba2a:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 800ba2c:	6838      	ldr	r0, [r7, #0]
 800ba2e:	f005 f991 	bl	8010d54 <ip4_route>
 800ba32:	60f8      	str	r0, [r7, #12]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d101      	bne.n	800ba3e <tcp_eff_send_mss_impl+0x1e>
      return sendmss;
 800ba3a:	88fb      	ldrh	r3, [r7, #6]
 800ba3c:	e010      	b.n	800ba60 <tcp_eff_send_mss_impl+0x40>
    }
    mtu = outif->mtu;
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba42:	817b      	strh	r3, [r7, #10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800ba44:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d008      	beq.n	800ba5e <tcp_eff_send_mss_impl+0x3e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 800ba4c:	897b      	ldrh	r3, [r7, #10]
 800ba4e:	3b28      	subs	r3, #40	; 0x28
 800ba50:	813b      	strh	r3, [r7, #8]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800ba52:	893a      	ldrh	r2, [r7, #8]
 800ba54:	88fb      	ldrh	r3, [r7, #6]
 800ba56:	4293      	cmp	r3, r2
 800ba58:	bf28      	it	cs
 800ba5a:	4613      	movcs	r3, r2
 800ba5c:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
 800ba5e:	88fb      	ldrh	r3, [r7, #6]
}
 800ba60:	4618      	mov	r0, r3
 800ba62:	3710      	adds	r7, #16
 800ba64:	46bd      	mov	sp, r7
 800ba66:	bd80      	pop	{r7, pc}

0800ba68 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 800ba68:	b580      	push	{r7, lr}
 800ba6a:	b084      	sub	sp, #16
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6078      	str	r0, [r7, #4]
 800ba70:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800ba72:	683b      	ldr	r3, [r7, #0]
 800ba74:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800ba76:	e011      	b.n	800ba9c <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	681a      	ldr	r2, [r3, #0]
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	429a      	cmp	r2, r3
 800ba82:	d108      	bne.n	800ba96 <tcp_netif_ip_addr_changed_pcblist+0x2e>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	68db      	ldr	r3, [r3, #12]
 800ba88:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800ba8a:	68f8      	ldr	r0, [r7, #12]
 800ba8c:	f7fe feb0 	bl	800a7f0 <tcp_abort>
      pcb = next;
 800ba90:	68bb      	ldr	r3, [r7, #8]
 800ba92:	60fb      	str	r3, [r7, #12]
 800ba94:	e002      	b.n	800ba9c <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	68db      	ldr	r3, [r3, #12]
 800ba9a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d1ea      	bne.n	800ba78 <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 800baa2:	bf00      	nop
 800baa4:	3710      	adds	r7, #16
 800baa6:	46bd      	mov	sp, r7
 800baa8:	bd80      	pop	{r7, pc}
	...

0800baac <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 800baac:	b580      	push	{r7, lr}
 800baae:	b084      	sub	sp, #16
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	6078      	str	r0, [r7, #4]
 800bab4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d02c      	beq.n	800bb16 <tcp_netif_ip_addr_changed+0x6a>
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d028      	beq.n	800bb16 <tcp_netif_ip_addr_changed+0x6a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800bac4:	4b16      	ldr	r3, [pc, #88]	; (800bb20 <tcp_netif_ip_addr_changed+0x74>)
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	4619      	mov	r1, r3
 800baca:	6878      	ldr	r0, [r7, #4]
 800bacc:	f7ff ffcc 	bl	800ba68 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800bad0:	4b14      	ldr	r3, [pc, #80]	; (800bb24 <tcp_netif_ip_addr_changed+0x78>)
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	4619      	mov	r1, r3
 800bad6:	6878      	ldr	r0, [r7, #4]
 800bad8:	f7ff ffc6 	bl	800ba68 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800badc:	683b      	ldr	r3, [r7, #0]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d019      	beq.n	800bb16 <tcp_netif_ip_addr_changed+0x6a>
 800bae2:	683b      	ldr	r3, [r7, #0]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d015      	beq.n	800bb16 <tcp_netif_ip_addr_changed+0x6a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800baea:	4b0f      	ldr	r3, [pc, #60]	; (800bb28 <tcp_netif_ip_addr_changed+0x7c>)
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	60fb      	str	r3, [r7, #12]
 800baf0:	e00e      	b.n	800bb10 <tcp_netif_ip_addr_changed+0x64>
        next = lpcb->next;
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	68db      	ldr	r3, [r3, #12]
 800baf6:	60bb      	str	r3, [r7, #8]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	681a      	ldr	r2, [r3, #0]
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	429a      	cmp	r2, r3
 800bb02:	d103      	bne.n	800bb0c <tcp_netif_ip_addr_changed+0x60>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800bb04:	683b      	ldr	r3, [r7, #0]
 800bb06:	681a      	ldr	r2, [r3, #0]
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800bb0c:	68bb      	ldr	r3, [r7, #8]
 800bb0e:	60fb      	str	r3, [r7, #12]
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d1ed      	bne.n	800baf2 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800bb16:	bf00      	nop
 800bb18:	3710      	adds	r7, #16
 800bb1a:	46bd      	mov	sp, r7
 800bb1c:	bd80      	pop	{r7, pc}
 800bb1e:	bf00      	nop
 800bb20:	20003284 	.word	0x20003284
 800bb24:	20003290 	.word	0x20003290
 800bb28:	2000328c 	.word	0x2000328c

0800bb2c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800bb2c:	b590      	push	{r4, r7, lr}
 800bb2e:	b08b      	sub	sp, #44	; 0x2c
 800bb30:	af02      	add	r7, sp, #8
 800bb32:	6078      	str	r0, [r7, #4]
 800bb34:	6039      	str	r1, [r7, #0]
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	685b      	ldr	r3, [r3, #4]
 800bb3a:	4a82      	ldr	r2, [pc, #520]	; (800bd44 <tcp_input+0x218>)
 800bb3c:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	895b      	ldrh	r3, [r3, #10]
 800bb42:	2b13      	cmp	r3, #19
 800bb44:	f240 838a 	bls.w	800c25c <tcp_input+0x730>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800bb48:	4b7f      	ldr	r3, [pc, #508]	; (800bd48 <tcp_input+0x21c>)
 800bb4a:	695a      	ldr	r2, [r3, #20]
 800bb4c:	4b7e      	ldr	r3, [pc, #504]	; (800bd48 <tcp_input+0x21c>)
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	4619      	mov	r1, r3
 800bb52:	4610      	mov	r0, r2
 800bb54:	f005 fb78 	bl	8011248 <ip4_addr_isbroadcast_u32>
 800bb58:	4603      	mov	r3, r0
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	f040 8380 	bne.w	800c260 <tcp_input+0x734>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800bb60:	4b79      	ldr	r3, [pc, #484]	; (800bd48 <tcp_input+0x21c>)
 800bb62:	695b      	ldr	r3, [r3, #20]
 800bb64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800bb68:	2be0      	cmp	r3, #224	; 0xe0
 800bb6a:	f000 8379 	beq.w	800c260 <tcp_input+0x734>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 800bb6e:	4b75      	ldr	r3, [pc, #468]	; (800bd44 <tcp_input+0x218>)
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	899b      	ldrh	r3, [r3, #12]
 800bb74:	b29b      	uxth	r3, r3
 800bb76:	4618      	mov	r0, r3
 800bb78:	f7fc ff58 	bl	8008a2c <lwip_htons>
 800bb7c:	4603      	mov	r3, r0
 800bb7e:	0b1b      	lsrs	r3, r3, #12
 800bb80:	b29b      	uxth	r3, r3
 800bb82:	b2db      	uxtb	r3, r3
 800bb84:	009b      	lsls	r3, r3, #2
 800bb86:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800bb88:	7cbb      	ldrb	r3, [r7, #18]
 800bb8a:	2b13      	cmp	r3, #19
 800bb8c:	f240 8368 	bls.w	800c260 <tcp_input+0x734>
 800bb90:	7cbb      	ldrb	r3, [r7, #18]
 800bb92:	b29a      	uxth	r2, r3
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	891b      	ldrh	r3, [r3, #8]
 800bb98:	429a      	cmp	r2, r3
 800bb9a:	f200 8361 	bhi.w	800c260 <tcp_input+0x734>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 800bb9e:	7cbb      	ldrb	r3, [r7, #18]
 800bba0:	b29b      	uxth	r3, r3
 800bba2:	3b14      	subs	r3, #20
 800bba4:	b29a      	uxth	r2, r3
 800bba6:	4b69      	ldr	r3, [pc, #420]	; (800bd4c <tcp_input+0x220>)
 800bba8:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800bbaa:	4b69      	ldr	r3, [pc, #420]	; (800bd50 <tcp_input+0x224>)
 800bbac:	2200      	movs	r2, #0
 800bbae:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	895a      	ldrh	r2, [r3, #10]
 800bbb4:	7cbb      	ldrb	r3, [r7, #18]
 800bbb6:	b29b      	uxth	r3, r3
 800bbb8:	429a      	cmp	r2, r3
 800bbba:	d30d      	bcc.n	800bbd8 <tcp_input+0xac>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800bbbc:	4b63      	ldr	r3, [pc, #396]	; (800bd4c <tcp_input+0x220>)
 800bbbe:	881a      	ldrh	r2, [r3, #0]
 800bbc0:	4b64      	ldr	r3, [pc, #400]	; (800bd54 <tcp_input+0x228>)
 800bbc2:	801a      	strh	r2, [r3, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 800bbc4:	7cbb      	ldrb	r3, [r7, #18]
 800bbc6:	b29b      	uxth	r3, r3
 800bbc8:	425b      	negs	r3, r3
 800bbca:	b29b      	uxth	r3, r3
 800bbcc:	b21b      	sxth	r3, r3
 800bbce:	4619      	mov	r1, r3
 800bbd0:	6878      	ldr	r0, [r7, #4]
 800bbd2:	f7fe f8e7 	bl	8009da4 <pbuf_header>
 800bbd6:	e055      	b.n	800bc84 <tcp_input+0x158>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d105      	bne.n	800bbec <tcp_input+0xc0>
 800bbe0:	4b5d      	ldr	r3, [pc, #372]	; (800bd58 <tcp_input+0x22c>)
 800bbe2:	22b2      	movs	r2, #178	; 0xb2
 800bbe4:	495d      	ldr	r1, [pc, #372]	; (800bd5c <tcp_input+0x230>)
 800bbe6:	485e      	ldr	r0, [pc, #376]	; (800bd60 <tcp_input+0x234>)
 800bbe8:	f008 f9e8 	bl	8013fbc <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
 800bbec:	f06f 0113 	mvn.w	r1, #19
 800bbf0:	6878      	ldr	r0, [r7, #4]
 800bbf2:	f7fe f8d7 	bl	8009da4 <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	895a      	ldrh	r2, [r3, #10]
 800bbfa:	4b56      	ldr	r3, [pc, #344]	; (800bd54 <tcp_input+0x228>)
 800bbfc:	801a      	strh	r2, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 800bbfe:	4b53      	ldr	r3, [pc, #332]	; (800bd4c <tcp_input+0x220>)
 800bc00:	881a      	ldrh	r2, [r3, #0]
 800bc02:	4b54      	ldr	r3, [pc, #336]	; (800bd54 <tcp_input+0x228>)
 800bc04:	881b      	ldrh	r3, [r3, #0]
 800bc06:	1ad3      	subs	r3, r2, r3
 800bc08:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 800bc0a:	4b52      	ldr	r3, [pc, #328]	; (800bd54 <tcp_input+0x228>)
 800bc0c:	881b      	ldrh	r3, [r3, #0]
 800bc0e:	425b      	negs	r3, r3
 800bc10:	b29b      	uxth	r3, r3
 800bc12:	b21b      	sxth	r3, r3
 800bc14:	4619      	mov	r1, r3
 800bc16:	6878      	ldr	r0, [r7, #4]
 800bc18:	f7fe f8c4 	bl	8009da4 <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	895b      	ldrh	r3, [r3, #10]
 800bc22:	8a3a      	ldrh	r2, [r7, #16]
 800bc24:	429a      	cmp	r2, r3
 800bc26:	f200 831d 	bhi.w	800c264 <tcp_input+0x738>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	685b      	ldr	r3, [r3, #4]
 800bc30:	4a47      	ldr	r2, [pc, #284]	; (800bd50 <tcp_input+0x224>)
 800bc32:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	681a      	ldr	r2, [r3, #0]
 800bc38:	8a3b      	ldrh	r3, [r7, #16]
 800bc3a:	425b      	negs	r3, r3
 800bc3c:	b29b      	uxth	r3, r3
 800bc3e:	b21b      	sxth	r3, r3
 800bc40:	4619      	mov	r1, r3
 800bc42:	4610      	mov	r0, r2
 800bc44:	f7fe f8ae 	bl	8009da4 <pbuf_header>
    p->tot_len -= opt2len;
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	891a      	ldrh	r2, [r3, #8]
 800bc4c:	8a3b      	ldrh	r3, [r7, #16]
 800bc4e:	1ad3      	subs	r3, r2, r3
 800bc50:	b29a      	uxth	r2, r3
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	895b      	ldrh	r3, [r3, #10]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d005      	beq.n	800bc6a <tcp_input+0x13e>
 800bc5e:	4b3e      	ldr	r3, [pc, #248]	; (800bd58 <tcp_input+0x22c>)
 800bc60:	22cf      	movs	r2, #207	; 0xcf
 800bc62:	4940      	ldr	r1, [pc, #256]	; (800bd64 <tcp_input+0x238>)
 800bc64:	483e      	ldr	r0, [pc, #248]	; (800bd60 <tcp_input+0x234>)
 800bc66:	f008 f9a9 	bl	8013fbc <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	891a      	ldrh	r2, [r3, #8]
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	891b      	ldrh	r3, [r3, #8]
 800bc74:	429a      	cmp	r2, r3
 800bc76:	d005      	beq.n	800bc84 <tcp_input+0x158>
 800bc78:	4b37      	ldr	r3, [pc, #220]	; (800bd58 <tcp_input+0x22c>)
 800bc7a:	22d0      	movs	r2, #208	; 0xd0
 800bc7c:	493a      	ldr	r1, [pc, #232]	; (800bd68 <tcp_input+0x23c>)
 800bc7e:	4838      	ldr	r0, [pc, #224]	; (800bd60 <tcp_input+0x234>)
 800bc80:	f008 f99c 	bl	8013fbc <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800bc84:	4b2f      	ldr	r3, [pc, #188]	; (800bd44 <tcp_input+0x218>)
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	881b      	ldrh	r3, [r3, #0]
 800bc8a:	b29a      	uxth	r2, r3
 800bc8c:	4b2d      	ldr	r3, [pc, #180]	; (800bd44 <tcp_input+0x218>)
 800bc8e:	681c      	ldr	r4, [r3, #0]
 800bc90:	4610      	mov	r0, r2
 800bc92:	f7fc fecb 	bl	8008a2c <lwip_htons>
 800bc96:	4603      	mov	r3, r0
 800bc98:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800bc9a:	4b2a      	ldr	r3, [pc, #168]	; (800bd44 <tcp_input+0x218>)
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	885b      	ldrh	r3, [r3, #2]
 800bca0:	b29a      	uxth	r2, r3
 800bca2:	4b28      	ldr	r3, [pc, #160]	; (800bd44 <tcp_input+0x218>)
 800bca4:	681c      	ldr	r4, [r3, #0]
 800bca6:	4610      	mov	r0, r2
 800bca8:	f7fc fec0 	bl	8008a2c <lwip_htons>
 800bcac:	4603      	mov	r3, r0
 800bcae:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800bcb0:	4b24      	ldr	r3, [pc, #144]	; (800bd44 <tcp_input+0x218>)
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	685a      	ldr	r2, [r3, #4]
 800bcb6:	4b23      	ldr	r3, [pc, #140]	; (800bd44 <tcp_input+0x218>)
 800bcb8:	681c      	ldr	r4, [r3, #0]
 800bcba:	4610      	mov	r0, r2
 800bcbc:	f7fc fec4 	bl	8008a48 <lwip_htonl>
 800bcc0:	4603      	mov	r3, r0
 800bcc2:	6063      	str	r3, [r4, #4]
 800bcc4:	6863      	ldr	r3, [r4, #4]
 800bcc6:	4a29      	ldr	r2, [pc, #164]	; (800bd6c <tcp_input+0x240>)
 800bcc8:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800bcca:	4b1e      	ldr	r3, [pc, #120]	; (800bd44 <tcp_input+0x218>)
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	689a      	ldr	r2, [r3, #8]
 800bcd0:	4b1c      	ldr	r3, [pc, #112]	; (800bd44 <tcp_input+0x218>)
 800bcd2:	681c      	ldr	r4, [r3, #0]
 800bcd4:	4610      	mov	r0, r2
 800bcd6:	f7fc feb7 	bl	8008a48 <lwip_htonl>
 800bcda:	4603      	mov	r3, r0
 800bcdc:	60a3      	str	r3, [r4, #8]
 800bcde:	68a3      	ldr	r3, [r4, #8]
 800bce0:	4a23      	ldr	r2, [pc, #140]	; (800bd70 <tcp_input+0x244>)
 800bce2:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800bce4:	4b17      	ldr	r3, [pc, #92]	; (800bd44 <tcp_input+0x218>)
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	89db      	ldrh	r3, [r3, #14]
 800bcea:	b29a      	uxth	r2, r3
 800bcec:	4b15      	ldr	r3, [pc, #84]	; (800bd44 <tcp_input+0x218>)
 800bcee:	681c      	ldr	r4, [r3, #0]
 800bcf0:	4610      	mov	r0, r2
 800bcf2:	f7fc fe9b 	bl	8008a2c <lwip_htons>
 800bcf6:	4603      	mov	r3, r0
 800bcf8:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800bcfa:	4b12      	ldr	r3, [pc, #72]	; (800bd44 <tcp_input+0x218>)
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	899b      	ldrh	r3, [r3, #12]
 800bd00:	b29b      	uxth	r3, r3
 800bd02:	4618      	mov	r0, r3
 800bd04:	f7fc fe92 	bl	8008a2c <lwip_htons>
 800bd08:	4603      	mov	r3, r0
 800bd0a:	b2db      	uxtb	r3, r3
 800bd0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bd10:	b2da      	uxtb	r2, r3
 800bd12:	4b18      	ldr	r3, [pc, #96]	; (800bd74 <tcp_input+0x248>)
 800bd14:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	891a      	ldrh	r2, [r3, #8]
 800bd1a:	4b16      	ldr	r3, [pc, #88]	; (800bd74 <tcp_input+0x248>)
 800bd1c:	781b      	ldrb	r3, [r3, #0]
 800bd1e:	f003 0303 	and.w	r3, r3, #3
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	bf14      	ite	ne
 800bd26:	2301      	movne	r3, #1
 800bd28:	2300      	moveq	r3, #0
 800bd2a:	b2db      	uxtb	r3, r3
 800bd2c:	b29b      	uxth	r3, r3
 800bd2e:	4413      	add	r3, r2
 800bd30:	b29a      	uxth	r2, r3
 800bd32:	4b11      	ldr	r3, [pc, #68]	; (800bd78 <tcp_input+0x24c>)
 800bd34:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800bd36:	2300      	movs	r3, #0
 800bd38:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bd3a:	4b10      	ldr	r3, [pc, #64]	; (800bd7c <tcp_input+0x250>)
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	61fb      	str	r3, [r7, #28]
 800bd40:	e082      	b.n	800be48 <tcp_input+0x31c>
 800bd42:	bf00      	nop
 800bd44:	20000264 	.word	0x20000264
 800bd48:	200003a8 	.word	0x200003a8
 800bd4c:	20000268 	.word	0x20000268
 800bd50:	2000026c 	.word	0x2000026c
 800bd54:	2000026a 	.word	0x2000026a
 800bd58:	08015b0c 	.word	0x08015b0c
 800bd5c:	08015b74 	.word	0x08015b74
 800bd60:	08015b84 	.word	0x08015b84
 800bd64:	08015bac 	.word	0x08015bac
 800bd68:	08015bb8 	.word	0x08015bb8
 800bd6c:	20000274 	.word	0x20000274
 800bd70:	20000278 	.word	0x20000278
 800bd74:	20000280 	.word	0x20000280
 800bd78:	2000027e 	.word	0x2000027e
 800bd7c:	20003284 	.word	0x20003284
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800bd80:	69fb      	ldr	r3, [r7, #28]
 800bd82:	7d1b      	ldrb	r3, [r3, #20]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d105      	bne.n	800bd94 <tcp_input+0x268>
 800bd88:	4b8f      	ldr	r3, [pc, #572]	; (800bfc8 <tcp_input+0x49c>)
 800bd8a:	22e2      	movs	r2, #226	; 0xe2
 800bd8c:	498f      	ldr	r1, [pc, #572]	; (800bfcc <tcp_input+0x4a0>)
 800bd8e:	4890      	ldr	r0, [pc, #576]	; (800bfd0 <tcp_input+0x4a4>)
 800bd90:	f008 f914 	bl	8013fbc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800bd94:	69fb      	ldr	r3, [r7, #28]
 800bd96:	7d1b      	ldrb	r3, [r3, #20]
 800bd98:	2b0a      	cmp	r3, #10
 800bd9a:	d105      	bne.n	800bda8 <tcp_input+0x27c>
 800bd9c:	4b8a      	ldr	r3, [pc, #552]	; (800bfc8 <tcp_input+0x49c>)
 800bd9e:	22e3      	movs	r2, #227	; 0xe3
 800bda0:	498c      	ldr	r1, [pc, #560]	; (800bfd4 <tcp_input+0x4a8>)
 800bda2:	488b      	ldr	r0, [pc, #556]	; (800bfd0 <tcp_input+0x4a4>)
 800bda4:	f008 f90a 	bl	8013fbc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800bda8:	69fb      	ldr	r3, [r7, #28]
 800bdaa:	7d1b      	ldrb	r3, [r3, #20]
 800bdac:	2b01      	cmp	r3, #1
 800bdae:	d105      	bne.n	800bdbc <tcp_input+0x290>
 800bdb0:	4b85      	ldr	r3, [pc, #532]	; (800bfc8 <tcp_input+0x49c>)
 800bdb2:	22e4      	movs	r2, #228	; 0xe4
 800bdb4:	4988      	ldr	r1, [pc, #544]	; (800bfd8 <tcp_input+0x4ac>)
 800bdb6:	4886      	ldr	r0, [pc, #536]	; (800bfd0 <tcp_input+0x4a4>)
 800bdb8:	f008 f900 	bl	8013fbc <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 800bdbc:	69fb      	ldr	r3, [r7, #28]
 800bdbe:	8b1a      	ldrh	r2, [r3, #24]
 800bdc0:	4b86      	ldr	r3, [pc, #536]	; (800bfdc <tcp_input+0x4b0>)
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	881b      	ldrh	r3, [r3, #0]
 800bdc6:	b29b      	uxth	r3, r3
 800bdc8:	429a      	cmp	r2, r3
 800bdca:	d138      	bne.n	800be3e <tcp_input+0x312>
        pcb->local_port == tcphdr->dest &&
 800bdcc:	69fb      	ldr	r3, [r7, #28]
 800bdce:	8ada      	ldrh	r2, [r3, #22]
 800bdd0:	4b82      	ldr	r3, [pc, #520]	; (800bfdc <tcp_input+0x4b0>)
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	885b      	ldrh	r3, [r3, #2]
 800bdd6:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800bdd8:	429a      	cmp	r2, r3
 800bdda:	d130      	bne.n	800be3e <tcp_input+0x312>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800bddc:	69fb      	ldr	r3, [r7, #28]
 800bdde:	685a      	ldr	r2, [r3, #4]
 800bde0:	4b7f      	ldr	r3, [pc, #508]	; (800bfe0 <tcp_input+0x4b4>)
 800bde2:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800bde4:	429a      	cmp	r2, r3
 800bde6:	d12a      	bne.n	800be3e <tcp_input+0x312>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800bde8:	69fb      	ldr	r3, [r7, #28]
 800bdea:	681a      	ldr	r2, [r3, #0]
 800bdec:	4b7c      	ldr	r3, [pc, #496]	; (800bfe0 <tcp_input+0x4b4>)
 800bdee:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800bdf0:	429a      	cmp	r2, r3
 800bdf2:	d124      	bne.n	800be3e <tcp_input+0x312>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800bdf4:	69fb      	ldr	r3, [r7, #28]
 800bdf6:	68db      	ldr	r3, [r3, #12]
 800bdf8:	69fa      	ldr	r2, [r7, #28]
 800bdfa:	429a      	cmp	r2, r3
 800bdfc:	d105      	bne.n	800be0a <tcp_input+0x2de>
 800bdfe:	4b72      	ldr	r3, [pc, #456]	; (800bfc8 <tcp_input+0x49c>)
 800be00:	22ec      	movs	r2, #236	; 0xec
 800be02:	4978      	ldr	r1, [pc, #480]	; (800bfe4 <tcp_input+0x4b8>)
 800be04:	4872      	ldr	r0, [pc, #456]	; (800bfd0 <tcp_input+0x4a4>)
 800be06:	f008 f8d9 	bl	8013fbc <iprintf>
      if (prev != NULL) {
 800be0a:	69bb      	ldr	r3, [r7, #24]
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d00a      	beq.n	800be26 <tcp_input+0x2fa>
        prev->next = pcb->next;
 800be10:	69fb      	ldr	r3, [r7, #28]
 800be12:	68da      	ldr	r2, [r3, #12]
 800be14:	69bb      	ldr	r3, [r7, #24]
 800be16:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800be18:	4b73      	ldr	r3, [pc, #460]	; (800bfe8 <tcp_input+0x4bc>)
 800be1a:	681a      	ldr	r2, [r3, #0]
 800be1c:	69fb      	ldr	r3, [r7, #28]
 800be1e:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800be20:	4a71      	ldr	r2, [pc, #452]	; (800bfe8 <tcp_input+0x4bc>)
 800be22:	69fb      	ldr	r3, [r7, #28]
 800be24:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800be26:	69fb      	ldr	r3, [r7, #28]
 800be28:	68db      	ldr	r3, [r3, #12]
 800be2a:	69fa      	ldr	r2, [r7, #28]
 800be2c:	429a      	cmp	r2, r3
 800be2e:	d10f      	bne.n	800be50 <tcp_input+0x324>
 800be30:	4b65      	ldr	r3, [pc, #404]	; (800bfc8 <tcp_input+0x49c>)
 800be32:	22f4      	movs	r2, #244	; 0xf4
 800be34:	496d      	ldr	r1, [pc, #436]	; (800bfec <tcp_input+0x4c0>)
 800be36:	4866      	ldr	r0, [pc, #408]	; (800bfd0 <tcp_input+0x4a4>)
 800be38:	f008 f8c0 	bl	8013fbc <iprintf>
      break;
 800be3c:	e008      	b.n	800be50 <tcp_input+0x324>
    }
    prev = pcb;
 800be3e:	69fb      	ldr	r3, [r7, #28]
 800be40:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800be42:	69fb      	ldr	r3, [r7, #28]
 800be44:	68db      	ldr	r3, [r3, #12]
 800be46:	61fb      	str	r3, [r7, #28]
 800be48:	69fb      	ldr	r3, [r7, #28]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d198      	bne.n	800bd80 <tcp_input+0x254>
 800be4e:	e000      	b.n	800be52 <tcp_input+0x326>
      break;
 800be50:	bf00      	nop
  }

  if (pcb == NULL) {
 800be52:	69fb      	ldr	r3, [r7, #28]
 800be54:	2b00      	cmp	r3, #0
 800be56:	d173      	bne.n	800bf40 <tcp_input+0x414>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800be58:	4b65      	ldr	r3, [pc, #404]	; (800bff0 <tcp_input+0x4c4>)
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	61fb      	str	r3, [r7, #28]
 800be5e:	e02f      	b.n	800bec0 <tcp_input+0x394>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800be60:	69fb      	ldr	r3, [r7, #28]
 800be62:	7d1b      	ldrb	r3, [r3, #20]
 800be64:	2b0a      	cmp	r3, #10
 800be66:	d005      	beq.n	800be74 <tcp_input+0x348>
 800be68:	4b57      	ldr	r3, [pc, #348]	; (800bfc8 <tcp_input+0x49c>)
 800be6a:	22fe      	movs	r2, #254	; 0xfe
 800be6c:	4961      	ldr	r1, [pc, #388]	; (800bff4 <tcp_input+0x4c8>)
 800be6e:	4858      	ldr	r0, [pc, #352]	; (800bfd0 <tcp_input+0x4a4>)
 800be70:	f008 f8a4 	bl	8013fbc <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 800be74:	69fb      	ldr	r3, [r7, #28]
 800be76:	8b1a      	ldrh	r2, [r3, #24]
 800be78:	4b58      	ldr	r3, [pc, #352]	; (800bfdc <tcp_input+0x4b0>)
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	881b      	ldrh	r3, [r3, #0]
 800be7e:	b29b      	uxth	r3, r3
 800be80:	429a      	cmp	r2, r3
 800be82:	d11a      	bne.n	800beba <tcp_input+0x38e>
          pcb->local_port == tcphdr->dest &&
 800be84:	69fb      	ldr	r3, [r7, #28]
 800be86:	8ada      	ldrh	r2, [r3, #22]
 800be88:	4b54      	ldr	r3, [pc, #336]	; (800bfdc <tcp_input+0x4b0>)
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	885b      	ldrh	r3, [r3, #2]
 800be8e:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800be90:	429a      	cmp	r2, r3
 800be92:	d112      	bne.n	800beba <tcp_input+0x38e>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800be94:	69fb      	ldr	r3, [r7, #28]
 800be96:	685a      	ldr	r2, [r3, #4]
 800be98:	4b51      	ldr	r3, [pc, #324]	; (800bfe0 <tcp_input+0x4b4>)
 800be9a:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800be9c:	429a      	cmp	r2, r3
 800be9e:	d10c      	bne.n	800beba <tcp_input+0x38e>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800bea0:	69fb      	ldr	r3, [r7, #28]
 800bea2:	681a      	ldr	r2, [r3, #0]
 800bea4:	4b4e      	ldr	r3, [pc, #312]	; (800bfe0 <tcp_input+0x4b4>)
 800bea6:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800bea8:	429a      	cmp	r2, r3
 800beaa:	d106      	bne.n	800beba <tcp_input+0x38e>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 800beac:	69f8      	ldr	r0, [r7, #28]
 800beae:	f000 fb15 	bl	800c4dc <tcp_timewait_input>
        pbuf_free(p);
 800beb2:	6878      	ldr	r0, [r7, #4]
 800beb4:	f7fd ff9a 	bl	8009dec <pbuf_free>
        return;
 800beb8:	e1da      	b.n	800c270 <tcp_input+0x744>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800beba:	69fb      	ldr	r3, [r7, #28]
 800bebc:	68db      	ldr	r3, [r3, #12]
 800bebe:	61fb      	str	r3, [r7, #28]
 800bec0:	69fb      	ldr	r3, [r7, #28]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d1cc      	bne.n	800be60 <tcp_input+0x334>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800bec6:	2300      	movs	r3, #0
 800bec8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800beca:	4b4b      	ldr	r3, [pc, #300]	; (800bff8 <tcp_input+0x4cc>)
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	617b      	str	r3, [r7, #20]
 800bed0:	e019      	b.n	800bf06 <tcp_input+0x3da>
      if (lpcb->local_port == tcphdr->dest) {
 800bed2:	697b      	ldr	r3, [r7, #20]
 800bed4:	8ada      	ldrh	r2, [r3, #22]
 800bed6:	4b41      	ldr	r3, [pc, #260]	; (800bfdc <tcp_input+0x4b0>)
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	885b      	ldrh	r3, [r3, #2]
 800bedc:	b29b      	uxth	r3, r3
 800bede:	429a      	cmp	r2, r3
 800bee0:	d10c      	bne.n	800befc <tcp_input+0x3d0>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800bee2:	697b      	ldr	r3, [r7, #20]
 800bee4:	681a      	ldr	r2, [r3, #0]
 800bee6:	4b3e      	ldr	r3, [pc, #248]	; (800bfe0 <tcp_input+0x4b4>)
 800bee8:	695b      	ldr	r3, [r3, #20]
 800beea:	429a      	cmp	r2, r3
 800beec:	d00f      	beq.n	800bf0e <tcp_input+0x3e2>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800beee:	697b      	ldr	r3, [r7, #20]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d00d      	beq.n	800bf10 <tcp_input+0x3e4>
 800bef4:	697b      	ldr	r3, [r7, #20]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d009      	beq.n	800bf10 <tcp_input+0x3e4>
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800befc:	697b      	ldr	r3, [r7, #20]
 800befe:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800bf00:	697b      	ldr	r3, [r7, #20]
 800bf02:	68db      	ldr	r3, [r3, #12]
 800bf04:	617b      	str	r3, [r7, #20]
 800bf06:	697b      	ldr	r3, [r7, #20]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d1e2      	bne.n	800bed2 <tcp_input+0x3a6>
 800bf0c:	e000      	b.n	800bf10 <tcp_input+0x3e4>
            break;
 800bf0e:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800bf10:	697b      	ldr	r3, [r7, #20]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d014      	beq.n	800bf40 <tcp_input+0x414>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800bf16:	69bb      	ldr	r3, [r7, #24]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d00a      	beq.n	800bf32 <tcp_input+0x406>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800bf1c:	697b      	ldr	r3, [r7, #20]
 800bf1e:	68da      	ldr	r2, [r3, #12]
 800bf20:	69bb      	ldr	r3, [r7, #24]
 800bf22:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800bf24:	4b34      	ldr	r3, [pc, #208]	; (800bff8 <tcp_input+0x4cc>)
 800bf26:	681a      	ldr	r2, [r3, #0]
 800bf28:	697b      	ldr	r3, [r7, #20]
 800bf2a:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800bf2c:	4a32      	ldr	r2, [pc, #200]	; (800bff8 <tcp_input+0x4cc>)
 800bf2e:	697b      	ldr	r3, [r7, #20]
 800bf30:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 800bf32:	6978      	ldr	r0, [r7, #20]
 800bf34:	f000 f9f0 	bl	800c318 <tcp_listen_input>
      pbuf_free(p);
 800bf38:	6878      	ldr	r0, [r7, #4]
 800bf3a:	f7fd ff57 	bl	8009dec <pbuf_free>
      return;
 800bf3e:	e197      	b.n	800c270 <tcp_input+0x744>
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 800bf40:	69fb      	ldr	r3, [r7, #28]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	f000 8164 	beq.w	800c210 <tcp_input+0x6e4>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800bf48:	4b2c      	ldr	r3, [pc, #176]	; (800bffc <tcp_input+0x4d0>)
 800bf4a:	2200      	movs	r2, #0
 800bf4c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	891a      	ldrh	r2, [r3, #8]
 800bf52:	4b2a      	ldr	r3, [pc, #168]	; (800bffc <tcp_input+0x4d0>)
 800bf54:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800bf56:	4a29      	ldr	r2, [pc, #164]	; (800bffc <tcp_input+0x4d0>)
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800bf5c:	4b1f      	ldr	r3, [pc, #124]	; (800bfdc <tcp_input+0x4b0>)
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	4a26      	ldr	r2, [pc, #152]	; (800bffc <tcp_input+0x4d0>)
 800bf62:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800bf64:	4b26      	ldr	r3, [pc, #152]	; (800c000 <tcp_input+0x4d4>)
 800bf66:	2200      	movs	r2, #0
 800bf68:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800bf6a:	4b26      	ldr	r3, [pc, #152]	; (800c004 <tcp_input+0x4d8>)
 800bf6c:	2200      	movs	r2, #0
 800bf6e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800bf70:	4b25      	ldr	r3, [pc, #148]	; (800c008 <tcp_input+0x4dc>)
 800bf72:	2200      	movs	r2, #0
 800bf74:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800bf76:	4b25      	ldr	r3, [pc, #148]	; (800c00c <tcp_input+0x4e0>)
 800bf78:	781b      	ldrb	r3, [r3, #0]
 800bf7a:	f003 0308 	and.w	r3, r3, #8
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d006      	beq.n	800bf90 <tcp_input+0x464>
      p->flags |= PBUF_FLAG_PUSH;
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	7b5b      	ldrb	r3, [r3, #13]
 800bf86:	f043 0301 	orr.w	r3, r3, #1
 800bf8a:	b2da      	uxtb	r2, r3
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800bf90:	69fb      	ldr	r3, [r7, #28]
 800bf92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d03d      	beq.n	800c014 <tcp_input+0x4e8>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800bf98:	69f8      	ldr	r0, [r7, #28]
 800bf9a:	f7ff f991 	bl	800b2c0 <tcp_process_refused_data>
 800bf9e:	4603      	mov	r3, r0
 800bfa0:	f113 0f0d 	cmn.w	r3, #13
 800bfa4:	d007      	beq.n	800bfb6 <tcp_input+0x48a>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800bfa6:	69fb      	ldr	r3, [r7, #28]
 800bfa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d032      	beq.n	800c014 <tcp_input+0x4e8>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800bfae:	4b18      	ldr	r3, [pc, #96]	; (800c010 <tcp_input+0x4e4>)
 800bfb0:	881b      	ldrh	r3, [r3, #0]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d02e      	beq.n	800c014 <tcp_input+0x4e8>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800bfb6:	69fb      	ldr	r3, [r7, #28]
 800bfb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	f040 8108 	bne.w	800c1d0 <tcp_input+0x6a4>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800bfc0:	69f8      	ldr	r0, [r7, #28]
 800bfc2:	f002 fe3d 	bl	800ec40 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800bfc6:	e103      	b.n	800c1d0 <tcp_input+0x6a4>
 800bfc8:	08015b0c 	.word	0x08015b0c
 800bfcc:	08015bd8 	.word	0x08015bd8
 800bfd0:	08015b84 	.word	0x08015b84
 800bfd4:	08015c00 	.word	0x08015c00
 800bfd8:	08015c2c 	.word	0x08015c2c
 800bfdc:	20000264 	.word	0x20000264
 800bfe0:	200003a8 	.word	0x200003a8
 800bfe4:	08015c54 	.word	0x08015c54
 800bfe8:	20003284 	.word	0x20003284
 800bfec:	08015c80 	.word	0x08015c80
 800bff0:	20003294 	.word	0x20003294
 800bff4:	08015cac 	.word	0x08015cac
 800bff8:	2000328c 	.word	0x2000328c
 800bffc:	20000254 	.word	0x20000254
 800c000:	20000284 	.word	0x20000284
 800c004:	20000281 	.word	0x20000281
 800c008:	2000027c 	.word	0x2000027c
 800c00c:	20000280 	.word	0x20000280
 800c010:	2000027e 	.word	0x2000027e
      }
    }
    tcp_input_pcb = pcb;
 800c014:	4a98      	ldr	r2, [pc, #608]	; (800c278 <tcp_input+0x74c>)
 800c016:	69fb      	ldr	r3, [r7, #28]
 800c018:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800c01a:	69f8      	ldr	r0, [r7, #28]
 800c01c:	f000 fac6 	bl	800c5ac <tcp_process>
 800c020:	4603      	mov	r3, r0
 800c022:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800c024:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c028:	f113 0f0d 	cmn.w	r3, #13
 800c02c:	f000 80d2 	beq.w	800c1d4 <tcp_input+0x6a8>
      if (recv_flags & TF_RESET) {
 800c030:	4b92      	ldr	r3, [pc, #584]	; (800c27c <tcp_input+0x750>)
 800c032:	781b      	ldrb	r3, [r3, #0]
 800c034:	f003 0308 	and.w	r3, r3, #8
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d016      	beq.n	800c06a <tcp_input+0x53e>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800c03c:	69fb      	ldr	r3, [r7, #28]
 800c03e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c042:	2b00      	cmp	r3, #0
 800c044:	d008      	beq.n	800c058 <tcp_input+0x52c>
 800c046:	69fb      	ldr	r3, [r7, #28]
 800c048:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c04c:	69fa      	ldr	r2, [r7, #28]
 800c04e:	6912      	ldr	r2, [r2, #16]
 800c050:	f06f 010d 	mvn.w	r1, #13
 800c054:	4610      	mov	r0, r2
 800c056:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800c058:	69f9      	ldr	r1, [r7, #28]
 800c05a:	4889      	ldr	r0, [pc, #548]	; (800c280 <tcp_input+0x754>)
 800c05c:	f7ff fc4c 	bl	800b8f8 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 800c060:	69f9      	ldr	r1, [r7, #28]
 800c062:	2001      	movs	r0, #1
 800c064:	f7fd f91e 	bl	80092a4 <memp_free>
 800c068:	e0bf      	b.n	800c1ea <tcp_input+0x6be>
      } else {
        err = ERR_OK;
 800c06a:	2300      	movs	r3, #0
 800c06c:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800c06e:	4b85      	ldr	r3, [pc, #532]	; (800c284 <tcp_input+0x758>)
 800c070:	881b      	ldrh	r3, [r3, #0]
 800c072:	2b00      	cmp	r3, #0
 800c074:	d01b      	beq.n	800c0ae <tcp_input+0x582>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800c076:	4b83      	ldr	r3, [pc, #524]	; (800c284 <tcp_input+0x758>)
 800c078:	881b      	ldrh	r3, [r3, #0]
 800c07a:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800c07c:	69fb      	ldr	r3, [r7, #28]
 800c07e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c080:	2b00      	cmp	r3, #0
 800c082:	d009      	beq.n	800c098 <tcp_input+0x56c>
 800c084:	69fb      	ldr	r3, [r7, #28]
 800c086:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c088:	69fa      	ldr	r2, [r7, #28]
 800c08a:	6910      	ldr	r0, [r2, #16]
 800c08c:	89fa      	ldrh	r2, [r7, #14]
 800c08e:	69f9      	ldr	r1, [r7, #28]
 800c090:	4798      	blx	r3
 800c092:	4603      	mov	r3, r0
 800c094:	74fb      	strb	r3, [r7, #19]
 800c096:	e001      	b.n	800c09c <tcp_input+0x570>
 800c098:	2300      	movs	r3, #0
 800c09a:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800c09c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c0a0:	f113 0f0d 	cmn.w	r3, #13
 800c0a4:	f000 8098 	beq.w	800c1d8 <tcp_input+0x6ac>
              goto aborted;
            }
          }
          recv_acked = 0;
 800c0a8:	4b76      	ldr	r3, [pc, #472]	; (800c284 <tcp_input+0x758>)
 800c0aa:	2200      	movs	r2, #0
 800c0ac:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800c0ae:	69f8      	ldr	r0, [r7, #28]
 800c0b0:	f000 f900 	bl	800c2b4 <tcp_input_delayed_close>
 800c0b4:	4603      	mov	r3, r0
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	f040 8090 	bne.w	800c1dc <tcp_input+0x6b0>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800c0bc:	4b72      	ldr	r3, [pc, #456]	; (800c288 <tcp_input+0x75c>)
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d041      	beq.n	800c148 <tcp_input+0x61c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800c0c4:	69fb      	ldr	r3, [r7, #28]
 800c0c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d006      	beq.n	800c0da <tcp_input+0x5ae>
 800c0cc:	4b6f      	ldr	r3, [pc, #444]	; (800c28c <tcp_input+0x760>)
 800c0ce:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 800c0d2:	496f      	ldr	r1, [pc, #444]	; (800c290 <tcp_input+0x764>)
 800c0d4:	486f      	ldr	r0, [pc, #444]	; (800c294 <tcp_input+0x768>)
 800c0d6:	f007 ff71 	bl	8013fbc <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800c0da:	69fb      	ldr	r3, [r7, #28]
 800c0dc:	7e9b      	ldrb	r3, [r3, #26]
 800c0de:	f003 0310 	and.w	r3, r3, #16
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d008      	beq.n	800c0f8 <tcp_input+0x5cc>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800c0e6:	4b68      	ldr	r3, [pc, #416]	; (800c288 <tcp_input+0x75c>)
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	f7fd fe7e 	bl	8009dec <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800c0f0:	69f8      	ldr	r0, [r7, #28]
 800c0f2:	f7fe fb7d 	bl	800a7f0 <tcp_abort>
            goto aborted;
 800c0f6:	e078      	b.n	800c1ea <tcp_input+0x6be>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800c0f8:	69fb      	ldr	r3, [r7, #28]
 800c0fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d00c      	beq.n	800c11c <tcp_input+0x5f0>
 800c102:	69fb      	ldr	r3, [r7, #28]
 800c104:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800c108:	69fb      	ldr	r3, [r7, #28]
 800c10a:	6918      	ldr	r0, [r3, #16]
 800c10c:	4b5e      	ldr	r3, [pc, #376]	; (800c288 <tcp_input+0x75c>)
 800c10e:	681a      	ldr	r2, [r3, #0]
 800c110:	2300      	movs	r3, #0
 800c112:	69f9      	ldr	r1, [r7, #28]
 800c114:	47a0      	blx	r4
 800c116:	4603      	mov	r3, r0
 800c118:	74fb      	strb	r3, [r7, #19]
 800c11a:	e008      	b.n	800c12e <tcp_input+0x602>
 800c11c:	4b5a      	ldr	r3, [pc, #360]	; (800c288 <tcp_input+0x75c>)
 800c11e:	681a      	ldr	r2, [r3, #0]
 800c120:	2300      	movs	r3, #0
 800c122:	69f9      	ldr	r1, [r7, #28]
 800c124:	2000      	movs	r0, #0
 800c126:	f7ff f98b 	bl	800b440 <tcp_recv_null>
 800c12a:	4603      	mov	r3, r0
 800c12c:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800c12e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c132:	f113 0f0d 	cmn.w	r3, #13
 800c136:	d053      	beq.n	800c1e0 <tcp_input+0x6b4>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800c138:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d003      	beq.n	800c148 <tcp_input+0x61c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800c140:	4b51      	ldr	r3, [pc, #324]	; (800c288 <tcp_input+0x75c>)
 800c142:	681a      	ldr	r2, [r3, #0]
 800c144:	69fb      	ldr	r3, [r7, #28]
 800c146:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800c148:	4b4c      	ldr	r3, [pc, #304]	; (800c27c <tcp_input+0x750>)
 800c14a:	781b      	ldrb	r3, [r3, #0]
 800c14c:	f003 0320 	and.w	r3, r3, #32
 800c150:	2b00      	cmp	r3, #0
 800c152:	d030      	beq.n	800c1b6 <tcp_input+0x68a>
          if (pcb->refused_data != NULL) {
 800c154:	69fb      	ldr	r3, [r7, #28]
 800c156:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d009      	beq.n	800c170 <tcp_input+0x644>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800c15c:	69fb      	ldr	r3, [r7, #28]
 800c15e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c160:	7b5a      	ldrb	r2, [r3, #13]
 800c162:	69fb      	ldr	r3, [r7, #28]
 800c164:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c166:	f042 0220 	orr.w	r2, r2, #32
 800c16a:	b2d2      	uxtb	r2, r2
 800c16c:	735a      	strb	r2, [r3, #13]
 800c16e:	e022      	b.n	800c1b6 <tcp_input+0x68a>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800c170:	69fb      	ldr	r3, [r7, #28]
 800c172:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c174:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c178:	d005      	beq.n	800c186 <tcp_input+0x65a>
              pcb->rcv_wnd++;
 800c17a:	69fb      	ldr	r3, [r7, #28]
 800c17c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c17e:	3301      	adds	r3, #1
 800c180:	b29a      	uxth	r2, r3
 800c182:	69fb      	ldr	r3, [r7, #28]
 800c184:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800c186:	69fb      	ldr	r3, [r7, #28]
 800c188:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d00b      	beq.n	800c1a8 <tcp_input+0x67c>
 800c190:	69fb      	ldr	r3, [r7, #28]
 800c192:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800c196:	69fb      	ldr	r3, [r7, #28]
 800c198:	6918      	ldr	r0, [r3, #16]
 800c19a:	2300      	movs	r3, #0
 800c19c:	2200      	movs	r2, #0
 800c19e:	69f9      	ldr	r1, [r7, #28]
 800c1a0:	47a0      	blx	r4
 800c1a2:	4603      	mov	r3, r0
 800c1a4:	74fb      	strb	r3, [r7, #19]
 800c1a6:	e001      	b.n	800c1ac <tcp_input+0x680>
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800c1ac:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c1b0:	f113 0f0d 	cmn.w	r3, #13
 800c1b4:	d016      	beq.n	800c1e4 <tcp_input+0x6b8>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800c1b6:	4b30      	ldr	r3, [pc, #192]	; (800c278 <tcp_input+0x74c>)
 800c1b8:	2200      	movs	r2, #0
 800c1ba:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800c1bc:	69f8      	ldr	r0, [r7, #28]
 800c1be:	f000 f879 	bl	800c2b4 <tcp_input_delayed_close>
 800c1c2:	4603      	mov	r3, r0
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d10f      	bne.n	800c1e8 <tcp_input+0x6bc>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800c1c8:	69f8      	ldr	r0, [r7, #28]
 800c1ca:	f002 fd95 	bl	800ecf8 <tcp_output>
 800c1ce:	e00c      	b.n	800c1ea <tcp_input+0x6be>
        goto aborted;
 800c1d0:	bf00      	nop
 800c1d2:	e00a      	b.n	800c1ea <tcp_input+0x6be>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800c1d4:	bf00      	nop
 800c1d6:	e008      	b.n	800c1ea <tcp_input+0x6be>
              goto aborted;
 800c1d8:	bf00      	nop
 800c1da:	e006      	b.n	800c1ea <tcp_input+0x6be>
          goto aborted;
 800c1dc:	bf00      	nop
 800c1de:	e004      	b.n	800c1ea <tcp_input+0x6be>
            goto aborted;
 800c1e0:	bf00      	nop
 800c1e2:	e002      	b.n	800c1ea <tcp_input+0x6be>
              goto aborted;
 800c1e4:	bf00      	nop
 800c1e6:	e000      	b.n	800c1ea <tcp_input+0x6be>
          goto aborted;
 800c1e8:	bf00      	nop
    tcp_input_pcb = NULL;
 800c1ea:	4b23      	ldr	r3, [pc, #140]	; (800c278 <tcp_input+0x74c>)
 800c1ec:	2200      	movs	r2, #0
 800c1ee:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800c1f0:	4b25      	ldr	r3, [pc, #148]	; (800c288 <tcp_input+0x75c>)
 800c1f2:	2200      	movs	r2, #0
 800c1f4:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 800c1f6:	4b28      	ldr	r3, [pc, #160]	; (800c298 <tcp_input+0x76c>)
 800c1f8:	685b      	ldr	r3, [r3, #4]
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d037      	beq.n	800c26e <tcp_input+0x742>
    {
      pbuf_free(inseg.p);
 800c1fe:	4b26      	ldr	r3, [pc, #152]	; (800c298 <tcp_input+0x76c>)
 800c200:	685b      	ldr	r3, [r3, #4]
 800c202:	4618      	mov	r0, r3
 800c204:	f7fd fdf2 	bl	8009dec <pbuf_free>
      inseg.p = NULL;
 800c208:	4b23      	ldr	r3, [pc, #140]	; (800c298 <tcp_input+0x76c>)
 800c20a:	2200      	movs	r2, #0
 800c20c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800c20e:	e02e      	b.n	800c26e <tcp_input+0x742>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800c210:	4b22      	ldr	r3, [pc, #136]	; (800c29c <tcp_input+0x770>)
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	899b      	ldrh	r3, [r3, #12]
 800c216:	b29b      	uxth	r3, r3
 800c218:	4618      	mov	r0, r3
 800c21a:	f7fc fc07 	bl	8008a2c <lwip_htons>
 800c21e:	4603      	mov	r3, r0
 800c220:	f003 0304 	and.w	r3, r3, #4
 800c224:	2b00      	cmp	r3, #0
 800c226:	d115      	bne.n	800c254 <tcp_input+0x728>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800c228:	4b1d      	ldr	r3, [pc, #116]	; (800c2a0 <tcp_input+0x774>)
 800c22a:	6818      	ldr	r0, [r3, #0]
 800c22c:	4b1d      	ldr	r3, [pc, #116]	; (800c2a4 <tcp_input+0x778>)
 800c22e:	881b      	ldrh	r3, [r3, #0]
 800c230:	461a      	mov	r2, r3
 800c232:	4b1d      	ldr	r3, [pc, #116]	; (800c2a8 <tcp_input+0x77c>)
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c238:	4b18      	ldr	r3, [pc, #96]	; (800c29c <tcp_input+0x770>)
 800c23a:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800c23c:	885b      	ldrh	r3, [r3, #2]
 800c23e:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c240:	4a16      	ldr	r2, [pc, #88]	; (800c29c <tcp_input+0x770>)
 800c242:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800c244:	8812      	ldrh	r2, [r2, #0]
 800c246:	b292      	uxth	r2, r2
 800c248:	9201      	str	r2, [sp, #4]
 800c24a:	9300      	str	r3, [sp, #0]
 800c24c:	4b17      	ldr	r3, [pc, #92]	; (800c2ac <tcp_input+0x780>)
 800c24e:	4a18      	ldr	r2, [pc, #96]	; (800c2b0 <tcp_input+0x784>)
 800c250:	f002 ffdc 	bl	800f20c <tcp_rst>
    pbuf_free(p);
 800c254:	6878      	ldr	r0, [r7, #4]
 800c256:	f7fd fdc9 	bl	8009dec <pbuf_free>
  return;
 800c25a:	e008      	b.n	800c26e <tcp_input+0x742>
    goto dropped;
 800c25c:	bf00      	nop
 800c25e:	e002      	b.n	800c266 <tcp_input+0x73a>
dropped:
 800c260:	bf00      	nop
 800c262:	e000      	b.n	800c266 <tcp_input+0x73a>
      goto dropped;
 800c264:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800c266:	6878      	ldr	r0, [r7, #4]
 800c268:	f7fd fdc0 	bl	8009dec <pbuf_free>
 800c26c:	e000      	b.n	800c270 <tcp_input+0x744>
  return;
 800c26e:	bf00      	nop
}
 800c270:	3724      	adds	r7, #36	; 0x24
 800c272:	46bd      	mov	sp, r7
 800c274:	bd90      	pop	{r4, r7, pc}
 800c276:	bf00      	nop
 800c278:	20003298 	.word	0x20003298
 800c27c:	20000281 	.word	0x20000281
 800c280:	20003284 	.word	0x20003284
 800c284:	2000027c 	.word	0x2000027c
 800c288:	20000284 	.word	0x20000284
 800c28c:	08015b0c 	.word	0x08015b0c
 800c290:	08015cdc 	.word	0x08015cdc
 800c294:	08015b84 	.word	0x08015b84
 800c298:	20000254 	.word	0x20000254
 800c29c:	20000264 	.word	0x20000264
 800c2a0:	20000278 	.word	0x20000278
 800c2a4:	2000027e 	.word	0x2000027e
 800c2a8:	20000274 	.word	0x20000274
 800c2ac:	200003b8 	.word	0x200003b8
 800c2b0:	200003bc 	.word	0x200003bc

0800c2b4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800c2b4:	b580      	push	{r7, lr}
 800c2b6:	b082      	sub	sp, #8
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	6078      	str	r0, [r7, #4]
  if (recv_flags & TF_CLOSED) {
 800c2bc:	4b14      	ldr	r3, [pc, #80]	; (800c310 <tcp_input_delayed_close+0x5c>)
 800c2be:	781b      	ldrb	r3, [r3, #0]
 800c2c0:	f003 0310 	and.w	r3, r3, #16
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d01d      	beq.n	800c304 <tcp_input_delayed_close+0x50>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	7e9b      	ldrb	r3, [r3, #26]
 800c2cc:	f003 0310 	and.w	r3, r3, #16
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d10d      	bne.n	800c2f0 <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d008      	beq.n	800c2f0 <tcp_input_delayed_close+0x3c>
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c2e4:	687a      	ldr	r2, [r7, #4]
 800c2e6:	6912      	ldr	r2, [r2, #16]
 800c2e8:	f06f 010e 	mvn.w	r1, #14
 800c2ec:	4610      	mov	r0, r2
 800c2ee:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800c2f0:	6879      	ldr	r1, [r7, #4]
 800c2f2:	4808      	ldr	r0, [pc, #32]	; (800c314 <tcp_input_delayed_close+0x60>)
 800c2f4:	f7ff fb00 	bl	800b8f8 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 800c2f8:	6879      	ldr	r1, [r7, #4]
 800c2fa:	2001      	movs	r0, #1
 800c2fc:	f7fc ffd2 	bl	80092a4 <memp_free>
    return 1;
 800c300:	2301      	movs	r3, #1
 800c302:	e000      	b.n	800c306 <tcp_input_delayed_close+0x52>
  }
  return 0;
 800c304:	2300      	movs	r3, #0
}
 800c306:	4618      	mov	r0, r3
 800c308:	3708      	adds	r7, #8
 800c30a:	46bd      	mov	sp, r7
 800c30c:	bd80      	pop	{r7, pc}
 800c30e:	bf00      	nop
 800c310:	20000281 	.word	0x20000281
 800c314:	20003284 	.word	0x20003284

0800c318 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800c318:	b580      	push	{r7, lr}
 800c31a:	b088      	sub	sp, #32
 800c31c:	af02      	add	r7, sp, #8
 800c31e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800c320:	4b64      	ldr	r3, [pc, #400]	; (800c4b4 <tcp_listen_input+0x19c>)
 800c322:	781b      	ldrb	r3, [r3, #0]
 800c324:	f003 0304 	and.w	r3, r3, #4
 800c328:	2b00      	cmp	r3, #0
 800c32a:	f040 80bc 	bne.w	800c4a6 <tcp_listen_input+0x18e>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800c32e:	4b61      	ldr	r3, [pc, #388]	; (800c4b4 <tcp_listen_input+0x19c>)
 800c330:	781b      	ldrb	r3, [r3, #0]
 800c332:	f003 0310 	and.w	r3, r3, #16
 800c336:	2b00      	cmp	r3, #0
 800c338:	d016      	beq.n	800c368 <tcp_listen_input+0x50>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800c33a:	4b5f      	ldr	r3, [pc, #380]	; (800c4b8 <tcp_listen_input+0x1a0>)
 800c33c:	6818      	ldr	r0, [r3, #0]
 800c33e:	4b5f      	ldr	r3, [pc, #380]	; (800c4bc <tcp_listen_input+0x1a4>)
 800c340:	881b      	ldrh	r3, [r3, #0]
 800c342:	461a      	mov	r2, r3
 800c344:	4b5e      	ldr	r3, [pc, #376]	; (800c4c0 <tcp_listen_input+0x1a8>)
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c34a:	4b5e      	ldr	r3, [pc, #376]	; (800c4c4 <tcp_listen_input+0x1ac>)
 800c34c:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800c34e:	885b      	ldrh	r3, [r3, #2]
 800c350:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c352:	4a5c      	ldr	r2, [pc, #368]	; (800c4c4 <tcp_listen_input+0x1ac>)
 800c354:	6812      	ldr	r2, [r2, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800c356:	8812      	ldrh	r2, [r2, #0]
 800c358:	b292      	uxth	r2, r2
 800c35a:	9201      	str	r2, [sp, #4]
 800c35c:	9300      	str	r3, [sp, #0]
 800c35e:	4b5a      	ldr	r3, [pc, #360]	; (800c4c8 <tcp_listen_input+0x1b0>)
 800c360:	4a5a      	ldr	r2, [pc, #360]	; (800c4cc <tcp_listen_input+0x1b4>)
 800c362:	f002 ff53 	bl	800f20c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800c366:	e0a0      	b.n	800c4aa <tcp_listen_input+0x192>
  } else if (flags & TCP_SYN) {
 800c368:	4b52      	ldr	r3, [pc, #328]	; (800c4b4 <tcp_listen_input+0x19c>)
 800c36a:	781b      	ldrb	r3, [r3, #0]
 800c36c:	f003 0302 	and.w	r3, r3, #2
 800c370:	2b00      	cmp	r3, #0
 800c372:	f000 809a 	beq.w	800c4aa <tcp_listen_input+0x192>
    npcb = tcp_alloc(pcb->prio);
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	7d5b      	ldrb	r3, [r3, #21]
 800c37a:	4618      	mov	r0, r3
 800c37c:	f7ff f93e 	bl	800b5fc <tcp_alloc>
 800c380:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800c382:	697b      	ldr	r3, [r7, #20]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d111      	bne.n	800c3ac <tcp_listen_input+0x94>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	699b      	ldr	r3, [r3, #24]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d00a      	beq.n	800c3a6 <tcp_listen_input+0x8e>
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	699b      	ldr	r3, [r3, #24]
 800c394:	687a      	ldr	r2, [r7, #4]
 800c396:	6910      	ldr	r0, [r2, #16]
 800c398:	f04f 32ff 	mov.w	r2, #4294967295
 800c39c:	2100      	movs	r1, #0
 800c39e:	4798      	blx	r3
 800c3a0:	4603      	mov	r3, r0
 800c3a2:	73bb      	strb	r3, [r7, #14]
      return;
 800c3a4:	e082      	b.n	800c4ac <tcp_listen_input+0x194>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800c3a6:	23f0      	movs	r3, #240	; 0xf0
 800c3a8:	73bb      	strb	r3, [r7, #14]
      return;
 800c3aa:	e07f      	b.n	800c4ac <tcp_listen_input+0x194>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800c3ac:	4b48      	ldr	r3, [pc, #288]	; (800c4d0 <tcp_listen_input+0x1b8>)
 800c3ae:	695a      	ldr	r2, [r3, #20]
 800c3b0:	697b      	ldr	r3, [r7, #20]
 800c3b2:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800c3b4:	4b46      	ldr	r3, [pc, #280]	; (800c4d0 <tcp_listen_input+0x1b8>)
 800c3b6:	691a      	ldr	r2, [r3, #16]
 800c3b8:	697b      	ldr	r3, [r7, #20]
 800c3ba:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	8ada      	ldrh	r2, [r3, #22]
 800c3c0:	697b      	ldr	r3, [r7, #20]
 800c3c2:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800c3c4:	4b3f      	ldr	r3, [pc, #252]	; (800c4c4 <tcp_listen_input+0x1ac>)
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	881b      	ldrh	r3, [r3, #0]
 800c3ca:	b29a      	uxth	r2, r3
 800c3cc:	697b      	ldr	r3, [r7, #20]
 800c3ce:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800c3d0:	697b      	ldr	r3, [r7, #20]
 800c3d2:	2203      	movs	r2, #3
 800c3d4:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800c3d6:	4b3a      	ldr	r3, [pc, #232]	; (800c4c0 <tcp_listen_input+0x1a8>)
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	1c5a      	adds	r2, r3, #1
 800c3dc:	697b      	ldr	r3, [r7, #20]
 800c3de:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800c3e0:	697b      	ldr	r3, [r7, #20]
 800c3e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c3e4:	697b      	ldr	r3, [r7, #20]
 800c3e6:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800c3e8:	6978      	ldr	r0, [r7, #20]
 800c3ea:	f7ff fb01 	bl	800b9f0 <tcp_next_iss>
 800c3ee:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800c3f0:	697b      	ldr	r3, [r7, #20]
 800c3f2:	693a      	ldr	r2, [r7, #16]
 800c3f4:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->snd_nxt = iss;
 800c3f6:	697b      	ldr	r3, [r7, #20]
 800c3f8:	693a      	ldr	r2, [r7, #16]
 800c3fa:	64da      	str	r2, [r3, #76]	; 0x4c
    npcb->lastack = iss;
 800c3fc:	697b      	ldr	r3, [r7, #20]
 800c3fe:	693a      	ldr	r2, [r7, #16]
 800c400:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800c402:	697b      	ldr	r3, [r7, #20]
 800c404:	693a      	ldr	r2, [r7, #16]
 800c406:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800c408:	4b2d      	ldr	r3, [pc, #180]	; (800c4c0 <tcp_listen_input+0x1a8>)
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	1e5a      	subs	r2, r3, #1
 800c40e:	697b      	ldr	r3, [r7, #20]
 800c410:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	691a      	ldr	r2, [r3, #16]
 800c416:	697b      	ldr	r3, [r7, #20]
 800c418:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800c41a:	697b      	ldr	r3, [r7, #20]
 800c41c:	687a      	ldr	r2, [r7, #4]
 800c41e:	679a      	str	r2, [r3, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	7a1b      	ldrb	r3, [r3, #8]
 800c424:	f003 030c 	and.w	r3, r3, #12
 800c428:	b2da      	uxtb	r2, r3
 800c42a:	697b      	ldr	r3, [r7, #20]
 800c42c:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800c42e:	4b29      	ldr	r3, [pc, #164]	; (800c4d4 <tcp_listen_input+0x1bc>)
 800c430:	681a      	ldr	r2, [r3, #0]
 800c432:	697b      	ldr	r3, [r7, #20]
 800c434:	60da      	str	r2, [r3, #12]
 800c436:	4a27      	ldr	r2, [pc, #156]	; (800c4d4 <tcp_listen_input+0x1bc>)
 800c438:	697b      	ldr	r3, [r7, #20]
 800c43a:	6013      	str	r3, [r2, #0]
 800c43c:	f003 f938 	bl	800f6b0 <tcp_timer_needed>
 800c440:	4b25      	ldr	r3, [pc, #148]	; (800c4d8 <tcp_listen_input+0x1c0>)
 800c442:	2201      	movs	r2, #1
 800c444:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800c446:	6978      	ldr	r0, [r7, #20]
 800c448:	f001 fd14 	bl	800de74 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800c44c:	4b1d      	ldr	r3, [pc, #116]	; (800c4c4 <tcp_listen_input+0x1ac>)
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	89db      	ldrh	r3, [r3, #14]
 800c452:	b29a      	uxth	r2, r3
 800c454:	697b      	ldr	r3, [r7, #20]
 800c456:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 800c45a:	697b      	ldr	r3, [r7, #20]
 800c45c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c460:	697b      	ldr	r3, [r7, #20]
 800c462:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800c466:	697b      	ldr	r3, [r7, #20]
 800c468:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800c46a:	697b      	ldr	r3, [r7, #20]
 800c46c:	3304      	adds	r3, #4
 800c46e:	4619      	mov	r1, r3
 800c470:	4610      	mov	r0, r2
 800c472:	f7ff fad5 	bl	800ba20 <tcp_eff_send_mss_impl>
 800c476:	4603      	mov	r3, r0
 800c478:	461a      	mov	r2, r3
 800c47a:	697b      	ldr	r3, [r7, #20]
 800c47c:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800c47e:	2112      	movs	r1, #18
 800c480:	6978      	ldr	r0, [r7, #20]
 800c482:	f002 fae1 	bl	800ea48 <tcp_enqueue_flags>
 800c486:	4603      	mov	r3, r0
 800c488:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800c48a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d004      	beq.n	800c49c <tcp_listen_input+0x184>
      tcp_abandon(npcb, 0);
 800c492:	2100      	movs	r1, #0
 800c494:	6978      	ldr	r0, [r7, #20]
 800c496:	f7fe f8f9 	bl	800a68c <tcp_abandon>
      return;
 800c49a:	e007      	b.n	800c4ac <tcp_listen_input+0x194>
    tcp_output(npcb);
 800c49c:	6978      	ldr	r0, [r7, #20]
 800c49e:	f002 fc2b 	bl	800ecf8 <tcp_output>
  return;
 800c4a2:	bf00      	nop
 800c4a4:	e001      	b.n	800c4aa <tcp_listen_input+0x192>
    return;
 800c4a6:	bf00      	nop
 800c4a8:	e000      	b.n	800c4ac <tcp_listen_input+0x194>
  return;
 800c4aa:	bf00      	nop
}
 800c4ac:	3718      	adds	r7, #24
 800c4ae:	46bd      	mov	sp, r7
 800c4b0:	bd80      	pop	{r7, pc}
 800c4b2:	bf00      	nop
 800c4b4:	20000280 	.word	0x20000280
 800c4b8:	20000278 	.word	0x20000278
 800c4bc:	2000027e 	.word	0x2000027e
 800c4c0:	20000274 	.word	0x20000274
 800c4c4:	20000264 	.word	0x20000264
 800c4c8:	200003b8 	.word	0x200003b8
 800c4cc:	200003bc 	.word	0x200003bc
 800c4d0:	200003a8 	.word	0x200003a8
 800c4d4:	20003284 	.word	0x20003284
 800c4d8:	20003280 	.word	0x20003280

0800c4dc <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b084      	sub	sp, #16
 800c4e0:	af02      	add	r7, sp, #8
 800c4e2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800c4e4:	4b29      	ldr	r3, [pc, #164]	; (800c58c <tcp_timewait_input+0xb0>)
 800c4e6:	781b      	ldrb	r3, [r3, #0]
 800c4e8:	f003 0304 	and.w	r3, r3, #4
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d147      	bne.n	800c580 <tcp_timewait_input+0xa4>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800c4f0:	4b26      	ldr	r3, [pc, #152]	; (800c58c <tcp_timewait_input+0xb0>)
 800c4f2:	781b      	ldrb	r3, [r3, #0]
 800c4f4:	f003 0302 	and.w	r3, r3, #2
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d027      	beq.n	800c54c <tcp_timewait_input+0x70>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800c4fc:	4b24      	ldr	r3, [pc, #144]	; (800c590 <tcp_timewait_input+0xb4>)
 800c4fe:	681a      	ldr	r2, [r3, #0]
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c504:	1ad3      	subs	r3, r2, r3
 800c506:	2b00      	cmp	r3, #0
 800c508:	db2a      	blt.n	800c560 <tcp_timewait_input+0x84>
 800c50a:	4b21      	ldr	r3, [pc, #132]	; (800c590 <tcp_timewait_input+0xb4>)
 800c50c:	681a      	ldr	r2, [r3, #0]
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c512:	6879      	ldr	r1, [r7, #4]
 800c514:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c516:	440b      	add	r3, r1
 800c518:	1ad3      	subs	r3, r2, r3
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	dc20      	bgt.n	800c560 <tcp_timewait_input+0x84>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800c51e:	4b1d      	ldr	r3, [pc, #116]	; (800c594 <tcp_timewait_input+0xb8>)
 800c520:	6818      	ldr	r0, [r3, #0]
 800c522:	4b1d      	ldr	r3, [pc, #116]	; (800c598 <tcp_timewait_input+0xbc>)
 800c524:	881b      	ldrh	r3, [r3, #0]
 800c526:	461a      	mov	r2, r3
 800c528:	4b19      	ldr	r3, [pc, #100]	; (800c590 <tcp_timewait_input+0xb4>)
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c52e:	4b1b      	ldr	r3, [pc, #108]	; (800c59c <tcp_timewait_input+0xc0>)
 800c530:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800c532:	885b      	ldrh	r3, [r3, #2]
 800c534:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c536:	4a19      	ldr	r2, [pc, #100]	; (800c59c <tcp_timewait_input+0xc0>)
 800c538:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800c53a:	8812      	ldrh	r2, [r2, #0]
 800c53c:	b292      	uxth	r2, r2
 800c53e:	9201      	str	r2, [sp, #4]
 800c540:	9300      	str	r3, [sp, #0]
 800c542:	4b17      	ldr	r3, [pc, #92]	; (800c5a0 <tcp_timewait_input+0xc4>)
 800c544:	4a17      	ldr	r2, [pc, #92]	; (800c5a4 <tcp_timewait_input+0xc8>)
 800c546:	f002 fe61 	bl	800f20c <tcp_rst>
      return;
 800c54a:	e01c      	b.n	800c586 <tcp_timewait_input+0xaa>
    }
  } else if (flags & TCP_FIN) {
 800c54c:	4b0f      	ldr	r3, [pc, #60]	; (800c58c <tcp_timewait_input+0xb0>)
 800c54e:	781b      	ldrb	r3, [r3, #0]
 800c550:	f003 0301 	and.w	r3, r3, #1
 800c554:	2b00      	cmp	r3, #0
 800c556:	d003      	beq.n	800c560 <tcp_timewait_input+0x84>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800c558:	4b13      	ldr	r3, [pc, #76]	; (800c5a8 <tcp_timewait_input+0xcc>)
 800c55a:	681a      	ldr	r2, [r3, #0]
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800c560:	4b0d      	ldr	r3, [pc, #52]	; (800c598 <tcp_timewait_input+0xbc>)
 800c562:	881b      	ldrh	r3, [r3, #0]
 800c564:	2b00      	cmp	r3, #0
 800c566:	d00d      	beq.n	800c584 <tcp_timewait_input+0xa8>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	7e9b      	ldrb	r3, [r3, #26]
 800c56c:	f043 0302 	orr.w	r3, r3, #2
 800c570:	b2da      	uxtb	r2, r3
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800c576:	6878      	ldr	r0, [r7, #4]
 800c578:	f002 fbbe 	bl	800ecf8 <tcp_output>
  }
  return;
 800c57c:	bf00      	nop
 800c57e:	e001      	b.n	800c584 <tcp_timewait_input+0xa8>
    return;
 800c580:	bf00      	nop
 800c582:	e000      	b.n	800c586 <tcp_timewait_input+0xaa>
  return;
 800c584:	bf00      	nop
}
 800c586:	3708      	adds	r7, #8
 800c588:	46bd      	mov	sp, r7
 800c58a:	bd80      	pop	{r7, pc}
 800c58c:	20000280 	.word	0x20000280
 800c590:	20000274 	.word	0x20000274
 800c594:	20000278 	.word	0x20000278
 800c598:	2000027e 	.word	0x2000027e
 800c59c:	20000264 	.word	0x20000264
 800c5a0:	200003b8 	.word	0x200003b8
 800c5a4:	200003bc 	.word	0x200003bc
 800c5a8:	20003288 	.word	0x20003288

0800c5ac <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800c5ac:	b580      	push	{r7, lr}
 800c5ae:	b08a      	sub	sp, #40	; 0x28
 800c5b0:	af02      	add	r7, sp, #8
 800c5b2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800c5b4:	2300      	movs	r3, #0
 800c5b6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800c5b8:	2300      	movs	r3, #0
 800c5ba:	76bb      	strb	r3, [r7, #26]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800c5bc:	4ba4      	ldr	r3, [pc, #656]	; (800c850 <tcp_process+0x2a4>)
 800c5be:	781b      	ldrb	r3, [r3, #0]
 800c5c0:	f003 0304 	and.w	r3, r3, #4
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d04e      	beq.n	800c666 <tcp_process+0xba>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	7d1b      	ldrb	r3, [r3, #20]
 800c5cc:	2b02      	cmp	r3, #2
 800c5ce:	d108      	bne.n	800c5e2 <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c5d4:	4b9f      	ldr	r3, [pc, #636]	; (800c854 <tcp_process+0x2a8>)
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	429a      	cmp	r2, r3
 800c5da:	d123      	bne.n	800c624 <tcp_process+0x78>
        acceptable = 1;
 800c5dc:	2301      	movs	r3, #1
 800c5de:	76fb      	strb	r3, [r7, #27]
 800c5e0:	e020      	b.n	800c624 <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c5e6:	4b9c      	ldr	r3, [pc, #624]	; (800c858 <tcp_process+0x2ac>)
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	429a      	cmp	r2, r3
 800c5ec:	d102      	bne.n	800c5f4 <tcp_process+0x48>
        acceptable = 1;
 800c5ee:	2301      	movs	r3, #1
 800c5f0:	76fb      	strb	r3, [r7, #27]
 800c5f2:	e017      	b.n	800c624 <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c5f4:	4b98      	ldr	r3, [pc, #608]	; (800c858 <tcp_process+0x2ac>)
 800c5f6:	681a      	ldr	r2, [r3, #0]
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5fc:	1ad3      	subs	r3, r2, r3
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	db10      	blt.n	800c624 <tcp_process+0x78>
 800c602:	4b95      	ldr	r3, [pc, #596]	; (800c858 <tcp_process+0x2ac>)
 800c604:	681a      	ldr	r2, [r3, #0]
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c60a:	6879      	ldr	r1, [r7, #4]
 800c60c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c60e:	440b      	add	r3, r1
 800c610:	1ad3      	subs	r3, r2, r3
 800c612:	2b00      	cmp	r3, #0
 800c614:	dc06      	bgt.n	800c624 <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	7e9b      	ldrb	r3, [r3, #26]
 800c61a:	f043 0302 	orr.w	r3, r3, #2
 800c61e:	b2da      	uxtb	r2, r3
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	769a      	strb	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800c624:	7efb      	ldrb	r3, [r7, #27]
 800c626:	2b00      	cmp	r3, #0
 800c628:	d01b      	beq.n	800c662 <tcp_process+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	7d1b      	ldrb	r3, [r3, #20]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d106      	bne.n	800c640 <tcp_process+0x94>
 800c632:	4b8a      	ldr	r3, [pc, #552]	; (800c85c <tcp_process+0x2b0>)
 800c634:	f240 22e7 	movw	r2, #743	; 0x2e7
 800c638:	4989      	ldr	r1, [pc, #548]	; (800c860 <tcp_process+0x2b4>)
 800c63a:	488a      	ldr	r0, [pc, #552]	; (800c864 <tcp_process+0x2b8>)
 800c63c:	f007 fcbe 	bl	8013fbc <iprintf>
      recv_flags |= TF_RESET;
 800c640:	4b89      	ldr	r3, [pc, #548]	; (800c868 <tcp_process+0x2bc>)
 800c642:	781b      	ldrb	r3, [r3, #0]
 800c644:	f043 0308 	orr.w	r3, r3, #8
 800c648:	b2da      	uxtb	r2, r3
 800c64a:	4b87      	ldr	r3, [pc, #540]	; (800c868 <tcp_process+0x2bc>)
 800c64c:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	7e9b      	ldrb	r3, [r3, #26]
 800c652:	f023 0301 	bic.w	r3, r3, #1
 800c656:	b2da      	uxtb	r2, r3
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	769a      	strb	r2, [r3, #26]
      return ERR_RST;
 800c65c:	f06f 030d 	mvn.w	r3, #13
 800c660:	e34d      	b.n	800ccfe <tcp_process+0x752>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 800c662:	2300      	movs	r3, #0
 800c664:	e34b      	b.n	800ccfe <tcp_process+0x752>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800c666:	4b7a      	ldr	r3, [pc, #488]	; (800c850 <tcp_process+0x2a4>)
 800c668:	781b      	ldrb	r3, [r3, #0]
 800c66a:	f003 0302 	and.w	r3, r3, #2
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d010      	beq.n	800c694 <tcp_process+0xe8>
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	7d1b      	ldrb	r3, [r3, #20]
 800c676:	2b02      	cmp	r3, #2
 800c678:	d00c      	beq.n	800c694 <tcp_process+0xe8>
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	7d1b      	ldrb	r3, [r3, #20]
 800c67e:	2b03      	cmp	r3, #3
 800c680:	d008      	beq.n	800c694 <tcp_process+0xe8>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	7e9b      	ldrb	r3, [r3, #26]
 800c686:	f043 0302 	orr.w	r3, r3, #2
 800c68a:	b2da      	uxtb	r2, r3
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	769a      	strb	r2, [r3, #26]
    return ERR_OK;
 800c690:	2300      	movs	r3, #0
 800c692:	e334      	b.n	800ccfe <tcp_process+0x752>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	7e9b      	ldrb	r3, [r3, #26]
 800c698:	f003 0310 	and.w	r3, r3, #16
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d103      	bne.n	800c6a8 <tcp_process+0xfc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800c6a0:	4b72      	ldr	r3, [pc, #456]	; (800c86c <tcp_process+0x2c0>)
 800c6a2:	681a      	ldr	r2, [r3, #0]
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	2200      	movs	r2, #0
 800c6ac:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

  tcp_parseopt(pcb);
 800c6b0:	6878      	ldr	r0, [r7, #4]
 800c6b2:	f001 fbdf 	bl	800de74 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	7d1b      	ldrb	r3, [r3, #20]
 800c6ba:	3b02      	subs	r3, #2
 800c6bc:	2b07      	cmp	r3, #7
 800c6be:	f200 830e 	bhi.w	800ccde <tcp_process+0x732>
 800c6c2:	a201      	add	r2, pc, #4	; (adr r2, 800c6c8 <tcp_process+0x11c>)
 800c6c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6c8:	0800c6e9 	.word	0x0800c6e9
 800c6cc:	0800c8e1 	.word	0x0800c8e1
 800c6d0:	0800ca39 	.word	0x0800ca39
 800c6d4:	0800ca63 	.word	0x0800ca63
 800c6d8:	0800cb8d 	.word	0x0800cb8d
 800c6dc:	0800ca39 	.word	0x0800ca39
 800c6e0:	0800cc19 	.word	0x0800cc19
 800c6e4:	0800cca9 	.word	0x0800cca9
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800c6e8:	4b59      	ldr	r3, [pc, #356]	; (800c850 <tcp_process+0x2a4>)
 800c6ea:	781b      	ldrb	r3, [r3, #0]
 800c6ec:	f003 0310 	and.w	r3, r3, #16
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	f000 80cb 	beq.w	800c88c <tcp_process+0x2e0>
 800c6f6:	4b56      	ldr	r3, [pc, #344]	; (800c850 <tcp_process+0x2a4>)
 800c6f8:	781b      	ldrb	r3, [r3, #0]
 800c6fa:	f003 0302 	and.w	r3, r3, #2
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	f000 80c4 	beq.w	800c88c <tcp_process+0x2e0>
        && (ackno == pcb->lastack + 1)) {
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c708:	1c5a      	adds	r2, r3, #1
 800c70a:	4b52      	ldr	r3, [pc, #328]	; (800c854 <tcp_process+0x2a8>)
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	429a      	cmp	r2, r3
 800c710:	f040 80bc 	bne.w	800c88c <tcp_process+0x2e0>
      pcb->rcv_nxt = seqno + 1;
 800c714:	4b50      	ldr	r3, [pc, #320]	; (800c858 <tcp_process+0x2ac>)
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	1c5a      	adds	r2, r3, #1
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	625a      	str	r2, [r3, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	62da      	str	r2, [r3, #44]	; 0x2c
      pcb->lastack = ackno;
 800c726:	4b4b      	ldr	r3, [pc, #300]	; (800c854 <tcp_process+0x2a8>)
 800c728:	681a      	ldr	r2, [r3, #0]
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	645a      	str	r2, [r3, #68]	; 0x44
      pcb->snd_wnd = tcphdr->wnd;
 800c72e:	4b50      	ldr	r3, [pc, #320]	; (800c870 <tcp_process+0x2c4>)
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	89db      	ldrh	r3, [r3, #14]
 800c734:	b29a      	uxth	r2, r3
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800c748:	4b43      	ldr	r3, [pc, #268]	; (800c858 <tcp_process+0x2ac>)
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	1e5a      	subs	r2, r3, #1
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->state = ESTABLISHED;
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	2204      	movs	r2, #4
 800c756:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	3304      	adds	r3, #4
 800c760:	4619      	mov	r1, r3
 800c762:	4610      	mov	r0, r2
 800c764:	f7ff f95c 	bl	800ba20 <tcp_eff_send_mss_impl>
 800c768:	4603      	mov	r3, r0
 800c76a:	461a      	mov	r2, r3
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c774:	005b      	lsls	r3, r3, #1
 800c776:	f241 121c 	movw	r2, #4380	; 0x111c
 800c77a:	429a      	cmp	r2, r3
 800c77c:	bf38      	it	cc
 800c77e:	461a      	movcc	r2, r3
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c784:	009b      	lsls	r3, r3, #2
 800c786:	4293      	cmp	r3, r2
 800c788:	bf28      	it	cs
 800c78a:	4613      	movcs	r3, r2
 800c78c:	b29a      	uxth	r2, r3
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d106      	bne.n	800c7ac <tcp_process+0x200>
 800c79e:	4b2f      	ldr	r3, [pc, #188]	; (800c85c <tcp_process+0x2b0>)
 800c7a0:	f240 321a 	movw	r2, #794	; 0x31a
 800c7a4:	4933      	ldr	r1, [pc, #204]	; (800c874 <tcp_process+0x2c8>)
 800c7a6:	482f      	ldr	r0, [pc, #188]	; (800c864 <tcp_process+0x2b8>)
 800c7a8:	f007 fc08 	bl	8013fbc <iprintf>
      --pcb->snd_queuelen;
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c7b2:	3b01      	subs	r3, #1
 800c7b4:	b29a      	uxth	r2, r3
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c7c0:	61fb      	str	r3, [r7, #28]
      if (rseg == NULL) {
 800c7c2:	69fb      	ldr	r3, [r7, #28]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d111      	bne.n	800c7ec <tcp_process+0x240>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c7cc:	61fb      	str	r3, [r7, #28]
        LWIP_ASSERT("no segment to free", rseg != NULL);
 800c7ce:	69fb      	ldr	r3, [r7, #28]
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d106      	bne.n	800c7e2 <tcp_process+0x236>
 800c7d4:	4b21      	ldr	r3, [pc, #132]	; (800c85c <tcp_process+0x2b0>)
 800c7d6:	f240 3222 	movw	r2, #802	; 0x322
 800c7da:	4927      	ldr	r1, [pc, #156]	; (800c878 <tcp_process+0x2cc>)
 800c7dc:	4821      	ldr	r0, [pc, #132]	; (800c864 <tcp_process+0x2b8>)
 800c7de:	f007 fbed 	bl	8013fbc <iprintf>
        pcb->unsent = rseg->next;
 800c7e2:	69fb      	ldr	r3, [r7, #28]
 800c7e4:	681a      	ldr	r2, [r3, #0]
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	669a      	str	r2, [r3, #104]	; 0x68
 800c7ea:	e003      	b.n	800c7f4 <tcp_process+0x248>
      } else {
        pcb->unacked = rseg->next;
 800c7ec:	69fb      	ldr	r3, [r7, #28]
 800c7ee:	681a      	ldr	r2, [r3, #0]
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      tcp_seg_free(rseg);
 800c7f4:	69f8      	ldr	r0, [r7, #28]
 800c7f6:	f7fe fde0 	bl	800b3ba <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d104      	bne.n	800c80c <tcp_process+0x260>
        pcb->rtime = -1;
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c808:	861a      	strh	r2, [r3, #48]	; 0x30
 800c80a:	e006      	b.n	800c81a <tcp_process+0x26e>
      } else {
        pcb->rtime = 0;
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	2200      	movs	r2, #0
 800c810:	861a      	strh	r2, [r3, #48]	; 0x30
        pcb->nrtx = 0;
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	2200      	movs	r2, #0
 800c816:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c820:	2b00      	cmp	r3, #0
 800c822:	d00a      	beq.n	800c83a <tcp_process+0x28e>
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c82a:	687a      	ldr	r2, [r7, #4]
 800c82c:	6910      	ldr	r0, [r2, #16]
 800c82e:	2200      	movs	r2, #0
 800c830:	6879      	ldr	r1, [r7, #4]
 800c832:	4798      	blx	r3
 800c834:	4603      	mov	r3, r0
 800c836:	76bb      	strb	r3, [r7, #26]
 800c838:	e001      	b.n	800c83e <tcp_process+0x292>
 800c83a:	2300      	movs	r3, #0
 800c83c:	76bb      	strb	r3, [r7, #26]
      if (err == ERR_ABRT) {
 800c83e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c842:	f113 0f0d 	cmn.w	r3, #13
 800c846:	d119      	bne.n	800c87c <tcp_process+0x2d0>
        return ERR_ABRT;
 800c848:	f06f 030c 	mvn.w	r3, #12
 800c84c:	e257      	b.n	800ccfe <tcp_process+0x752>
 800c84e:	bf00      	nop
 800c850:	20000280 	.word	0x20000280
 800c854:	20000278 	.word	0x20000278
 800c858:	20000274 	.word	0x20000274
 800c85c:	08015b0c 	.word	0x08015b0c
 800c860:	08015cf8 	.word	0x08015cf8
 800c864:	08015b84 	.word	0x08015b84
 800c868:	20000281 	.word	0x20000281
 800c86c:	20003288 	.word	0x20003288
 800c870:	20000264 	.word	0x20000264
 800c874:	08015d18 	.word	0x08015d18
 800c878:	08015d30 	.word	0x08015d30
      }
      tcp_ack_now(pcb);
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	7e9b      	ldrb	r3, [r3, #26]
 800c880:	f043 0302 	orr.w	r3, r3, #2
 800c884:	b2da      	uxtb	r2, r3
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	769a      	strb	r2, [r3, #26]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
 800c88a:	e22a      	b.n	800cce2 <tcp_process+0x736>
    else if (flags & TCP_ACK) {
 800c88c:	4b9f      	ldr	r3, [pc, #636]	; (800cb0c <tcp_process+0x560>)
 800c88e:	781b      	ldrb	r3, [r3, #0]
 800c890:	f003 0310 	and.w	r3, r3, #16
 800c894:	2b00      	cmp	r3, #0
 800c896:	f000 8224 	beq.w	800cce2 <tcp_process+0x736>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800c89a:	4b9d      	ldr	r3, [pc, #628]	; (800cb10 <tcp_process+0x564>)
 800c89c:	6818      	ldr	r0, [r3, #0]
 800c89e:	4b9d      	ldr	r3, [pc, #628]	; (800cb14 <tcp_process+0x568>)
 800c8a0:	881b      	ldrh	r3, [r3, #0]
 800c8a2:	461a      	mov	r2, r3
 800c8a4:	4b9c      	ldr	r3, [pc, #624]	; (800cb18 <tcp_process+0x56c>)
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c8aa:	4b9c      	ldr	r3, [pc, #624]	; (800cb1c <tcp_process+0x570>)
 800c8ac:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800c8ae:	885b      	ldrh	r3, [r3, #2]
 800c8b0:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c8b2:	4a9a      	ldr	r2, [pc, #616]	; (800cb1c <tcp_process+0x570>)
 800c8b4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800c8b6:	8812      	ldrh	r2, [r2, #0]
 800c8b8:	b292      	uxth	r2, r2
 800c8ba:	9201      	str	r2, [sp, #4]
 800c8bc:	9300      	str	r3, [sp, #0]
 800c8be:	4b98      	ldr	r3, [pc, #608]	; (800cb20 <tcp_process+0x574>)
 800c8c0:	4a98      	ldr	r2, [pc, #608]	; (800cb24 <tcp_process+0x578>)
 800c8c2:	f002 fca3 	bl	800f20c <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c8cc:	2b05      	cmp	r3, #5
 800c8ce:	f200 8208 	bhi.w	800cce2 <tcp_process+0x736>
        pcb->rtime = 0;
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	2200      	movs	r2, #0
 800c8d6:	861a      	strh	r2, [r3, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 800c8d8:	6878      	ldr	r0, [r7, #4]
 800c8da:	f002 fd0d 	bl	800f2f8 <tcp_rexmit_rto>
    break;
 800c8de:	e200      	b.n	800cce2 <tcp_process+0x736>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 800c8e0:	4b8a      	ldr	r3, [pc, #552]	; (800cb0c <tcp_process+0x560>)
 800c8e2:	781b      	ldrb	r3, [r3, #0]
 800c8e4:	f003 0310 	and.w	r3, r3, #16
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	f000 8091 	beq.w	800ca10 <tcp_process+0x464>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800c8ee:	4b88      	ldr	r3, [pc, #544]	; (800cb10 <tcp_process+0x564>)
 800c8f0:	681a      	ldr	r2, [r3, #0]
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c8f6:	1ad3      	subs	r3, r2, r3
 800c8f8:	3b01      	subs	r3, #1
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	db71      	blt.n	800c9e2 <tcp_process+0x436>
 800c8fe:	4b84      	ldr	r3, [pc, #528]	; (800cb10 <tcp_process+0x564>)
 800c900:	681a      	ldr	r2, [r3, #0]
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c906:	1ad3      	subs	r3, r2, r3
 800c908:	2b00      	cmp	r3, #0
 800c90a:	dc6a      	bgt.n	800c9e2 <tcp_process+0x436>
        pcb->state = ESTABLISHED;
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	2204      	movs	r2, #4
 800c910:	751a      	strb	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c916:	2b00      	cmp	r3, #0
 800c918:	d00b      	beq.n	800c932 <tcp_process+0x386>
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c91e:	699b      	ldr	r3, [r3, #24]
 800c920:	2b00      	cmp	r3, #0
 800c922:	d106      	bne.n	800c932 <tcp_process+0x386>
 800c924:	4b80      	ldr	r3, [pc, #512]	; (800cb28 <tcp_process+0x57c>)
 800c926:	f240 3251 	movw	r2, #849	; 0x351
 800c92a:	4980      	ldr	r1, [pc, #512]	; (800cb2c <tcp_process+0x580>)
 800c92c:	4880      	ldr	r0, [pc, #512]	; (800cb30 <tcp_process+0x584>)
 800c92e:	f007 fb45 	bl	8013fbc <iprintf>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c936:	2b00      	cmp	r3, #0
 800c938:	d102      	bne.n	800c940 <tcp_process+0x394>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
 800c93a:	23fa      	movs	r3, #250	; 0xfa
 800c93c:	76bb      	strb	r3, [r7, #26]
 800c93e:	e011      	b.n	800c964 <tcp_process+0x3b8>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c944:	699b      	ldr	r3, [r3, #24]
 800c946:	2b00      	cmp	r3, #0
 800c948:	d00a      	beq.n	800c960 <tcp_process+0x3b4>
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c94e:	699b      	ldr	r3, [r3, #24]
 800c950:	687a      	ldr	r2, [r7, #4]
 800c952:	6910      	ldr	r0, [r2, #16]
 800c954:	2200      	movs	r2, #0
 800c956:	6879      	ldr	r1, [r7, #4]
 800c958:	4798      	blx	r3
 800c95a:	4603      	mov	r3, r0
 800c95c:	76bb      	strb	r3, [r7, #26]
 800c95e:	e001      	b.n	800c964 <tcp_process+0x3b8>
 800c960:	23f0      	movs	r3, #240	; 0xf0
 800c962:	76bb      	strb	r3, [r7, #26]
        }
        if (err != ERR_OK) {
 800c964:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d00a      	beq.n	800c982 <tcp_process+0x3d6>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 800c96c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c970:	f113 0f0d 	cmn.w	r3, #13
 800c974:	d002      	beq.n	800c97c <tcp_process+0x3d0>
            tcp_abort(pcb);
 800c976:	6878      	ldr	r0, [r7, #4]
 800c978:	f7fd ff3a 	bl	800a7f0 <tcp_abort>
          }
          return ERR_ABRT;
 800c97c:	f06f 030c 	mvn.w	r3, #12
 800c980:	e1bd      	b.n	800ccfe <tcp_process+0x752>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 800c982:	6878      	ldr	r0, [r7, #4]
 800c984:	f000 fa42 	bl	800ce0c <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
 800c988:	4b6a      	ldr	r3, [pc, #424]	; (800cb34 <tcp_process+0x588>)
 800c98a:	881b      	ldrh	r3, [r3, #0]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d005      	beq.n	800c99c <tcp_process+0x3f0>
          recv_acked--;
 800c990:	4b68      	ldr	r3, [pc, #416]	; (800cb34 <tcp_process+0x588>)
 800c992:	881b      	ldrh	r3, [r3, #0]
 800c994:	3b01      	subs	r3, #1
 800c996:	b29a      	uxth	r2, r3
 800c998:	4b66      	ldr	r3, [pc, #408]	; (800cb34 <tcp_process+0x588>)
 800c99a:	801a      	strh	r2, [r3, #0]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c9a0:	005b      	lsls	r3, r3, #1
 800c9a2:	f241 121c 	movw	r2, #4380	; 0x111c
 800c9a6:	429a      	cmp	r2, r3
 800c9a8:	bf38      	it	cc
 800c9aa:	461a      	movcc	r2, r3
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c9b0:	009b      	lsls	r3, r3, #2
 800c9b2:	4293      	cmp	r3, r2
 800c9b4:	bf28      	it	cs
 800c9b6:	4613      	movcs	r3, r2
 800c9b8:	b29a      	uxth	r2, r3
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
 800c9c0:	4b5d      	ldr	r3, [pc, #372]	; (800cb38 <tcp_process+0x58c>)
 800c9c2:	781b      	ldrb	r3, [r3, #0]
 800c9c4:	f003 0320 	and.w	r3, r3, #32
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d034      	beq.n	800ca36 <tcp_process+0x48a>
          tcp_ack_now(pcb);
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	7e9b      	ldrb	r3, [r3, #26]
 800c9d0:	f043 0302 	orr.w	r3, r3, #2
 800c9d4:	b2da      	uxtb	r2, r3
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	769a      	strb	r2, [r3, #26]
          pcb->state = CLOSE_WAIT;
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	2207      	movs	r2, #7
 800c9de:	751a      	strb	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
 800c9e0:	e029      	b.n	800ca36 <tcp_process+0x48a>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800c9e2:	4b4b      	ldr	r3, [pc, #300]	; (800cb10 <tcp_process+0x564>)
 800c9e4:	6818      	ldr	r0, [r3, #0]
 800c9e6:	4b4b      	ldr	r3, [pc, #300]	; (800cb14 <tcp_process+0x568>)
 800c9e8:	881b      	ldrh	r3, [r3, #0]
 800c9ea:	461a      	mov	r2, r3
 800c9ec:	4b4a      	ldr	r3, [pc, #296]	; (800cb18 <tcp_process+0x56c>)
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	18d1      	adds	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c9f2:	4b4a      	ldr	r3, [pc, #296]	; (800cb1c <tcp_process+0x570>)
 800c9f4:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800c9f6:	885b      	ldrh	r3, [r3, #2]
 800c9f8:	b29b      	uxth	r3, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c9fa:	4a48      	ldr	r2, [pc, #288]	; (800cb1c <tcp_process+0x570>)
 800c9fc:	6812      	ldr	r2, [r2, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800c9fe:	8812      	ldrh	r2, [r2, #0]
 800ca00:	b292      	uxth	r2, r2
 800ca02:	9201      	str	r2, [sp, #4]
 800ca04:	9300      	str	r3, [sp, #0]
 800ca06:	4b46      	ldr	r3, [pc, #280]	; (800cb20 <tcp_process+0x574>)
 800ca08:	4a46      	ldr	r2, [pc, #280]	; (800cb24 <tcp_process+0x578>)
 800ca0a:	f002 fbff 	bl	800f20c <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 800ca0e:	e16a      	b.n	800cce6 <tcp_process+0x73a>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800ca10:	4b3e      	ldr	r3, [pc, #248]	; (800cb0c <tcp_process+0x560>)
 800ca12:	781b      	ldrb	r3, [r3, #0]
 800ca14:	f003 0302 	and.w	r3, r3, #2
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	f000 8164 	beq.w	800cce6 <tcp_process+0x73a>
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca22:	1e5a      	subs	r2, r3, #1
 800ca24:	4b3c      	ldr	r3, [pc, #240]	; (800cb18 <tcp_process+0x56c>)
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	429a      	cmp	r2, r3
 800ca2a:	f040 815c 	bne.w	800cce6 <tcp_process+0x73a>
      tcp_rexmit(pcb);
 800ca2e:	6878      	ldr	r0, [r7, #4]
 800ca30:	f002 fc98 	bl	800f364 <tcp_rexmit>
    break;
 800ca34:	e157      	b.n	800cce6 <tcp_process+0x73a>
 800ca36:	e156      	b.n	800cce6 <tcp_process+0x73a>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 800ca38:	6878      	ldr	r0, [r7, #4]
 800ca3a:	f000 f9e7 	bl	800ce0c <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 800ca3e:	4b3e      	ldr	r3, [pc, #248]	; (800cb38 <tcp_process+0x58c>)
 800ca40:	781b      	ldrb	r3, [r3, #0]
 800ca42:	f003 0320 	and.w	r3, r3, #32
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	f000 814f 	beq.w	800ccea <tcp_process+0x73e>
      tcp_ack_now(pcb);
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	7e9b      	ldrb	r3, [r3, #26]
 800ca50:	f043 0302 	orr.w	r3, r3, #2
 800ca54:	b2da      	uxtb	r2, r3
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	769a      	strb	r2, [r3, #26]
      pcb->state = CLOSE_WAIT;
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	2207      	movs	r2, #7
 800ca5e:	751a      	strb	r2, [r3, #20]
    }
    break;
 800ca60:	e143      	b.n	800ccea <tcp_process+0x73e>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 800ca62:	6878      	ldr	r0, [r7, #4]
 800ca64:	f000 f9d2 	bl	800ce0c <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800ca68:	4b33      	ldr	r3, [pc, #204]	; (800cb38 <tcp_process+0x58c>)
 800ca6a:	781b      	ldrb	r3, [r3, #0]
 800ca6c:	f003 0320 	and.w	r3, r3, #32
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d074      	beq.n	800cb5e <tcp_process+0x5b2>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ca74:	4b25      	ldr	r3, [pc, #148]	; (800cb0c <tcp_process+0x560>)
 800ca76:	781b      	ldrb	r3, [r3, #0]
 800ca78:	f003 0310 	and.w	r3, r3, #16
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d063      	beq.n	800cb48 <tcp_process+0x59c>
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ca84:	4b22      	ldr	r3, [pc, #136]	; (800cb10 <tcp_process+0x564>)
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	429a      	cmp	r2, r3
 800ca8a:	d15d      	bne.n	800cb48 <tcp_process+0x59c>
          pcb->unsent == NULL) {
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d159      	bne.n	800cb48 <tcp_process+0x59c>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	7e9b      	ldrb	r3, [r3, #26]
 800ca98:	f043 0302 	orr.w	r3, r3, #2
 800ca9c:	b2da      	uxtb	r2, r3
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	769a      	strb	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800caa2:	6878      	ldr	r0, [r7, #4]
 800caa4:	f7fe fee6 	bl	800b874 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800caa8:	4b24      	ldr	r3, [pc, #144]	; (800cb3c <tcp_process+0x590>)
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	687a      	ldr	r2, [r7, #4]
 800caae:	429a      	cmp	r2, r3
 800cab0:	d105      	bne.n	800cabe <tcp_process+0x512>
 800cab2:	4b22      	ldr	r3, [pc, #136]	; (800cb3c <tcp_process+0x590>)
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	68db      	ldr	r3, [r3, #12]
 800cab8:	4a20      	ldr	r2, [pc, #128]	; (800cb3c <tcp_process+0x590>)
 800caba:	6013      	str	r3, [r2, #0]
 800cabc:	e013      	b.n	800cae6 <tcp_process+0x53a>
 800cabe:	4b1f      	ldr	r3, [pc, #124]	; (800cb3c <tcp_process+0x590>)
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	617b      	str	r3, [r7, #20]
 800cac4:	e00c      	b.n	800cae0 <tcp_process+0x534>
 800cac6:	697b      	ldr	r3, [r7, #20]
 800cac8:	68db      	ldr	r3, [r3, #12]
 800caca:	687a      	ldr	r2, [r7, #4]
 800cacc:	429a      	cmp	r2, r3
 800cace:	d104      	bne.n	800cada <tcp_process+0x52e>
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	68da      	ldr	r2, [r3, #12]
 800cad4:	697b      	ldr	r3, [r7, #20]
 800cad6:	60da      	str	r2, [r3, #12]
 800cad8:	e005      	b.n	800cae6 <tcp_process+0x53a>
 800cada:	697b      	ldr	r3, [r7, #20]
 800cadc:	68db      	ldr	r3, [r3, #12]
 800cade:	617b      	str	r3, [r7, #20]
 800cae0:	697b      	ldr	r3, [r7, #20]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d1ef      	bne.n	800cac6 <tcp_process+0x51a>
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	2200      	movs	r2, #0
 800caea:	60da      	str	r2, [r3, #12]
 800caec:	4b14      	ldr	r3, [pc, #80]	; (800cb40 <tcp_process+0x594>)
 800caee:	2201      	movs	r2, #1
 800caf0:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	220a      	movs	r2, #10
 800caf6:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800caf8:	4b12      	ldr	r3, [pc, #72]	; (800cb44 <tcp_process+0x598>)
 800cafa:	681a      	ldr	r2, [r3, #0]
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	60da      	str	r2, [r3, #12]
 800cb00:	4a10      	ldr	r2, [pc, #64]	; (800cb44 <tcp_process+0x598>)
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	6013      	str	r3, [r2, #0]
 800cb06:	f002 fdd3 	bl	800f6b0 <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 800cb0a:	e0f0      	b.n	800ccee <tcp_process+0x742>
 800cb0c:	20000280 	.word	0x20000280
 800cb10:	20000278 	.word	0x20000278
 800cb14:	2000027e 	.word	0x2000027e
 800cb18:	20000274 	.word	0x20000274
 800cb1c:	20000264 	.word	0x20000264
 800cb20:	200003b8 	.word	0x200003b8
 800cb24:	200003bc 	.word	0x200003bc
 800cb28:	08015b0c 	.word	0x08015b0c
 800cb2c:	08015d44 	.word	0x08015d44
 800cb30:	08015b84 	.word	0x08015b84
 800cb34:	2000027c 	.word	0x2000027c
 800cb38:	20000281 	.word	0x20000281
 800cb3c:	20003284 	.word	0x20003284
 800cb40:	20003280 	.word	0x20003280
 800cb44:	20003294 	.word	0x20003294
        tcp_ack_now(pcb);
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	7e9b      	ldrb	r3, [r3, #26]
 800cb4c:	f043 0302 	orr.w	r3, r3, #2
 800cb50:	b2da      	uxtb	r2, r3
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	769a      	strb	r2, [r3, #26]
        pcb->state = CLOSING;
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	2208      	movs	r2, #8
 800cb5a:	751a      	strb	r2, [r3, #20]
    break;
 800cb5c:	e0c7      	b.n	800ccee <tcp_process+0x742>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800cb5e:	4b6a      	ldr	r3, [pc, #424]	; (800cd08 <tcp_process+0x75c>)
 800cb60:	781b      	ldrb	r3, [r3, #0]
 800cb62:	f003 0310 	and.w	r3, r3, #16
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	f000 80c1 	beq.w	800ccee <tcp_process+0x742>
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cb70:	4b66      	ldr	r3, [pc, #408]	; (800cd0c <tcp_process+0x760>)
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	429a      	cmp	r2, r3
 800cb76:	f040 80ba 	bne.w	800ccee <tcp_process+0x742>
               pcb->unsent == NULL) {
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	f040 80b5 	bne.w	800ccee <tcp_process+0x742>
      pcb->state = FIN_WAIT_2;
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	2206      	movs	r2, #6
 800cb88:	751a      	strb	r2, [r3, #20]
    break;
 800cb8a:	e0b0      	b.n	800ccee <tcp_process+0x742>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 800cb8c:	6878      	ldr	r0, [r7, #4]
 800cb8e:	f000 f93d 	bl	800ce0c <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800cb92:	4b5f      	ldr	r3, [pc, #380]	; (800cd10 <tcp_process+0x764>)
 800cb94:	781b      	ldrb	r3, [r3, #0]
 800cb96:	f003 0320 	and.w	r3, r3, #32
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	f000 80a9 	beq.w	800ccf2 <tcp_process+0x746>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	7e9b      	ldrb	r3, [r3, #26]
 800cba4:	f043 0302 	orr.w	r3, r3, #2
 800cba8:	b2da      	uxtb	r2, r3
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	769a      	strb	r2, [r3, #26]
      tcp_pcb_purge(pcb);
 800cbae:	6878      	ldr	r0, [r7, #4]
 800cbb0:	f7fe fe60 	bl	800b874 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800cbb4:	4b57      	ldr	r3, [pc, #348]	; (800cd14 <tcp_process+0x768>)
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	687a      	ldr	r2, [r7, #4]
 800cbba:	429a      	cmp	r2, r3
 800cbbc:	d105      	bne.n	800cbca <tcp_process+0x61e>
 800cbbe:	4b55      	ldr	r3, [pc, #340]	; (800cd14 <tcp_process+0x768>)
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	68db      	ldr	r3, [r3, #12]
 800cbc4:	4a53      	ldr	r2, [pc, #332]	; (800cd14 <tcp_process+0x768>)
 800cbc6:	6013      	str	r3, [r2, #0]
 800cbc8:	e013      	b.n	800cbf2 <tcp_process+0x646>
 800cbca:	4b52      	ldr	r3, [pc, #328]	; (800cd14 <tcp_process+0x768>)
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	613b      	str	r3, [r7, #16]
 800cbd0:	e00c      	b.n	800cbec <tcp_process+0x640>
 800cbd2:	693b      	ldr	r3, [r7, #16]
 800cbd4:	68db      	ldr	r3, [r3, #12]
 800cbd6:	687a      	ldr	r2, [r7, #4]
 800cbd8:	429a      	cmp	r2, r3
 800cbda:	d104      	bne.n	800cbe6 <tcp_process+0x63a>
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	68da      	ldr	r2, [r3, #12]
 800cbe0:	693b      	ldr	r3, [r7, #16]
 800cbe2:	60da      	str	r2, [r3, #12]
 800cbe4:	e005      	b.n	800cbf2 <tcp_process+0x646>
 800cbe6:	693b      	ldr	r3, [r7, #16]
 800cbe8:	68db      	ldr	r3, [r3, #12]
 800cbea:	613b      	str	r3, [r7, #16]
 800cbec:	693b      	ldr	r3, [r7, #16]
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d1ef      	bne.n	800cbd2 <tcp_process+0x626>
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	2200      	movs	r2, #0
 800cbf6:	60da      	str	r2, [r3, #12]
 800cbf8:	4b47      	ldr	r3, [pc, #284]	; (800cd18 <tcp_process+0x76c>)
 800cbfa:	2201      	movs	r2, #1
 800cbfc:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	220a      	movs	r2, #10
 800cc02:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 800cc04:	4b45      	ldr	r3, [pc, #276]	; (800cd1c <tcp_process+0x770>)
 800cc06:	681a      	ldr	r2, [r3, #0]
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	60da      	str	r2, [r3, #12]
 800cc0c:	4a43      	ldr	r2, [pc, #268]	; (800cd1c <tcp_process+0x770>)
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	6013      	str	r3, [r2, #0]
 800cc12:	f002 fd4d 	bl	800f6b0 <tcp_timer_needed>
    }
    break;
 800cc16:	e06c      	b.n	800ccf2 <tcp_process+0x746>
  case CLOSING:
    tcp_receive(pcb);
 800cc18:	6878      	ldr	r0, [r7, #4]
 800cc1a:	f000 f8f7 	bl	800ce0c <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800cc1e:	4b3a      	ldr	r3, [pc, #232]	; (800cd08 <tcp_process+0x75c>)
 800cc20:	781b      	ldrb	r3, [r3, #0]
 800cc22:	f003 0310 	and.w	r3, r3, #16
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d065      	beq.n	800ccf6 <tcp_process+0x74a>
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cc2e:	4b37      	ldr	r3, [pc, #220]	; (800cd0c <tcp_process+0x760>)
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	429a      	cmp	r2, r3
 800cc34:	d15f      	bne.n	800ccf6 <tcp_process+0x74a>
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d15b      	bne.n	800ccf6 <tcp_process+0x74a>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 800cc3e:	6878      	ldr	r0, [r7, #4]
 800cc40:	f7fe fe18 	bl	800b874 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800cc44:	4b33      	ldr	r3, [pc, #204]	; (800cd14 <tcp_process+0x768>)
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	687a      	ldr	r2, [r7, #4]
 800cc4a:	429a      	cmp	r2, r3
 800cc4c:	d105      	bne.n	800cc5a <tcp_process+0x6ae>
 800cc4e:	4b31      	ldr	r3, [pc, #196]	; (800cd14 <tcp_process+0x768>)
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	68db      	ldr	r3, [r3, #12]
 800cc54:	4a2f      	ldr	r2, [pc, #188]	; (800cd14 <tcp_process+0x768>)
 800cc56:	6013      	str	r3, [r2, #0]
 800cc58:	e013      	b.n	800cc82 <tcp_process+0x6d6>
 800cc5a:	4b2e      	ldr	r3, [pc, #184]	; (800cd14 <tcp_process+0x768>)
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	60fb      	str	r3, [r7, #12]
 800cc60:	e00c      	b.n	800cc7c <tcp_process+0x6d0>
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	68db      	ldr	r3, [r3, #12]
 800cc66:	687a      	ldr	r2, [r7, #4]
 800cc68:	429a      	cmp	r2, r3
 800cc6a:	d104      	bne.n	800cc76 <tcp_process+0x6ca>
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	68da      	ldr	r2, [r3, #12]
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	60da      	str	r2, [r3, #12]
 800cc74:	e005      	b.n	800cc82 <tcp_process+0x6d6>
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	68db      	ldr	r3, [r3, #12]
 800cc7a:	60fb      	str	r3, [r7, #12]
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d1ef      	bne.n	800cc62 <tcp_process+0x6b6>
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	2200      	movs	r2, #0
 800cc86:	60da      	str	r2, [r3, #12]
 800cc88:	4b23      	ldr	r3, [pc, #140]	; (800cd18 <tcp_process+0x76c>)
 800cc8a:	2201      	movs	r2, #1
 800cc8c:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	220a      	movs	r2, #10
 800cc92:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 800cc94:	4b21      	ldr	r3, [pc, #132]	; (800cd1c <tcp_process+0x770>)
 800cc96:	681a      	ldr	r2, [r3, #0]
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	60da      	str	r2, [r3, #12]
 800cc9c:	4a1f      	ldr	r2, [pc, #124]	; (800cd1c <tcp_process+0x770>)
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	6013      	str	r3, [r2, #0]
 800cca2:	f002 fd05 	bl	800f6b0 <tcp_timer_needed>
    }
    break;
 800cca6:	e026      	b.n	800ccf6 <tcp_process+0x74a>
  case LAST_ACK:
    tcp_receive(pcb);
 800cca8:	6878      	ldr	r0, [r7, #4]
 800ccaa:	f000 f8af 	bl	800ce0c <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800ccae:	4b16      	ldr	r3, [pc, #88]	; (800cd08 <tcp_process+0x75c>)
 800ccb0:	781b      	ldrb	r3, [r3, #0]
 800ccb2:	f003 0310 	and.w	r3, r3, #16
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d01f      	beq.n	800ccfa <tcp_process+0x74e>
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ccbe:	4b13      	ldr	r3, [pc, #76]	; (800cd0c <tcp_process+0x760>)
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	429a      	cmp	r2, r3
 800ccc4:	d119      	bne.n	800ccfa <tcp_process+0x74e>
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d115      	bne.n	800ccfa <tcp_process+0x74e>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 800ccce:	4b10      	ldr	r3, [pc, #64]	; (800cd10 <tcp_process+0x764>)
 800ccd0:	781b      	ldrb	r3, [r3, #0]
 800ccd2:	f043 0310 	orr.w	r3, r3, #16
 800ccd6:	b2da      	uxtb	r2, r3
 800ccd8:	4b0d      	ldr	r3, [pc, #52]	; (800cd10 <tcp_process+0x764>)
 800ccda:	701a      	strb	r2, [r3, #0]
    }
    break;
 800ccdc:	e00d      	b.n	800ccfa <tcp_process+0x74e>
  default:
    break;
 800ccde:	bf00      	nop
 800cce0:	e00c      	b.n	800ccfc <tcp_process+0x750>
    break;
 800cce2:	bf00      	nop
 800cce4:	e00a      	b.n	800ccfc <tcp_process+0x750>
    break;
 800cce6:	bf00      	nop
 800cce8:	e008      	b.n	800ccfc <tcp_process+0x750>
    break;
 800ccea:	bf00      	nop
 800ccec:	e006      	b.n	800ccfc <tcp_process+0x750>
    break;
 800ccee:	bf00      	nop
 800ccf0:	e004      	b.n	800ccfc <tcp_process+0x750>
    break;
 800ccf2:	bf00      	nop
 800ccf4:	e002      	b.n	800ccfc <tcp_process+0x750>
    break;
 800ccf6:	bf00      	nop
 800ccf8:	e000      	b.n	800ccfc <tcp_process+0x750>
    break;
 800ccfa:	bf00      	nop
  }
  return ERR_OK;
 800ccfc:	2300      	movs	r3, #0
}
 800ccfe:	4618      	mov	r0, r3
 800cd00:	3720      	adds	r7, #32
 800cd02:	46bd      	mov	sp, r7
 800cd04:	bd80      	pop	{r7, pc}
 800cd06:	bf00      	nop
 800cd08:	20000280 	.word	0x20000280
 800cd0c:	20000278 	.word	0x20000278
 800cd10:	20000281 	.word	0x20000281
 800cd14:	20003284 	.word	0x20003284
 800cd18:	20003280 	.word	0x20003280
 800cd1c:	20003294 	.word	0x20003294

0800cd20 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800cd20:	b590      	push	{r4, r7, lr}
 800cd22:	b085      	sub	sp, #20
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	6078      	str	r0, [r7, #4]
 800cd28:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	68db      	ldr	r3, [r3, #12]
 800cd2e:	899b      	ldrh	r3, [r3, #12]
 800cd30:	b29b      	uxth	r3, r3
 800cd32:	4618      	mov	r0, r3
 800cd34:	f7fb fe7a 	bl	8008a2c <lwip_htons>
 800cd38:	4603      	mov	r3, r0
 800cd3a:	f003 0301 	and.w	r3, r3, #1
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d027      	beq.n	800cd92 <tcp_oos_insert_segment+0x72>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800cd42:	6838      	ldr	r0, [r7, #0]
 800cd44:	f7fe fb25 	bl	800b392 <tcp_segs_free>
    next = NULL;
 800cd48:	2300      	movs	r3, #0
 800cd4a:	603b      	str	r3, [r7, #0]
 800cd4c:	e055      	b.n	800cdfa <tcp_oos_insert_segment+0xda>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800cd4e:	683b      	ldr	r3, [r7, #0]
 800cd50:	68db      	ldr	r3, [r3, #12]
 800cd52:	899b      	ldrh	r3, [r3, #12]
 800cd54:	b29b      	uxth	r3, r3
 800cd56:	4618      	mov	r0, r3
 800cd58:	f7fb fe68 	bl	8008a2c <lwip_htons>
 800cd5c:	4603      	mov	r3, r0
 800cd5e:	f003 0301 	and.w	r3, r3, #1
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d00d      	beq.n	800cd82 <tcp_oos_insert_segment+0x62>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	68db      	ldr	r3, [r3, #12]
 800cd6a:	899b      	ldrh	r3, [r3, #12]
 800cd6c:	b29c      	uxth	r4, r3
 800cd6e:	2001      	movs	r0, #1
 800cd70:	f7fb fe5c 	bl	8008a2c <lwip_htons>
 800cd74:	4603      	mov	r3, r0
 800cd76:	461a      	mov	r2, r3
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	68db      	ldr	r3, [r3, #12]
 800cd7c:	4322      	orrs	r2, r4
 800cd7e:	b292      	uxth	r2, r2
 800cd80:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800cd82:	683b      	ldr	r3, [r7, #0]
 800cd84:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800cd86:	683b      	ldr	r3, [r7, #0]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800cd8c:	68f8      	ldr	r0, [r7, #12]
 800cd8e:	f7fe fb14 	bl	800b3ba <tcp_seg_free>
    while (next &&
 800cd92:	683b      	ldr	r3, [r7, #0]
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d00e      	beq.n	800cdb6 <tcp_oos_insert_segment+0x96>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	891b      	ldrh	r3, [r3, #8]
 800cd9c:	461a      	mov	r2, r3
 800cd9e:	4b1a      	ldr	r3, [pc, #104]	; (800ce08 <tcp_oos_insert_segment+0xe8>)
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	441a      	add	r2, r3
 800cda4:	683b      	ldr	r3, [r7, #0]
 800cda6:	68db      	ldr	r3, [r3, #12]
 800cda8:	685b      	ldr	r3, [r3, #4]
 800cdaa:	6839      	ldr	r1, [r7, #0]
 800cdac:	8909      	ldrh	r1, [r1, #8]
 800cdae:	440b      	add	r3, r1
 800cdb0:	1ad3      	subs	r3, r2, r3
    while (next &&
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	dacb      	bge.n	800cd4e <tcp_oos_insert_segment+0x2e>
    }
    if (next &&
 800cdb6:	683b      	ldr	r3, [r7, #0]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d01e      	beq.n	800cdfa <tcp_oos_insert_segment+0xda>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	891b      	ldrh	r3, [r3, #8]
 800cdc0:	461a      	mov	r2, r3
 800cdc2:	4b11      	ldr	r3, [pc, #68]	; (800ce08 <tcp_oos_insert_segment+0xe8>)
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	441a      	add	r2, r3
 800cdc8:	683b      	ldr	r3, [r7, #0]
 800cdca:	68db      	ldr	r3, [r3, #12]
 800cdcc:	685b      	ldr	r3, [r3, #4]
 800cdce:	1ad3      	subs	r3, r2, r3
    if (next &&
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	dd12      	ble.n	800cdfa <tcp_oos_insert_segment+0xda>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800cdd4:	683b      	ldr	r3, [r7, #0]
 800cdd6:	68db      	ldr	r3, [r3, #12]
 800cdd8:	685b      	ldr	r3, [r3, #4]
 800cdda:	b29a      	uxth	r2, r3
 800cddc:	4b0a      	ldr	r3, [pc, #40]	; (800ce08 <tcp_oos_insert_segment+0xe8>)
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	b29b      	uxth	r3, r3
 800cde2:	1ad3      	subs	r3, r2, r3
 800cde4:	b29a      	uxth	r2, r3
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	685a      	ldr	r2, [r3, #4]
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	891b      	ldrh	r3, [r3, #8]
 800cdf2:	4619      	mov	r1, r3
 800cdf4:	4610      	mov	r0, r2
 800cdf6:	f7fc fe85 	bl	8009b04 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	683a      	ldr	r2, [r7, #0]
 800cdfe:	601a      	str	r2, [r3, #0]
}
 800ce00:	bf00      	nop
 800ce02:	3714      	adds	r7, #20
 800ce04:	46bd      	mov	sp, r7
 800ce06:	bd90      	pop	{r4, r7, pc}
 800ce08:	20000274 	.word	0x20000274

0800ce0c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800ce0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce0e:	b08d      	sub	sp, #52	; 0x34
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	6078      	str	r0, [r7, #4]
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 800ce14:	2300      	movs	r3, #0
 800ce16:	61fb      	str	r3, [r7, #28]
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	7d1b      	ldrb	r3, [r3, #20]
 800ce1c:	2b03      	cmp	r3, #3
 800ce1e:	d806      	bhi.n	800ce2e <tcp_receive+0x22>
 800ce20:	4ba6      	ldr	r3, [pc, #664]	; (800d0bc <tcp_receive+0x2b0>)
 800ce22:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800ce26:	49a6      	ldr	r1, [pc, #664]	; (800d0c0 <tcp_receive+0x2b4>)
 800ce28:	48a6      	ldr	r0, [pc, #664]	; (800d0c4 <tcp_receive+0x2b8>)
 800ce2a:	f007 f8c7 	bl	8013fbc <iprintf>

  if (flags & TCP_ACK) {
 800ce2e:	4ba6      	ldr	r3, [pc, #664]	; (800d0c8 <tcp_receive+0x2bc>)
 800ce30:	781b      	ldrb	r3, [r3, #0]
 800ce32:	f003 0310 	and.w	r3, r3, #16
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	f000 82bf 	beq.w	800d3ba <tcp_receive+0x5ae>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ce42:	461a      	mov	r2, r3
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce48:	4413      	add	r3, r2
 800ce4a:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ce50:	4b9e      	ldr	r3, [pc, #632]	; (800d0cc <tcp_receive+0x2c0>)
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	1ad3      	subs	r3, r2, r3
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	db1b      	blt.n	800ce92 <tcp_receive+0x86>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ce5e:	4b9b      	ldr	r3, [pc, #620]	; (800d0cc <tcp_receive+0x2c0>)
 800ce60:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800ce62:	429a      	cmp	r2, r3
 800ce64:	d106      	bne.n	800ce74 <tcp_receive+0x68>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ce6a:	4b99      	ldr	r3, [pc, #612]	; (800d0d0 <tcp_receive+0x2c4>)
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	1ad3      	subs	r3, r2, r3
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	db0e      	blt.n	800ce92 <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ce78:	4b95      	ldr	r3, [pc, #596]	; (800d0d0 <tcp_receive+0x2c4>)
 800ce7a:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ce7c:	429a      	cmp	r2, r3
 800ce7e:	d141      	bne.n	800cf04 <tcp_receive+0xf8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800ce80:	4b94      	ldr	r3, [pc, #592]	; (800d0d4 <tcp_receive+0x2c8>)
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	89db      	ldrh	r3, [r3, #14]
 800ce86:	b29a      	uxth	r2, r3
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ce8e:	429a      	cmp	r2, r3
 800ce90:	d938      	bls.n	800cf04 <tcp_receive+0xf8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800ce92:	4b90      	ldr	r3, [pc, #576]	; (800d0d4 <tcp_receive+0x2c8>)
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	89db      	ldrh	r3, [r3, #14]
 800ce98:	b29a      	uxth	r2, r3
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ceac:	429a      	cmp	r2, r3
 800ceae:	d205      	bcs.n	800cebc <tcp_receive+0xb0>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      }
      pcb->snd_wl1 = seqno;
 800cebc:	4b83      	ldr	r3, [pc, #524]	; (800d0cc <tcp_receive+0x2c0>)
 800cebe:	681a      	ldr	r2, [r3, #0]
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->snd_wl2 = ackno;
 800cec4:	4b82      	ldr	r3, [pc, #520]	; (800d0d0 <tcp_receive+0x2c4>)
 800cec6:	681a      	ldr	r2, [r3, #0]
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	655a      	str	r2, [r3, #84]	; 0x54
      if (pcb->snd_wnd == 0) {
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d10d      	bne.n	800cef2 <tcp_receive+0xe6>
        if (pcb->persist_backoff == 0) {
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d111      	bne.n	800cf04 <tcp_receive+0xf8>
          /* start persist timer */
          pcb->persist_cnt = 0;
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	2200      	movs	r2, #0
 800cee4:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
          pcb->persist_backoff = 1;
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	2201      	movs	r2, #1
 800ceec:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 800cef0:	e008      	b.n	800cf04 <tcp_receive+0xf8>
        }
      } else if (pcb->persist_backoff > 0) {
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d003      	beq.n	800cf04 <tcp_receive+0xf8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	2200      	movs	r2, #0
 800cf00:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800cf04:	4b72      	ldr	r3, [pc, #456]	; (800d0d0 <tcp_receive+0x2c4>)
 800cf06:	681a      	ldr	r2, [r3, #0]
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf0c:	1ad3      	subs	r3, r2, r3
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	dc53      	bgt.n	800cfba <tcp_receive+0x1ae>
      /* Clause 2 */
      if (tcplen == 0) {
 800cf12:	4b71      	ldr	r3, [pc, #452]	; (800d0d8 <tcp_receive+0x2cc>)
 800cf14:	881b      	ldrh	r3, [r3, #0]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d146      	bne.n	800cfa8 <tcp_receive+0x19c>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cf1e:	687a      	ldr	r2, [r7, #4]
 800cf20:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 800cf24:	4413      	add	r3, r2
 800cf26:	697a      	ldr	r2, [r7, #20]
 800cf28:	429a      	cmp	r2, r3
 800cf2a:	d13d      	bne.n	800cfa8 <tcp_receive+0x19c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	db38      	blt.n	800cfa8 <tcp_receive+0x19c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cf3a:	4b65      	ldr	r3, [pc, #404]	; (800d0d0 <tcp_receive+0x2c4>)
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	429a      	cmp	r2, r3
 800cf40:	d132      	bne.n	800cfa8 <tcp_receive+0x19c>
              found_dupack = 1;
 800cf42:	2301      	movs	r3, #1
 800cf44:	61fb      	str	r3, [r7, #28]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800cf4c:	2bff      	cmp	r3, #255	; 0xff
 800cf4e:	d007      	beq.n	800cf60 <tcp_receive+0x154>
                ++pcb->dupacks;
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800cf56:	3301      	adds	r3, #1
 800cf58:	b2da      	uxtb	r2, r3
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800cf66:	2b03      	cmp	r3, #3
 800cf68:	d916      	bls.n	800cf98 <tcp_receive+0x18c>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cf74:	4413      	add	r3, r2
 800cf76:	b29a      	uxth	r2, r3
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800cf7e:	429a      	cmp	r2, r3
 800cf80:	d912      	bls.n	800cfa8 <tcp_receive+0x19c>
                  pcb->cwnd += pcb->mss;
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cf8c:	4413      	add	r3, r2
 800cf8e:	b29a      	uxth	r2, r3
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800cf96:	e007      	b.n	800cfa8 <tcp_receive+0x19c>
                }
              } else if (pcb->dupacks == 3) {
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800cf9e:	2b03      	cmp	r3, #3
 800cfa0:	d102      	bne.n	800cfa8 <tcp_receive+0x19c>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 800cfa2:	6878      	ldr	r0, [r7, #4]
 800cfa4:	f002 fa2e 	bl	800f404 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800cfa8:	69fb      	ldr	r3, [r7, #28]
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	f040 8169 	bne.w	800d282 <tcp_receive+0x476>
        pcb->dupacks = 0;
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	2200      	movs	r2, #0
 800cfb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800cfb8:	e163      	b.n	800d282 <tcp_receive+0x476>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800cfba:	4b45      	ldr	r3, [pc, #276]	; (800d0d0 <tcp_receive+0x2c4>)
 800cfbc:	681a      	ldr	r2, [r3, #0]
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cfc2:	1ad3      	subs	r3, r2, r3
 800cfc4:	3b01      	subs	r3, #1
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	f2c0 8107 	blt.w	800d1da <tcp_receive+0x3ce>
 800cfcc:	4b40      	ldr	r3, [pc, #256]	; (800d0d0 <tcp_receive+0x2c4>)
 800cfce:	681a      	ldr	r2, [r3, #0]
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cfd4:	1ad3      	subs	r3, r2, r3
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	f300 80ff 	bgt.w	800d1da <tcp_receive+0x3ce>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	7e9b      	ldrb	r3, [r3, #26]
 800cfe0:	f003 0304 	and.w	r3, r3, #4
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d00c      	beq.n	800d002 <tcp_receive+0x1f6>
        pcb->flags &= ~TF_INFR;
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	7e9b      	ldrb	r3, [r3, #26]
 800cfec:	f023 0304 	bic.w	r3, r3, #4
 800cff0:	b2da      	uxtb	r2, r3
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	769a      	strb	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	2200      	movs	r2, #0
 800d006:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d010:	10db      	asrs	r3, r3, #3
 800d012:	b21b      	sxth	r3, r3
 800d014:	b29a      	uxth	r2, r3
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d01c:	b29b      	uxth	r3, r3
 800d01e:	4413      	add	r3, r2
 800d020:	b29b      	uxth	r3, r3
 800d022:	b21a      	sxth	r2, r3
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	2200      	movs	r2, #0
 800d02e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800d032:	4b27      	ldr	r3, [pc, #156]	; (800d0d0 <tcp_receive+0x2c4>)
 800d034:	681a      	ldr	r2, [r3, #0]
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	7d1b      	ldrb	r3, [r3, #20]
 800d03e:	2b03      	cmp	r3, #3
 800d040:	f240 8094 	bls.w	800d16c <tcp_receive+0x360>
        if (pcb->cwnd < pcb->ssthresh) {
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800d050:	429a      	cmp	r2, r3
 800d052:	d216      	bcs.n	800d082 <tcp_receive+0x276>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d05e:	4413      	add	r3, r2
 800d060:	b29a      	uxth	r2, r3
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d068:	429a      	cmp	r2, r3
 800d06a:	d97f      	bls.n	800d16c <tcp_receive+0x360>
            pcb->cwnd += pcb->mss;
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d076:	4413      	add	r3, r2
 800d078:	b29a      	uxth	r2, r3
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800d080:	e074      	b.n	800d16c <tcp_receive+0x360>
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d08c:	4619      	mov	r1, r3
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d092:	fb03 f301 	mul.w	r3, r3, r1
 800d096:	6879      	ldr	r1, [r7, #4]
 800d098:	f8b1 1048 	ldrh.w	r1, [r1, #72]	; 0x48
 800d09c:	fb93 f3f1 	sdiv	r3, r3, r1
 800d0a0:	b29b      	uxth	r3, r3
 800d0a2:	4413      	add	r3, r2
 800d0a4:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d0ac:	8a7a      	ldrh	r2, [r7, #18]
 800d0ae:	429a      	cmp	r2, r3
 800d0b0:	d95c      	bls.n	800d16c <tcp_receive+0x360>
            pcb->cwnd = new_cwnd;
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	8a7a      	ldrh	r2, [r7, #18]
 800d0b6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 800d0ba:	e057      	b.n	800d16c <tcp_receive+0x360>
 800d0bc:	08015b0c 	.word	0x08015b0c
 800d0c0:	08015d64 	.word	0x08015d64
 800d0c4:	08015b84 	.word	0x08015b84
 800d0c8:	20000280 	.word	0x20000280
 800d0cc:	20000274 	.word	0x20000274
 800d0d0:	20000278 	.word	0x20000278
 800d0d4:	20000264 	.word	0x20000264
 800d0d8:	2000027e 	.word	0x2000027e
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d0e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        pcb->unacked = pcb->unacked->next;
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d0e6:	681a      	ldr	r2, [r3, #0]
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	66da      	str	r2, [r3, #108]	; 0x6c

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 800d0f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0f4:	685b      	ldr	r3, [r3, #4]
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	f7fc ff0c 	bl	8009f14 <pbuf_clen>
 800d0fc:	4603      	mov	r3, r0
 800d0fe:	429c      	cmp	r4, r3
 800d100:	d206      	bcs.n	800d110 <tcp_receive+0x304>
 800d102:	4b70      	ldr	r3, [pc, #448]	; (800d2c4 <tcp_receive+0x4b8>)
 800d104:	f240 429e 	movw	r2, #1182	; 0x49e
 800d108:	496f      	ldr	r1, [pc, #444]	; (800d2c8 <tcp_receive+0x4bc>)
 800d10a:	4870      	ldr	r0, [pc, #448]	; (800d2cc <tcp_receive+0x4c0>)
 800d10c:	f006 ff56 	bl	8013fbc <iprintf>

        pcb->snd_queuelen -= pbuf_clen(next->p);
 800d110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d112:	685b      	ldr	r3, [r3, #4]
 800d114:	4618      	mov	r0, r3
 800d116:	f7fc fefd 	bl	8009f14 <pbuf_clen>
 800d11a:	4603      	mov	r3, r0
 800d11c:	461a      	mov	r2, r3
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d124:	1a9b      	subs	r3, r3, r2
 800d126:	b29a      	uxth	r2, r3
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        recv_acked += next->len;
 800d12e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d130:	891a      	ldrh	r2, [r3, #8]
 800d132:	4b67      	ldr	r3, [pc, #412]	; (800d2d0 <tcp_receive+0x4c4>)
 800d134:	881b      	ldrh	r3, [r3, #0]
 800d136:	4413      	add	r3, r2
 800d138:	b29a      	uxth	r2, r3
 800d13a:	4b65      	ldr	r3, [pc, #404]	; (800d2d0 <tcp_receive+0x4c4>)
 800d13c:	801a      	strh	r2, [r3, #0]
        tcp_seg_free(next);
 800d13e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d140:	f7fe f93b 	bl	800b3ba <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d00e      	beq.n	800d16c <tcp_receive+0x360>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d152:	2b00      	cmp	r3, #0
 800d154:	d10a      	bne.n	800d16c <tcp_receive+0x360>
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d106      	bne.n	800d16c <tcp_receive+0x360>
 800d15e:	4b59      	ldr	r3, [pc, #356]	; (800d2c4 <tcp_receive+0x4b8>)
 800d160:	f240 42a7 	movw	r2, #1191	; 0x4a7
 800d164:	495b      	ldr	r1, [pc, #364]	; (800d2d4 <tcp_receive+0x4c8>)
 800d166:	4859      	ldr	r0, [pc, #356]	; (800d2cc <tcp_receive+0x4c0>)
 800d168:	f006 ff28 	bl	8013fbc <iprintf>
      while (pcb->unacked != NULL &&
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d170:	2b00      	cmp	r3, #0
 800d172:	d022      	beq.n	800d1ba <tcp_receive+0x3ae>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d178:	68db      	ldr	r3, [r3, #12]
 800d17a:	685b      	ldr	r3, [r3, #4]
 800d17c:	4618      	mov	r0, r3
 800d17e:	f7fb fc63 	bl	8008a48 <lwip_htonl>
 800d182:	4604      	mov	r4, r0
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d188:	891b      	ldrh	r3, [r3, #8]
 800d18a:	461d      	mov	r5, r3
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d190:	68db      	ldr	r3, [r3, #12]
 800d192:	899b      	ldrh	r3, [r3, #12]
 800d194:	b29b      	uxth	r3, r3
 800d196:	4618      	mov	r0, r3
 800d198:	f7fb fc48 	bl	8008a2c <lwip_htons>
 800d19c:	4603      	mov	r3, r0
 800d19e:	f003 0303 	and.w	r3, r3, #3
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d001      	beq.n	800d1aa <tcp_receive+0x39e>
 800d1a6:	2301      	movs	r3, #1
 800d1a8:	e000      	b.n	800d1ac <tcp_receive+0x3a0>
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	442b      	add	r3, r5
 800d1ae:	18e2      	adds	r2, r4, r3
 800d1b0:	4b49      	ldr	r3, [pc, #292]	; (800d2d8 <tcp_receive+0x4cc>)
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	dd90      	ble.n	800d0dc <tcp_receive+0x2d0>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d104      	bne.n	800d1cc <tcp_receive+0x3c0>
        pcb->rtime = -1;
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d1c8:	861a      	strh	r2, [r3, #48]	; 0x30
 800d1ca:	e002      	b.n	800d1d2 <tcp_receive+0x3c6>
      } else {
        pcb->rtime = 0;
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	2200      	movs	r2, #0
 800d1d0:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	2200      	movs	r2, #0
 800d1d6:	76da      	strb	r2, [r3, #27]
 800d1d8:	e002      	b.n	800d1e0 <tcp_receive+0x3d4>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800d1da:	6878      	ldr	r0, [r7, #4]
 800d1dc:	f001 fd30 	bl	800ec40 <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 800d1e0:	e04f      	b.n	800d282 <tcp_receive+0x476>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d1e6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pcb->unsent = pcb->unsent->next;
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d1ec:	681a      	ldr	r2, [r3, #0]
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	669a      	str	r2, [r3, #104]	; 0x68
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d103      	bne.n	800d202 <tcp_receive+0x3f6>
        pcb->unsent_oversize = 0;
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	2200      	movs	r2, #0
 800d1fe:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 800d208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d20a:	685b      	ldr	r3, [r3, #4]
 800d20c:	4618      	mov	r0, r3
 800d20e:	f7fc fe81 	bl	8009f14 <pbuf_clen>
 800d212:	4603      	mov	r3, r0
 800d214:	429c      	cmp	r4, r3
 800d216:	d206      	bcs.n	800d226 <tcp_receive+0x41a>
 800d218:	4b2a      	ldr	r3, [pc, #168]	; (800d2c4 <tcp_receive+0x4b8>)
 800d21a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800d21e:	492a      	ldr	r1, [pc, #168]	; (800d2c8 <tcp_receive+0x4bc>)
 800d220:	482a      	ldr	r0, [pc, #168]	; (800d2cc <tcp_receive+0x4c0>)
 800d222:	f006 fecb 	bl	8013fbc <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 800d226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d228:	685b      	ldr	r3, [r3, #4]
 800d22a:	4618      	mov	r0, r3
 800d22c:	f7fc fe72 	bl	8009f14 <pbuf_clen>
 800d230:	4603      	mov	r3, r0
 800d232:	461a      	mov	r2, r3
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d23a:	1a9b      	subs	r3, r3, r2
 800d23c:	b29a      	uxth	r2, r3
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      recv_acked += next->len;
 800d244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d246:	891a      	ldrh	r2, [r3, #8]
 800d248:	4b21      	ldr	r3, [pc, #132]	; (800d2d0 <tcp_receive+0x4c4>)
 800d24a:	881b      	ldrh	r3, [r3, #0]
 800d24c:	4413      	add	r3, r2
 800d24e:	b29a      	uxth	r2, r3
 800d250:	4b1f      	ldr	r3, [pc, #124]	; (800d2d0 <tcp_receive+0x4c4>)
 800d252:	801a      	strh	r2, [r3, #0]
      tcp_seg_free(next);
 800d254:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d256:	f7fe f8b0 	bl	800b3ba <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d260:	2b00      	cmp	r3, #0
 800d262:	d00e      	beq.n	800d282 <tcp_receive+0x476>
        LWIP_ASSERT("tcp_receive: valid queue length",
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d10a      	bne.n	800d282 <tcp_receive+0x476>
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d270:	2b00      	cmp	r3, #0
 800d272:	d106      	bne.n	800d282 <tcp_receive+0x476>
 800d274:	4b13      	ldr	r3, [pc, #76]	; (800d2c4 <tcp_receive+0x4b8>)
 800d276:	f240 42dd 	movw	r2, #1245	; 0x4dd
 800d27a:	4916      	ldr	r1, [pc, #88]	; (800d2d4 <tcp_receive+0x4c8>)
 800d27c:	4813      	ldr	r0, [pc, #76]	; (800d2cc <tcp_receive+0x4c0>)
 800d27e:	f006 fe9d 	bl	8013fbc <iprintf>
    while (pcb->unsent != NULL &&
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d286:	2b00      	cmp	r3, #0
 800d288:	d036      	beq.n	800d2f8 <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800d28a:	4b13      	ldr	r3, [pc, #76]	; (800d2d8 <tcp_receive+0x4cc>)
 800d28c:	681c      	ldr	r4, [r3, #0]
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d292:	68db      	ldr	r3, [r3, #12]
 800d294:	685b      	ldr	r3, [r3, #4]
 800d296:	4618      	mov	r0, r3
 800d298:	f7fb fbd6 	bl	8008a48 <lwip_htonl>
 800d29c:	4605      	mov	r5, r0
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d2a2:	891b      	ldrh	r3, [r3, #8]
 800d2a4:	461e      	mov	r6, r3
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d2aa:	68db      	ldr	r3, [r3, #12]
 800d2ac:	899b      	ldrh	r3, [r3, #12]
 800d2ae:	b29b      	uxth	r3, r3
 800d2b0:	4618      	mov	r0, r3
 800d2b2:	f7fb fbbb 	bl	8008a2c <lwip_htons>
 800d2b6:	4603      	mov	r3, r0
 800d2b8:	f003 0303 	and.w	r3, r3, #3
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d00d      	beq.n	800d2dc <tcp_receive+0x4d0>
 800d2c0:	2301      	movs	r3, #1
 800d2c2:	e00c      	b.n	800d2de <tcp_receive+0x4d2>
 800d2c4:	08015b0c 	.word	0x08015b0c
 800d2c8:	08015d80 	.word	0x08015d80
 800d2cc:	08015b84 	.word	0x08015b84
 800d2d0:	2000027c 	.word	0x2000027c
 800d2d4:	08015da8 	.word	0x08015da8
 800d2d8:	20000278 	.word	0x20000278
 800d2dc:	2300      	movs	r3, #0
 800d2de:	4433      	add	r3, r6
 800d2e0:	442b      	add	r3, r5
 800d2e2:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	db07      	blt.n	800d2f8 <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800d2e8:	4b8d      	ldr	r3, [pc, #564]	; (800d520 <tcp_receive+0x714>)
 800d2ea:	681a      	ldr	r2, [r3, #0]
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d2f0:	1ad3      	subs	r3, r2, r3
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	f77f af75 	ble.w	800d1e2 <tcp_receive+0x3d6>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d2fe:	4b89      	ldr	r3, [pc, #548]	; (800d524 <tcp_receive+0x718>)
 800d300:	881b      	ldrh	r3, [r3, #0]
 800d302:	4413      	add	r3, r2
 800d304:	b29a      	uxth	r2, r3
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d310:	2b00      	cmp	r3, #0
 800d312:	d052      	beq.n	800d3ba <tcp_receive+0x5ae>
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d318:	4b81      	ldr	r3, [pc, #516]	; (800d520 <tcp_receive+0x714>)
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	1ad3      	subs	r3, r2, r3
 800d31e:	2b00      	cmp	r3, #0
 800d320:	da4b      	bge.n	800d3ba <tcp_receive+0x5ae>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800d322:	4b81      	ldr	r3, [pc, #516]	; (800d528 <tcp_receive+0x71c>)
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	b29a      	uxth	r2, r3
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d32c:	b29b      	uxth	r3, r3
 800d32e:	1ad3      	subs	r3, r2, r3
 800d330:	b29b      	uxth	r3, r3
 800d332:	847b      	strh	r3, [r7, #34]	; 0x22

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 800d334:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d33c:	10db      	asrs	r3, r3, #3
 800d33e:	b21b      	sxth	r3, r3
 800d340:	b29b      	uxth	r3, r3
 800d342:	1ad3      	subs	r3, r2, r3
 800d344:	b29b      	uxth	r3, r3
 800d346:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sa += m;
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d34e:	b29a      	uxth	r2, r3
 800d350:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d352:	4413      	add	r3, r2
 800d354:	b29b      	uxth	r3, r3
 800d356:	b21a      	sxth	r2, r3
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800d35c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800d360:	2b00      	cmp	r3, #0
 800d362:	da03      	bge.n	800d36c <tcp_receive+0x560>
        m = -m;
 800d364:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d366:	425b      	negs	r3, r3
 800d368:	b29b      	uxth	r3, r3
 800d36a:	847b      	strh	r3, [r7, #34]	; 0x22
      }
      m = m - (pcb->sv >> 2);
 800d36c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d374:	109b      	asrs	r3, r3, #2
 800d376:	b21b      	sxth	r3, r3
 800d378:	b29b      	uxth	r3, r3
 800d37a:	1ad3      	subs	r3, r2, r3
 800d37c:	b29b      	uxth	r3, r3
 800d37e:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sv += m;
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d386:	b29a      	uxth	r2, r3
 800d388:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d38a:	4413      	add	r3, r2
 800d38c:	b29b      	uxth	r3, r3
 800d38e:	b21a      	sxth	r2, r3
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d39a:	10db      	asrs	r3, r3, #3
 800d39c:	b21b      	sxth	r3, r3
 800d39e:	b29a      	uxth	r2, r3
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d3a6:	b29b      	uxth	r3, r3
 800d3a8:	4413      	add	r3, r2
 800d3aa:	b29b      	uxth	r3, r3
 800d3ac:	b21a      	sxth	r2, r3
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	2200      	movs	r2, #0
 800d3b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800d3ba:	4b5c      	ldr	r3, [pc, #368]	; (800d52c <tcp_receive+0x720>)
 800d3bc:	881b      	ldrh	r3, [r3, #0]
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	f000 84f1 	beq.w	800dda6 <tcp_receive+0xf9a>
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	7d1b      	ldrb	r3, [r3, #20]
 800d3c8:	2b06      	cmp	r3, #6
 800d3ca:	f200 84ec 	bhi.w	800dda6 <tcp_receive+0xf9a>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d3d2:	4b57      	ldr	r3, [pc, #348]	; (800d530 <tcp_receive+0x724>)
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	1ad3      	subs	r3, r2, r3
 800d3d8:	3b01      	subs	r3, #1
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	f2c0 80b8 	blt.w	800d550 <tcp_receive+0x744>
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d3e4:	4b51      	ldr	r3, [pc, #324]	; (800d52c <tcp_receive+0x720>)
 800d3e6:	881b      	ldrh	r3, [r3, #0]
 800d3e8:	4619      	mov	r1, r3
 800d3ea:	4b51      	ldr	r3, [pc, #324]	; (800d530 <tcp_receive+0x724>)
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	440b      	add	r3, r1
 800d3f0:	1ad3      	subs	r3, r2, r3
 800d3f2:	3301      	adds	r3, #1
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	f300 80ab 	bgt.w	800d550 <tcp_receive+0x744>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800d3fa:	4b4e      	ldr	r3, [pc, #312]	; (800d534 <tcp_receive+0x728>)
 800d3fc:	685b      	ldr	r3, [r3, #4]
 800d3fe:	61bb      	str	r3, [r7, #24]
      off = pcb->rcv_nxt - seqno;
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d404:	4b4a      	ldr	r3, [pc, #296]	; (800d530 <tcp_receive+0x724>)
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	1ad3      	subs	r3, r2, r3
 800d40a:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800d40c:	4b49      	ldr	r3, [pc, #292]	; (800d534 <tcp_receive+0x728>)
 800d40e:	685b      	ldr	r3, [r3, #4]
 800d410:	2b00      	cmp	r3, #0
 800d412:	d106      	bne.n	800d422 <tcp_receive+0x616>
 800d414:	4b48      	ldr	r3, [pc, #288]	; (800d538 <tcp_receive+0x72c>)
 800d416:	f240 523c 	movw	r2, #1340	; 0x53c
 800d41a:	4948      	ldr	r1, [pc, #288]	; (800d53c <tcp_receive+0x730>)
 800d41c:	4848      	ldr	r0, [pc, #288]	; (800d540 <tcp_receive+0x734>)
 800d41e:	f006 fdcd 	bl	8013fbc <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 800d422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d424:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800d428:	4293      	cmp	r3, r2
 800d42a:	dd06      	ble.n	800d43a <tcp_receive+0x62e>
 800d42c:	4b42      	ldr	r3, [pc, #264]	; (800d538 <tcp_receive+0x72c>)
 800d42e:	f240 523d 	movw	r2, #1341	; 0x53d
 800d432:	4944      	ldr	r1, [pc, #272]	; (800d544 <tcp_receive+0x738>)
 800d434:	4842      	ldr	r0, [pc, #264]	; (800d540 <tcp_receive+0x734>)
 800d436:	f006 fdc1 	bl	8013fbc <iprintf>
      if (inseg.p->len < off) {
 800d43a:	4b3e      	ldr	r3, [pc, #248]	; (800d534 <tcp_receive+0x728>)
 800d43c:	685b      	ldr	r3, [r3, #4]
 800d43e:	895b      	ldrh	r3, [r3, #10]
 800d440:	461a      	mov	r2, r3
 800d442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d444:	4293      	cmp	r3, r2
 800d446:	dd3e      	ble.n	800d4c6 <tcp_receive+0x6ba>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800d448:	4b3a      	ldr	r3, [pc, #232]	; (800d534 <tcp_receive+0x728>)
 800d44a:	685b      	ldr	r3, [r3, #4]
 800d44c:	891b      	ldrh	r3, [r3, #8]
 800d44e:	461a      	mov	r2, r3
 800d450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d452:	4293      	cmp	r3, r2
 800d454:	dd06      	ble.n	800d464 <tcp_receive+0x658>
 800d456:	4b38      	ldr	r3, [pc, #224]	; (800d538 <tcp_receive+0x72c>)
 800d458:	f240 523f 	movw	r2, #1343	; 0x53f
 800d45c:	493a      	ldr	r1, [pc, #232]	; (800d548 <tcp_receive+0x73c>)
 800d45e:	4838      	ldr	r0, [pc, #224]	; (800d540 <tcp_receive+0x734>)
 800d460:	f006 fdac 	bl	8013fbc <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800d464:	4b33      	ldr	r3, [pc, #204]	; (800d534 <tcp_receive+0x728>)
 800d466:	685b      	ldr	r3, [r3, #4]
 800d468:	891a      	ldrh	r2, [r3, #8]
 800d46a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d46c:	b29b      	uxth	r3, r3
 800d46e:	1ad3      	subs	r3, r2, r3
 800d470:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
 800d472:	e00e      	b.n	800d492 <tcp_receive+0x686>
          off -= p->len;
 800d474:	69bb      	ldr	r3, [r7, #24]
 800d476:	895b      	ldrh	r3, [r3, #10]
 800d478:	461a      	mov	r2, r3
 800d47a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d47c:	1a9b      	subs	r3, r3, r2
 800d47e:	627b      	str	r3, [r7, #36]	; 0x24
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 800d480:	69bb      	ldr	r3, [r7, #24]
 800d482:	8a3a      	ldrh	r2, [r7, #16]
 800d484:	811a      	strh	r2, [r3, #8]
          p->len = 0;
 800d486:	69bb      	ldr	r3, [r7, #24]
 800d488:	2200      	movs	r2, #0
 800d48a:	815a      	strh	r2, [r3, #10]
          p = p->next;
 800d48c:	69bb      	ldr	r3, [r7, #24]
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	61bb      	str	r3, [r7, #24]
        while (p->len < off) {
 800d492:	69bb      	ldr	r3, [r7, #24]
 800d494:	895b      	ldrh	r3, [r3, #10]
 800d496:	461a      	mov	r2, r3
 800d498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d49a:	4293      	cmp	r3, r2
 800d49c:	dcea      	bgt.n	800d474 <tcp_receive+0x668>
        }
        if (pbuf_header(p, (s16_t)-off)) {
 800d49e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4a0:	b29b      	uxth	r3, r3
 800d4a2:	425b      	negs	r3, r3
 800d4a4:	b29b      	uxth	r3, r3
 800d4a6:	b21b      	sxth	r3, r3
 800d4a8:	4619      	mov	r1, r3
 800d4aa:	69b8      	ldr	r0, [r7, #24]
 800d4ac:	f7fc fc7a 	bl	8009da4 <pbuf_header>
 800d4b0:	4603      	mov	r3, r0
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d01c      	beq.n	800d4f0 <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 800d4b6:	4b20      	ldr	r3, [pc, #128]	; (800d538 <tcp_receive+0x72c>)
 800d4b8:	f240 524c 	movw	r2, #1356	; 0x54c
 800d4bc:	4923      	ldr	r1, [pc, #140]	; (800d54c <tcp_receive+0x740>)
 800d4be:	4820      	ldr	r0, [pc, #128]	; (800d540 <tcp_receive+0x734>)
 800d4c0:	f006 fd7c 	bl	8013fbc <iprintf>
 800d4c4:	e014      	b.n	800d4f0 <tcp_receive+0x6e4>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 800d4c6:	4b1b      	ldr	r3, [pc, #108]	; (800d534 <tcp_receive+0x728>)
 800d4c8:	685b      	ldr	r3, [r3, #4]
 800d4ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d4cc:	b292      	uxth	r2, r2
 800d4ce:	4252      	negs	r2, r2
 800d4d0:	b292      	uxth	r2, r2
 800d4d2:	b212      	sxth	r2, r2
 800d4d4:	4611      	mov	r1, r2
 800d4d6:	4618      	mov	r0, r3
 800d4d8:	f7fc fc64 	bl	8009da4 <pbuf_header>
 800d4dc:	4603      	mov	r3, r0
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d006      	beq.n	800d4f0 <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 800d4e2:	4b15      	ldr	r3, [pc, #84]	; (800d538 <tcp_receive+0x72c>)
 800d4e4:	f240 5251 	movw	r2, #1361	; 0x551
 800d4e8:	4918      	ldr	r1, [pc, #96]	; (800d54c <tcp_receive+0x740>)
 800d4ea:	4815      	ldr	r0, [pc, #84]	; (800d540 <tcp_receive+0x734>)
 800d4ec:	f006 fd66 	bl	8013fbc <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 800d4f0:	4b10      	ldr	r3, [pc, #64]	; (800d534 <tcp_receive+0x728>)
 800d4f2:	891a      	ldrh	r2, [r3, #8]
 800d4f4:	4b0e      	ldr	r3, [pc, #56]	; (800d530 <tcp_receive+0x724>)
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	b299      	uxth	r1, r3
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4fe:	b29b      	uxth	r3, r3
 800d500:	1acb      	subs	r3, r1, r3
 800d502:	b29b      	uxth	r3, r3
 800d504:	4413      	add	r3, r2
 800d506:	b29a      	uxth	r2, r3
 800d508:	4b0a      	ldr	r3, [pc, #40]	; (800d534 <tcp_receive+0x728>)
 800d50a:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d510:	4a07      	ldr	r2, [pc, #28]	; (800d530 <tcp_receive+0x724>)
 800d512:	6013      	str	r3, [r2, #0]
 800d514:	4b07      	ldr	r3, [pc, #28]	; (800d534 <tcp_receive+0x728>)
 800d516:	68db      	ldr	r3, [r3, #12]
 800d518:	4a05      	ldr	r2, [pc, #20]	; (800d530 <tcp_receive+0x724>)
 800d51a:	6812      	ldr	r2, [r2, #0]
 800d51c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800d51e:	e025      	b.n	800d56c <tcp_receive+0x760>
 800d520:	20000278 	.word	0x20000278
 800d524:	2000027c 	.word	0x2000027c
 800d528:	20003288 	.word	0x20003288
 800d52c:	2000027e 	.word	0x2000027e
 800d530:	20000274 	.word	0x20000274
 800d534:	20000254 	.word	0x20000254
 800d538:	08015b0c 	.word	0x08015b0c
 800d53c:	08015dc8 	.word	0x08015dc8
 800d540:	08015b84 	.word	0x08015b84
 800d544:	08015dd8 	.word	0x08015dd8
 800d548:	08015de8 	.word	0x08015de8
 800d54c:	08015df8 	.word	0x08015df8
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800d550:	4b87      	ldr	r3, [pc, #540]	; (800d770 <tcp_receive+0x964>)
 800d552:	681a      	ldr	r2, [r3, #0]
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d558:	1ad3      	subs	r3, r2, r3
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	da06      	bge.n	800d56c <tcp_receive+0x760>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	7e9b      	ldrb	r3, [r3, #26]
 800d562:	f043 0302 	orr.w	r3, r3, #2
 800d566:	b2da      	uxtb	r2, r3
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	769a      	strb	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800d56c:	4b80      	ldr	r3, [pc, #512]	; (800d770 <tcp_receive+0x964>)
 800d56e:	681a      	ldr	r2, [r3, #0]
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d574:	1ad3      	subs	r3, r2, r3
 800d576:	2b00      	cmp	r3, #0
 800d578:	f2c0 8410 	blt.w	800dd9c <tcp_receive+0xf90>
 800d57c:	4b7c      	ldr	r3, [pc, #496]	; (800d770 <tcp_receive+0x964>)
 800d57e:	681a      	ldr	r2, [r3, #0]
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d584:	6879      	ldr	r1, [r7, #4]
 800d586:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d588:	440b      	add	r3, r1
 800d58a:	1ad3      	subs	r3, r2, r3
 800d58c:	3301      	adds	r3, #1
 800d58e:	2b00      	cmp	r3, #0
 800d590:	f300 8404 	bgt.w	800dd9c <tcp_receive+0xf90>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d598:	4b75      	ldr	r3, [pc, #468]	; (800d770 <tcp_receive+0x964>)
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	429a      	cmp	r2, r3
 800d59e:	f040 8287 	bne.w	800dab0 <tcp_receive+0xca4>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800d5a2:	4b74      	ldr	r3, [pc, #464]	; (800d774 <tcp_receive+0x968>)
 800d5a4:	891c      	ldrh	r4, [r3, #8]
 800d5a6:	4b73      	ldr	r3, [pc, #460]	; (800d774 <tcp_receive+0x968>)
 800d5a8:	68db      	ldr	r3, [r3, #12]
 800d5aa:	899b      	ldrh	r3, [r3, #12]
 800d5ac:	b29b      	uxth	r3, r3
 800d5ae:	4618      	mov	r0, r3
 800d5b0:	f7fb fa3c 	bl	8008a2c <lwip_htons>
 800d5b4:	4603      	mov	r3, r0
 800d5b6:	f003 0303 	and.w	r3, r3, #3
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d001      	beq.n	800d5c2 <tcp_receive+0x7b6>
 800d5be:	2301      	movs	r3, #1
 800d5c0:	e000      	b.n	800d5c4 <tcp_receive+0x7b8>
 800d5c2:	2300      	movs	r3, #0
 800d5c4:	4423      	add	r3, r4
 800d5c6:	b29a      	uxth	r2, r3
 800d5c8:	4b6b      	ldr	r3, [pc, #428]	; (800d778 <tcp_receive+0x96c>)
 800d5ca:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d5d0:	4b69      	ldr	r3, [pc, #420]	; (800d778 <tcp_receive+0x96c>)
 800d5d2:	881b      	ldrh	r3, [r3, #0]
 800d5d4:	429a      	cmp	r2, r3
 800d5d6:	d26e      	bcs.n	800d6b6 <tcp_receive+0x8aa>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800d5d8:	4b66      	ldr	r3, [pc, #408]	; (800d774 <tcp_receive+0x968>)
 800d5da:	68db      	ldr	r3, [r3, #12]
 800d5dc:	899b      	ldrh	r3, [r3, #12]
 800d5de:	b29b      	uxth	r3, r3
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	f7fb fa23 	bl	8008a2c <lwip_htons>
 800d5e6:	4603      	mov	r3, r0
 800d5e8:	f003 0301 	and.w	r3, r3, #1
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d01b      	beq.n	800d628 <tcp_receive+0x81c>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800d5f0:	4b60      	ldr	r3, [pc, #384]	; (800d774 <tcp_receive+0x968>)
 800d5f2:	68db      	ldr	r3, [r3, #12]
 800d5f4:	899b      	ldrh	r3, [r3, #12]
 800d5f6:	b29b      	uxth	r3, r3
 800d5f8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d5fc:	b29c      	uxth	r4, r3
 800d5fe:	4b5d      	ldr	r3, [pc, #372]	; (800d774 <tcp_receive+0x968>)
 800d600:	68db      	ldr	r3, [r3, #12]
 800d602:	899b      	ldrh	r3, [r3, #12]
 800d604:	b29b      	uxth	r3, r3
 800d606:	4618      	mov	r0, r3
 800d608:	f7fb fa10 	bl	8008a2c <lwip_htons>
 800d60c:	4603      	mov	r3, r0
 800d60e:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800d612:	b29b      	uxth	r3, r3
 800d614:	4618      	mov	r0, r3
 800d616:	f7fb fa09 	bl	8008a2c <lwip_htons>
 800d61a:	4603      	mov	r3, r0
 800d61c:	461a      	mov	r2, r3
 800d61e:	4b55      	ldr	r3, [pc, #340]	; (800d774 <tcp_receive+0x968>)
 800d620:	68db      	ldr	r3, [r3, #12]
 800d622:	4322      	orrs	r2, r4
 800d624:	b292      	uxth	r2, r2
 800d626:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d62c:	4b51      	ldr	r3, [pc, #324]	; (800d774 <tcp_receive+0x968>)
 800d62e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800d630:	4b50      	ldr	r3, [pc, #320]	; (800d774 <tcp_receive+0x968>)
 800d632:	68db      	ldr	r3, [r3, #12]
 800d634:	899b      	ldrh	r3, [r3, #12]
 800d636:	b29b      	uxth	r3, r3
 800d638:	4618      	mov	r0, r3
 800d63a:	f7fb f9f7 	bl	8008a2c <lwip_htons>
 800d63e:	4603      	mov	r3, r0
 800d640:	f003 0302 	and.w	r3, r3, #2
 800d644:	2b00      	cmp	r3, #0
 800d646:	d005      	beq.n	800d654 <tcp_receive+0x848>
            inseg.len -= 1;
 800d648:	4b4a      	ldr	r3, [pc, #296]	; (800d774 <tcp_receive+0x968>)
 800d64a:	891b      	ldrh	r3, [r3, #8]
 800d64c:	3b01      	subs	r3, #1
 800d64e:	b29a      	uxth	r2, r3
 800d650:	4b48      	ldr	r3, [pc, #288]	; (800d774 <tcp_receive+0x968>)
 800d652:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800d654:	4b47      	ldr	r3, [pc, #284]	; (800d774 <tcp_receive+0x968>)
 800d656:	685a      	ldr	r2, [r3, #4]
 800d658:	4b46      	ldr	r3, [pc, #280]	; (800d774 <tcp_receive+0x968>)
 800d65a:	891b      	ldrh	r3, [r3, #8]
 800d65c:	4619      	mov	r1, r3
 800d65e:	4610      	mov	r0, r2
 800d660:	f7fc fa50 	bl	8009b04 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800d664:	4b43      	ldr	r3, [pc, #268]	; (800d774 <tcp_receive+0x968>)
 800d666:	891c      	ldrh	r4, [r3, #8]
 800d668:	4b42      	ldr	r3, [pc, #264]	; (800d774 <tcp_receive+0x968>)
 800d66a:	68db      	ldr	r3, [r3, #12]
 800d66c:	899b      	ldrh	r3, [r3, #12]
 800d66e:	b29b      	uxth	r3, r3
 800d670:	4618      	mov	r0, r3
 800d672:	f7fb f9db 	bl	8008a2c <lwip_htons>
 800d676:	4603      	mov	r3, r0
 800d678:	f003 0303 	and.w	r3, r3, #3
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d001      	beq.n	800d684 <tcp_receive+0x878>
 800d680:	2301      	movs	r3, #1
 800d682:	e000      	b.n	800d686 <tcp_receive+0x87a>
 800d684:	2300      	movs	r3, #0
 800d686:	4423      	add	r3, r4
 800d688:	b29a      	uxth	r2, r3
 800d68a:	4b3b      	ldr	r3, [pc, #236]	; (800d778 <tcp_receive+0x96c>)
 800d68c:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800d68e:	4b3a      	ldr	r3, [pc, #232]	; (800d778 <tcp_receive+0x96c>)
 800d690:	881b      	ldrh	r3, [r3, #0]
 800d692:	461a      	mov	r2, r3
 800d694:	4b36      	ldr	r3, [pc, #216]	; (800d770 <tcp_receive+0x964>)
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	441a      	add	r2, r3
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d69e:	6879      	ldr	r1, [r7, #4]
 800d6a0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d6a2:	440b      	add	r3, r1
 800d6a4:	429a      	cmp	r2, r3
 800d6a6:	d006      	beq.n	800d6b6 <tcp_receive+0x8aa>
 800d6a8:	4b34      	ldr	r3, [pc, #208]	; (800d77c <tcp_receive+0x970>)
 800d6aa:	f240 527f 	movw	r2, #1407	; 0x57f
 800d6ae:	4934      	ldr	r1, [pc, #208]	; (800d780 <tcp_receive+0x974>)
 800d6b0:	4834      	ldr	r0, [pc, #208]	; (800d784 <tcp_receive+0x978>)
 800d6b2:	f006 fc83 	bl	8013fbc <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	f000 80e1 	beq.w	800d882 <tcp_receive+0xa76>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800d6c0:	4b2c      	ldr	r3, [pc, #176]	; (800d774 <tcp_receive+0x968>)
 800d6c2:	68db      	ldr	r3, [r3, #12]
 800d6c4:	899b      	ldrh	r3, [r3, #12]
 800d6c6:	b29b      	uxth	r3, r3
 800d6c8:	4618      	mov	r0, r3
 800d6ca:	f7fb f9af 	bl	8008a2c <lwip_htons>
 800d6ce:	4603      	mov	r3, r0
 800d6d0:	f003 0301 	and.w	r3, r3, #1
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d010      	beq.n	800d6fa <tcp_receive+0x8ee>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800d6d8:	e00a      	b.n	800d6f0 <tcp_receive+0x8e4>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d6de:	60bb      	str	r3, [r7, #8]
              pcb->ooseq = pcb->ooseq->next;
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d6e4:	681a      	ldr	r2, [r3, #0]
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	671a      	str	r2, [r3, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 800d6ea:	68b8      	ldr	r0, [r7, #8]
 800d6ec:	f7fd fe65 	bl	800b3ba <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d1f0      	bne.n	800d6da <tcp_receive+0x8ce>
 800d6f8:	e0c3      	b.n	800d882 <tcp_receive+0xa76>
            }
          } else {
            next = pcb->ooseq;
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d6fe:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800d700:	e04f      	b.n	800d7a2 <tcp_receive+0x996>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800d702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d704:	68db      	ldr	r3, [r3, #12]
 800d706:	899b      	ldrh	r3, [r3, #12]
 800d708:	b29b      	uxth	r3, r3
 800d70a:	4618      	mov	r0, r3
 800d70c:	f7fb f98e 	bl	8008a2c <lwip_htons>
 800d710:	4603      	mov	r3, r0
 800d712:	f003 0301 	and.w	r3, r3, #1
 800d716:	2b00      	cmp	r3, #0
 800d718:	d03b      	beq.n	800d792 <tcp_receive+0x986>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800d71a:	4b16      	ldr	r3, [pc, #88]	; (800d774 <tcp_receive+0x968>)
 800d71c:	68db      	ldr	r3, [r3, #12]
 800d71e:	899b      	ldrh	r3, [r3, #12]
 800d720:	b29b      	uxth	r3, r3
 800d722:	4618      	mov	r0, r3
 800d724:	f7fb f982 	bl	8008a2c <lwip_htons>
 800d728:	4603      	mov	r3, r0
 800d72a:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d12f      	bne.n	800d792 <tcp_receive+0x986>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800d732:	4b10      	ldr	r3, [pc, #64]	; (800d774 <tcp_receive+0x968>)
 800d734:	68db      	ldr	r3, [r3, #12]
 800d736:	899b      	ldrh	r3, [r3, #12]
 800d738:	b29c      	uxth	r4, r3
 800d73a:	2001      	movs	r0, #1
 800d73c:	f7fb f976 	bl	8008a2c <lwip_htons>
 800d740:	4603      	mov	r3, r0
 800d742:	461a      	mov	r2, r3
 800d744:	4b0b      	ldr	r3, [pc, #44]	; (800d774 <tcp_receive+0x968>)
 800d746:	68db      	ldr	r3, [r3, #12]
 800d748:	4322      	orrs	r2, r4
 800d74a:	b292      	uxth	r2, r2
 800d74c:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800d74e:	4b09      	ldr	r3, [pc, #36]	; (800d774 <tcp_receive+0x968>)
 800d750:	891c      	ldrh	r4, [r3, #8]
 800d752:	4b08      	ldr	r3, [pc, #32]	; (800d774 <tcp_receive+0x968>)
 800d754:	68db      	ldr	r3, [r3, #12]
 800d756:	899b      	ldrh	r3, [r3, #12]
 800d758:	b29b      	uxth	r3, r3
 800d75a:	4618      	mov	r0, r3
 800d75c:	f7fb f966 	bl	8008a2c <lwip_htons>
 800d760:	4603      	mov	r3, r0
 800d762:	f003 0303 	and.w	r3, r3, #3
 800d766:	2b00      	cmp	r3, #0
 800d768:	d00e      	beq.n	800d788 <tcp_receive+0x97c>
 800d76a:	2301      	movs	r3, #1
 800d76c:	e00d      	b.n	800d78a <tcp_receive+0x97e>
 800d76e:	bf00      	nop
 800d770:	20000274 	.word	0x20000274
 800d774:	20000254 	.word	0x20000254
 800d778:	2000027e 	.word	0x2000027e
 800d77c:	08015b0c 	.word	0x08015b0c
 800d780:	08015e0c 	.word	0x08015e0c
 800d784:	08015b84 	.word	0x08015b84
 800d788:	2300      	movs	r3, #0
 800d78a:	4423      	add	r3, r4
 800d78c:	b29a      	uxth	r2, r3
 800d78e:	4b95      	ldr	r3, [pc, #596]	; (800d9e4 <tcp_receive+0xbd8>)
 800d790:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
 800d792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d794:	62bb      	str	r3, [r7, #40]	; 0x28
              next = next->next;
 800d796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	62fb      	str	r3, [r7, #44]	; 0x2c
              tcp_seg_free(prev);
 800d79c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d79e:	f7fd fe0c 	bl	800b3ba <tcp_seg_free>
            while (next &&
 800d7a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d00e      	beq.n	800d7c6 <tcp_receive+0x9ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800d7a8:	4b8e      	ldr	r3, [pc, #568]	; (800d9e4 <tcp_receive+0xbd8>)
 800d7aa:	881b      	ldrh	r3, [r3, #0]
 800d7ac:	461a      	mov	r2, r3
 800d7ae:	4b8e      	ldr	r3, [pc, #568]	; (800d9e8 <tcp_receive+0xbdc>)
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	441a      	add	r2, r3
 800d7b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7b6:	68db      	ldr	r3, [r3, #12]
 800d7b8:	685b      	ldr	r3, [r3, #4]
 800d7ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d7bc:	8909      	ldrh	r1, [r1, #8]
 800d7be:	440b      	add	r3, r1
 800d7c0:	1ad3      	subs	r3, r2, r3
            while (next &&
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	da9d      	bge.n	800d702 <tcp_receive+0x8f6>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800d7c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d057      	beq.n	800d87c <tcp_receive+0xa70>
                TCP_SEQ_GT(seqno + tcplen,
 800d7cc:	4b85      	ldr	r3, [pc, #532]	; (800d9e4 <tcp_receive+0xbd8>)
 800d7ce:	881b      	ldrh	r3, [r3, #0]
 800d7d0:	461a      	mov	r2, r3
 800d7d2:	4b85      	ldr	r3, [pc, #532]	; (800d9e8 <tcp_receive+0xbdc>)
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	441a      	add	r2, r3
 800d7d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7da:	68db      	ldr	r3, [r3, #12]
 800d7dc:	685b      	ldr	r3, [r3, #4]
 800d7de:	1ad3      	subs	r3, r2, r3
            if (next &&
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	dd4b      	ble.n	800d87c <tcp_receive+0xa70>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800d7e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7e6:	68db      	ldr	r3, [r3, #12]
 800d7e8:	685b      	ldr	r3, [r3, #4]
 800d7ea:	b29a      	uxth	r2, r3
 800d7ec:	4b7e      	ldr	r3, [pc, #504]	; (800d9e8 <tcp_receive+0xbdc>)
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	b29b      	uxth	r3, r3
 800d7f2:	1ad3      	subs	r3, r2, r3
 800d7f4:	b29a      	uxth	r2, r3
 800d7f6:	4b7d      	ldr	r3, [pc, #500]	; (800d9ec <tcp_receive+0xbe0>)
 800d7f8:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800d7fa:	4b7c      	ldr	r3, [pc, #496]	; (800d9ec <tcp_receive+0xbe0>)
 800d7fc:	68db      	ldr	r3, [r3, #12]
 800d7fe:	899b      	ldrh	r3, [r3, #12]
 800d800:	b29b      	uxth	r3, r3
 800d802:	4618      	mov	r0, r3
 800d804:	f7fb f912 	bl	8008a2c <lwip_htons>
 800d808:	4603      	mov	r3, r0
 800d80a:	f003 0302 	and.w	r3, r3, #2
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d005      	beq.n	800d81e <tcp_receive+0xa12>
                inseg.len -= 1;
 800d812:	4b76      	ldr	r3, [pc, #472]	; (800d9ec <tcp_receive+0xbe0>)
 800d814:	891b      	ldrh	r3, [r3, #8]
 800d816:	3b01      	subs	r3, #1
 800d818:	b29a      	uxth	r2, r3
 800d81a:	4b74      	ldr	r3, [pc, #464]	; (800d9ec <tcp_receive+0xbe0>)
 800d81c:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800d81e:	4b73      	ldr	r3, [pc, #460]	; (800d9ec <tcp_receive+0xbe0>)
 800d820:	685a      	ldr	r2, [r3, #4]
 800d822:	4b72      	ldr	r3, [pc, #456]	; (800d9ec <tcp_receive+0xbe0>)
 800d824:	891b      	ldrh	r3, [r3, #8]
 800d826:	4619      	mov	r1, r3
 800d828:	4610      	mov	r0, r2
 800d82a:	f7fc f96b 	bl	8009b04 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800d82e:	4b6f      	ldr	r3, [pc, #444]	; (800d9ec <tcp_receive+0xbe0>)
 800d830:	891c      	ldrh	r4, [r3, #8]
 800d832:	4b6e      	ldr	r3, [pc, #440]	; (800d9ec <tcp_receive+0xbe0>)
 800d834:	68db      	ldr	r3, [r3, #12]
 800d836:	899b      	ldrh	r3, [r3, #12]
 800d838:	b29b      	uxth	r3, r3
 800d83a:	4618      	mov	r0, r3
 800d83c:	f7fb f8f6 	bl	8008a2c <lwip_htons>
 800d840:	4603      	mov	r3, r0
 800d842:	f003 0303 	and.w	r3, r3, #3
 800d846:	2b00      	cmp	r3, #0
 800d848:	d001      	beq.n	800d84e <tcp_receive+0xa42>
 800d84a:	2301      	movs	r3, #1
 800d84c:	e000      	b.n	800d850 <tcp_receive+0xa44>
 800d84e:	2300      	movs	r3, #0
 800d850:	4423      	add	r3, r4
 800d852:	b29a      	uxth	r2, r3
 800d854:	4b63      	ldr	r3, [pc, #396]	; (800d9e4 <tcp_receive+0xbd8>)
 800d856:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800d858:	4b62      	ldr	r3, [pc, #392]	; (800d9e4 <tcp_receive+0xbd8>)
 800d85a:	881b      	ldrh	r3, [r3, #0]
 800d85c:	461a      	mov	r2, r3
 800d85e:	4b62      	ldr	r3, [pc, #392]	; (800d9e8 <tcp_receive+0xbdc>)
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	441a      	add	r2, r3
 800d864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d866:	68db      	ldr	r3, [r3, #12]
 800d868:	685b      	ldr	r3, [r3, #4]
 800d86a:	429a      	cmp	r2, r3
 800d86c:	d006      	beq.n	800d87c <tcp_receive+0xa70>
 800d86e:	4b60      	ldr	r3, [pc, #384]	; (800d9f0 <tcp_receive+0xbe4>)
 800d870:	f240 52af 	movw	r2, #1455	; 0x5af
 800d874:	495f      	ldr	r1, [pc, #380]	; (800d9f4 <tcp_receive+0xbe8>)
 800d876:	4860      	ldr	r0, [pc, #384]	; (800d9f8 <tcp_receive+0xbec>)
 800d878:	f006 fba0 	bl	8013fbc <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d880:	671a      	str	r2, [r3, #112]	; 0x70
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800d882:	4b58      	ldr	r3, [pc, #352]	; (800d9e4 <tcp_receive+0xbd8>)
 800d884:	881b      	ldrh	r3, [r3, #0]
 800d886:	461a      	mov	r2, r3
 800d888:	4b57      	ldr	r3, [pc, #348]	; (800d9e8 <tcp_receive+0xbdc>)
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	441a      	add	r2, r3
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d896:	4b53      	ldr	r3, [pc, #332]	; (800d9e4 <tcp_receive+0xbd8>)
 800d898:	881b      	ldrh	r3, [r3, #0]
 800d89a:	429a      	cmp	r2, r3
 800d89c:	d206      	bcs.n	800d8ac <tcp_receive+0xaa0>
 800d89e:	4b54      	ldr	r3, [pc, #336]	; (800d9f0 <tcp_receive+0xbe4>)
 800d8a0:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800d8a4:	4955      	ldr	r1, [pc, #340]	; (800d9fc <tcp_receive+0xbf0>)
 800d8a6:	4854      	ldr	r0, [pc, #336]	; (800d9f8 <tcp_receive+0xbec>)
 800d8a8:	f006 fb88 	bl	8013fbc <iprintf>
        pcb->rcv_wnd -= tcplen;
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d8b0:	4b4c      	ldr	r3, [pc, #304]	; (800d9e4 <tcp_receive+0xbd8>)
 800d8b2:	881b      	ldrh	r3, [r3, #0]
 800d8b4:	1ad3      	subs	r3, r2, r3
 800d8b6:	b29a      	uxth	r2, r3
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800d8bc:	6878      	ldr	r0, [r7, #4]
 800d8be:	f7fd f8ef 	bl	800aaa0 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800d8c2:	4b4a      	ldr	r3, [pc, #296]	; (800d9ec <tcp_receive+0xbe0>)
 800d8c4:	685b      	ldr	r3, [r3, #4]
 800d8c6:	891b      	ldrh	r3, [r3, #8]
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d006      	beq.n	800d8da <tcp_receive+0xace>
          recv_data = inseg.p;
 800d8cc:	4b47      	ldr	r3, [pc, #284]	; (800d9ec <tcp_receive+0xbe0>)
 800d8ce:	685b      	ldr	r3, [r3, #4]
 800d8d0:	4a4b      	ldr	r2, [pc, #300]	; (800da00 <tcp_receive+0xbf4>)
 800d8d2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800d8d4:	4b45      	ldr	r3, [pc, #276]	; (800d9ec <tcp_receive+0xbe0>)
 800d8d6:	2200      	movs	r2, #0
 800d8d8:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800d8da:	4b44      	ldr	r3, [pc, #272]	; (800d9ec <tcp_receive+0xbe0>)
 800d8dc:	68db      	ldr	r3, [r3, #12]
 800d8de:	899b      	ldrh	r3, [r3, #12]
 800d8e0:	b29b      	uxth	r3, r3
 800d8e2:	4618      	mov	r0, r3
 800d8e4:	f7fb f8a2 	bl	8008a2c <lwip_htons>
 800d8e8:	4603      	mov	r3, r0
 800d8ea:	f003 0301 	and.w	r3, r3, #1
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	f000 80b4 	beq.w	800da5c <tcp_receive+0xc50>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800d8f4:	4b43      	ldr	r3, [pc, #268]	; (800da04 <tcp_receive+0xbf8>)
 800d8f6:	781b      	ldrb	r3, [r3, #0]
 800d8f8:	f043 0320 	orr.w	r3, r3, #32
 800d8fc:	b2da      	uxtb	r2, r3
 800d8fe:	4b41      	ldr	r3, [pc, #260]	; (800da04 <tcp_receive+0xbf8>)
 800d900:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800d902:	e0ab      	b.n	800da5c <tcp_receive+0xc50>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d908:	60fb      	str	r3, [r7, #12]
          seqno = pcb->ooseq->tcphdr->seqno;
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d90e:	68db      	ldr	r3, [r3, #12]
 800d910:	685b      	ldr	r3, [r3, #4]
 800d912:	4a35      	ldr	r2, [pc, #212]	; (800d9e8 <tcp_receive+0xbdc>)
 800d914:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	891b      	ldrh	r3, [r3, #8]
 800d91a:	461c      	mov	r4, r3
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	68db      	ldr	r3, [r3, #12]
 800d920:	899b      	ldrh	r3, [r3, #12]
 800d922:	b29b      	uxth	r3, r3
 800d924:	4618      	mov	r0, r3
 800d926:	f7fb f881 	bl	8008a2c <lwip_htons>
 800d92a:	4603      	mov	r3, r0
 800d92c:	f003 0303 	and.w	r3, r3, #3
 800d930:	2b00      	cmp	r3, #0
 800d932:	d001      	beq.n	800d938 <tcp_receive+0xb2c>
 800d934:	2301      	movs	r3, #1
 800d936:	e000      	b.n	800d93a <tcp_receive+0xb2e>
 800d938:	2300      	movs	r3, #0
 800d93a:	191a      	adds	r2, r3, r4
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d940:	441a      	add	r2, r3
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d94a:	461c      	mov	r4, r3
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	891b      	ldrh	r3, [r3, #8]
 800d950:	461d      	mov	r5, r3
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	68db      	ldr	r3, [r3, #12]
 800d956:	899b      	ldrh	r3, [r3, #12]
 800d958:	b29b      	uxth	r3, r3
 800d95a:	4618      	mov	r0, r3
 800d95c:	f7fb f866 	bl	8008a2c <lwip_htons>
 800d960:	4603      	mov	r3, r0
 800d962:	f003 0303 	and.w	r3, r3, #3
 800d966:	2b00      	cmp	r3, #0
 800d968:	d001      	beq.n	800d96e <tcp_receive+0xb62>
 800d96a:	2301      	movs	r3, #1
 800d96c:	e000      	b.n	800d970 <tcp_receive+0xb64>
 800d96e:	2300      	movs	r3, #0
 800d970:	442b      	add	r3, r5
 800d972:	429c      	cmp	r4, r3
 800d974:	d206      	bcs.n	800d984 <tcp_receive+0xb78>
 800d976:	4b1e      	ldr	r3, [pc, #120]	; (800d9f0 <tcp_receive+0xbe4>)
 800d978:	f240 52de 	movw	r2, #1502	; 0x5de
 800d97c:	4922      	ldr	r1, [pc, #136]	; (800da08 <tcp_receive+0xbfc>)
 800d97e:	481e      	ldr	r0, [pc, #120]	; (800d9f8 <tcp_receive+0xbec>)
 800d980:	f006 fb1c 	bl	8013fbc <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	891b      	ldrh	r3, [r3, #8]
 800d988:	461c      	mov	r4, r3
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	68db      	ldr	r3, [r3, #12]
 800d98e:	899b      	ldrh	r3, [r3, #12]
 800d990:	b29b      	uxth	r3, r3
 800d992:	4618      	mov	r0, r3
 800d994:	f7fb f84a 	bl	8008a2c <lwip_htons>
 800d998:	4603      	mov	r3, r0
 800d99a:	f003 0303 	and.w	r3, r3, #3
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d001      	beq.n	800d9a6 <tcp_receive+0xb9a>
 800d9a2:	2301      	movs	r3, #1
 800d9a4:	e000      	b.n	800d9a8 <tcp_receive+0xb9c>
 800d9a6:	2300      	movs	r3, #0
 800d9a8:	1919      	adds	r1, r3, r4
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d9ae:	b28b      	uxth	r3, r1
 800d9b0:	1ad3      	subs	r3, r2, r3
 800d9b2:	b29a      	uxth	r2, r3
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800d9b8:	6878      	ldr	r0, [r7, #4]
 800d9ba:	f7fd f871 	bl	800aaa0 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	685b      	ldr	r3, [r3, #4]
 800d9c2:	891b      	ldrh	r3, [r3, #8]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d028      	beq.n	800da1a <tcp_receive+0xc0e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800d9c8:	4b0d      	ldr	r3, [pc, #52]	; (800da00 <tcp_receive+0xbf4>)
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d01d      	beq.n	800da0c <tcp_receive+0xc00>
              pbuf_cat(recv_data, cseg->p);
 800d9d0:	4b0b      	ldr	r3, [pc, #44]	; (800da00 <tcp_receive+0xbf4>)
 800d9d2:	681a      	ldr	r2, [r3, #0]
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	685b      	ldr	r3, [r3, #4]
 800d9d8:	4619      	mov	r1, r3
 800d9da:	4610      	mov	r0, r2
 800d9dc:	f7fc fad4 	bl	8009f88 <pbuf_cat>
 800d9e0:	e018      	b.n	800da14 <tcp_receive+0xc08>
 800d9e2:	bf00      	nop
 800d9e4:	2000027e 	.word	0x2000027e
 800d9e8:	20000274 	.word	0x20000274
 800d9ec:	20000254 	.word	0x20000254
 800d9f0:	08015b0c 	.word	0x08015b0c
 800d9f4:	08015e44 	.word	0x08015e44
 800d9f8:	08015b84 	.word	0x08015b84
 800d9fc:	08015e80 	.word	0x08015e80
 800da00:	20000284 	.word	0x20000284
 800da04:	20000281 	.word	0x20000281
 800da08:	08015ea0 	.word	0x08015ea0
            } else {
              recv_data = cseg->p;
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	685b      	ldr	r3, [r3, #4]
 800da10:	4a71      	ldr	r2, [pc, #452]	; (800dbd8 <tcp_receive+0xdcc>)
 800da12:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	2200      	movs	r2, #0
 800da18:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	68db      	ldr	r3, [r3, #12]
 800da1e:	899b      	ldrh	r3, [r3, #12]
 800da20:	b29b      	uxth	r3, r3
 800da22:	4618      	mov	r0, r3
 800da24:	f7fb f802 	bl	8008a2c <lwip_htons>
 800da28:	4603      	mov	r3, r0
 800da2a:	f003 0301 	and.w	r3, r3, #1
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d00d      	beq.n	800da4e <tcp_receive+0xc42>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800da32:	4b6a      	ldr	r3, [pc, #424]	; (800dbdc <tcp_receive+0xdd0>)
 800da34:	781b      	ldrb	r3, [r3, #0]
 800da36:	f043 0320 	orr.w	r3, r3, #32
 800da3a:	b2da      	uxtb	r2, r3
 800da3c:	4b67      	ldr	r3, [pc, #412]	; (800dbdc <tcp_receive+0xdd0>)
 800da3e:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	7d1b      	ldrb	r3, [r3, #20]
 800da44:	2b04      	cmp	r3, #4
 800da46:	d102      	bne.n	800da4e <tcp_receive+0xc42>
              pcb->state = CLOSE_WAIT;
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	2207      	movs	r2, #7
 800da4c:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	681a      	ldr	r2, [r3, #0]
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	671a      	str	r2, [r3, #112]	; 0x70
          tcp_seg_free(cseg);
 800da56:	68f8      	ldr	r0, [r7, #12]
 800da58:	f7fd fcaf 	bl	800b3ba <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da60:	2b00      	cmp	r3, #0
 800da62:	d008      	beq.n	800da76 <tcp_receive+0xc6a>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da68:	68db      	ldr	r3, [r3, #12]
 800da6a:	685a      	ldr	r2, [r3, #4]
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800da70:	429a      	cmp	r2, r3
 800da72:	f43f af47 	beq.w	800d904 <tcp_receive+0xaf8>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	7e9b      	ldrb	r3, [r3, #26]
 800da7a:	f003 0301 	and.w	r3, r3, #1
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d00e      	beq.n	800daa0 <tcp_receive+0xc94>
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	7e9b      	ldrb	r3, [r3, #26]
 800da86:	f023 0301 	bic.w	r3, r3, #1
 800da8a:	b2da      	uxtb	r2, r3
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	769a      	strb	r2, [r3, #26]
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	7e9b      	ldrb	r3, [r3, #26]
 800da94:	f043 0302 	orr.w	r3, r3, #2
 800da98:	b2da      	uxtb	r2, r3
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800da9e:	e181      	b.n	800dda4 <tcp_receive+0xf98>
        tcp_ack(pcb);
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	7e9b      	ldrb	r3, [r3, #26]
 800daa4:	f043 0301 	orr.w	r3, r3, #1
 800daa8:	b2da      	uxtb	r2, r3
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800daae:	e179      	b.n	800dda4 <tcp_receive+0xf98>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 800dab0:	6878      	ldr	r0, [r7, #4]
 800dab2:	f001 f8c5 	bl	800ec40 <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d106      	bne.n	800dacc <tcp_receive+0xcc0>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800dabe:	4848      	ldr	r0, [pc, #288]	; (800dbe0 <tcp_receive+0xdd4>)
 800dac0:	f7fd fca2 	bl	800b408 <tcp_seg_copy>
 800dac4:	4602      	mov	r2, r0
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	671a      	str	r2, [r3, #112]	; 0x70
      if (pcb->rcv_nxt == seqno) {
 800daca:	e16b      	b.n	800dda4 <tcp_receive+0xf98>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 800dacc:	2300      	movs	r3, #0
 800dace:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dad4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dad6:	e150      	b.n	800dd7a <tcp_receive+0xf6e>
            if (seqno == next->tcphdr->seqno) {
 800dad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dada:	68db      	ldr	r3, [r3, #12]
 800dadc:	685a      	ldr	r2, [r3, #4]
 800dade:	4b41      	ldr	r3, [pc, #260]	; (800dbe4 <tcp_receive+0xdd8>)
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	429a      	cmp	r2, r3
 800dae4:	d11d      	bne.n	800db22 <tcp_receive+0xd16>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800dae6:	4b3e      	ldr	r3, [pc, #248]	; (800dbe0 <tcp_receive+0xdd4>)
 800dae8:	891a      	ldrh	r2, [r3, #8]
 800daea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daec:	891b      	ldrh	r3, [r3, #8]
 800daee:	429a      	cmp	r2, r3
 800daf0:	f240 8148 	bls.w	800dd84 <tcp_receive+0xf78>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 800daf4:	483a      	ldr	r0, [pc, #232]	; (800dbe0 <tcp_receive+0xdd4>)
 800daf6:	f7fd fc87 	bl	800b408 <tcp_seg_copy>
 800dafa:	60f8      	str	r0, [r7, #12]
                if (cseg != NULL) {
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	2b00      	cmp	r3, #0
 800db00:	f000 8142 	beq.w	800dd88 <tcp_receive+0xf7c>
                  if (prev != NULL) {
 800db04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db06:	2b00      	cmp	r3, #0
 800db08:	d003      	beq.n	800db12 <tcp_receive+0xd06>
                    prev->next = cseg;
 800db0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db0c:	68fa      	ldr	r2, [r7, #12]
 800db0e:	601a      	str	r2, [r3, #0]
 800db10:	e002      	b.n	800db18 <tcp_receive+0xd0c>
                  } else {
                    pcb->ooseq = cseg;
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	68fa      	ldr	r2, [r7, #12]
 800db16:	671a      	str	r2, [r3, #112]	; 0x70
                  }
                  tcp_oos_insert_segment(cseg, next);
 800db18:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800db1a:	68f8      	ldr	r0, [r7, #12]
 800db1c:	f7ff f900 	bl	800cd20 <tcp_oos_insert_segment>
                }
                break;
 800db20:	e132      	b.n	800dd88 <tcp_receive+0xf7c>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800db22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db24:	2b00      	cmp	r3, #0
 800db26:	d117      	bne.n	800db58 <tcp_receive+0xd4c>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800db28:	4b2e      	ldr	r3, [pc, #184]	; (800dbe4 <tcp_receive+0xdd8>)
 800db2a:	681a      	ldr	r2, [r3, #0]
 800db2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db2e:	68db      	ldr	r3, [r3, #12]
 800db30:	685b      	ldr	r3, [r3, #4]
 800db32:	1ad3      	subs	r3, r2, r3
 800db34:	2b00      	cmp	r3, #0
 800db36:	da57      	bge.n	800dbe8 <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 800db38:	4829      	ldr	r0, [pc, #164]	; (800dbe0 <tcp_receive+0xdd4>)
 800db3a:	f7fd fc65 	bl	800b408 <tcp_seg_copy>
 800db3e:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	2b00      	cmp	r3, #0
 800db44:	f000 8122 	beq.w	800dd8c <tcp_receive+0xf80>
                    pcb->ooseq = cseg;
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	68fa      	ldr	r2, [r7, #12]
 800db4c:	671a      	str	r2, [r3, #112]	; 0x70
                    tcp_oos_insert_segment(cseg, next);
 800db4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800db50:	68f8      	ldr	r0, [r7, #12]
 800db52:	f7ff f8e5 	bl	800cd20 <tcp_oos_insert_segment>
                  }
                  break;
 800db56:	e119      	b.n	800dd8c <tcp_receive+0xf80>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 800db58:	4b22      	ldr	r3, [pc, #136]	; (800dbe4 <tcp_receive+0xdd8>)
 800db5a:	681a      	ldr	r2, [r3, #0]
 800db5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db5e:	68db      	ldr	r3, [r3, #12]
 800db60:	685b      	ldr	r3, [r3, #4]
 800db62:	1ad3      	subs	r3, r2, r3
 800db64:	3b01      	subs	r3, #1
 800db66:	2b00      	cmp	r3, #0
 800db68:	db3e      	blt.n	800dbe8 <tcp_receive+0xddc>
 800db6a:	4b1e      	ldr	r3, [pc, #120]	; (800dbe4 <tcp_receive+0xdd8>)
 800db6c:	681a      	ldr	r2, [r3, #0]
 800db6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db70:	68db      	ldr	r3, [r3, #12]
 800db72:	685b      	ldr	r3, [r3, #4]
 800db74:	1ad3      	subs	r3, r2, r3
 800db76:	3301      	adds	r3, #1
 800db78:	2b00      	cmp	r3, #0
 800db7a:	dc35      	bgt.n	800dbe8 <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 800db7c:	4818      	ldr	r0, [pc, #96]	; (800dbe0 <tcp_receive+0xdd4>)
 800db7e:	f7fd fc43 	bl	800b408 <tcp_seg_copy>
 800db82:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	2b00      	cmp	r3, #0
 800db88:	f000 8102 	beq.w	800dd90 <tcp_receive+0xf84>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800db8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db8e:	68db      	ldr	r3, [r3, #12]
 800db90:	685b      	ldr	r3, [r3, #4]
 800db92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800db94:	8912      	ldrh	r2, [r2, #8]
 800db96:	441a      	add	r2, r3
 800db98:	4b12      	ldr	r3, [pc, #72]	; (800dbe4 <tcp_receive+0xdd8>)
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	1ad3      	subs	r3, r2, r3
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	dd12      	ble.n	800dbc8 <tcp_receive+0xdbc>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800dba2:	4b10      	ldr	r3, [pc, #64]	; (800dbe4 <tcp_receive+0xdd8>)
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	b29a      	uxth	r2, r3
 800dba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbaa:	68db      	ldr	r3, [r3, #12]
 800dbac:	685b      	ldr	r3, [r3, #4]
 800dbae:	b29b      	uxth	r3, r3
 800dbb0:	1ad3      	subs	r3, r2, r3
 800dbb2:	b29a      	uxth	r2, r3
 800dbb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbb6:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800dbb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbba:	685a      	ldr	r2, [r3, #4]
 800dbbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbbe:	891b      	ldrh	r3, [r3, #8]
 800dbc0:	4619      	mov	r1, r3
 800dbc2:	4610      	mov	r0, r2
 800dbc4:	f7fb ff9e 	bl	8009b04 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800dbc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbca:	68fa      	ldr	r2, [r7, #12]
 800dbcc:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800dbce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dbd0:	68f8      	ldr	r0, [r7, #12]
 800dbd2:	f7ff f8a5 	bl	800cd20 <tcp_oos_insert_segment>
                  }
                  break;
 800dbd6:	e0db      	b.n	800dd90 <tcp_receive+0xf84>
 800dbd8:	20000284 	.word	0x20000284
 800dbdc:	20000281 	.word	0x20000281
 800dbe0:	20000254 	.word	0x20000254
 800dbe4:	20000274 	.word	0x20000274
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800dbe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	f040 80bf 	bne.w	800dd70 <tcp_receive+0xf64>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800dbf2:	4b7c      	ldr	r3, [pc, #496]	; (800dde4 <tcp_receive+0xfd8>)
 800dbf4:	681a      	ldr	r2, [r3, #0]
 800dbf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbf8:	68db      	ldr	r3, [r3, #12]
 800dbfa:	685b      	ldr	r3, [r3, #4]
 800dbfc:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	f340 80b6 	ble.w	800dd70 <tcp_receive+0xf64>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800dc04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc06:	68db      	ldr	r3, [r3, #12]
 800dc08:	899b      	ldrh	r3, [r3, #12]
 800dc0a:	b29b      	uxth	r3, r3
 800dc0c:	4618      	mov	r0, r3
 800dc0e:	f7fa ff0d 	bl	8008a2c <lwip_htons>
 800dc12:	4603      	mov	r3, r0
 800dc14:	f003 0301 	and.w	r3, r3, #1
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	f040 80bb 	bne.w	800dd94 <tcp_receive+0xf88>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800dc1e:	4872      	ldr	r0, [pc, #456]	; (800dde8 <tcp_receive+0xfdc>)
 800dc20:	f7fd fbf2 	bl	800b408 <tcp_seg_copy>
 800dc24:	4602      	mov	r2, r0
 800dc26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc28:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800dc2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	f000 80b2 	beq.w	800dd98 <tcp_receive+0xf8c>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800dc34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc36:	68db      	ldr	r3, [r3, #12]
 800dc38:	685b      	ldr	r3, [r3, #4]
 800dc3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dc3c:	8912      	ldrh	r2, [r2, #8]
 800dc3e:	441a      	add	r2, r3
 800dc40:	4b68      	ldr	r3, [pc, #416]	; (800dde4 <tcp_receive+0xfd8>)
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	1ad3      	subs	r3, r2, r3
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	dd12      	ble.n	800dc70 <tcp_receive+0xe64>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800dc4a:	4b66      	ldr	r3, [pc, #408]	; (800dde4 <tcp_receive+0xfd8>)
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	b29a      	uxth	r2, r3
 800dc50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc52:	68db      	ldr	r3, [r3, #12]
 800dc54:	685b      	ldr	r3, [r3, #4]
 800dc56:	b29b      	uxth	r3, r3
 800dc58:	1ad3      	subs	r3, r2, r3
 800dc5a:	b29a      	uxth	r2, r3
 800dc5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc5e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800dc60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc62:	685a      	ldr	r2, [r3, #4]
 800dc64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc66:	891b      	ldrh	r3, [r3, #8]
 800dc68:	4619      	mov	r1, r3
 800dc6a:	4610      	mov	r0, r2
 800dc6c:	f7fb ff4a 	bl	8009b04 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800dc70:	4b5e      	ldr	r3, [pc, #376]	; (800ddec <tcp_receive+0xfe0>)
 800dc72:	881b      	ldrh	r3, [r3, #0]
 800dc74:	461a      	mov	r2, r3
 800dc76:	4b5b      	ldr	r3, [pc, #364]	; (800dde4 <tcp_receive+0xfd8>)
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	441a      	add	r2, r3
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc80:	6879      	ldr	r1, [r7, #4]
 800dc82:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800dc84:	440b      	add	r3, r1
 800dc86:	1ad3      	subs	r3, r2, r3
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	f340 8085 	ble.w	800dd98 <tcp_receive+0xf8c>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800dc8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	68db      	ldr	r3, [r3, #12]
 800dc94:	899b      	ldrh	r3, [r3, #12]
 800dc96:	b29b      	uxth	r3, r3
 800dc98:	4618      	mov	r0, r3
 800dc9a:	f7fa fec7 	bl	8008a2c <lwip_htons>
 800dc9e:	4603      	mov	r3, r0
 800dca0:	f003 0301 	and.w	r3, r3, #1
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d01e      	beq.n	800dce6 <tcp_receive+0xeda>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800dca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	68db      	ldr	r3, [r3, #12]
 800dcae:	899b      	ldrh	r3, [r3, #12]
 800dcb0:	b29b      	uxth	r3, r3
 800dcb2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800dcb6:	b29c      	uxth	r4, r3
 800dcb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	68db      	ldr	r3, [r3, #12]
 800dcbe:	899b      	ldrh	r3, [r3, #12]
 800dcc0:	b29b      	uxth	r3, r3
 800dcc2:	4618      	mov	r0, r3
 800dcc4:	f7fa feb2 	bl	8008a2c <lwip_htons>
 800dcc8:	4603      	mov	r3, r0
 800dcca:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800dcce:	b29b      	uxth	r3, r3
 800dcd0:	4618      	mov	r0, r3
 800dcd2:	f7fa feab 	bl	8008a2c <lwip_htons>
 800dcd6:	4603      	mov	r3, r0
 800dcd8:	461a      	mov	r2, r3
 800dcda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	68db      	ldr	r3, [r3, #12]
 800dce0:	4322      	orrs	r2, r4
 800dce2:	b292      	uxth	r2, r2
 800dce4:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcea:	b29a      	uxth	r2, r3
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dcf0:	4413      	add	r3, r2
 800dcf2:	b299      	uxth	r1, r3
 800dcf4:	4b3b      	ldr	r3, [pc, #236]	; (800dde4 <tcp_receive+0xfd8>)
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	b29a      	uxth	r2, r3
 800dcfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	1a8a      	subs	r2, r1, r2
 800dd00:	b292      	uxth	r2, r2
 800dd02:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800dd04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	685a      	ldr	r2, [r3, #4]
 800dd0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	891b      	ldrh	r3, [r3, #8]
 800dd10:	4619      	mov	r1, r3
 800dd12:	4610      	mov	r0, r2
 800dd14:	f7fb fef6 	bl	8009b04 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800dd18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	891c      	ldrh	r4, [r3, #8]
 800dd1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	68db      	ldr	r3, [r3, #12]
 800dd24:	899b      	ldrh	r3, [r3, #12]
 800dd26:	b29b      	uxth	r3, r3
 800dd28:	4618      	mov	r0, r3
 800dd2a:	f7fa fe7f 	bl	8008a2c <lwip_htons>
 800dd2e:	4603      	mov	r3, r0
 800dd30:	f003 0303 	and.w	r3, r3, #3
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d001      	beq.n	800dd3c <tcp_receive+0xf30>
 800dd38:	2301      	movs	r3, #1
 800dd3a:	e000      	b.n	800dd3e <tcp_receive+0xf32>
 800dd3c:	2300      	movs	r3, #0
 800dd3e:	4423      	add	r3, r4
 800dd40:	b29a      	uxth	r2, r3
 800dd42:	4b2a      	ldr	r3, [pc, #168]	; (800ddec <tcp_receive+0xfe0>)
 800dd44:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800dd46:	4b29      	ldr	r3, [pc, #164]	; (800ddec <tcp_receive+0xfe0>)
 800dd48:	881b      	ldrh	r3, [r3, #0]
 800dd4a:	461a      	mov	r2, r3
 800dd4c:	4b25      	ldr	r3, [pc, #148]	; (800dde4 <tcp_receive+0xfd8>)
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	441a      	add	r2, r3
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd56:	6879      	ldr	r1, [r7, #4]
 800dd58:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800dd5a:	440b      	add	r3, r1
 800dd5c:	429a      	cmp	r2, r3
 800dd5e:	d01b      	beq.n	800dd98 <tcp_receive+0xf8c>
 800dd60:	4b23      	ldr	r3, [pc, #140]	; (800ddf0 <tcp_receive+0xfe4>)
 800dd62:	f240 627b 	movw	r2, #1659	; 0x67b
 800dd66:	4923      	ldr	r1, [pc, #140]	; (800ddf4 <tcp_receive+0xfe8>)
 800dd68:	4823      	ldr	r0, [pc, #140]	; (800ddf8 <tcp_receive+0xfec>)
 800dd6a:	f006 f927 	bl	8013fbc <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800dd6e:	e013      	b.n	800dd98 <tcp_receive+0xf8c>
              }
            }
            prev = next;
 800dd70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd72:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800dd74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dd7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	f47f aeab 	bne.w	800dad8 <tcp_receive+0xccc>
      if (pcb->rcv_nxt == seqno) {
 800dd82:	e00f      	b.n	800dda4 <tcp_receive+0xf98>
                break;
 800dd84:	bf00      	nop
 800dd86:	e00d      	b.n	800dda4 <tcp_receive+0xf98>
                break;
 800dd88:	bf00      	nop
 800dd8a:	e00b      	b.n	800dda4 <tcp_receive+0xf98>
                  break;
 800dd8c:	bf00      	nop
 800dd8e:	e009      	b.n	800dda4 <tcp_receive+0xf98>
                  break;
 800dd90:	bf00      	nop
 800dd92:	e007      	b.n	800dda4 <tcp_receive+0xf98>
                  break;
 800dd94:	bf00      	nop
 800dd96:	e005      	b.n	800dda4 <tcp_receive+0xf98>
                break;
 800dd98:	bf00      	nop
      if (pcb->rcv_nxt == seqno) {
 800dd9a:	e003      	b.n	800dda4 <tcp_receive+0xf98>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800dd9c:	6878      	ldr	r0, [r7, #4]
 800dd9e:	f000 ff4f 	bl	800ec40 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800dda2:	e01a      	b.n	800ddda <tcp_receive+0xfce>
 800dda4:	e019      	b.n	800ddda <tcp_receive+0xfce>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800dda6:	4b0f      	ldr	r3, [pc, #60]	; (800dde4 <tcp_receive+0xfd8>)
 800dda8:	681a      	ldr	r2, [r3, #0]
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddae:	1ad3      	subs	r3, r2, r3
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	db0a      	blt.n	800ddca <tcp_receive+0xfbe>
 800ddb4:	4b0b      	ldr	r3, [pc, #44]	; (800dde4 <tcp_receive+0xfd8>)
 800ddb6:	681a      	ldr	r2, [r3, #0]
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddbc:	6879      	ldr	r1, [r7, #4]
 800ddbe:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ddc0:	440b      	add	r3, r1
 800ddc2:	1ad3      	subs	r3, r2, r3
 800ddc4:	3301      	adds	r3, #1
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	dd07      	ble.n	800ddda <tcp_receive+0xfce>
      tcp_ack_now(pcb);
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	7e9b      	ldrb	r3, [r3, #26]
 800ddce:	f043 0302 	orr.w	r3, r3, #2
 800ddd2:	b2da      	uxtb	r2, r3
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	769a      	strb	r2, [r3, #26]
    }
  }
}
 800ddd8:	e7ff      	b.n	800ddda <tcp_receive+0xfce>
 800ddda:	bf00      	nop
 800dddc:	3734      	adds	r7, #52	; 0x34
 800ddde:	46bd      	mov	sp, r7
 800dde0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dde2:	bf00      	nop
 800dde4:	20000274 	.word	0x20000274
 800dde8:	20000254 	.word	0x20000254
 800ddec:	2000027e 	.word	0x2000027e
 800ddf0:	08015b0c 	.word	0x08015b0c
 800ddf4:	08015e0c 	.word	0x08015e0c
 800ddf8:	08015b84 	.word	0x08015b84

0800ddfc <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
 800ddfc:	b480      	push	{r7}
 800ddfe:	b083      	sub	sp, #12
 800de00:	af00      	add	r7, sp, #0
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 800de02:	4b18      	ldr	r3, [pc, #96]	; (800de64 <tcp_getoptbyte+0x68>)
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	2b00      	cmp	r3, #0
 800de08:	d005      	beq.n	800de16 <tcp_getoptbyte+0x1a>
 800de0a:	4b17      	ldr	r3, [pc, #92]	; (800de68 <tcp_getoptbyte+0x6c>)
 800de0c:	881a      	ldrh	r2, [r3, #0]
 800de0e:	4b17      	ldr	r3, [pc, #92]	; (800de6c <tcp_getoptbyte+0x70>)
 800de10:	881b      	ldrh	r3, [r3, #0]
 800de12:	429a      	cmp	r2, r3
 800de14:	d20e      	bcs.n	800de34 <tcp_getoptbyte+0x38>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 800de16:	4b16      	ldr	r3, [pc, #88]	; (800de70 <tcp_getoptbyte+0x74>)
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	3314      	adds	r3, #20
 800de1c:	603b      	str	r3, [r7, #0]
    return opts[tcp_optidx++];
 800de1e:	4b12      	ldr	r3, [pc, #72]	; (800de68 <tcp_getoptbyte+0x6c>)
 800de20:	881b      	ldrh	r3, [r3, #0]
 800de22:	1c5a      	adds	r2, r3, #1
 800de24:	b291      	uxth	r1, r2
 800de26:	4a10      	ldr	r2, [pc, #64]	; (800de68 <tcp_getoptbyte+0x6c>)
 800de28:	8011      	strh	r1, [r2, #0]
 800de2a:	461a      	mov	r2, r3
 800de2c:	683b      	ldr	r3, [r7, #0]
 800de2e:	4413      	add	r3, r2
 800de30:	781b      	ldrb	r3, [r3, #0]
 800de32:	e010      	b.n	800de56 <tcp_getoptbyte+0x5a>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 800de34:	4b0c      	ldr	r3, [pc, #48]	; (800de68 <tcp_getoptbyte+0x6c>)
 800de36:	881b      	ldrh	r3, [r3, #0]
 800de38:	1c5a      	adds	r2, r3, #1
 800de3a:	b291      	uxth	r1, r2
 800de3c:	4a0a      	ldr	r2, [pc, #40]	; (800de68 <tcp_getoptbyte+0x6c>)
 800de3e:	8011      	strh	r1, [r2, #0]
 800de40:	b2da      	uxtb	r2, r3
 800de42:	4b0a      	ldr	r3, [pc, #40]	; (800de6c <tcp_getoptbyte+0x70>)
 800de44:	881b      	ldrh	r3, [r3, #0]
 800de46:	b2db      	uxtb	r3, r3
 800de48:	1ad3      	subs	r3, r2, r3
 800de4a:	71fb      	strb	r3, [r7, #7]
    return tcphdr_opt2[idx];
 800de4c:	4b05      	ldr	r3, [pc, #20]	; (800de64 <tcp_getoptbyte+0x68>)
 800de4e:	681a      	ldr	r2, [r3, #0]
 800de50:	79fb      	ldrb	r3, [r7, #7]
 800de52:	4413      	add	r3, r2
 800de54:	781b      	ldrb	r3, [r3, #0]
  }
}
 800de56:	4618      	mov	r0, r3
 800de58:	370c      	adds	r7, #12
 800de5a:	46bd      	mov	sp, r7
 800de5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de60:	4770      	bx	lr
 800de62:	bf00      	nop
 800de64:	2000026c 	.word	0x2000026c
 800de68:	20000270 	.word	0x20000270
 800de6c:	2000026a 	.word	0x2000026a
 800de70:	20000264 	.word	0x20000264

0800de74 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800de74:	b580      	push	{r7, lr}
 800de76:	b084      	sub	sp, #16
 800de78:	af00      	add	r7, sp, #0
 800de7a:	6078      	str	r0, [r7, #4]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800de7c:	4b2d      	ldr	r3, [pc, #180]	; (800df34 <tcp_parseopt+0xc0>)
 800de7e:	881b      	ldrh	r3, [r3, #0]
 800de80:	2b00      	cmp	r3, #0
 800de82:	d053      	beq.n	800df2c <tcp_parseopt+0xb8>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800de84:	4b2c      	ldr	r3, [pc, #176]	; (800df38 <tcp_parseopt+0xc4>)
 800de86:	2200      	movs	r2, #0
 800de88:	801a      	strh	r2, [r3, #0]
 800de8a:	e043      	b.n	800df14 <tcp_parseopt+0xa0>
      u8_t opt = tcp_getoptbyte();
 800de8c:	f7ff ffb6 	bl	800ddfc <tcp_getoptbyte>
 800de90:	4603      	mov	r3, r0
 800de92:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800de94:	7bfb      	ldrb	r3, [r7, #15]
 800de96:	2b01      	cmp	r3, #1
 800de98:	d03c      	beq.n	800df14 <tcp_parseopt+0xa0>
 800de9a:	2b02      	cmp	r3, #2
 800de9c:	d002      	beq.n	800dea4 <tcp_parseopt+0x30>
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d03f      	beq.n	800df22 <tcp_parseopt+0xae>
 800dea2:	e026      	b.n	800def2 <tcp_parseopt+0x7e>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800dea4:	f7ff ffaa 	bl	800ddfc <tcp_getoptbyte>
 800dea8:	4603      	mov	r3, r0
 800deaa:	2b04      	cmp	r3, #4
 800deac:	d13b      	bne.n	800df26 <tcp_parseopt+0xb2>
 800deae:	4b22      	ldr	r3, [pc, #136]	; (800df38 <tcp_parseopt+0xc4>)
 800deb0:	881b      	ldrh	r3, [r3, #0]
 800deb2:	3302      	adds	r3, #2
 800deb4:	4a1f      	ldr	r2, [pc, #124]	; (800df34 <tcp_parseopt+0xc0>)
 800deb6:	8812      	ldrh	r2, [r2, #0]
 800deb8:	4293      	cmp	r3, r2
 800deba:	dc34      	bgt.n	800df26 <tcp_parseopt+0xb2>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 800debc:	f7ff ff9e 	bl	800ddfc <tcp_getoptbyte>
 800dec0:	4603      	mov	r3, r0
 800dec2:	b29b      	uxth	r3, r3
 800dec4:	021b      	lsls	r3, r3, #8
 800dec6:	81bb      	strh	r3, [r7, #12]
        mss |= tcp_getoptbyte();
 800dec8:	f7ff ff98 	bl	800ddfc <tcp_getoptbyte>
 800decc:	4603      	mov	r3, r0
 800dece:	b29a      	uxth	r2, r3
 800ded0:	89bb      	ldrh	r3, [r7, #12]
 800ded2:	4313      	orrs	r3, r2
 800ded4:	81bb      	strh	r3, [r7, #12]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800ded6:	89bb      	ldrh	r3, [r7, #12]
 800ded8:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800dedc:	d804      	bhi.n	800dee8 <tcp_parseopt+0x74>
 800dede:	89bb      	ldrh	r3, [r7, #12]
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d001      	beq.n	800dee8 <tcp_parseopt+0x74>
 800dee4:	89ba      	ldrh	r2, [r7, #12]
 800dee6:	e001      	b.n	800deec <tcp_parseopt+0x78>
 800dee8:	f44f 7206 	mov.w	r2, #536	; 0x218
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	865a      	strh	r2, [r3, #50]	; 0x32
        break;
 800def0:	e010      	b.n	800df14 <tcp_parseopt+0xa0>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 800def2:	f7ff ff83 	bl	800ddfc <tcp_getoptbyte>
 800def6:	4603      	mov	r3, r0
 800def8:	72fb      	strb	r3, [r7, #11]
        if (data < 2) {
 800defa:	7afb      	ldrb	r3, [r7, #11]
 800defc:	2b01      	cmp	r3, #1
 800defe:	d914      	bls.n	800df2a <tcp_parseopt+0xb6>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 800df00:	7afb      	ldrb	r3, [r7, #11]
 800df02:	b29a      	uxth	r2, r3
 800df04:	4b0c      	ldr	r3, [pc, #48]	; (800df38 <tcp_parseopt+0xc4>)
 800df06:	881b      	ldrh	r3, [r3, #0]
 800df08:	4413      	add	r3, r2
 800df0a:	b29b      	uxth	r3, r3
 800df0c:	3b02      	subs	r3, #2
 800df0e:	b29a      	uxth	r2, r3
 800df10:	4b09      	ldr	r3, [pc, #36]	; (800df38 <tcp_parseopt+0xc4>)
 800df12:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800df14:	4b08      	ldr	r3, [pc, #32]	; (800df38 <tcp_parseopt+0xc4>)
 800df16:	881a      	ldrh	r2, [r3, #0]
 800df18:	4b06      	ldr	r3, [pc, #24]	; (800df34 <tcp_parseopt+0xc0>)
 800df1a:	881b      	ldrh	r3, [r3, #0]
 800df1c:	429a      	cmp	r2, r3
 800df1e:	d3b5      	bcc.n	800de8c <tcp_parseopt+0x18>
 800df20:	e004      	b.n	800df2c <tcp_parseopt+0xb8>
        return;
 800df22:	bf00      	nop
 800df24:	e002      	b.n	800df2c <tcp_parseopt+0xb8>
          return;
 800df26:	bf00      	nop
 800df28:	e000      	b.n	800df2c <tcp_parseopt+0xb8>
          return;
 800df2a:	bf00      	nop
      }
    }
  }
}
 800df2c:	3710      	adds	r7, #16
 800df2e:	46bd      	mov	sp, r7
 800df30:	bd80      	pop	{r7, pc}
 800df32:	bf00      	nop
 800df34:	20000268 	.word	0x20000268
 800df38:	20000270 	.word	0x20000270

0800df3c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800df3c:	b480      	push	{r7}
 800df3e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800df40:	4b05      	ldr	r3, [pc, #20]	; (800df58 <tcp_trigger_input_pcb_close+0x1c>)
 800df42:	781b      	ldrb	r3, [r3, #0]
 800df44:	f043 0310 	orr.w	r3, r3, #16
 800df48:	b2da      	uxtb	r2, r3
 800df4a:	4b03      	ldr	r3, [pc, #12]	; (800df58 <tcp_trigger_input_pcb_close+0x1c>)
 800df4c:	701a      	strb	r2, [r3, #0]
}
 800df4e:	bf00      	nop
 800df50:	46bd      	mov	sp, r7
 800df52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df56:	4770      	bx	lr
 800df58:	20000281 	.word	0x20000281

0800df5c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 800df5c:	b580      	push	{r7, lr}
 800df5e:	b086      	sub	sp, #24
 800df60:	af00      	add	r7, sp, #0
 800df62:	60f8      	str	r0, [r7, #12]
 800df64:	607b      	str	r3, [r7, #4]
 800df66:	460b      	mov	r3, r1
 800df68:	817b      	strh	r3, [r7, #10]
 800df6a:	4613      	mov	r3, r2
 800df6c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800df6e:	897a      	ldrh	r2, [r7, #10]
 800df70:	893b      	ldrh	r3, [r7, #8]
 800df72:	4413      	add	r3, r2
 800df74:	b29b      	uxth	r3, r3
 800df76:	3314      	adds	r3, #20
 800df78:	b29b      	uxth	r3, r3
 800df7a:	2200      	movs	r2, #0
 800df7c:	4619      	mov	r1, r3
 800df7e:	2001      	movs	r0, #1
 800df80:	f7fb fbc2 	bl	8009708 <pbuf_alloc>
 800df84:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800df86:	697b      	ldr	r3, [r7, #20]
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d057      	beq.n	800e03c <tcp_output_alloc_header+0xe0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800df8c:	697b      	ldr	r3, [r7, #20]
 800df8e:	895b      	ldrh	r3, [r3, #10]
 800df90:	461a      	mov	r2, r3
 800df92:	897b      	ldrh	r3, [r7, #10]
 800df94:	3314      	adds	r3, #20
 800df96:	429a      	cmp	r2, r3
 800df98:	da05      	bge.n	800dfa6 <tcp_output_alloc_header+0x4a>
 800df9a:	4b2b      	ldr	r3, [pc, #172]	; (800e048 <tcp_output_alloc_header+0xec>)
 800df9c:	2273      	movs	r2, #115	; 0x73
 800df9e:	492b      	ldr	r1, [pc, #172]	; (800e04c <tcp_output_alloc_header+0xf0>)
 800dfa0:	482b      	ldr	r0, [pc, #172]	; (800e050 <tcp_output_alloc_header+0xf4>)
 800dfa2:	f006 f80b 	bl	8013fbc <iprintf>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800dfa6:	697b      	ldr	r3, [r7, #20]
 800dfa8:	685b      	ldr	r3, [r3, #4]
 800dfaa:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(pcb->local_port);
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	8adb      	ldrh	r3, [r3, #22]
 800dfb0:	4618      	mov	r0, r3
 800dfb2:	f7fa fd3b 	bl	8008a2c <lwip_htons>
 800dfb6:	4603      	mov	r3, r0
 800dfb8:	461a      	mov	r2, r3
 800dfba:	693b      	ldr	r3, [r7, #16]
 800dfbc:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	8b1b      	ldrh	r3, [r3, #24]
 800dfc2:	4618      	mov	r0, r3
 800dfc4:	f7fa fd32 	bl	8008a2c <lwip_htons>
 800dfc8:	4603      	mov	r3, r0
 800dfca:	461a      	mov	r2, r3
 800dfcc:	693b      	ldr	r3, [r7, #16]
 800dfce:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800dfd0:	693b      	ldr	r3, [r7, #16]
 800dfd2:	687a      	ldr	r2, [r7, #4]
 800dfd4:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfda:	4618      	mov	r0, r3
 800dfdc:	f7fa fd34 	bl	8008a48 <lwip_htonl>
 800dfe0:	4602      	mov	r2, r0
 800dfe2:	693b      	ldr	r3, [r7, #16]
 800dfe4:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 800dfe6:	897b      	ldrh	r3, [r7, #10]
 800dfe8:	089b      	lsrs	r3, r3, #2
 800dfea:	b29b      	uxth	r3, r3
 800dfec:	3305      	adds	r3, #5
 800dfee:	b29b      	uxth	r3, r3
 800dff0:	031b      	lsls	r3, r3, #12
 800dff2:	b29b      	uxth	r3, r3
 800dff4:	f043 0310 	orr.w	r3, r3, #16
 800dff8:	b29b      	uxth	r3, r3
 800dffa:	4618      	mov	r0, r3
 800dffc:	f7fa fd16 	bl	8008a2c <lwip_htons>
 800e000:	4603      	mov	r3, r0
 800e002:	461a      	mov	r2, r3
 800e004:	693b      	ldr	r3, [r7, #16]
 800e006:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e00c:	4618      	mov	r0, r3
 800e00e:	f7fa fd0d 	bl	8008a2c <lwip_htons>
 800e012:	4603      	mov	r3, r0
 800e014:	461a      	mov	r2, r3
 800e016:	693b      	ldr	r3, [r7, #16]
 800e018:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800e01a:	693b      	ldr	r3, [r7, #16]
 800e01c:	2200      	movs	r2, #0
 800e01e:	741a      	strb	r2, [r3, #16]
 800e020:	2200      	movs	r2, #0
 800e022:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800e024:	693b      	ldr	r3, [r7, #16]
 800e026:	2200      	movs	r2, #0
 800e028:	749a      	strb	r2, [r3, #18]
 800e02a:	2200      	movs	r2, #0
 800e02c:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e032:	68fa      	ldr	r2, [r7, #12]
 800e034:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800e036:	441a      	add	r2, r3
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800e03c:	697b      	ldr	r3, [r7, #20]
}
 800e03e:	4618      	mov	r0, r3
 800e040:	3718      	adds	r7, #24
 800e042:	46bd      	mov	sp, r7
 800e044:	bd80      	pop	{r7, pc}
 800e046:	bf00      	nop
 800e048:	08015ec8 	.word	0x08015ec8
 800e04c:	08015f34 	.word	0x08015f34
 800e050:	08015f64 	.word	0x08015f64

0800e054 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800e054:	b590      	push	{r4, r7, lr}
 800e056:	b085      	sub	sp, #20
 800e058:	af00      	add	r7, sp, #0
 800e05a:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e060:	2b00      	cmp	r3, #0
 800e062:	d02d      	beq.n	800e0c0 <tcp_send_fin+0x6c>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e068:	60fb      	str	r3, [r7, #12]
 800e06a:	e002      	b.n	800e072 <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	2b00      	cmp	r3, #0
 800e078:	d1f8      	bne.n	800e06c <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	68db      	ldr	r3, [r3, #12]
 800e07e:	899b      	ldrh	r3, [r3, #12]
 800e080:	b29b      	uxth	r3, r3
 800e082:	4618      	mov	r0, r3
 800e084:	f7fa fcd2 	bl	8008a2c <lwip_htons>
 800e088:	4603      	mov	r3, r0
 800e08a:	f003 0307 	and.w	r3, r3, #7
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d116      	bne.n	800e0c0 <tcp_send_fin+0x6c>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	68db      	ldr	r3, [r3, #12]
 800e096:	899b      	ldrh	r3, [r3, #12]
 800e098:	b29c      	uxth	r4, r3
 800e09a:	2001      	movs	r0, #1
 800e09c:	f7fa fcc6 	bl	8008a2c <lwip_htons>
 800e0a0:	4603      	mov	r3, r0
 800e0a2:	461a      	mov	r2, r3
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	68db      	ldr	r3, [r3, #12]
 800e0a8:	4322      	orrs	r2, r4
 800e0aa:	b292      	uxth	r2, r2
 800e0ac:	819a      	strh	r2, [r3, #12]
      pcb->flags |= TF_FIN;
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	7e9b      	ldrb	r3, [r3, #26]
 800e0b2:	f043 0320 	orr.w	r3, r3, #32
 800e0b6:	b2da      	uxtb	r2, r3
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	769a      	strb	r2, [r3, #26]
      return ERR_OK;
 800e0bc:	2300      	movs	r3, #0
 800e0be:	e004      	b.n	800e0ca <tcp_send_fin+0x76>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800e0c0:	2101      	movs	r1, #1
 800e0c2:	6878      	ldr	r0, [r7, #4]
 800e0c4:	f000 fcc0 	bl	800ea48 <tcp_enqueue_flags>
 800e0c8:	4603      	mov	r3, r0
}
 800e0ca:	4618      	mov	r0, r3
 800e0cc:	3714      	adds	r7, #20
 800e0ce:	46bd      	mov	sp, r7
 800e0d0:	bd90      	pop	{r4, r7, pc}
	...

0800e0d4 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 800e0d4:	b590      	push	{r4, r7, lr}
 800e0d6:	b087      	sub	sp, #28
 800e0d8:	af00      	add	r7, sp, #0
 800e0da:	60f8      	str	r0, [r7, #12]
 800e0dc:	60b9      	str	r1, [r7, #8]
 800e0de:	603b      	str	r3, [r7, #0]
 800e0e0:	4613      	mov	r3, r2
 800e0e2:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800e0e4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e0e8:	009b      	lsls	r3, r3, #2
 800e0ea:	b2db      	uxtb	r3, r3
 800e0ec:	f003 0304 	and.w	r3, r3, #4
 800e0f0:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800e0f2:	2003      	movs	r0, #3
 800e0f4:	f7fb f866 	bl	80091c4 <memp_malloc>
 800e0f8:	6138      	str	r0, [r7, #16]
 800e0fa:	693b      	ldr	r3, [r7, #16]
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d104      	bne.n	800e10a <tcp_create_segment+0x36>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800e100:	68b8      	ldr	r0, [r7, #8]
 800e102:	f7fb fe73 	bl	8009dec <pbuf_free>
    return NULL;
 800e106:	2300      	movs	r3, #0
 800e108:	e061      	b.n	800e1ce <tcp_create_segment+0xfa>
  }
  seg->flags = optflags;
 800e10a:	693b      	ldr	r3, [r7, #16]
 800e10c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800e110:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800e112:	693b      	ldr	r3, [r7, #16]
 800e114:	2200      	movs	r2, #0
 800e116:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800e118:	693b      	ldr	r3, [r7, #16]
 800e11a:	68ba      	ldr	r2, [r7, #8]
 800e11c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800e11e:	68bb      	ldr	r3, [r7, #8]
 800e120:	891a      	ldrh	r2, [r3, #8]
 800e122:	7dfb      	ldrb	r3, [r7, #23]
 800e124:	b29b      	uxth	r3, r3
 800e126:	429a      	cmp	r2, r3
 800e128:	d205      	bcs.n	800e136 <tcp_create_segment+0x62>
 800e12a:	4b2b      	ldr	r3, [pc, #172]	; (800e1d8 <tcp_create_segment+0x104>)
 800e12c:	22ba      	movs	r2, #186	; 0xba
 800e12e:	492b      	ldr	r1, [pc, #172]	; (800e1dc <tcp_create_segment+0x108>)
 800e130:	482b      	ldr	r0, [pc, #172]	; (800e1e0 <tcp_create_segment+0x10c>)
 800e132:	f005 ff43 	bl	8013fbc <iprintf>
  seg->len = p->tot_len - optlen;
 800e136:	68bb      	ldr	r3, [r7, #8]
 800e138:	891a      	ldrh	r2, [r3, #8]
 800e13a:	7dfb      	ldrb	r3, [r7, #23]
 800e13c:	b29b      	uxth	r3, r3
 800e13e:	1ad3      	subs	r3, r2, r3
 800e140:	b29a      	uxth	r2, r3
 800e142:	693b      	ldr	r3, [r7, #16]
 800e144:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 800e146:	2114      	movs	r1, #20
 800e148:	68b8      	ldr	r0, [r7, #8]
 800e14a:	f7fb fe2b 	bl	8009da4 <pbuf_header>
 800e14e:	4603      	mov	r3, r0
 800e150:	2b00      	cmp	r3, #0
 800e152:	d004      	beq.n	800e15e <tcp_create_segment+0x8a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800e154:	6938      	ldr	r0, [r7, #16]
 800e156:	f7fd f930 	bl	800b3ba <tcp_seg_free>
    return NULL;
 800e15a:	2300      	movs	r3, #0
 800e15c:	e037      	b.n	800e1ce <tcp_create_segment+0xfa>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800e15e:	693b      	ldr	r3, [r7, #16]
 800e160:	685b      	ldr	r3, [r3, #4]
 800e162:	685a      	ldr	r2, [r3, #4]
 800e164:	693b      	ldr	r3, [r7, #16]
 800e166:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	8ada      	ldrh	r2, [r3, #22]
 800e16c:	693b      	ldr	r3, [r7, #16]
 800e16e:	68dc      	ldr	r4, [r3, #12]
 800e170:	4610      	mov	r0, r2
 800e172:	f7fa fc5b 	bl	8008a2c <lwip_htons>
 800e176:	4603      	mov	r3, r0
 800e178:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	8b1a      	ldrh	r2, [r3, #24]
 800e17e:	693b      	ldr	r3, [r7, #16]
 800e180:	68dc      	ldr	r4, [r3, #12]
 800e182:	4610      	mov	r0, r2
 800e184:	f7fa fc52 	bl	8008a2c <lwip_htons>
 800e188:	4603      	mov	r3, r0
 800e18a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800e18c:	693b      	ldr	r3, [r7, #16]
 800e18e:	68dc      	ldr	r4, [r3, #12]
 800e190:	6838      	ldr	r0, [r7, #0]
 800e192:	f7fa fc59 	bl	8008a48 <lwip_htonl>
 800e196:	4603      	mov	r3, r0
 800e198:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 800e19a:	7dfb      	ldrb	r3, [r7, #23]
 800e19c:	089b      	lsrs	r3, r3, #2
 800e19e:	b2db      	uxtb	r3, r3
 800e1a0:	b29b      	uxth	r3, r3
 800e1a2:	3305      	adds	r3, #5
 800e1a4:	b29b      	uxth	r3, r3
 800e1a6:	031b      	lsls	r3, r3, #12
 800e1a8:	b29a      	uxth	r2, r3
 800e1aa:	79fb      	ldrb	r3, [r7, #7]
 800e1ac:	b29b      	uxth	r3, r3
 800e1ae:	4313      	orrs	r3, r2
 800e1b0:	b29a      	uxth	r2, r3
 800e1b2:	693b      	ldr	r3, [r7, #16]
 800e1b4:	68dc      	ldr	r4, [r3, #12]
 800e1b6:	4610      	mov	r0, r2
 800e1b8:	f7fa fc38 	bl	8008a2c <lwip_htons>
 800e1bc:	4603      	mov	r3, r0
 800e1be:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800e1c0:	693b      	ldr	r3, [r7, #16]
 800e1c2:	68db      	ldr	r3, [r3, #12]
 800e1c4:	2200      	movs	r2, #0
 800e1c6:	749a      	strb	r2, [r3, #18]
 800e1c8:	2200      	movs	r2, #0
 800e1ca:	74da      	strb	r2, [r3, #19]
  return seg;
 800e1cc:	693b      	ldr	r3, [r7, #16]
}
 800e1ce:	4618      	mov	r0, r3
 800e1d0:	371c      	adds	r7, #28
 800e1d2:	46bd      	mov	sp, r7
 800e1d4:	bd90      	pop	{r4, r7, pc}
 800e1d6:	bf00      	nop
 800e1d8:	08015ec8 	.word	0x08015ec8
 800e1dc:	08015f8c 	.word	0x08015f8c
 800e1e0:	08015f64 	.word	0x08015f64

0800e1e4 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800e1e4:	b580      	push	{r7, lr}
 800e1e6:	b086      	sub	sp, #24
 800e1e8:	af00      	add	r7, sp, #0
 800e1ea:	607b      	str	r3, [r7, #4]
 800e1ec:	4603      	mov	r3, r0
 800e1ee:	73fb      	strb	r3, [r7, #15]
 800e1f0:	460b      	mov	r3, r1
 800e1f2:	81bb      	strh	r3, [r7, #12]
 800e1f4:	4613      	mov	r3, r2
 800e1f6:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800e1f8:	89bb      	ldrh	r3, [r7, #12]
 800e1fa:	82fb      	strh	r3, [r7, #22]
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800e1fc:	89ba      	ldrh	r2, [r7, #12]
 800e1fe:	897b      	ldrh	r3, [r7, #10]
 800e200:	429a      	cmp	r2, r3
 800e202:	d221      	bcs.n	800e248 <tcp_pbuf_prealloc+0x64>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800e204:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e208:	f003 0302 	and.w	r3, r3, #2
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d111      	bne.n	800e234 <tcp_pbuf_prealloc+0x50>
        (!(pcb->flags & TF_NODELAY) &&
 800e210:	6a3b      	ldr	r3, [r7, #32]
 800e212:	7e9b      	ldrb	r3, [r3, #26]
 800e214:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d115      	bne.n	800e248 <tcp_pbuf_prealloc+0x64>
        (!(pcb->flags & TF_NODELAY) &&
 800e21c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e220:	2b00      	cmp	r3, #0
 800e222:	d007      	beq.n	800e234 <tcp_pbuf_prealloc+0x50>
         (!first_seg ||
          pcb->unsent != NULL ||
 800e224:	6a3b      	ldr	r3, [r7, #32]
 800e226:	6e9b      	ldr	r3, [r3, #104]	; 0x68
         (!first_seg ||
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d103      	bne.n	800e234 <tcp_pbuf_prealloc+0x50>
          pcb->unacked != NULL))) {
 800e22c:	6a3b      	ldr	r3, [r7, #32]
 800e22e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
          pcb->unsent != NULL ||
 800e230:	2b00      	cmp	r3, #0
 800e232:	d009      	beq.n	800e248 <tcp_pbuf_prealloc+0x64>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800e234:	89bb      	ldrh	r3, [r7, #12]
 800e236:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800e23a:	f023 0203 	bic.w	r2, r3, #3
 800e23e:	897b      	ldrh	r3, [r7, #10]
 800e240:	4293      	cmp	r3, r2
 800e242:	bf28      	it	cs
 800e244:	4613      	movcs	r3, r2
 800e246:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800e248:	8af9      	ldrh	r1, [r7, #22]
 800e24a:	7bfb      	ldrb	r3, [r7, #15]
 800e24c:	2200      	movs	r2, #0
 800e24e:	4618      	mov	r0, r3
 800e250:	f7fb fa5a 	bl	8009708 <pbuf_alloc>
 800e254:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800e256:	693b      	ldr	r3, [r7, #16]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d101      	bne.n	800e260 <tcp_pbuf_prealloc+0x7c>
    return NULL;
 800e25c:	2300      	movs	r3, #0
 800e25e:	e019      	b.n	800e294 <tcp_pbuf_prealloc+0xb0>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800e260:	693b      	ldr	r3, [r7, #16]
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	2b00      	cmp	r3, #0
 800e266:	d006      	beq.n	800e276 <tcp_pbuf_prealloc+0x92>
 800e268:	4b0c      	ldr	r3, [pc, #48]	; (800e29c <tcp_pbuf_prealloc+0xb8>)
 800e26a:	f44f 7288 	mov.w	r2, #272	; 0x110
 800e26e:	490c      	ldr	r1, [pc, #48]	; (800e2a0 <tcp_pbuf_prealloc+0xbc>)
 800e270:	480c      	ldr	r0, [pc, #48]	; (800e2a4 <tcp_pbuf_prealloc+0xc0>)
 800e272:	f005 fea3 	bl	8013fbc <iprintf>
  *oversize = p->len - length;
 800e276:	693b      	ldr	r3, [r7, #16]
 800e278:	895a      	ldrh	r2, [r3, #10]
 800e27a:	89bb      	ldrh	r3, [r7, #12]
 800e27c:	1ad3      	subs	r3, r2, r3
 800e27e:	b29a      	uxth	r2, r3
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800e284:	693b      	ldr	r3, [r7, #16]
 800e286:	89ba      	ldrh	r2, [r7, #12]
 800e288:	811a      	strh	r2, [r3, #8]
 800e28a:	693b      	ldr	r3, [r7, #16]
 800e28c:	891a      	ldrh	r2, [r3, #8]
 800e28e:	693b      	ldr	r3, [r7, #16]
 800e290:	815a      	strh	r2, [r3, #10]
  return p;
 800e292:	693b      	ldr	r3, [r7, #16]
}
 800e294:	4618      	mov	r0, r3
 800e296:	3718      	adds	r7, #24
 800e298:	46bd      	mov	sp, r7
 800e29a:	bd80      	pop	{r7, pc}
 800e29c:	08015ec8 	.word	0x08015ec8
 800e2a0:	08015fa4 	.word	0x08015fa4
 800e2a4:	08015f64 	.word	0x08015f64

0800e2a8 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800e2a8:	b580      	push	{r7, lr}
 800e2aa:	b082      	sub	sp, #8
 800e2ac:	af00      	add	r7, sp, #0
 800e2ae:	6078      	str	r0, [r7, #4]
 800e2b0:	460b      	mov	r3, r1
 800e2b2:	807b      	strh	r3, [r7, #2]
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	7d1b      	ldrb	r3, [r3, #20]
 800e2b8:	2b04      	cmp	r3, #4
 800e2ba:	d00e      	beq.n	800e2da <tcp_write_checks+0x32>
      (pcb->state != CLOSE_WAIT) &&
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800e2c0:	2b07      	cmp	r3, #7
 800e2c2:	d00a      	beq.n	800e2da <tcp_write_checks+0x32>
      (pcb->state != SYN_SENT) &&
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800e2c8:	2b02      	cmp	r3, #2
 800e2ca:	d006      	beq.n	800e2da <tcp_write_checks+0x32>
      (pcb->state != SYN_RCVD)) {
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800e2d0:	2b03      	cmp	r3, #3
 800e2d2:	d002      	beq.n	800e2da <tcp_write_checks+0x32>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800e2d4:	f06f 030a 	mvn.w	r3, #10
 800e2d8:	e04f      	b.n	800e37a <tcp_write_checks+0xd2>
  } else if (len == 0) {
 800e2da:	887b      	ldrh	r3, [r7, #2]
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d101      	bne.n	800e2e4 <tcp_write_checks+0x3c>
    return ERR_OK;
 800e2e0:	2300      	movs	r3, #0
 800e2e2:	e04a      	b.n	800e37a <tcp_write_checks+0xd2>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e2ea:	887a      	ldrh	r2, [r7, #2]
 800e2ec:	429a      	cmp	r2, r3
 800e2ee:	d909      	bls.n	800e304 <tcp_write_checks+0x5c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
      len, pcb->snd_buf));
    pcb->flags |= TF_NAGLEMEMERR;
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	7e9b      	ldrb	r3, [r3, #26]
 800e2f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e2f8:	b2da      	uxtb	r2, r3
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 800e2fe:	f04f 33ff 	mov.w	r3, #4294967295
 800e302:	e03a      	b.n	800e37a <tcp_write_checks+0xd2>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e30a:	2b08      	cmp	r3, #8
 800e30c:	d806      	bhi.n	800e31c <tcp_write_checks+0x74>
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e314:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800e318:	4293      	cmp	r3, r2
 800e31a:	d909      	bls.n	800e330 <tcp_write_checks+0x88>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
      pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	7e9b      	ldrb	r3, [r3, #26]
 800e320:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e324:	b2da      	uxtb	r2, r3
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 800e32a:	f04f 33ff 	mov.w	r3, #4294967295
 800e32e:	e024      	b.n	800e37a <tcp_write_checks+0xd2>
  }
  if (pcb->snd_queuelen != 0) {
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e336:	2b00      	cmp	r3, #0
 800e338:	d00f      	beq.n	800e35a <tcp_write_checks+0xb2>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d11a      	bne.n	800e378 <tcp_write_checks+0xd0>
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e346:	2b00      	cmp	r3, #0
 800e348:	d116      	bne.n	800e378 <tcp_write_checks+0xd0>
 800e34a:	4b0e      	ldr	r3, [pc, #56]	; (800e384 <tcp_write_checks+0xdc>)
 800e34c:	f44f 72ab 	mov.w	r2, #342	; 0x156
 800e350:	490d      	ldr	r1, [pc, #52]	; (800e388 <tcp_write_checks+0xe0>)
 800e352:	480e      	ldr	r0, [pc, #56]	; (800e38c <tcp_write_checks+0xe4>)
 800e354:	f005 fe32 	bl	8013fbc <iprintf>
 800e358:	e00e      	b.n	800e378 <tcp_write_checks+0xd0>
      pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d103      	bne.n	800e36a <tcp_write_checks+0xc2>
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e366:	2b00      	cmp	r3, #0
 800e368:	d006      	beq.n	800e378 <tcp_write_checks+0xd0>
 800e36a:	4b06      	ldr	r3, [pc, #24]	; (800e384 <tcp_write_checks+0xdc>)
 800e36c:	f240 1259 	movw	r2, #345	; 0x159
 800e370:	4907      	ldr	r1, [pc, #28]	; (800e390 <tcp_write_checks+0xe8>)
 800e372:	4806      	ldr	r0, [pc, #24]	; (800e38c <tcp_write_checks+0xe4>)
 800e374:	f005 fe22 	bl	8013fbc <iprintf>
      pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800e378:	2300      	movs	r3, #0
}
 800e37a:	4618      	mov	r0, r3
 800e37c:	3708      	adds	r7, #8
 800e37e:	46bd      	mov	sp, r7
 800e380:	bd80      	pop	{r7, pc}
 800e382:	bf00      	nop
 800e384:	08015ec8 	.word	0x08015ec8
 800e388:	08015fb8 	.word	0x08015fb8
 800e38c:	08015f64 	.word	0x08015f64
 800e390:	08015ff4 	.word	0x08015ff4

0800e394 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800e394:	b590      	push	{r4, r7, lr}
 800e396:	b09b      	sub	sp, #108	; 0x6c
 800e398:	af04      	add	r7, sp, #16
 800e39a:	60f8      	str	r0, [r7, #12]
 800e39c:	60b9      	str	r1, [r7, #8]
 800e39e:	4611      	mov	r1, r2
 800e3a0:	461a      	mov	r2, r3
 800e3a2:	460b      	mov	r3, r1
 800e3a4:	80fb      	strh	r3, [r7, #6]
 800e3a6:	4613      	mov	r3, r2
 800e3a8:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800e3aa:	2300      	movs	r3, #0
 800e3ac:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800e3ae:	2300      	movs	r3, #0
 800e3b0:	653b      	str	r3, [r7, #80]	; 0x50
 800e3b2:	2300      	movs	r3, #0
 800e3b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e3b6:	2300      	movs	r3, #0
 800e3b8:	64bb      	str	r3, [r7, #72]	; 0x48
 800e3ba:	2300      	movs	r3, #0
 800e3bc:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800e3be:	2300      	movs	r3, #0
 800e3c0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen = 0;
 800e3c4:	2300      	movs	r3, #0
 800e3c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  u8_t optflags = 0;
 800e3ca:	2300      	movs	r3, #0
 800e3cc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800e3d0:	2300      	movs	r3, #0
 800e3d2:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800e3d4:	2300      	movs	r3, #0
 800e3d6:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800e3d8:	2300      	movs	r3, #0
 800e3da:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e3e2:	085b      	lsrs	r3, r3, #1
 800e3e4:	b29a      	uxth	r2, r3
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e3ea:	4293      	cmp	r3, r2
 800e3ec:	bf28      	it	cs
 800e3ee:	4613      	movcs	r3, r2
 800e3f0:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800e3f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d102      	bne.n	800e3fe <tcp_write+0x6a>
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e3fc:	e000      	b.n	800e400 <tcp_write+0x6c>
 800e3fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e400:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800e402:	68bb      	ldr	r3, [r7, #8]
 800e404:	2b00      	cmp	r3, #0
 800e406:	d109      	bne.n	800e41c <tcp_write+0x88>
 800e408:	4b92      	ldr	r3, [pc, #584]	; (800e654 <tcp_write+0x2c0>)
 800e40a:	f44f 72c9 	mov.w	r2, #402	; 0x192
 800e40e:	4992      	ldr	r1, [pc, #584]	; (800e658 <tcp_write+0x2c4>)
 800e410:	4892      	ldr	r0, [pc, #584]	; (800e65c <tcp_write+0x2c8>)
 800e412:	f005 fdd3 	bl	8013fbc <iprintf>
 800e416:	f06f 030f 	mvn.w	r3, #15
 800e41a:	e30a      	b.n	800ea32 <tcp_write+0x69e>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800e41c:	88fb      	ldrh	r3, [r7, #6]
 800e41e:	4619      	mov	r1, r3
 800e420:	68f8      	ldr	r0, [r7, #12]
 800e422:	f7ff ff41 	bl	800e2a8 <tcp_write_checks>
 800e426:	4603      	mov	r3, r0
 800e428:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 800e42c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800e430:	2b00      	cmp	r3, #0
 800e432:	d002      	beq.n	800e43a <tcp_write+0xa6>
    return err;
 800e434:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800e438:	e2fb      	b.n	800ea32 <tcp_write+0x69e>
  }
  queuelen = pcb->snd_queuelen;
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e440:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e448:	2b00      	cmp	r3, #0
 800e44a:	f000 80f5 	beq.w	800e638 <tcp_write+0x2a4>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e452:	653b      	str	r3, [r7, #80]	; 0x50
 800e454:	e002      	b.n	800e45c <tcp_write+0xc8>
         last_unsent = last_unsent->next);
 800e456:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800e45c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	2b00      	cmp	r3, #0
 800e462:	d1f8      	bne.n	800e456 <tcp_write+0xc2>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 800e464:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e466:	7a9b      	ldrb	r3, [r3, #10]
 800e468:	009b      	lsls	r3, r3, #2
 800e46a:	b29b      	uxth	r3, r3
 800e46c:	f003 0304 	and.w	r3, r3, #4
 800e470:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800e472:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e474:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e476:	891b      	ldrh	r3, [r3, #8]
 800e478:	4619      	mov	r1, r3
 800e47a:	8c3b      	ldrh	r3, [r7, #32]
 800e47c:	440b      	add	r3, r1
 800e47e:	429a      	cmp	r2, r3
 800e480:	da06      	bge.n	800e490 <tcp_write+0xfc>
 800e482:	4b74      	ldr	r3, [pc, #464]	; (800e654 <tcp_write+0x2c0>)
 800e484:	f240 12c7 	movw	r2, #455	; 0x1c7
 800e488:	4975      	ldr	r1, [pc, #468]	; (800e660 <tcp_write+0x2cc>)
 800e48a:	4874      	ldr	r0, [pc, #464]	; (800e65c <tcp_write+0x2c8>)
 800e48c:	f005 fd96 	bl	8013fbc <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800e490:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e492:	891a      	ldrh	r2, [r3, #8]
 800e494:	8c3b      	ldrh	r3, [r7, #32]
 800e496:	4413      	add	r3, r2
 800e498:	b29b      	uxth	r3, r3
 800e49a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e49c:	1ad3      	subs	r3, r2, r3
 800e49e:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800e4a6:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800e4a8:	8a7b      	ldrh	r3, [r7, #18]
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d027      	beq.n	800e4fe <tcp_write+0x16a>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800e4ae:	8a7b      	ldrh	r3, [r7, #18]
 800e4b0:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800e4b2:	429a      	cmp	r2, r3
 800e4b4:	d206      	bcs.n	800e4c4 <tcp_write+0x130>
 800e4b6:	4b67      	ldr	r3, [pc, #412]	; (800e654 <tcp_write+0x2c0>)
 800e4b8:	f240 12d9 	movw	r2, #473	; 0x1d9
 800e4bc:	4969      	ldr	r1, [pc, #420]	; (800e664 <tcp_write+0x2d0>)
 800e4be:	4867      	ldr	r0, [pc, #412]	; (800e65c <tcp_write+0x2c8>)
 800e4c0:	f005 fd7c 	bl	8013fbc <iprintf>
      seg = last_unsent;
 800e4c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e4c6:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800e4c8:	8a7b      	ldrh	r3, [r7, #18]
 800e4ca:	88fa      	ldrh	r2, [r7, #6]
 800e4cc:	429a      	cmp	r2, r3
 800e4ce:	d901      	bls.n	800e4d4 <tcp_write+0x140>
 800e4d0:	8a7b      	ldrh	r3, [r7, #18]
 800e4d2:	e000      	b.n	800e4d6 <tcp_write+0x142>
 800e4d4:	88fb      	ldrh	r3, [r7, #6]
 800e4d6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800e4d8:	4293      	cmp	r3, r2
 800e4da:	bfa8      	it	ge
 800e4dc:	4613      	movge	r3, r2
 800e4de:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 800e4e0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e4e4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e4e6:	4413      	add	r3, r2
 800e4e8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 800e4ec:	8a7a      	ldrh	r2, [r7, #18]
 800e4ee:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e4f0:	1ad3      	subs	r3, r2, r3
 800e4f2:	b29b      	uxth	r3, r3
 800e4f4:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800e4f6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800e4f8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e4fa:	1ad3      	subs	r3, r2, r3
 800e4fc:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800e4fe:	8a7b      	ldrh	r3, [r7, #18]
 800e500:	2b00      	cmp	r3, #0
 800e502:	d00b      	beq.n	800e51c <tcp_write+0x188>
 800e504:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e508:	88fb      	ldrh	r3, [r7, #6]
 800e50a:	429a      	cmp	r2, r3
 800e50c:	d006      	beq.n	800e51c <tcp_write+0x188>
 800e50e:	4b51      	ldr	r3, [pc, #324]	; (800e654 <tcp_write+0x2c0>)
 800e510:	f240 12e1 	movw	r2, #481	; 0x1e1
 800e514:	4954      	ldr	r1, [pc, #336]	; (800e668 <tcp_write+0x2d4>)
 800e516:	4851      	ldr	r0, [pc, #324]	; (800e65c <tcp_write+0x2c8>)
 800e518:	f005 fd50 	bl	8013fbc <iprintf>
     *
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800e51c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e520:	88fb      	ldrh	r3, [r7, #6]
 800e522:	429a      	cmp	r2, r3
 800e524:	f080 8168 	bcs.w	800e7f8 <tcp_write+0x464>
 800e528:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	f000 8164 	beq.w	800e7f8 <tcp_write+0x464>
 800e530:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e532:	891b      	ldrh	r3, [r3, #8]
 800e534:	2b00      	cmp	r3, #0
 800e536:	f000 815f 	beq.w	800e7f8 <tcp_write+0x464>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800e53a:	88fa      	ldrh	r2, [r7, #6]
 800e53c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e540:	1ad2      	subs	r2, r2, r3
 800e542:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e544:	4293      	cmp	r3, r2
 800e546:	bfa8      	it	ge
 800e548:	4613      	movge	r3, r2
 800e54a:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800e54c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e54e:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800e550:	797b      	ldrb	r3, [r7, #5]
 800e552:	f003 0301 	and.w	r3, r3, #1
 800e556:	2b00      	cmp	r3, #0
 800e558:	d027      	beq.n	800e5aa <tcp_write+0x216>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800e55a:	f107 0012 	add.w	r0, r7, #18
 800e55e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800e560:	8bf9      	ldrh	r1, [r7, #30]
 800e562:	2301      	movs	r3, #1
 800e564:	9302      	str	r3, [sp, #8]
 800e566:	797b      	ldrb	r3, [r7, #5]
 800e568:	9301      	str	r3, [sp, #4]
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	9300      	str	r3, [sp, #0]
 800e56e:	4603      	mov	r3, r0
 800e570:	2004      	movs	r0, #4
 800e572:	f7ff fe37 	bl	800e1e4 <tcp_pbuf_prealloc>
 800e576:	6578      	str	r0, [r7, #84]	; 0x54
 800e578:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	f000 8227 	beq.w	800e9ce <tcp_write+0x63a>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800e580:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e582:	6858      	ldr	r0, [r3, #4]
 800e584:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e588:	68ba      	ldr	r2, [r7, #8]
 800e58a:	4413      	add	r3, r2
 800e58c:	8bfa      	ldrh	r2, [r7, #30]
 800e58e:	4619      	mov	r1, r3
 800e590:	f005 fc59 	bl	8013e46 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800e594:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800e596:	f7fb fcbd 	bl	8009f14 <pbuf_clen>
 800e59a:	4603      	mov	r3, r0
 800e59c:	461a      	mov	r2, r3
 800e59e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800e5a2:	4413      	add	r3, r2
 800e5a4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800e5a8:	e03f      	b.n	800e62a <tcp_write+0x296>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800e5aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e5ac:	685b      	ldr	r3, [r3, #4]
 800e5ae:	637b      	str	r3, [r7, #52]	; 0x34
 800e5b0:	e002      	b.n	800e5b8 <tcp_write+0x224>
 800e5b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	637b      	str	r3, [r7, #52]	; 0x34
 800e5b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d1f8      	bne.n	800e5b2 <tcp_write+0x21e>
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800e5c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5c2:	7b1b      	ldrb	r3, [r3, #12]
 800e5c4:	2b01      	cmp	r3, #1
 800e5c6:	d115      	bne.n	800e5f4 <tcp_write+0x260>
 800e5c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5ca:	685b      	ldr	r3, [r3, #4]
 800e5cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e5ce:	8952      	ldrh	r2, [r2, #10]
 800e5d0:	4413      	add	r3, r2
 800e5d2:	68ba      	ldr	r2, [r7, #8]
 800e5d4:	429a      	cmp	r2, r3
 800e5d6:	d10d      	bne.n	800e5f4 <tcp_write+0x260>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800e5d8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d006      	beq.n	800e5ee <tcp_write+0x25a>
 800e5e0:	4b1c      	ldr	r3, [pc, #112]	; (800e654 <tcp_write+0x2c0>)
 800e5e2:	f44f 7203 	mov.w	r2, #524	; 0x20c
 800e5e6:	4921      	ldr	r1, [pc, #132]	; (800e66c <tcp_write+0x2d8>)
 800e5e8:	481c      	ldr	r0, [pc, #112]	; (800e65c <tcp_write+0x2c8>)
 800e5ea:	f005 fce7 	bl	8013fbc <iprintf>
          extendlen = seglen;
 800e5ee:	8bfb      	ldrh	r3, [r7, #30]
 800e5f0:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800e5f2:	e01a      	b.n	800e62a <tcp_write+0x296>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800e5f4:	8bfb      	ldrh	r3, [r7, #30]
 800e5f6:	2201      	movs	r2, #1
 800e5f8:	4619      	mov	r1, r3
 800e5fa:	2004      	movs	r0, #4
 800e5fc:	f7fb f884 	bl	8009708 <pbuf_alloc>
 800e600:	6578      	str	r0, [r7, #84]	; 0x54
 800e602:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e604:	2b00      	cmp	r3, #0
 800e606:	f000 81e4 	beq.w	800e9d2 <tcp_write+0x63e>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
 800e60a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e60e:	68ba      	ldr	r2, [r7, #8]
 800e610:	441a      	add	r2, r3
 800e612:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e614:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800e616:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800e618:	f7fb fc7c 	bl	8009f14 <pbuf_clen>
 800e61c:	4603      	mov	r3, r0
 800e61e:	461a      	mov	r2, r3
 800e620:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800e624:	4413      	add	r3, r2
 800e626:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
          &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800e62a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e62e:	8bfb      	ldrh	r3, [r7, #30]
 800e630:	4413      	add	r3, r2
 800e632:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800e636:	e0df      	b.n	800e7f8 <tcp_write+0x464>
    }
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800e63e:	2b00      	cmp	r3, #0
 800e640:	f000 80da 	beq.w	800e7f8 <tcp_write+0x464>
 800e644:	4b03      	ldr	r3, [pc, #12]	; (800e654 <tcp_write+0x2c0>)
 800e646:	f240 2225 	movw	r2, #549	; 0x225
 800e64a:	4909      	ldr	r1, [pc, #36]	; (800e670 <tcp_write+0x2dc>)
 800e64c:	4803      	ldr	r0, [pc, #12]	; (800e65c <tcp_write+0x2c8>)
 800e64e:	f005 fcb5 	bl	8013fbc <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800e652:	e0d1      	b.n	800e7f8 <tcp_write+0x464>
 800e654:	08015ec8 	.word	0x08015ec8
 800e658:	08016028 	.word	0x08016028
 800e65c:	08015f64 	.word	0x08015f64
 800e660:	0801605c 	.word	0x0801605c
 800e664:	08016074 	.word	0x08016074
 800e668:	08016094 	.word	0x08016094
 800e66c:	080160b4 	.word	0x080160b4
 800e670:	080160e0 	.word	0x080160e0
    struct pbuf *p;
    u16_t left = len - pos;
 800e674:	88fa      	ldrh	r2, [r7, #6]
 800e676:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e67a:	1ad3      	subs	r3, r2, r3
 800e67c:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800e67e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e682:	b29b      	uxth	r3, r3
 800e684:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e686:	1ad3      	subs	r3, r2, r3
 800e688:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800e68a:	8b7a      	ldrh	r2, [r7, #26]
 800e68c:	8bbb      	ldrh	r3, [r7, #28]
 800e68e:	4293      	cmp	r3, r2
 800e690:	bf28      	it	cs
 800e692:	4613      	movcs	r3, r2
 800e694:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800e696:	797b      	ldrb	r3, [r7, #5]
 800e698:	f003 0301 	and.w	r3, r3, #1
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d036      	beq.n	800e70e <tcp_write+0x37a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800e6a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e6a4:	b29a      	uxth	r2, r3
 800e6a6:	8b3b      	ldrh	r3, [r7, #24]
 800e6a8:	4413      	add	r3, r2
 800e6aa:	b299      	uxth	r1, r3
 800e6ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	bf0c      	ite	eq
 800e6b2:	2301      	moveq	r3, #1
 800e6b4:	2300      	movne	r3, #0
 800e6b6:	b2db      	uxtb	r3, r3
 800e6b8:	f107 0012 	add.w	r0, r7, #18
 800e6bc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e6be:	9302      	str	r3, [sp, #8]
 800e6c0:	797b      	ldrb	r3, [r7, #5]
 800e6c2:	9301      	str	r3, [sp, #4]
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	9300      	str	r3, [sp, #0]
 800e6c8:	4603      	mov	r3, r0
 800e6ca:	2000      	movs	r0, #0
 800e6cc:	f7ff fd8a 	bl	800e1e4 <tcp_pbuf_prealloc>
 800e6d0:	6338      	str	r0, [r7, #48]	; 0x30
 800e6d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	f000 817e 	beq.w	800e9d6 <tcp_write+0x642>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800e6da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6dc:	895b      	ldrh	r3, [r3, #10]
 800e6de:	8b3a      	ldrh	r2, [r7, #24]
 800e6e0:	429a      	cmp	r2, r3
 800e6e2:	d906      	bls.n	800e6f2 <tcp_write+0x35e>
 800e6e4:	4b8f      	ldr	r3, [pc, #572]	; (800e924 <tcp_write+0x590>)
 800e6e6:	f240 2241 	movw	r2, #577	; 0x241
 800e6ea:	498f      	ldr	r1, [pc, #572]	; (800e928 <tcp_write+0x594>)
 800e6ec:	488f      	ldr	r0, [pc, #572]	; (800e92c <tcp_write+0x598>)
 800e6ee:	f005 fc65 	bl	8013fbc <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 800e6f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6f4:	685a      	ldr	r2, [r3, #4]
 800e6f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e6fa:	18d0      	adds	r0, r2, r3
 800e6fc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e700:	68ba      	ldr	r2, [r7, #8]
 800e702:	4413      	add	r3, r2
 800e704:	8b3a      	ldrh	r2, [r7, #24]
 800e706:	4619      	mov	r1, r3
 800e708:	f005 fb9d 	bl	8013e46 <memcpy>
 800e70c:	e02e      	b.n	800e76c <tcp_write+0x3d8>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800e70e:	8a7b      	ldrh	r3, [r7, #18]
 800e710:	2b00      	cmp	r3, #0
 800e712:	d006      	beq.n	800e722 <tcp_write+0x38e>
 800e714:	4b83      	ldr	r3, [pc, #524]	; (800e924 <tcp_write+0x590>)
 800e716:	f240 224b 	movw	r2, #587	; 0x24b
 800e71a:	4985      	ldr	r1, [pc, #532]	; (800e930 <tcp_write+0x59c>)
 800e71c:	4883      	ldr	r0, [pc, #524]	; (800e92c <tcp_write+0x598>)
 800e71e:	f005 fc4d 	bl	8013fbc <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800e722:	8b3b      	ldrh	r3, [r7, #24]
 800e724:	2201      	movs	r2, #1
 800e726:	4619      	mov	r1, r3
 800e728:	2000      	movs	r0, #0
 800e72a:	f7fa ffed 	bl	8009708 <pbuf_alloc>
 800e72e:	6178      	str	r0, [r7, #20]
 800e730:	697b      	ldr	r3, [r7, #20]
 800e732:	2b00      	cmp	r3, #0
 800e734:	f000 8151 	beq.w	800e9da <tcp_write+0x646>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
 800e738:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e73c:	68ba      	ldr	r2, [r7, #8]
 800e73e:	441a      	add	r2, r3
 800e740:	697b      	ldr	r3, [r7, #20]
 800e742:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800e744:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e748:	b29b      	uxth	r3, r3
 800e74a:	2200      	movs	r2, #0
 800e74c:	4619      	mov	r1, r3
 800e74e:	2000      	movs	r0, #0
 800e750:	f7fa ffda 	bl	8009708 <pbuf_alloc>
 800e754:	6338      	str	r0, [r7, #48]	; 0x30
 800e756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d103      	bne.n	800e764 <tcp_write+0x3d0>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800e75c:	6978      	ldr	r0, [r7, #20]
 800e75e:	f7fb fb45 	bl	8009dec <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800e762:	e13d      	b.n	800e9e0 <tcp_write+0x64c>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800e764:	6979      	ldr	r1, [r7, #20]
 800e766:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e768:	f7fb fc0e 	bl	8009f88 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800e76c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e76e:	f7fb fbd1 	bl	8009f14 <pbuf_clen>
 800e772:	4603      	mov	r3, r0
 800e774:	461a      	mov	r2, r3
 800e776:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800e77a:	4413      	add	r3, r2
 800e77c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 800e780:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800e784:	2b09      	cmp	r3, #9
 800e786:	d805      	bhi.n	800e794 <tcp_write+0x400>
 800e788:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800e78c:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800e790:	4293      	cmp	r3, r2
 800e792:	d903      	bls.n	800e79c <tcp_write+0x408>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
        queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800e794:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e796:	f7fb fb29 	bl	8009dec <pbuf_free>
      goto memerr;
 800e79a:	e121      	b.n	800e9e0 <tcp_write+0x64c>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e7a0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e7a4:	441a      	add	r2, r3
 800e7a6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e7aa:	9300      	str	r3, [sp, #0]
 800e7ac:	4613      	mov	r3, r2
 800e7ae:	2200      	movs	r2, #0
 800e7b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e7b2:	68f8      	ldr	r0, [r7, #12]
 800e7b4:	f7ff fc8e 	bl	800e0d4 <tcp_create_segment>
 800e7b8:	64f8      	str	r0, [r7, #76]	; 0x4c
 800e7ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	f000 810e 	beq.w	800e9de <tcp_write+0x64a>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800e7c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d102      	bne.n	800e7ce <tcp_write+0x43a>
      queue = seg;
 800e7c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e7ca:	647b      	str	r3, [r7, #68]	; 0x44
 800e7cc:	e00c      	b.n	800e7e8 <tcp_write+0x454>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800e7ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d106      	bne.n	800e7e2 <tcp_write+0x44e>
 800e7d4:	4b53      	ldr	r3, [pc, #332]	; (800e924 <tcp_write+0x590>)
 800e7d6:	f240 2285 	movw	r2, #645	; 0x285
 800e7da:	4956      	ldr	r1, [pc, #344]	; (800e934 <tcp_write+0x5a0>)
 800e7dc:	4853      	ldr	r0, [pc, #332]	; (800e92c <tcp_write+0x598>)
 800e7de:	f005 fbed 	bl	8013fbc <iprintf>
      prev_seg->next = seg;
 800e7e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e7e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e7e6:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800e7e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e7ea:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
      lwip_ntohl(seg->tcphdr->seqno),
      lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800e7ec:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e7f0:	8b3b      	ldrh	r3, [r7, #24]
 800e7f2:	4413      	add	r3, r2
 800e7f4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 800e7f8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e7fc:	88fb      	ldrh	r3, [r7, #6]
 800e7fe:	429a      	cmp	r2, r3
 800e800:	f4ff af38 	bcc.w	800e674 <tcp_write+0x2e0>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800e804:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e806:	2b00      	cmp	r3, #0
 800e808:	d02c      	beq.n	800e864 <tcp_write+0x4d0>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800e80a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e80c:	685b      	ldr	r3, [r3, #4]
 800e80e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e810:	e01e      	b.n	800e850 <tcp_write+0x4bc>
      p->tot_len += oversize_used;
 800e812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e814:	891a      	ldrh	r2, [r3, #8]
 800e816:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e818:	4413      	add	r3, r2
 800e81a:	b29a      	uxth	r2, r3
 800e81c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e81e:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800e820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	2b00      	cmp	r3, #0
 800e826:	d110      	bne.n	800e84a <tcp_write+0x4b6>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800e828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e82a:	685b      	ldr	r3, [r3, #4]
 800e82c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e82e:	8952      	ldrh	r2, [r2, #10]
 800e830:	4413      	add	r3, r2
 800e832:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800e834:	68b9      	ldr	r1, [r7, #8]
 800e836:	4618      	mov	r0, r3
 800e838:	f005 fb05 	bl	8013e46 <memcpy>
        p->len += oversize_used;
 800e83c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e83e:	895a      	ldrh	r2, [r3, #10]
 800e840:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e842:	4413      	add	r3, r2
 800e844:	b29a      	uxth	r2, r3
 800e846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e848:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800e84a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e852:	2b00      	cmp	r3, #0
 800e854:	d1dd      	bne.n	800e812 <tcp_write+0x47e>
      }
    }
    last_unsent->len += oversize_used;
 800e856:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e858:	891a      	ldrh	r2, [r3, #8]
 800e85a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e85c:	4413      	add	r3, r2
 800e85e:	b29a      	uxth	r2, r3
 800e860:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e862:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800e864:	8a7a      	ldrh	r2, [r7, #18]
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800e86c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d018      	beq.n	800e8a4 <tcp_write+0x510>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800e872:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e874:	2b00      	cmp	r3, #0
 800e876:	d106      	bne.n	800e886 <tcp_write+0x4f2>
 800e878:	4b2a      	ldr	r3, [pc, #168]	; (800e924 <tcp_write+0x590>)
 800e87a:	f240 22bb 	movw	r2, #699	; 0x2bb
 800e87e:	492e      	ldr	r1, [pc, #184]	; (800e938 <tcp_write+0x5a4>)
 800e880:	482a      	ldr	r0, [pc, #168]	; (800e92c <tcp_write+0x598>)
 800e882:	f005 fb9b 	bl	8013fbc <iprintf>
      (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800e886:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e888:	685b      	ldr	r3, [r3, #4]
 800e88a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e88c:	4618      	mov	r0, r3
 800e88e:	f7fb fb7b 	bl	8009f88 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800e892:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e894:	891a      	ldrh	r2, [r3, #8]
 800e896:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e898:	891b      	ldrh	r3, [r3, #8]
 800e89a:	4413      	add	r3, r2
 800e89c:	b29a      	uxth	r2, r3
 800e89e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e8a0:	811a      	strh	r2, [r3, #8]
 800e8a2:	e037      	b.n	800e914 <tcp_write+0x580>
  } else if (extendlen > 0) {
 800e8a4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d034      	beq.n	800e914 <tcp_write+0x580>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800e8aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d003      	beq.n	800e8b8 <tcp_write+0x524>
 800e8b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e8b2:	685b      	ldr	r3, [r3, #4]
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d106      	bne.n	800e8c6 <tcp_write+0x532>
 800e8b8:	4b1a      	ldr	r3, [pc, #104]	; (800e924 <tcp_write+0x590>)
 800e8ba:	f240 22c1 	movw	r2, #705	; 0x2c1
 800e8be:	491f      	ldr	r1, [pc, #124]	; (800e93c <tcp_write+0x5a8>)
 800e8c0:	481a      	ldr	r0, [pc, #104]	; (800e92c <tcp_write+0x598>)
 800e8c2:	f005 fb7b 	bl	8013fbc <iprintf>
      last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800e8c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e8c8:	685b      	ldr	r3, [r3, #4]
 800e8ca:	62bb      	str	r3, [r7, #40]	; 0x28
 800e8cc:	e009      	b.n	800e8e2 <tcp_write+0x54e>
      p->tot_len += extendlen;
 800e8ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8d0:	891a      	ldrh	r2, [r3, #8]
 800e8d2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e8d4:	4413      	add	r3, r2
 800e8d6:	b29a      	uxth	r2, r3
 800e8d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8da:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800e8dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	62bb      	str	r3, [r7, #40]	; 0x28
 800e8e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8e4:	681b      	ldr	r3, [r3, #0]
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d1f1      	bne.n	800e8ce <tcp_write+0x53a>
    }
    p->tot_len += extendlen;
 800e8ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8ec:	891a      	ldrh	r2, [r3, #8]
 800e8ee:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e8f0:	4413      	add	r3, r2
 800e8f2:	b29a      	uxth	r2, r3
 800e8f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8f6:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800e8f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8fa:	895a      	ldrh	r2, [r3, #10]
 800e8fc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e8fe:	4413      	add	r3, r2
 800e900:	b29a      	uxth	r2, r3
 800e902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e904:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800e906:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e908:	891a      	ldrh	r2, [r3, #8]
 800e90a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e90c:	4413      	add	r3, r2
 800e90e:	b29a      	uxth	r2, r3
 800e910:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e912:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800e914:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e916:	2b00      	cmp	r3, #0
 800e918:	d112      	bne.n	800e940 <tcp_write+0x5ac>
    pcb->unsent = queue;
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e91e:	669a      	str	r2, [r3, #104]	; 0x68
 800e920:	e011      	b.n	800e946 <tcp_write+0x5b2>
 800e922:	bf00      	nop
 800e924:	08015ec8 	.word	0x08015ec8
 800e928:	08016110 	.word	0x08016110
 800e92c:	08015f64 	.word	0x08015f64
 800e930:	08016150 	.word	0x08016150
 800e934:	08016160 	.word	0x08016160
 800e938:	08016174 	.word	0x08016174
 800e93c:	080161ac 	.word	0x080161ac
  } else {
    last_unsent->next = queue;
 800e940:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e942:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e944:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e94a:	88fb      	ldrh	r3, [r7, #6]
 800e94c:	441a      	add	r2, r3
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_buf -= len;
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e958:	88fb      	ldrh	r3, [r7, #6]
 800e95a:	1ad3      	subs	r3, r2, r3
 800e95c:	b29a      	uxth	r2, r3
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  pcb->snd_queuelen = queuelen;
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800e96a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
    pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e974:	2b00      	cmp	r3, #0
 800e976:	d00e      	beq.n	800e996 <tcp_write+0x602>
    LWIP_ASSERT("tcp_write: valid queue length",
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d10a      	bne.n	800e996 <tcp_write+0x602>
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e984:	2b00      	cmp	r3, #0
 800e986:	d106      	bne.n	800e996 <tcp_write+0x602>
 800e988:	4b2c      	ldr	r3, [pc, #176]	; (800ea3c <tcp_write+0x6a8>)
 800e98a:	f240 22ed 	movw	r2, #749	; 0x2ed
 800e98e:	492c      	ldr	r1, [pc, #176]	; (800ea40 <tcp_write+0x6ac>)
 800e990:	482c      	ldr	r0, [pc, #176]	; (800ea44 <tcp_write+0x6b0>)
 800e992:	f005 fb13 	bl	8013fbc <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 800e996:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d016      	beq.n	800e9ca <tcp_write+0x636>
 800e99c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e99e:	68db      	ldr	r3, [r3, #12]
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d012      	beq.n	800e9ca <tcp_write+0x636>
 800e9a4:	797b      	ldrb	r3, [r7, #5]
 800e9a6:	f003 0302 	and.w	r3, r3, #2
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d10d      	bne.n	800e9ca <tcp_write+0x636>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800e9ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e9b0:	68db      	ldr	r3, [r3, #12]
 800e9b2:	899b      	ldrh	r3, [r3, #12]
 800e9b4:	b29c      	uxth	r4, r3
 800e9b6:	2008      	movs	r0, #8
 800e9b8:	f7fa f838 	bl	8008a2c <lwip_htons>
 800e9bc:	4603      	mov	r3, r0
 800e9be:	461a      	mov	r2, r3
 800e9c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e9c2:	68db      	ldr	r3, [r3, #12]
 800e9c4:	4322      	orrs	r2, r4
 800e9c6:	b292      	uxth	r2, r2
 800e9c8:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800e9ca:	2300      	movs	r3, #0
 800e9cc:	e031      	b.n	800ea32 <tcp_write+0x69e>
          goto memerr;
 800e9ce:	bf00      	nop
 800e9d0:	e006      	b.n	800e9e0 <tcp_write+0x64c>
            goto memerr;
 800e9d2:	bf00      	nop
 800e9d4:	e004      	b.n	800e9e0 <tcp_write+0x64c>
        goto memerr;
 800e9d6:	bf00      	nop
 800e9d8:	e002      	b.n	800e9e0 <tcp_write+0x64c>
        goto memerr;
 800e9da:	bf00      	nop
 800e9dc:	e000      	b.n	800e9e0 <tcp_write+0x64c>
      goto memerr;
 800e9de:	bf00      	nop
memerr:
  pcb->flags |= TF_NAGLEMEMERR;
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	7e9b      	ldrb	r3, [r3, #26]
 800e9e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e9e8:	b2da      	uxtb	r2, r3
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	769a      	strb	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800e9ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d002      	beq.n	800e9fa <tcp_write+0x666>
    pbuf_free(concat_p);
 800e9f4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800e9f6:	f7fb f9f9 	bl	8009dec <pbuf_free>
  }
  if (queue != NULL) {
 800e9fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d002      	beq.n	800ea06 <tcp_write+0x672>
    tcp_segs_free(queue);
 800ea00:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ea02:	f7fc fcc6 	bl	800b392 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d00e      	beq.n	800ea2e <tcp_write+0x69a>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d10a      	bne.n	800ea2e <tcp_write+0x69a>
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d106      	bne.n	800ea2e <tcp_write+0x69a>
 800ea20:	4b06      	ldr	r3, [pc, #24]	; (800ea3c <tcp_write+0x6a8>)
 800ea22:	f240 3202 	movw	r2, #770	; 0x302
 800ea26:	4906      	ldr	r1, [pc, #24]	; (800ea40 <tcp_write+0x6ac>)
 800ea28:	4806      	ldr	r0, [pc, #24]	; (800ea44 <tcp_write+0x6b0>)
 800ea2a:	f005 fac7 	bl	8013fbc <iprintf>
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800ea2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ea32:	4618      	mov	r0, r3
 800ea34:	375c      	adds	r7, #92	; 0x5c
 800ea36:	46bd      	mov	sp, r7
 800ea38:	bd90      	pop	{r4, r7, pc}
 800ea3a:	bf00      	nop
 800ea3c:	08015ec8 	.word	0x08015ec8
 800ea40:	080161e4 	.word	0x080161e4
 800ea44:	08015f64 	.word	0x08015f64

0800ea48 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800ea48:	b580      	push	{r7, lr}
 800ea4a:	b08a      	sub	sp, #40	; 0x28
 800ea4c:	af02      	add	r7, sp, #8
 800ea4e:	6078      	str	r0, [r7, #4]
 800ea50:	460b      	mov	r3, r1
 800ea52:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800ea54:	2300      	movs	r3, #0
 800ea56:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800ea58:	2300      	movs	r3, #0
 800ea5a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800ea5c:	78fb      	ldrb	r3, [r7, #3]
 800ea5e:	f003 0303 	and.w	r3, r3, #3
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d106      	bne.n	800ea74 <tcp_enqueue_flags+0x2c>
 800ea66:	4b6f      	ldr	r3, [pc, #444]	; (800ec24 <tcp_enqueue_flags+0x1dc>)
 800ea68:	f240 321b 	movw	r2, #795	; 0x31b
 800ea6c:	496e      	ldr	r1, [pc, #440]	; (800ec28 <tcp_enqueue_flags+0x1e0>)
 800ea6e:	486f      	ldr	r0, [pc, #444]	; (800ec2c <tcp_enqueue_flags+0x1e4>)
 800ea70:	f005 faa4 	bl	8013fbc <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ea7a:	2b08      	cmp	r3, #8
 800ea7c:	d806      	bhi.n	800ea8c <tcp_enqueue_flags+0x44>
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ea84:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800ea88:	4293      	cmp	r3, r2
 800ea8a:	d90e      	bls.n	800eaaa <tcp_enqueue_flags+0x62>
      ((flags & TCP_FIN) == 0)) {
 800ea8c:	78fb      	ldrb	r3, [r7, #3]
 800ea8e:	f003 0301 	and.w	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d109      	bne.n	800eaaa <tcp_enqueue_flags+0x62>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	7e9b      	ldrb	r3, [r3, #26]
 800ea9a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ea9e:	b2da      	uxtb	r2, r3
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 800eaa4:	f04f 33ff 	mov.w	r3, #4294967295
 800eaa8:	e0b7      	b.n	800ec1a <tcp_enqueue_flags+0x1d2>
  }

  if (flags & TCP_SYN) {
 800eaaa:	78fb      	ldrb	r3, [r7, #3]
 800eaac:	f003 0302 	and.w	r3, r3, #2
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d001      	beq.n	800eab8 <tcp_enqueue_flags+0x70>
    optflags = TF_SEG_OPTS_MSS;
 800eab4:	2301      	movs	r3, #1
 800eab6:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800eab8:	7ffb      	ldrb	r3, [r7, #31]
 800eaba:	009b      	lsls	r3, r3, #2
 800eabc:	b2db      	uxtb	r3, r3
 800eabe:	f003 0304 	and.w	r3, r3, #4
 800eac2:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800eac4:	7dfb      	ldrb	r3, [r7, #23]
 800eac6:	b29b      	uxth	r3, r3
 800eac8:	2200      	movs	r2, #0
 800eaca:	4619      	mov	r1, r3
 800eacc:	2000      	movs	r0, #0
 800eace:	f7fa fe1b 	bl	8009708 <pbuf_alloc>
 800ead2:	6138      	str	r0, [r7, #16]
 800ead4:	693b      	ldr	r3, [r7, #16]
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d109      	bne.n	800eaee <tcp_enqueue_flags+0xa6>
    pcb->flags |= TF_NAGLEMEMERR;
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	7e9b      	ldrb	r3, [r3, #26]
 800eade:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800eae2:	b2da      	uxtb	r2, r3
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800eae8:	f04f 33ff 	mov.w	r3, #4294967295
 800eaec:	e095      	b.n	800ec1a <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800eaee:	693b      	ldr	r3, [r7, #16]
 800eaf0:	895a      	ldrh	r2, [r3, #10]
 800eaf2:	7dfb      	ldrb	r3, [r7, #23]
 800eaf4:	b29b      	uxth	r3, r3
 800eaf6:	429a      	cmp	r2, r3
 800eaf8:	d206      	bcs.n	800eb08 <tcp_enqueue_flags+0xc0>
 800eafa:	4b4a      	ldr	r3, [pc, #296]	; (800ec24 <tcp_enqueue_flags+0x1dc>)
 800eafc:	f240 3241 	movw	r2, #833	; 0x341
 800eb00:	494b      	ldr	r1, [pc, #300]	; (800ec30 <tcp_enqueue_flags+0x1e8>)
 800eb02:	484a      	ldr	r0, [pc, #296]	; (800ec2c <tcp_enqueue_flags+0x1e4>)
 800eb04:	f005 fa5a 	bl	8013fbc <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800eb0c:	78fa      	ldrb	r2, [r7, #3]
 800eb0e:	7ffb      	ldrb	r3, [r7, #31]
 800eb10:	9300      	str	r3, [sp, #0]
 800eb12:	460b      	mov	r3, r1
 800eb14:	6939      	ldr	r1, [r7, #16]
 800eb16:	6878      	ldr	r0, [r7, #4]
 800eb18:	f7ff fadc 	bl	800e0d4 <tcp_create_segment>
 800eb1c:	60f8      	str	r0, [r7, #12]
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d109      	bne.n	800eb38 <tcp_enqueue_flags+0xf0>
    pcb->flags |= TF_NAGLEMEMERR;
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	7e9b      	ldrb	r3, [r3, #26]
 800eb28:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800eb2c:	b2da      	uxtb	r2, r3
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800eb32:	f04f 33ff 	mov.w	r3, #4294967295
 800eb36:	e070      	b.n	800ec1a <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	68db      	ldr	r3, [r3, #12]
 800eb3c:	f003 0303 	and.w	r3, r3, #3
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d006      	beq.n	800eb52 <tcp_enqueue_flags+0x10a>
 800eb44:	4b37      	ldr	r3, [pc, #220]	; (800ec24 <tcp_enqueue_flags+0x1dc>)
 800eb46:	f240 3249 	movw	r2, #841	; 0x349
 800eb4a:	493a      	ldr	r1, [pc, #232]	; (800ec34 <tcp_enqueue_flags+0x1ec>)
 800eb4c:	4837      	ldr	r0, [pc, #220]	; (800ec2c <tcp_enqueue_flags+0x1e4>)
 800eb4e:	f005 fa35 	bl	8013fbc <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	891b      	ldrh	r3, [r3, #8]
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d006      	beq.n	800eb68 <tcp_enqueue_flags+0x120>
 800eb5a:	4b32      	ldr	r3, [pc, #200]	; (800ec24 <tcp_enqueue_flags+0x1dc>)
 800eb5c:	f240 324a 	movw	r2, #842	; 0x34a
 800eb60:	4935      	ldr	r1, [pc, #212]	; (800ec38 <tcp_enqueue_flags+0x1f0>)
 800eb62:	4832      	ldr	r0, [pc, #200]	; (800ec2c <tcp_enqueue_flags+0x1e4>)
 800eb64:	f005 fa2a 	bl	8013fbc <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d103      	bne.n	800eb78 <tcp_enqueue_flags+0x130>
    pcb->unsent = seg;
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	68fa      	ldr	r2, [r7, #12]
 800eb74:	669a      	str	r2, [r3, #104]	; 0x68
 800eb76:	e00d      	b.n	800eb94 <tcp_enqueue_flags+0x14c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800eb7c:	61bb      	str	r3, [r7, #24]
 800eb7e:	e002      	b.n	800eb86 <tcp_enqueue_flags+0x13e>
 800eb80:	69bb      	ldr	r3, [r7, #24]
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	61bb      	str	r3, [r7, #24]
 800eb86:	69bb      	ldr	r3, [r7, #24]
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d1f8      	bne.n	800eb80 <tcp_enqueue_flags+0x138>
    useg->next = seg;
 800eb8e:	69bb      	ldr	r3, [r7, #24]
 800eb90:	68fa      	ldr	r2, [r7, #12]
 800eb92:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	2200      	movs	r2, #0
 800eb98:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800eb9c:	78fb      	ldrb	r3, [r7, #3]
 800eb9e:	f003 0302 	and.w	r3, r3, #2
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d104      	bne.n	800ebb0 <tcp_enqueue_flags+0x168>
 800eba6:	78fb      	ldrb	r3, [r7, #3]
 800eba8:	f003 0301 	and.w	r3, r3, #1
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d004      	beq.n	800ebba <tcp_enqueue_flags+0x172>
    pcb->snd_lbb++;
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ebb4:	1c5a      	adds	r2, r3, #1
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	659a      	str	r2, [r3, #88]	; 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800ebba:	78fb      	ldrb	r3, [r7, #3]
 800ebbc:	f003 0301 	and.w	r3, r3, #1
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d006      	beq.n	800ebd2 <tcp_enqueue_flags+0x18a>
    pcb->flags |= TF_FIN;
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	7e9b      	ldrb	r3, [r3, #26]
 800ebc8:	f043 0320 	orr.w	r3, r3, #32
 800ebcc:	b2da      	uxtb	r2, r3
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	769a      	strb	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	685b      	ldr	r3, [r3, #4]
 800ebd6:	4618      	mov	r0, r3
 800ebd8:	f7fb f99c 	bl	8009f14 <pbuf_clen>
 800ebdc:	4603      	mov	r3, r0
 800ebde:	461a      	mov	r2, r3
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ebe6:	4413      	add	r3, r2
 800ebe8:	b29a      	uxth	r2, r3
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d00e      	beq.n	800ec18 <tcp_enqueue_flags+0x1d0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d10a      	bne.n	800ec18 <tcp_enqueue_flags+0x1d0>
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d106      	bne.n	800ec18 <tcp_enqueue_flags+0x1d0>
 800ec0a:	4b06      	ldr	r3, [pc, #24]	; (800ec24 <tcp_enqueue_flags+0x1dc>)
 800ec0c:	f240 326d 	movw	r2, #877	; 0x36d
 800ec10:	490a      	ldr	r1, [pc, #40]	; (800ec3c <tcp_enqueue_flags+0x1f4>)
 800ec12:	4806      	ldr	r0, [pc, #24]	; (800ec2c <tcp_enqueue_flags+0x1e4>)
 800ec14:	f005 f9d2 	bl	8013fbc <iprintf>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800ec18:	2300      	movs	r3, #0
}
 800ec1a:	4618      	mov	r0, r3
 800ec1c:	3720      	adds	r7, #32
 800ec1e:	46bd      	mov	sp, r7
 800ec20:	bd80      	pop	{r7, pc}
 800ec22:	bf00      	nop
 800ec24:	08015ec8 	.word	0x08015ec8
 800ec28:	08016204 	.word	0x08016204
 800ec2c:	08015f64 	.word	0x08015f64
 800ec30:	0801625c 	.word	0x0801625c
 800ec34:	08016298 	.word	0x08016298
 800ec38:	080162b0 	.word	0x080162b0
 800ec3c:	080162dc 	.word	0x080162dc

0800ec40 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800ec40:	b590      	push	{r4, r7, lr}
 800ec42:	b08b      	sub	sp, #44	; 0x2c
 800ec44:	af04      	add	r7, sp, #16
 800ec46:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
 800ec48:	2300      	movs	r3, #0
 800ec4a:	75bb      	strb	r3, [r7, #22]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800ec4c:	7dbb      	ldrb	r3, [r7, #22]
 800ec4e:	b29c      	uxth	r4, r3
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ec54:	4618      	mov	r0, r3
 800ec56:	f7f9 fef7 	bl	8008a48 <lwip_htonl>
 800ec5a:	4603      	mov	r3, r0
 800ec5c:	2200      	movs	r2, #0
 800ec5e:	4621      	mov	r1, r4
 800ec60:	6878      	ldr	r0, [r7, #4]
 800ec62:	f7ff f97b 	bl	800df5c <tcp_output_alloc_header>
 800ec66:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ec68:	693b      	ldr	r3, [r7, #16]
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d109      	bne.n	800ec82 <tcp_send_empty_ack+0x42>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	7e9b      	ldrb	r3, [r3, #26]
 800ec72:	f043 0303 	orr.w	r3, r3, #3
 800ec76:	b2da      	uxtb	r2, r3
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	769a      	strb	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800ec7c:	f06f 0301 	mvn.w	r3, #1
 800ec80:	e036      	b.n	800ecf0 <tcp_send_empty_ack+0xb0>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	3304      	adds	r3, #4
 800ec86:	4618      	mov	r0, r3
 800ec88:	f002 f864 	bl	8010d54 <ip4_route>
 800ec8c:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d102      	bne.n	800ec9a <tcp_send_empty_ack+0x5a>
    err = ERR_RTE;
 800ec94:	23fc      	movs	r3, #252	; 0xfc
 800ec96:	75fb      	strb	r3, [r7, #23]
 800ec98:	e012      	b.n	800ecc0 <tcp_send_empty_ack+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 800ec9a:	6879      	ldr	r1, [r7, #4]
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	1d18      	adds	r0, r3, #4
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	7a9c      	ldrb	r4, [r3, #10]
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	7a5b      	ldrb	r3, [r3, #9]
 800eca8:	68fa      	ldr	r2, [r7, #12]
 800ecaa:	9202      	str	r2, [sp, #8]
 800ecac:	2206      	movs	r2, #6
 800ecae:	9201      	str	r2, [sp, #4]
 800ecb0:	9300      	str	r3, [sp, #0]
 800ecb2:	4623      	mov	r3, r4
 800ecb4:	4602      	mov	r2, r0
 800ecb6:	6938      	ldr	r0, [r7, #16]
 800ecb8:	f002 f9f4 	bl	80110a4 <ip4_output_if>
 800ecbc:	4603      	mov	r3, r0
 800ecbe:	75fb      	strb	r3, [r7, #23]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 800ecc0:	6938      	ldr	r0, [r7, #16]
 800ecc2:	f7fb f893 	bl	8009dec <pbuf_free>

  if (err != ERR_OK) {
 800ecc6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d007      	beq.n	800ecde <tcp_send_empty_ack+0x9e>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	7e9b      	ldrb	r3, [r3, #26]
 800ecd2:	f043 0303 	orr.w	r3, r3, #3
 800ecd6:	b2da      	uxtb	r2, r3
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	769a      	strb	r2, [r3, #26]
 800ecdc:	e006      	b.n	800ecec <tcp_send_empty_ack+0xac>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	7e9b      	ldrb	r3, [r3, #26]
 800ece2:	f023 0303 	bic.w	r3, r3, #3
 800ece6:	b2da      	uxtb	r2, r3
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	769a      	strb	r2, [r3, #26]
  }

  return err;
 800ecec:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ecf0:	4618      	mov	r0, r3
 800ecf2:	371c      	adds	r7, #28
 800ecf4:	46bd      	mov	sp, r7
 800ecf6:	bd90      	pop	{r4, r7, pc}

0800ecf8 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800ecf8:	b5b0      	push	{r4, r5, r7, lr}
 800ecfa:	b08a      	sub	sp, #40	; 0x28
 800ecfc:	af00      	add	r7, sp, #0
 800ecfe:	6078      	str	r0, [r7, #4]
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	7d1b      	ldrb	r3, [r3, #20]
 800ed04:	2b01      	cmp	r3, #1
 800ed06:	d106      	bne.n	800ed16 <tcp_output+0x1e>
 800ed08:	4b9b      	ldr	r3, [pc, #620]	; (800ef78 <tcp_output+0x280>)
 800ed0a:	f240 32ed 	movw	r2, #1005	; 0x3ed
 800ed0e:	499b      	ldr	r1, [pc, #620]	; (800ef7c <tcp_output+0x284>)
 800ed10:	489b      	ldr	r0, [pc, #620]	; (800ef80 <tcp_output+0x288>)
 800ed12:	f005 f953 	bl	8013fbc <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800ed16:	4b9b      	ldr	r3, [pc, #620]	; (800ef84 <tcp_output+0x28c>)
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	687a      	ldr	r2, [r7, #4]
 800ed1c:	429a      	cmp	r2, r3
 800ed1e:	d101      	bne.n	800ed24 <tcp_output+0x2c>
    return ERR_OK;
 800ed20:	2300      	movs	r3, #0
 800ed22:	e1cf      	b.n	800f0c4 <tcp_output+0x3cc>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ed30:	429a      	cmp	r2, r3
 800ed32:	d203      	bcs.n	800ed3c <tcp_output+0x44>
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ed3a:	e002      	b.n	800ed42 <tcp_output+0x4a>
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ed42:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ed48:	627b      	str	r3, [r7, #36]	; 0x24
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	7e9b      	ldrb	r3, [r3, #26]
 800ed4e:	f003 0302 	and.w	r3, r3, #2
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d017      	beq.n	800ed86 <tcp_output+0x8e>
 800ed56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d00f      	beq.n	800ed7c <tcp_output+0x84>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 800ed5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed5e:	68db      	ldr	r3, [r3, #12]
 800ed60:	685b      	ldr	r3, [r3, #4]
 800ed62:	4618      	mov	r0, r3
 800ed64:	f7f9 fe70 	bl	8008a48 <lwip_htonl>
 800ed68:	4602      	mov	r2, r0
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ed6e:	1ad3      	subs	r3, r2, r3
 800ed70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed72:	8912      	ldrh	r2, [r2, #8]
 800ed74:	4413      	add	r3, r2
     (seg == NULL ||
 800ed76:	69ba      	ldr	r2, [r7, #24]
 800ed78:	429a      	cmp	r2, r3
 800ed7a:	d204      	bcs.n	800ed86 <tcp_output+0x8e>
     return tcp_send_empty_ack(pcb);
 800ed7c:	6878      	ldr	r0, [r7, #4]
 800ed7e:	f7ff ff5f 	bl	800ec40 <tcp_send_empty_ack>
 800ed82:	4603      	mov	r3, r0
 800ed84:	e19e      	b.n	800f0c4 <tcp_output+0x3cc>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ed8a:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800ed8c:	6a3b      	ldr	r3, [r7, #32]
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d007      	beq.n	800eda2 <tcp_output+0xaa>
    for (; useg->next != NULL; useg = useg->next);
 800ed92:	e002      	b.n	800ed9a <tcp_output+0xa2>
 800ed94:	6a3b      	ldr	r3, [r7, #32]
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	623b      	str	r3, [r7, #32]
 800ed9a:	6a3b      	ldr	r3, [r7, #32]
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d1f8      	bne.n	800ed94 <tcp_output+0x9c>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	3304      	adds	r3, #4
 800eda6:	4618      	mov	r0, r3
 800eda8:	f001 ffd4 	bl	8010d54 <ip4_route>
 800edac:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800edae:	697b      	ldr	r3, [r7, #20]
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d102      	bne.n	800edba <tcp_output+0xc2>
    return ERR_RTE;
 800edb4:	f06f 0303 	mvn.w	r3, #3
 800edb8:	e184      	b.n	800f0c4 <tcp_output+0x3cc>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d003      	beq.n	800edc8 <tcp_output+0xd0>
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d111      	bne.n	800edec <tcp_output+0xf4>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800edc8:	697b      	ldr	r3, [r7, #20]
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d002      	beq.n	800edd4 <tcp_output+0xdc>
 800edce:	697b      	ldr	r3, [r7, #20]
 800edd0:	3304      	adds	r3, #4
 800edd2:	e000      	b.n	800edd6 <tcp_output+0xde>
 800edd4:	2300      	movs	r3, #0
 800edd6:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800edd8:	693b      	ldr	r3, [r7, #16]
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d102      	bne.n	800ede4 <tcp_output+0xec>
      return ERR_RTE;
 800edde:	f06f 0303 	mvn.w	r3, #3
 800ede2:	e16f      	b.n	800f0c4 <tcp_output+0x3cc>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800ede4:	693b      	ldr	r3, [r7, #16]
 800ede6:	681a      	ldr	r2, [r3, #0]
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	601a      	str	r2, [r3, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
 800edec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edee:	2b00      	cmp	r3, #0
 800edf0:	f000 813e 	beq.w	800f070 <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 800edf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edf6:	68db      	ldr	r3, [r3, #12]
 800edf8:	685b      	ldr	r3, [r3, #4]
 800edfa:	4618      	mov	r0, r3
 800edfc:	f7f9 fe24 	bl	8008a48 <lwip_htonl>
 800ee00:	4602      	mov	r2, r0
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ee06:	1ad3      	subs	r3, r2, r3
 800ee08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ee0a:	8912      	ldrh	r2, [r2, #8]
 800ee0c:	4413      	add	r3, r2
  if (seg != NULL &&
 800ee0e:	69ba      	ldr	r2, [r7, #24]
 800ee10:	429a      	cmp	r2, r3
 800ee12:	f080 812d 	bcs.w	800f070 <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 800ee16:	69bb      	ldr	r3, [r7, #24]
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	f000 8129 	beq.w	800f070 <tcp_output+0x378>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ee24:	461a      	mov	r2, r3
 800ee26:	69bb      	ldr	r3, [r7, #24]
 800ee28:	4293      	cmp	r3, r2
 800ee2a:	f040 8121 	bne.w	800f070 <tcp_output+0x378>
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	f040 811c 	bne.w	800f070 <tcp_output+0x378>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	f040 812b 	bne.w	800f09a <tcp_output+0x3a2>
      pcb->persist_cnt = 0;
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	2200      	movs	r2, #0
 800ee48:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
      pcb->persist_backoff = 1;
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	2201      	movs	r2, #1
 800ee50:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
    }
    goto output_done;
 800ee54:	e121      	b.n	800f09a <tcp_output+0x3a2>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800ee56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee58:	68db      	ldr	r3, [r3, #12]
 800ee5a:	899b      	ldrh	r3, [r3, #12]
 800ee5c:	b29b      	uxth	r3, r3
 800ee5e:	4618      	mov	r0, r3
 800ee60:	f7f9 fde4 	bl	8008a2c <lwip_htons>
 800ee64:	4603      	mov	r3, r0
 800ee66:	f003 0304 	and.w	r3, r3, #4
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d006      	beq.n	800ee7c <tcp_output+0x184>
 800ee6e:	4b42      	ldr	r3, [pc, #264]	; (800ef78 <tcp_output+0x280>)
 800ee70:	f240 4246 	movw	r2, #1094	; 0x446
 800ee74:	4944      	ldr	r1, [pc, #272]	; (800ef88 <tcp_output+0x290>)
 800ee76:	4842      	ldr	r0, [pc, #264]	; (800ef80 <tcp_output+0x288>)
 800ee78:	f005 f8a0 	bl	8013fbc <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d01f      	beq.n	800eec4 <tcp_output+0x1cc>
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	7e9b      	ldrb	r3, [r3, #26]
 800ee88:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d119      	bne.n	800eec4 <tcp_output+0x1cc>
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d00b      	beq.n	800eeb0 <tcp_output+0x1b8>
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d110      	bne.n	800eec4 <tcp_output+0x1cc>
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800eea6:	891a      	ldrh	r2, [r3, #8]
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eeac:	429a      	cmp	r2, r3
 800eeae:	d209      	bcs.n	800eec4 <tcp_output+0x1cc>
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d004      	beq.n	800eec4 <tcp_output+0x1cc>
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800eec0:	2b08      	cmp	r3, #8
 800eec2:	d901      	bls.n	800eec8 <tcp_output+0x1d0>
 800eec4:	2301      	movs	r3, #1
 800eec6:	e000      	b.n	800eeca <tcp_output+0x1d2>
 800eec8:	2300      	movs	r3, #0
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d106      	bne.n	800eedc <tcp_output+0x1e4>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	7e9b      	ldrb	r3, [r3, #26]
 800eed2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	f000 80e1 	beq.w	800f09e <tcp_output+0x3a6>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	7d1b      	ldrb	r3, [r3, #20]
 800eee0:	2b02      	cmp	r3, #2
 800eee2:	d00d      	beq.n	800ef00 <tcp_output+0x208>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800eee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eee6:	68db      	ldr	r3, [r3, #12]
 800eee8:	899b      	ldrh	r3, [r3, #12]
 800eeea:	b29c      	uxth	r4, r3
 800eeec:	2010      	movs	r0, #16
 800eeee:	f7f9 fd9d 	bl	8008a2c <lwip_htons>
 800eef2:	4603      	mov	r3, r0
 800eef4:	461a      	mov	r2, r3
 800eef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eef8:	68db      	ldr	r3, [r3, #12]
 800eefa:	4322      	orrs	r2, r4
 800eefc:	b292      	uxth	r2, r2
 800eefe:	819a      	strh	r2, [r3, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
 800ef00:	697a      	ldr	r2, [r7, #20]
 800ef02:	6879      	ldr	r1, [r7, #4]
 800ef04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ef06:	f000 f8e1 	bl	800f0cc <tcp_output_segment>
 800ef0a:	4603      	mov	r3, r0
 800ef0c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800ef0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d009      	beq.n	800ef2a <tcp_output+0x232>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	7e9b      	ldrb	r3, [r3, #26]
 800ef1a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ef1e:	b2da      	uxtb	r2, r3
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	769a      	strb	r2, [r3, #26]
      return err;
 800ef24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ef28:	e0cc      	b.n	800f0c4 <tcp_output+0x3cc>
    }
    pcb->unsent = seg->next;
 800ef2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef2c:	681a      	ldr	r2, [r3, #0]
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	669a      	str	r2, [r3, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	7d1b      	ldrb	r3, [r3, #20]
 800ef36:	2b02      	cmp	r3, #2
 800ef38:	d006      	beq.n	800ef48 <tcp_output+0x250>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	7e9b      	ldrb	r3, [r3, #26]
 800ef3e:	f023 0303 	bic.w	r3, r3, #3
 800ef42:	b2da      	uxtb	r2, r3
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	769a      	strb	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800ef48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef4a:	68db      	ldr	r3, [r3, #12]
 800ef4c:	685b      	ldr	r3, [r3, #4]
 800ef4e:	4618      	mov	r0, r3
 800ef50:	f7f9 fd7a 	bl	8008a48 <lwip_htonl>
 800ef54:	4604      	mov	r4, r0
 800ef56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef58:	891b      	ldrh	r3, [r3, #8]
 800ef5a:	461d      	mov	r5, r3
 800ef5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef5e:	68db      	ldr	r3, [r3, #12]
 800ef60:	899b      	ldrh	r3, [r3, #12]
 800ef62:	b29b      	uxth	r3, r3
 800ef64:	4618      	mov	r0, r3
 800ef66:	f7f9 fd61 	bl	8008a2c <lwip_htons>
 800ef6a:	4603      	mov	r3, r0
 800ef6c:	f003 0303 	and.w	r3, r3, #3
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d00b      	beq.n	800ef8c <tcp_output+0x294>
 800ef74:	2301      	movs	r3, #1
 800ef76:	e00a      	b.n	800ef8e <tcp_output+0x296>
 800ef78:	08015ec8 	.word	0x08015ec8
 800ef7c:	08016304 	.word	0x08016304
 800ef80:	08015f64 	.word	0x08015f64
 800ef84:	20003298 	.word	0x20003298
 800ef88:	0801632c 	.word	0x0801632c
 800ef8c:	2300      	movs	r3, #0
 800ef8e:	442b      	add	r3, r5
 800ef90:	4423      	add	r3, r4
 800ef92:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ef98:	68bb      	ldr	r3, [r7, #8]
 800ef9a:	1ad3      	subs	r3, r2, r3
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	da02      	bge.n	800efa6 <tcp_output+0x2ae>
      pcb->snd_nxt = snd_nxt;
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	68ba      	ldr	r2, [r7, #8]
 800efa4:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800efa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efa8:	891b      	ldrh	r3, [r3, #8]
 800efaa:	461c      	mov	r4, r3
 800efac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efae:	68db      	ldr	r3, [r3, #12]
 800efb0:	899b      	ldrh	r3, [r3, #12]
 800efb2:	b29b      	uxth	r3, r3
 800efb4:	4618      	mov	r0, r3
 800efb6:	f7f9 fd39 	bl	8008a2c <lwip_htons>
 800efba:	4603      	mov	r3, r0
 800efbc:	f003 0303 	and.w	r3, r3, #3
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d001      	beq.n	800efc8 <tcp_output+0x2d0>
 800efc4:	2301      	movs	r3, #1
 800efc6:	e000      	b.n	800efca <tcp_output+0x2d2>
 800efc8:	2300      	movs	r3, #0
 800efca:	4423      	add	r3, r4
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d049      	beq.n	800f064 <tcp_output+0x36c>
      seg->next = NULL;
 800efd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efd2:	2200      	movs	r2, #0
 800efd4:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d105      	bne.n	800efea <tcp_output+0x2f2>
        pcb->unacked = seg;
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800efe2:	66da      	str	r2, [r3, #108]	; 0x6c
        useg = seg;
 800efe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efe6:	623b      	str	r3, [r7, #32]
 800efe8:	e03f      	b.n	800f06a <tcp_output+0x372>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800efea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efec:	68db      	ldr	r3, [r3, #12]
 800efee:	685b      	ldr	r3, [r3, #4]
 800eff0:	4618      	mov	r0, r3
 800eff2:	f7f9 fd29 	bl	8008a48 <lwip_htonl>
 800eff6:	4604      	mov	r4, r0
 800eff8:	6a3b      	ldr	r3, [r7, #32]
 800effa:	68db      	ldr	r3, [r3, #12]
 800effc:	685b      	ldr	r3, [r3, #4]
 800effe:	4618      	mov	r0, r3
 800f000:	f7f9 fd22 	bl	8008a48 <lwip_htonl>
 800f004:	4603      	mov	r3, r0
 800f006:	1ae3      	subs	r3, r4, r3
 800f008:	2b00      	cmp	r3, #0
 800f00a:	da24      	bge.n	800f056 <tcp_output+0x35e>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	336c      	adds	r3, #108	; 0x6c
 800f010:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800f012:	e002      	b.n	800f01a <tcp_output+0x322>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 800f014:	69fb      	ldr	r3, [r7, #28]
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800f01a:	69fb      	ldr	r3, [r7, #28]
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d011      	beq.n	800f046 <tcp_output+0x34e>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800f022:	69fb      	ldr	r3, [r7, #28]
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	68db      	ldr	r3, [r3, #12]
 800f028:	685b      	ldr	r3, [r3, #4]
 800f02a:	4618      	mov	r0, r3
 800f02c:	f7f9 fd0c 	bl	8008a48 <lwip_htonl>
 800f030:	4604      	mov	r4, r0
 800f032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f034:	68db      	ldr	r3, [r3, #12]
 800f036:	685b      	ldr	r3, [r3, #4]
 800f038:	4618      	mov	r0, r3
 800f03a:	f7f9 fd05 	bl	8008a48 <lwip_htonl>
 800f03e:	4603      	mov	r3, r0
 800f040:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800f042:	2b00      	cmp	r3, #0
 800f044:	dbe6      	blt.n	800f014 <tcp_output+0x31c>
          }
          seg->next = (*cur_seg);
 800f046:	69fb      	ldr	r3, [r7, #28]
 800f048:	681a      	ldr	r2, [r3, #0]
 800f04a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f04c:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800f04e:	69fb      	ldr	r3, [r7, #28]
 800f050:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f052:	601a      	str	r2, [r3, #0]
 800f054:	e009      	b.n	800f06a <tcp_output+0x372>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800f056:	6a3b      	ldr	r3, [r7, #32]
 800f058:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f05a:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800f05c:	6a3b      	ldr	r3, [r7, #32]
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	623b      	str	r3, [r7, #32]
 800f062:	e002      	b.n	800f06a <tcp_output+0x372>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800f064:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f066:	f7fc f9a8 	bl	800b3ba <tcp_seg_free>
    }
    seg = pcb->unsent;
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f06e:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800f070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f072:	2b00      	cmp	r3, #0
 800f074:	d015      	beq.n	800f0a2 <tcp_output+0x3aa>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800f076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f078:	68db      	ldr	r3, [r3, #12]
 800f07a:	685b      	ldr	r3, [r3, #4]
 800f07c:	4618      	mov	r0, r3
 800f07e:	f7f9 fce3 	bl	8008a48 <lwip_htonl>
 800f082:	4602      	mov	r2, r0
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f088:	1ad3      	subs	r3, r2, r3
 800f08a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f08c:	8912      	ldrh	r2, [r2, #8]
 800f08e:	4413      	add	r3, r2
  while (seg != NULL &&
 800f090:	69ba      	ldr	r2, [r7, #24]
 800f092:	429a      	cmp	r2, r3
 800f094:	f4bf aedf 	bcs.w	800ee56 <tcp_output+0x15e>
  }
output_done:
 800f098:	e003      	b.n	800f0a2 <tcp_output+0x3aa>
    goto output_done;
 800f09a:	bf00      	nop
 800f09c:	e002      	b.n	800f0a4 <tcp_output+0x3ac>
      break;
 800f09e:	bf00      	nop
 800f0a0:	e000      	b.n	800f0a4 <tcp_output+0x3ac>
output_done:
 800f0a2:	bf00      	nop
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d103      	bne.n	800f0b4 <tcp_output+0x3bc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	2200      	movs	r2, #0
 800f0b0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	7e9b      	ldrb	r3, [r3, #26]
 800f0b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f0bc:	b2da      	uxtb	r2, r3
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	769a      	strb	r2, [r3, #26]
  return ERR_OK;
 800f0c2:	2300      	movs	r3, #0
}
 800f0c4:	4618      	mov	r0, r3
 800f0c6:	3728      	adds	r7, #40	; 0x28
 800f0c8:	46bd      	mov	sp, r7
 800f0ca:	bdb0      	pop	{r4, r5, r7, pc}

0800f0cc <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800f0cc:	b5b0      	push	{r4, r5, r7, lr}
 800f0ce:	b08c      	sub	sp, #48	; 0x30
 800f0d0:	af04      	add	r7, sp, #16
 800f0d2:	60f8      	str	r0, [r7, #12]
 800f0d4:	60b9      	str	r1, [r7, #8]
 800f0d6:	607a      	str	r2, [r7, #4]
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	685b      	ldr	r3, [r3, #4]
 800f0dc:	89db      	ldrh	r3, [r3, #14]
 800f0de:	2b01      	cmp	r3, #1
 800f0e0:	d001      	beq.n	800f0e6 <tcp_output_segment+0x1a>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 800f0e2:	2300      	movs	r3, #0
 800f0e4:	e08b      	b.n	800f1fe <tcp_output_segment+0x132>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800f0e6:	68bb      	ldr	r3, [r7, #8]
 800f0e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	68dc      	ldr	r4, [r3, #12]
 800f0ee:	4610      	mov	r0, r2
 800f0f0:	f7f9 fcaa 	bl	8008a48 <lwip_htonl>
 800f0f4:	4603      	mov	r3, r0
 800f0f6:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800f0f8:	68bb      	ldr	r3, [r7, #8]
 800f0fa:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	68dc      	ldr	r4, [r3, #12]
 800f100:	4610      	mov	r0, r2
 800f102:	f7f9 fc93 	bl	8008a2c <lwip_htons>
 800f106:	4603      	mov	r3, r0
 800f108:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800f10a:	68bb      	ldr	r3, [r7, #8]
 800f10c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f10e:	68ba      	ldr	r2, [r7, #8]
 800f110:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800f112:	441a      	add	r2, r3
 800f114:	68bb      	ldr	r3, [r7, #8]
 800f116:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	68db      	ldr	r3, [r3, #12]
 800f11c:	3314      	adds	r3, #20
 800f11e:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	7a9b      	ldrb	r3, [r3, #10]
 800f124:	f003 0301 	and.w	r3, r3, #1
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d014      	beq.n	800f156 <tcp_output_segment+0x8a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 800f12c:	68bb      	ldr	r3, [r7, #8]
 800f12e:	3304      	adds	r3, #4
 800f130:	4619      	mov	r1, r3
 800f132:	f44f 7006 	mov.w	r0, #536	; 0x218
 800f136:	f7fc fc73 	bl	800ba20 <tcp_eff_send_mss_impl>
 800f13a:	4603      	mov	r3, r0
 800f13c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800f13e:	8b7b      	ldrh	r3, [r7, #26]
 800f140:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800f144:	4618      	mov	r0, r3
 800f146:	f7f9 fc7f 	bl	8008a48 <lwip_htonl>
 800f14a:	4602      	mov	r2, r0
 800f14c:	69fb      	ldr	r3, [r7, #28]
 800f14e:	601a      	str	r2, [r3, #0]
    opts += 1;
 800f150:	69fb      	ldr	r3, [r7, #28]
 800f152:	3304      	adds	r3, #4
 800f154:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800f156:	68bb      	ldr	r3, [r7, #8]
 800f158:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	da02      	bge.n	800f166 <tcp_output_segment+0x9a>
    pcb->rtime = 0;
 800f160:	68bb      	ldr	r3, [r7, #8]
 800f162:	2200      	movs	r2, #0
 800f164:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800f166:	68bb      	ldr	r3, [r7, #8]
 800f168:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d10c      	bne.n	800f188 <tcp_output_segment+0xbc>
    pcb->rttest = tcp_ticks;
 800f16e:	4b26      	ldr	r3, [pc, #152]	; (800f208 <tcp_output_segment+0x13c>)
 800f170:	681a      	ldr	r2, [r3, #0]
 800f172:	68bb      	ldr	r3, [r7, #8]
 800f174:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	68db      	ldr	r3, [r3, #12]
 800f17a:	685b      	ldr	r3, [r3, #4]
 800f17c:	4618      	mov	r0, r3
 800f17e:	f7f9 fc63 	bl	8008a48 <lwip_htonl>
 800f182:	4602      	mov	r2, r0
 800f184:	68bb      	ldr	r3, [r7, #8]
 800f186:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800f188:	68fb      	ldr	r3, [r7, #12]
 800f18a:	68db      	ldr	r3, [r3, #12]
 800f18c:	461a      	mov	r2, r3
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	685b      	ldr	r3, [r3, #4]
 800f192:	685b      	ldr	r3, [r3, #4]
 800f194:	1ad3      	subs	r3, r2, r3
 800f196:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	685b      	ldr	r3, [r3, #4]
 800f19c:	8959      	ldrh	r1, [r3, #10]
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	685b      	ldr	r3, [r3, #4]
 800f1a2:	8b3a      	ldrh	r2, [r7, #24]
 800f1a4:	1a8a      	subs	r2, r1, r2
 800f1a6:	b292      	uxth	r2, r2
 800f1a8:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	685b      	ldr	r3, [r3, #4]
 800f1ae:	8919      	ldrh	r1, [r3, #8]
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	685b      	ldr	r3, [r3, #4]
 800f1b4:	8b3a      	ldrh	r2, [r7, #24]
 800f1b6:	1a8a      	subs	r2, r1, r2
 800f1b8:	b292      	uxth	r2, r2
 800f1ba:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	685b      	ldr	r3, [r3, #4]
 800f1c0:	68fa      	ldr	r2, [r7, #12]
 800f1c2:	68d2      	ldr	r2, [r2, #12]
 800f1c4:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	68db      	ldr	r3, [r3, #12]
 800f1ca:	2200      	movs	r2, #0
 800f1cc:	741a      	strb	r2, [r3, #16]
 800f1ce:	2200      	movs	r2, #0
 800f1d0:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	6858      	ldr	r0, [r3, #4]
 800f1d6:	68b9      	ldr	r1, [r7, #8]
 800f1d8:	68bb      	ldr	r3, [r7, #8]
 800f1da:	1d1c      	adds	r4, r3, #4
 800f1dc:	68bb      	ldr	r3, [r7, #8]
 800f1de:	7a9d      	ldrb	r5, [r3, #10]
 800f1e0:	68bb      	ldr	r3, [r7, #8]
 800f1e2:	7a5b      	ldrb	r3, [r3, #9]
 800f1e4:	687a      	ldr	r2, [r7, #4]
 800f1e6:	9202      	str	r2, [sp, #8]
 800f1e8:	2206      	movs	r2, #6
 800f1ea:	9201      	str	r2, [sp, #4]
 800f1ec:	9300      	str	r3, [sp, #0]
 800f1ee:	462b      	mov	r3, r5
 800f1f0:	4622      	mov	r2, r4
 800f1f2:	f001 ff57 	bl	80110a4 <ip4_output_if>
 800f1f6:	4603      	mov	r3, r0
 800f1f8:	75fb      	strb	r3, [r7, #23]
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
 800f1fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f1fe:	4618      	mov	r0, r3
 800f200:	3720      	adds	r7, #32
 800f202:	46bd      	mov	sp, r7
 800f204:	bdb0      	pop	{r4, r5, r7, pc}
 800f206:	bf00      	nop
 800f208:	20003288 	.word	0x20003288

0800f20c <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 800f20c:	b580      	push	{r7, lr}
 800f20e:	b08c      	sub	sp, #48	; 0x30
 800f210:	af04      	add	r7, sp, #16
 800f212:	60f8      	str	r0, [r7, #12]
 800f214:	60b9      	str	r1, [r7, #8]
 800f216:	607a      	str	r2, [r7, #4]
 800f218:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 800f21a:	2200      	movs	r2, #0
 800f21c:	2114      	movs	r1, #20
 800f21e:	2001      	movs	r0, #1
 800f220:	f7fa fa72 	bl	8009708 <pbuf_alloc>
 800f224:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 800f226:	69fb      	ldr	r3, [r7, #28]
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d05b      	beq.n	800f2e4 <tcp_rst+0xd8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800f22c:	69fb      	ldr	r3, [r7, #28]
 800f22e:	895b      	ldrh	r3, [r3, #10]
 800f230:	2b13      	cmp	r3, #19
 800f232:	d806      	bhi.n	800f242 <tcp_rst+0x36>
 800f234:	4b2d      	ldr	r3, [pc, #180]	; (800f2ec <tcp_rst+0xe0>)
 800f236:	f240 524d 	movw	r2, #1357	; 0x54d
 800f23a:	492d      	ldr	r1, [pc, #180]	; (800f2f0 <tcp_rst+0xe4>)
 800f23c:	482d      	ldr	r0, [pc, #180]	; (800f2f4 <tcp_rst+0xe8>)
 800f23e:	f004 febd 	bl	8013fbc <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 800f242:	69fb      	ldr	r3, [r7, #28]
 800f244:	685b      	ldr	r3, [r3, #4]
 800f246:	61bb      	str	r3, [r7, #24]
  tcphdr->src = lwip_htons(local_port);
 800f248:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f24a:	4618      	mov	r0, r3
 800f24c:	f7f9 fbee 	bl	8008a2c <lwip_htons>
 800f250:	4603      	mov	r3, r0
 800f252:	461a      	mov	r2, r3
 800f254:	69bb      	ldr	r3, [r7, #24]
 800f256:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = lwip_htons(remote_port);
 800f258:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f25a:	4618      	mov	r0, r3
 800f25c:	f7f9 fbe6 	bl	8008a2c <lwip_htons>
 800f260:	4603      	mov	r3, r0
 800f262:	461a      	mov	r2, r3
 800f264:	69bb      	ldr	r3, [r7, #24]
 800f266:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 800f268:	68f8      	ldr	r0, [r7, #12]
 800f26a:	f7f9 fbed 	bl	8008a48 <lwip_htonl>
 800f26e:	4602      	mov	r2, r0
 800f270:	69bb      	ldr	r3, [r7, #24]
 800f272:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 800f274:	68b8      	ldr	r0, [r7, #8]
 800f276:	f7f9 fbe7 	bl	8008a48 <lwip_htonl>
 800f27a:	4602      	mov	r2, r0
 800f27c:	69bb      	ldr	r3, [r7, #24]
 800f27e:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 800f280:	f245 0014 	movw	r0, #20500	; 0x5014
 800f284:	f7f9 fbd2 	bl	8008a2c <lwip_htons>
 800f288:	4603      	mov	r3, r0
 800f28a:	461a      	mov	r2, r3
 800f28c:	69bb      	ldr	r3, [r7, #24]
 800f28e:	819a      	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 800f290:	69bb      	ldr	r3, [r7, #24]
 800f292:	2200      	movs	r2, #0
 800f294:	f042 0208 	orr.w	r2, r2, #8
 800f298:	739a      	strb	r2, [r3, #14]
 800f29a:	2200      	movs	r2, #0
 800f29c:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800f2a0:	73da      	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
 800f2a2:	69bb      	ldr	r3, [r7, #24]
 800f2a4:	2200      	movs	r2, #0
 800f2a6:	741a      	strb	r2, [r3, #16]
 800f2a8:	2200      	movs	r2, #0
 800f2aa:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
 800f2ac:	69bb      	ldr	r3, [r7, #24]
 800f2ae:	2200      	movs	r2, #0
 800f2b0:	749a      	strb	r2, [r3, #18]
 800f2b2:	2200      	movs	r2, #0
 800f2b4:	74da      	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 800f2b6:	6838      	ldr	r0, [r7, #0]
 800f2b8:	f001 fd4c 	bl	8010d54 <ip4_route>
 800f2bc:	6178      	str	r0, [r7, #20]
  if (netif != NULL) {
 800f2be:	697b      	ldr	r3, [r7, #20]
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d00b      	beq.n	800f2dc <tcp_rst+0xd0>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 800f2c4:	697b      	ldr	r3, [r7, #20]
 800f2c6:	9302      	str	r3, [sp, #8]
 800f2c8:	2306      	movs	r3, #6
 800f2ca:	9301      	str	r3, [sp, #4]
 800f2cc:	2300      	movs	r3, #0
 800f2ce:	9300      	str	r3, [sp, #0]
 800f2d0:	23ff      	movs	r3, #255	; 0xff
 800f2d2:	683a      	ldr	r2, [r7, #0]
 800f2d4:	6879      	ldr	r1, [r7, #4]
 800f2d6:	69f8      	ldr	r0, [r7, #28]
 800f2d8:	f001 fee4 	bl	80110a4 <ip4_output_if>
  }
  pbuf_free(p);
 800f2dc:	69f8      	ldr	r0, [r7, #28]
 800f2de:	f7fa fd85 	bl	8009dec <pbuf_free>
 800f2e2:	e000      	b.n	800f2e6 <tcp_rst+0xda>
    return;
 800f2e4:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800f2e6:	3720      	adds	r7, #32
 800f2e8:	46bd      	mov	sp, r7
 800f2ea:	bd80      	pop	{r7, pc}
 800f2ec:	08015ec8 	.word	0x08015ec8
 800f2f0:	08015f34 	.word	0x08015f34
 800f2f4:	08015f64 	.word	0x08015f64

0800f2f8 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800f2f8:	b580      	push	{r7, lr}
 800f2fa:	b084      	sub	sp, #16
 800f2fc:	af00      	add	r7, sp, #0
 800f2fe:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f304:	2b00      	cmp	r3, #0
 800f306:	d029      	beq.n	800f35c <tcp_rexmit_rto+0x64>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f30c:	60fb      	str	r3, [r7, #12]
 800f30e:	e002      	b.n	800f316 <tcp_rexmit_rto+0x1e>
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	60fb      	str	r3, [r7, #12]
 800f316:	68fb      	ldr	r3, [r7, #12]
 800f318:	681b      	ldr	r3, [r3, #0]
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d1f8      	bne.n	800f310 <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	669a      	str	r2, [r3, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	2200      	movs	r2, #0
 800f332:	66da      	str	r2, [r3, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f33a:	2bff      	cmp	r3, #255	; 0xff
 800f33c:	d007      	beq.n	800f34e <tcp_rexmit_rto+0x56>
    ++pcb->nrtx;
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f344:	3301      	adds	r3, #1
 800f346:	b2da      	uxtb	r2, r3
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	2200      	movs	r2, #0
 800f352:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 800f354:	6878      	ldr	r0, [r7, #4]
 800f356:	f7ff fccf 	bl	800ecf8 <tcp_output>
 800f35a:	e000      	b.n	800f35e <tcp_rexmit_rto+0x66>
    return;
 800f35c:	bf00      	nop
}
 800f35e:	3710      	adds	r7, #16
 800f360:	46bd      	mov	sp, r7
 800f362:	bd80      	pop	{r7, pc}

0800f364 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 800f364:	b590      	push	{r4, r7, lr}
 800f366:	b085      	sub	sp, #20
 800f368:	af00      	add	r7, sp, #0
 800f36a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f370:	2b00      	cmp	r3, #0
 800f372:	d043      	beq.n	800f3fc <tcp_rexmit+0x98>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f378:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
 800f37a:	68bb      	ldr	r3, [r7, #8]
 800f37c:	681a      	ldr	r2, [r3, #0]
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	66da      	str	r2, [r3, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	3368      	adds	r3, #104	; 0x68
 800f386:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800f388:	e002      	b.n	800f390 <tcp_rexmit+0x2c>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	681b      	ldr	r3, [r3, #0]
 800f38e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	2b00      	cmp	r3, #0
 800f396:	d011      	beq.n	800f3bc <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	68db      	ldr	r3, [r3, #12]
 800f39e:	685b      	ldr	r3, [r3, #4]
 800f3a0:	4618      	mov	r0, r3
 800f3a2:	f7f9 fb51 	bl	8008a48 <lwip_htonl>
 800f3a6:	4604      	mov	r4, r0
 800f3a8:	68bb      	ldr	r3, [r7, #8]
 800f3aa:	68db      	ldr	r3, [r3, #12]
 800f3ac:	685b      	ldr	r3, [r3, #4]
 800f3ae:	4618      	mov	r0, r3
 800f3b0:	f7f9 fb4a 	bl	8008a48 <lwip_htonl>
 800f3b4:	4603      	mov	r3, r0
 800f3b6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	dbe6      	blt.n	800f38a <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	681a      	ldr	r2, [r3, #0]
 800f3c0:	68bb      	ldr	r3, [r7, #8]
 800f3c2:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	68ba      	ldr	r2, [r7, #8]
 800f3c8:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800f3ca:	68bb      	ldr	r3, [r7, #8]
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d103      	bne.n	800f3da <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	2200      	movs	r2, #0
 800f3d6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f3e0:	2bff      	cmp	r3, #255	; 0xff
 800f3e2:	d007      	beq.n	800f3f4 <tcp_rexmit+0x90>
    ++pcb->nrtx;
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f3ea:	3301      	adds	r3, #1
 800f3ec:	b2da      	uxtb	r2, r3
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	2200      	movs	r2, #0
 800f3f8:	635a      	str	r2, [r3, #52]	; 0x34
 800f3fa:	e000      	b.n	800f3fe <tcp_rexmit+0x9a>
    return;
 800f3fc:	bf00      	nop

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 800f3fe:	3714      	adds	r7, #20
 800f400:	46bd      	mov	sp, r7
 800f402:	bd90      	pop	{r4, r7, pc}

0800f404 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800f404:	b580      	push	{r7, lr}
 800f406:	b082      	sub	sp, #8
 800f408:	af00      	add	r7, sp, #0
 800f40a:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f410:	2b00      	cmp	r3, #0
 800f412:	d04c      	beq.n	800f4ae <tcp_rexmit_fast+0xaa>
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	7e9b      	ldrb	r3, [r3, #26]
 800f418:	f003 0304 	and.w	r3, r3, #4
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d146      	bne.n	800f4ae <tcp_rexmit_fast+0xaa>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 800f420:	6878      	ldr	r0, [r7, #4]
 800f422:	f7ff ff9f 	bl	800f364 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f432:	429a      	cmp	r2, r3
 800f434:	d208      	bcs.n	800f448 <tcp_rexmit_fast+0x44>
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	da00      	bge.n	800f442 <tcp_rexmit_fast+0x3e>
 800f440:	3301      	adds	r3, #1
 800f442:	105b      	asrs	r3, r3, #1
 800f444:	b29b      	uxth	r3, r3
 800f446:	e007      	b.n	800f458 <tcp_rexmit_fast+0x54>
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f44e:	2b00      	cmp	r3, #0
 800f450:	da00      	bge.n	800f454 <tcp_rexmit_fast+0x50>
 800f452:	3301      	adds	r3, #1
 800f454:	105b      	asrs	r3, r3, #1
 800f456:	b29b      	uxth	r3, r3
 800f458:	687a      	ldr	r2, [r7, #4]
 800f45a:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800f464:	461a      	mov	r2, r3
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f46a:	005b      	lsls	r3, r3, #1
 800f46c:	429a      	cmp	r2, r3
 800f46e:	d206      	bcs.n	800f47e <tcp_rexmit_fast+0x7a>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f474:	005b      	lsls	r3, r3, #1
 800f476:	b29a      	uxth	r2, r3
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f488:	4619      	mov	r1, r3
 800f48a:	0049      	lsls	r1, r1, #1
 800f48c:	440b      	add	r3, r1
 800f48e:	b29b      	uxth	r3, r3
 800f490:	4413      	add	r3, r2
 800f492:	b29a      	uxth	r2, r3
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->flags |= TF_INFR;
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	7e9b      	ldrb	r3, [r3, #26]
 800f49e:	f043 0304 	orr.w	r3, r3, #4
 800f4a2:	b2da      	uxtb	r2, r3
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	769a      	strb	r2, [r3, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	2200      	movs	r2, #0
 800f4ac:	861a      	strh	r2, [r3, #48]	; 0x30
  }
}
 800f4ae:	bf00      	nop
 800f4b0:	3708      	adds	r7, #8
 800f4b2:	46bd      	mov	sp, r7
 800f4b4:	bd80      	pop	{r7, pc}

0800f4b6 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800f4b6:	b580      	push	{r7, lr}
 800f4b8:	b08a      	sub	sp, #40	; 0x28
 800f4ba:	af04      	add	r7, sp, #16
 800f4bc:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f4c2:	3b01      	subs	r3, #1
 800f4c4:	4618      	mov	r0, r3
 800f4c6:	f7f9 fabf 	bl	8008a48 <lwip_htonl>
 800f4ca:	4603      	mov	r3, r0
 800f4cc:	2200      	movs	r2, #0
 800f4ce:	2100      	movs	r1, #0
 800f4d0:	6878      	ldr	r0, [r7, #4]
 800f4d2:	f7fe fd43 	bl	800df5c <tcp_output_alloc_header>
 800f4d6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800f4d8:	693b      	ldr	r3, [r7, #16]
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d102      	bne.n	800f4e4 <tcp_keepalive+0x2e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800f4de:	f04f 33ff 	mov.w	r3, #4294967295
 800f4e2:	e021      	b.n	800f528 <tcp_keepalive+0x72>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	3304      	adds	r3, #4
 800f4e8:	4618      	mov	r0, r3
 800f4ea:	f001 fc33 	bl	8010d54 <ip4_route>
 800f4ee:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d102      	bne.n	800f4fc <tcp_keepalive+0x46>
    err = ERR_RTE;
 800f4f6:	23fc      	movs	r3, #252	; 0xfc
 800f4f8:	75fb      	strb	r3, [r7, #23]
 800f4fa:	e010      	b.n	800f51e <tcp_keepalive+0x68>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 800f4fc:	6879      	ldr	r1, [r7, #4]
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	1d1a      	adds	r2, r3, #4
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	7a98      	ldrb	r0, [r3, #10]
 800f506:	68fb      	ldr	r3, [r7, #12]
 800f508:	9302      	str	r3, [sp, #8]
 800f50a:	2306      	movs	r3, #6
 800f50c:	9301      	str	r3, [sp, #4]
 800f50e:	2300      	movs	r3, #0
 800f510:	9300      	str	r3, [sp, #0]
 800f512:	4603      	mov	r3, r0
 800f514:	6938      	ldr	r0, [r7, #16]
 800f516:	f001 fdc5 	bl	80110a4 <ip4_output_if>
 800f51a:	4603      	mov	r3, r0
 800f51c:	75fb      	strb	r3, [r7, #23]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 800f51e:	6938      	ldr	r0, [r7, #16]
 800f520:	f7fa fc64 	bl	8009dec <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800f524:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f528:	4618      	mov	r0, r3
 800f52a:	3718      	adds	r7, #24
 800f52c:	46bd      	mov	sp, r7
 800f52e:	bd80      	pop	{r7, pc}

0800f530 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800f530:	b590      	push	{r4, r7, lr}
 800f532:	b08f      	sub	sp, #60	; 0x3c
 800f534:	af04      	add	r7, sp, #16
 800f536:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f53c:	623b      	str	r3, [r7, #32]

  if (seg == NULL) {
 800f53e:	6a3b      	ldr	r3, [r7, #32]
 800f540:	2b00      	cmp	r3, #0
 800f542:	d102      	bne.n	800f54a <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f548:	623b      	str	r3, [r7, #32]
  }
  if (seg == NULL) {
 800f54a:	6a3b      	ldr	r3, [r7, #32]
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d101      	bne.n	800f554 <tcp_zero_window_probe+0x24>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
 800f550:	2300      	movs	r3, #0
 800f552:	e085      	b.n	800f660 <tcp_zero_window_probe+0x130>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800f554:	6a3b      	ldr	r3, [r7, #32]
 800f556:	68db      	ldr	r3, [r3, #12]
 800f558:	899b      	ldrh	r3, [r3, #12]
 800f55a:	b29b      	uxth	r3, r3
 800f55c:	4618      	mov	r0, r3
 800f55e:	f7f9 fa65 	bl	8008a2c <lwip_htons>
 800f562:	4603      	mov	r3, r0
 800f564:	f003 0301 	and.w	r3, r3, #1
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d005      	beq.n	800f578 <tcp_zero_window_probe+0x48>
 800f56c:	6a3b      	ldr	r3, [r7, #32]
 800f56e:	891b      	ldrh	r3, [r3, #8]
 800f570:	2b00      	cmp	r3, #0
 800f572:	d101      	bne.n	800f578 <tcp_zero_window_probe+0x48>
 800f574:	2301      	movs	r3, #1
 800f576:	e000      	b.n	800f57a <tcp_zero_window_probe+0x4a>
 800f578:	2300      	movs	r3, #0
 800f57a:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800f57c:	7ffb      	ldrb	r3, [r7, #31]
 800f57e:	2b00      	cmp	r3, #0
 800f580:	bf0c      	ite	eq
 800f582:	2301      	moveq	r3, #1
 800f584:	2300      	movne	r3, #0
 800f586:	b2db      	uxtb	r3, r3
 800f588:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 800f58a:	6a3b      	ldr	r3, [r7, #32]
 800f58c:	68db      	ldr	r3, [r3, #12]
 800f58e:	685b      	ldr	r3, [r3, #4]
 800f590:	8bba      	ldrh	r2, [r7, #28]
 800f592:	2100      	movs	r1, #0
 800f594:	6878      	ldr	r0, [r7, #4]
 800f596:	f7fe fce1 	bl	800df5c <tcp_output_alloc_header>
 800f59a:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800f59c:	69bb      	ldr	r3, [r7, #24]
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d102      	bne.n	800f5a8 <tcp_zero_window_probe+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800f5a2:	f04f 33ff 	mov.w	r3, #4294967295
 800f5a6:	e05b      	b.n	800f660 <tcp_zero_window_probe+0x130>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800f5a8:	69bb      	ldr	r3, [r7, #24]
 800f5aa:	685b      	ldr	r3, [r3, #4]
 800f5ac:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800f5ae:	7ffb      	ldrb	r3, [r7, #31]
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d00e      	beq.n	800f5d2 <tcp_zero_window_probe+0xa2>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800f5b4:	697b      	ldr	r3, [r7, #20]
 800f5b6:	899b      	ldrh	r3, [r3, #12]
 800f5b8:	b29b      	uxth	r3, r3
 800f5ba:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f5be:	b29c      	uxth	r4, r3
 800f5c0:	2011      	movs	r0, #17
 800f5c2:	f7f9 fa33 	bl	8008a2c <lwip_htons>
 800f5c6:	4603      	mov	r3, r0
 800f5c8:	4323      	orrs	r3, r4
 800f5ca:	b29a      	uxth	r2, r3
 800f5cc:	697b      	ldr	r3, [r7, #20]
 800f5ce:	819a      	strh	r2, [r3, #12]
 800f5d0:	e010      	b.n	800f5f4 <tcp_zero_window_probe+0xc4>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800f5d2:	69bb      	ldr	r3, [r7, #24]
 800f5d4:	685b      	ldr	r3, [r3, #4]
 800f5d6:	3314      	adds	r3, #20
 800f5d8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800f5da:	6a3b      	ldr	r3, [r7, #32]
 800f5dc:	6858      	ldr	r0, [r3, #4]
 800f5de:	6a3b      	ldr	r3, [r7, #32]
 800f5e0:	685b      	ldr	r3, [r3, #4]
 800f5e2:	891a      	ldrh	r2, [r3, #8]
 800f5e4:	6a3b      	ldr	r3, [r7, #32]
 800f5e6:	891b      	ldrh	r3, [r3, #8]
 800f5e8:	1ad3      	subs	r3, r2, r3
 800f5ea:	b29b      	uxth	r3, r3
 800f5ec:	2201      	movs	r2, #1
 800f5ee:	6939      	ldr	r1, [r7, #16]
 800f5f0:	f7fa fdfc 	bl	800a1ec <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800f5f4:	6a3b      	ldr	r3, [r7, #32]
 800f5f6:	68db      	ldr	r3, [r3, #12]
 800f5f8:	685b      	ldr	r3, [r3, #4]
 800f5fa:	4618      	mov	r0, r3
 800f5fc:	f7f9 fa24 	bl	8008a48 <lwip_htonl>
 800f600:	4603      	mov	r3, r0
 800f602:	3301      	adds	r3, #1
 800f604:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	1ad3      	subs	r3, r2, r3
 800f60e:	2b00      	cmp	r3, #0
 800f610:	da02      	bge.n	800f618 <tcp_zero_window_probe+0xe8>
    pcb->snd_nxt = snd_nxt;
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	68fa      	ldr	r2, [r7, #12]
 800f616:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	3304      	adds	r3, #4
 800f61c:	4618      	mov	r0, r3
 800f61e:	f001 fb99 	bl	8010d54 <ip4_route>
 800f622:	60b8      	str	r0, [r7, #8]
  if (netif == NULL) {
 800f624:	68bb      	ldr	r3, [r7, #8]
 800f626:	2b00      	cmp	r3, #0
 800f628:	d103      	bne.n	800f632 <tcp_zero_window_probe+0x102>
    err = ERR_RTE;
 800f62a:	23fc      	movs	r3, #252	; 0xfc
 800f62c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f630:	e011      	b.n	800f656 <tcp_zero_window_probe+0x126>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800f632:	6879      	ldr	r1, [r7, #4]
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	1d1a      	adds	r2, r3, #4
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	7a98      	ldrb	r0, [r3, #10]
 800f63c:	68bb      	ldr	r3, [r7, #8]
 800f63e:	9302      	str	r3, [sp, #8]
 800f640:	2306      	movs	r3, #6
 800f642:	9301      	str	r3, [sp, #4]
 800f644:	2300      	movs	r3, #0
 800f646:	9300      	str	r3, [sp, #0]
 800f648:	4603      	mov	r3, r0
 800f64a:	69b8      	ldr	r0, [r7, #24]
 800f64c:	f001 fd2a 	bl	80110a4 <ip4_output_if>
 800f650:	4603      	mov	r3, r0
 800f652:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 800f656:	69b8      	ldr	r0, [r7, #24]
 800f658:	f7fa fbc8 	bl	8009dec <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800f65c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800f660:	4618      	mov	r0, r3
 800f662:	372c      	adds	r7, #44	; 0x2c
 800f664:	46bd      	mov	sp, r7
 800f666:	bd90      	pop	{r4, r7, pc}

0800f668 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800f668:	b580      	push	{r7, lr}
 800f66a:	b082      	sub	sp, #8
 800f66c:	af00      	add	r7, sp, #0
 800f66e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800f670:	f7fa fe3e 	bl	800a2f0 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800f674:	4b0a      	ldr	r3, [pc, #40]	; (800f6a0 <tcpip_tcp_timer+0x38>)
 800f676:	681b      	ldr	r3, [r3, #0]
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d103      	bne.n	800f684 <tcpip_tcp_timer+0x1c>
 800f67c:	4b09      	ldr	r3, [pc, #36]	; (800f6a4 <tcpip_tcp_timer+0x3c>)
 800f67e:	681b      	ldr	r3, [r3, #0]
 800f680:	2b00      	cmp	r3, #0
 800f682:	d005      	beq.n	800f690 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800f684:	2200      	movs	r2, #0
 800f686:	4908      	ldr	r1, [pc, #32]	; (800f6a8 <tcpip_tcp_timer+0x40>)
 800f688:	20fa      	movs	r0, #250	; 0xfa
 800f68a:	f000 f86f 	bl	800f76c <sys_timeout>
 800f68e:	e002      	b.n	800f696 <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800f690:	4b06      	ldr	r3, [pc, #24]	; (800f6ac <tcpip_tcp_timer+0x44>)
 800f692:	2200      	movs	r2, #0
 800f694:	601a      	str	r2, [r3, #0]
  }
}
 800f696:	bf00      	nop
 800f698:	3708      	adds	r7, #8
 800f69a:	46bd      	mov	sp, r7
 800f69c:	bd80      	pop	{r7, pc}
 800f69e:	bf00      	nop
 800f6a0:	20003284 	.word	0x20003284
 800f6a4:	20003294 	.word	0x20003294
 800f6a8:	0800f669 	.word	0x0800f669
 800f6ac:	20000290 	.word	0x20000290

0800f6b0 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800f6b0:	b580      	push	{r7, lr}
 800f6b2:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800f6b4:	4b0a      	ldr	r3, [pc, #40]	; (800f6e0 <tcp_timer_needed+0x30>)
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	d10f      	bne.n	800f6dc <tcp_timer_needed+0x2c>
 800f6bc:	4b09      	ldr	r3, [pc, #36]	; (800f6e4 <tcp_timer_needed+0x34>)
 800f6be:	681b      	ldr	r3, [r3, #0]
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	d103      	bne.n	800f6cc <tcp_timer_needed+0x1c>
 800f6c4:	4b08      	ldr	r3, [pc, #32]	; (800f6e8 <tcp_timer_needed+0x38>)
 800f6c6:	681b      	ldr	r3, [r3, #0]
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	d007      	beq.n	800f6dc <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800f6cc:	4b04      	ldr	r3, [pc, #16]	; (800f6e0 <tcp_timer_needed+0x30>)
 800f6ce:	2201      	movs	r2, #1
 800f6d0:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800f6d2:	2200      	movs	r2, #0
 800f6d4:	4905      	ldr	r1, [pc, #20]	; (800f6ec <tcp_timer_needed+0x3c>)
 800f6d6:	20fa      	movs	r0, #250	; 0xfa
 800f6d8:	f000 f848 	bl	800f76c <sys_timeout>
  }
}
 800f6dc:	bf00      	nop
 800f6de:	bd80      	pop	{r7, pc}
 800f6e0:	20000290 	.word	0x20000290
 800f6e4:	20003284 	.word	0x20003284
 800f6e8:	20003294 	.word	0x20003294
 800f6ec:	0800f669 	.word	0x0800f669

0800f6f0 <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 800f6f0:	b580      	push	{r7, lr}
 800f6f2:	b084      	sub	sp, #16
 800f6f4:	af00      	add	r7, sp, #0
 800f6f6:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800f6fc:	68fb      	ldr	r3, [r7, #12]
 800f6fe:	685b      	ldr	r3, [r3, #4]
 800f700:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 800f702:	68fb      	ldr	r3, [r7, #12]
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	687a      	ldr	r2, [r7, #4]
 800f708:	4903      	ldr	r1, [pc, #12]	; (800f718 <cyclic_timer+0x28>)
 800f70a:	4618      	mov	r0, r3
 800f70c:	f000 f82e 	bl	800f76c <sys_timeout>
}
 800f710:	bf00      	nop
 800f712:	3710      	adds	r7, #16
 800f714:	46bd      	mov	sp, r7
 800f716:	bd80      	pop	{r7, pc}
 800f718:	0800f6f1 	.word	0x0800f6f1

0800f71c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800f71c:	b580      	push	{r7, lr}
 800f71e:	b082      	sub	sp, #8
 800f720:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800f722:	2301      	movs	r3, #1
 800f724:	607b      	str	r3, [r7, #4]
 800f726:	e00e      	b.n	800f746 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 800f728:	4a0d      	ldr	r2, [pc, #52]	; (800f760 <sys_timeouts_init+0x44>)
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	00db      	lsls	r3, r3, #3
 800f734:	4a0a      	ldr	r2, [pc, #40]	; (800f760 <sys_timeouts_init+0x44>)
 800f736:	4413      	add	r3, r2
 800f738:	461a      	mov	r2, r3
 800f73a:	490a      	ldr	r1, [pc, #40]	; (800f764 <sys_timeouts_init+0x48>)
 800f73c:	f000 f816 	bl	800f76c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	3301      	adds	r3, #1
 800f744:	607b      	str	r3, [r7, #4]
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	2b02      	cmp	r3, #2
 800f74a:	d9ed      	bls.n	800f728 <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 800f74c:	f002 ff14 	bl	8012578 <sys_now>
 800f750:	4602      	mov	r2, r0
 800f752:	4b05      	ldr	r3, [pc, #20]	; (800f768 <sys_timeouts_init+0x4c>)
 800f754:	601a      	str	r2, [r3, #0]
}
 800f756:	bf00      	nop
 800f758:	3708      	adds	r7, #8
 800f75a:	46bd      	mov	sp, r7
 800f75c:	bd80      	pop	{r7, pc}
 800f75e:	bf00      	nop
 800f760:	08016e30 	.word	0x08016e30
 800f764:	0800f6f1 	.word	0x0800f6f1
 800f768:	2000028c 	.word	0x2000028c

0800f76c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800f76c:	b580      	push	{r7, lr}
 800f76e:	b088      	sub	sp, #32
 800f770:	af00      	add	r7, sp, #0
 800f772:	60f8      	str	r0, [r7, #12]
 800f774:	60b9      	str	r1, [r7, #8]
 800f776:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800f778:	2006      	movs	r0, #6
 800f77a:	f7f9 fd23 	bl	80091c4 <memp_malloc>
 800f77e:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 800f780:	697b      	ldr	r3, [r7, #20]
 800f782:	2b00      	cmp	r3, #0
 800f784:	d10a      	bne.n	800f79c <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800f786:	697b      	ldr	r3, [r7, #20]
 800f788:	2b00      	cmp	r3, #0
 800f78a:	f040 8084 	bne.w	800f896 <sys_timeout+0x12a>
 800f78e:	4b44      	ldr	r3, [pc, #272]	; (800f8a0 <sys_timeout+0x134>)
 800f790:	22d4      	movs	r2, #212	; 0xd4
 800f792:	4944      	ldr	r1, [pc, #272]	; (800f8a4 <sys_timeout+0x138>)
 800f794:	4844      	ldr	r0, [pc, #272]	; (800f8a8 <sys_timeout+0x13c>)
 800f796:	f004 fc11 	bl	8013fbc <iprintf>
    return;
 800f79a:	e07c      	b.n	800f896 <sys_timeout+0x12a>
  }

  now = sys_now();
 800f79c:	f002 feec 	bl	8012578 <sys_now>
 800f7a0:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 800f7a2:	4b42      	ldr	r3, [pc, #264]	; (800f8ac <sys_timeout+0x140>)
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d105      	bne.n	800f7b6 <sys_timeout+0x4a>
    diff = 0;
 800f7aa:	2300      	movs	r3, #0
 800f7ac:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 800f7ae:	4a40      	ldr	r2, [pc, #256]	; (800f8b0 <sys_timeout+0x144>)
 800f7b0:	693b      	ldr	r3, [r7, #16]
 800f7b2:	6013      	str	r3, [r2, #0]
 800f7b4:	e004      	b.n	800f7c0 <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 800f7b6:	4b3e      	ldr	r3, [pc, #248]	; (800f8b0 <sys_timeout+0x144>)
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	693a      	ldr	r2, [r7, #16]
 800f7bc:	1ad3      	subs	r3, r2, r3
 800f7be:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 800f7c0:	697b      	ldr	r3, [r7, #20]
 800f7c2:	2200      	movs	r2, #0
 800f7c4:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800f7c6:	697b      	ldr	r3, [r7, #20]
 800f7c8:	68ba      	ldr	r2, [r7, #8]
 800f7ca:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800f7cc:	697b      	ldr	r3, [r7, #20]
 800f7ce:	687a      	ldr	r2, [r7, #4]
 800f7d0:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 800f7d2:	68fa      	ldr	r2, [r7, #12]
 800f7d4:	69bb      	ldr	r3, [r7, #24]
 800f7d6:	441a      	add	r2, r3
 800f7d8:	697b      	ldr	r3, [r7, #20]
 800f7da:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800f7dc:	4b33      	ldr	r3, [pc, #204]	; (800f8ac <sys_timeout+0x140>)
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d103      	bne.n	800f7ec <sys_timeout+0x80>
    next_timeout = timeout;
 800f7e4:	4a31      	ldr	r2, [pc, #196]	; (800f8ac <sys_timeout+0x140>)
 800f7e6:	697b      	ldr	r3, [r7, #20]
 800f7e8:	6013      	str	r3, [r2, #0]
    return;
 800f7ea:	e055      	b.n	800f898 <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 800f7ec:	4b2f      	ldr	r3, [pc, #188]	; (800f8ac <sys_timeout+0x140>)
 800f7ee:	681b      	ldr	r3, [r3, #0]
 800f7f0:	685b      	ldr	r3, [r3, #4]
 800f7f2:	68fa      	ldr	r2, [r7, #12]
 800f7f4:	429a      	cmp	r2, r3
 800f7f6:	d20f      	bcs.n	800f818 <sys_timeout+0xac>
    next_timeout->time -= msecs;
 800f7f8:	4b2c      	ldr	r3, [pc, #176]	; (800f8ac <sys_timeout+0x140>)
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	6859      	ldr	r1, [r3, #4]
 800f7fe:	4b2b      	ldr	r3, [pc, #172]	; (800f8ac <sys_timeout+0x140>)
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	68fa      	ldr	r2, [r7, #12]
 800f804:	1a8a      	subs	r2, r1, r2
 800f806:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 800f808:	4b28      	ldr	r3, [pc, #160]	; (800f8ac <sys_timeout+0x140>)
 800f80a:	681a      	ldr	r2, [r3, #0]
 800f80c:	697b      	ldr	r3, [r7, #20]
 800f80e:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800f810:	4a26      	ldr	r2, [pc, #152]	; (800f8ac <sys_timeout+0x140>)
 800f812:	697b      	ldr	r3, [r7, #20]
 800f814:	6013      	str	r3, [r2, #0]
 800f816:	e03f      	b.n	800f898 <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800f818:	4b24      	ldr	r3, [pc, #144]	; (800f8ac <sys_timeout+0x140>)
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	61fb      	str	r3, [r7, #28]
 800f81e:	e036      	b.n	800f88e <sys_timeout+0x122>
      timeout->time -= t->time;
 800f820:	697b      	ldr	r3, [r7, #20]
 800f822:	685a      	ldr	r2, [r3, #4]
 800f824:	69fb      	ldr	r3, [r7, #28]
 800f826:	685b      	ldr	r3, [r3, #4]
 800f828:	1ad2      	subs	r2, r2, r3
 800f82a:	697b      	ldr	r3, [r7, #20]
 800f82c:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 800f82e:	69fb      	ldr	r3, [r7, #28]
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	2b00      	cmp	r3, #0
 800f834:	d006      	beq.n	800f844 <sys_timeout+0xd8>
 800f836:	69fb      	ldr	r3, [r7, #28]
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	685a      	ldr	r2, [r3, #4]
 800f83c:	697b      	ldr	r3, [r7, #20]
 800f83e:	685b      	ldr	r3, [r3, #4]
 800f840:	429a      	cmp	r2, r3
 800f842:	d921      	bls.n	800f888 <sys_timeout+0x11c>
        if (t->next != NULL) {
 800f844:	69fb      	ldr	r3, [r7, #28]
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	2b00      	cmp	r3, #0
 800f84a:	d009      	beq.n	800f860 <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 800f84c:	69fb      	ldr	r3, [r7, #28]
 800f84e:	681b      	ldr	r3, [r3, #0]
 800f850:	6859      	ldr	r1, [r3, #4]
 800f852:	697b      	ldr	r3, [r7, #20]
 800f854:	685a      	ldr	r2, [r3, #4]
 800f856:	69fb      	ldr	r3, [r7, #28]
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	1a8a      	subs	r2, r1, r2
 800f85c:	605a      	str	r2, [r3, #4]
 800f85e:	e00b      	b.n	800f878 <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 800f860:	697b      	ldr	r3, [r7, #20]
 800f862:	685b      	ldr	r3, [r3, #4]
 800f864:	68fa      	ldr	r2, [r7, #12]
 800f866:	429a      	cmp	r2, r3
 800f868:	d206      	bcs.n	800f878 <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 800f86a:	4b10      	ldr	r3, [pc, #64]	; (800f8ac <sys_timeout+0x140>)
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	685a      	ldr	r2, [r3, #4]
 800f870:	68fb      	ldr	r3, [r7, #12]
 800f872:	441a      	add	r2, r3
 800f874:	697b      	ldr	r3, [r7, #20]
 800f876:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 800f878:	69fb      	ldr	r3, [r7, #28]
 800f87a:	681a      	ldr	r2, [r3, #0]
 800f87c:	697b      	ldr	r3, [r7, #20]
 800f87e:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800f880:	69fb      	ldr	r3, [r7, #28]
 800f882:	697a      	ldr	r2, [r7, #20]
 800f884:	601a      	str	r2, [r3, #0]
        break;
 800f886:	e007      	b.n	800f898 <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 800f888:	69fb      	ldr	r3, [r7, #28]
 800f88a:	681b      	ldr	r3, [r3, #0]
 800f88c:	61fb      	str	r3, [r7, #28]
 800f88e:	69fb      	ldr	r3, [r7, #28]
 800f890:	2b00      	cmp	r3, #0
 800f892:	d1c5      	bne.n	800f820 <sys_timeout+0xb4>
 800f894:	e000      	b.n	800f898 <sys_timeout+0x12c>
    return;
 800f896:	bf00      	nop
      }
    }
  }
}
 800f898:	3720      	adds	r7, #32
 800f89a:	46bd      	mov	sp, r7
 800f89c:	bd80      	pop	{r7, pc}
 800f89e:	bf00      	nop
 800f8a0:	08016344 	.word	0x08016344
 800f8a4:	080163b0 	.word	0x080163b0
 800f8a8:	080163f0 	.word	0x080163f0
 800f8ac:	20000288 	.word	0x20000288
 800f8b0:	2000028c 	.word	0x2000028c

0800f8b4 <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 800f8b4:	b580      	push	{r7, lr}
 800f8b6:	b086      	sub	sp, #24
 800f8b8:	af00      	add	r7, sp, #0
  if (next_timeout) {
 800f8ba:	4b24      	ldr	r3, [pc, #144]	; (800f94c <sys_check_timeouts+0x98>)
 800f8bc:	681b      	ldr	r3, [r3, #0]
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d040      	beq.n	800f944 <sys_check_timeouts+0x90>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 800f8c2:	f002 fe59 	bl	8012578 <sys_now>
 800f8c6:	60f8      	str	r0, [r7, #12]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 800f8c8:	4b21      	ldr	r3, [pc, #132]	; (800f950 <sys_check_timeouts+0x9c>)
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	68fa      	ldr	r2, [r7, #12]
 800f8ce:	1ad3      	subs	r3, r2, r3
 800f8d0:	617b      	str	r3, [r7, #20]
    do {
      PBUF_CHECK_FREE_OOSEQ();
 800f8d2:	4b20      	ldr	r3, [pc, #128]	; (800f954 <sys_check_timeouts+0xa0>)
 800f8d4:	781b      	ldrb	r3, [r3, #0]
 800f8d6:	b2db      	uxtb	r3, r3
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d001      	beq.n	800f8e0 <sys_check_timeouts+0x2c>
 800f8dc:	f7f9 fee4 	bl	80096a8 <pbuf_free_ooseq>
      had_one = 0;
 800f8e0:	2300      	movs	r3, #0
 800f8e2:	74fb      	strb	r3, [r7, #19]
      tmptimeout = next_timeout;
 800f8e4:	4b19      	ldr	r3, [pc, #100]	; (800f94c <sys_check_timeouts+0x98>)
 800f8e6:	681b      	ldr	r3, [r3, #0]
 800f8e8:	60bb      	str	r3, [r7, #8]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 800f8ea:	68bb      	ldr	r3, [r7, #8]
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d026      	beq.n	800f93e <sys_check_timeouts+0x8a>
 800f8f0:	68bb      	ldr	r3, [r7, #8]
 800f8f2:	685b      	ldr	r3, [r3, #4]
 800f8f4:	697a      	ldr	r2, [r7, #20]
 800f8f6:	429a      	cmp	r2, r3
 800f8f8:	d321      	bcc.n	800f93e <sys_check_timeouts+0x8a>
        /* timeout has expired */
        had_one = 1;
 800f8fa:	2301      	movs	r3, #1
 800f8fc:	74fb      	strb	r3, [r7, #19]
        timeouts_last_time += tmptimeout->time;
 800f8fe:	68bb      	ldr	r3, [r7, #8]
 800f900:	685a      	ldr	r2, [r3, #4]
 800f902:	4b13      	ldr	r3, [pc, #76]	; (800f950 <sys_check_timeouts+0x9c>)
 800f904:	681b      	ldr	r3, [r3, #0]
 800f906:	4413      	add	r3, r2
 800f908:	4a11      	ldr	r2, [pc, #68]	; (800f950 <sys_check_timeouts+0x9c>)
 800f90a:	6013      	str	r3, [r2, #0]
        diff -= tmptimeout->time;
 800f90c:	68bb      	ldr	r3, [r7, #8]
 800f90e:	685b      	ldr	r3, [r3, #4]
 800f910:	697a      	ldr	r2, [r7, #20]
 800f912:	1ad3      	subs	r3, r2, r3
 800f914:	617b      	str	r3, [r7, #20]
        next_timeout = tmptimeout->next;
 800f916:	68bb      	ldr	r3, [r7, #8]
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	4a0c      	ldr	r2, [pc, #48]	; (800f94c <sys_check_timeouts+0x98>)
 800f91c:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 800f91e:	68bb      	ldr	r3, [r7, #8]
 800f920:	689b      	ldr	r3, [r3, #8]
 800f922:	607b      	str	r3, [r7, #4]
        arg = tmptimeout->arg;
 800f924:	68bb      	ldr	r3, [r7, #8]
 800f926:	68db      	ldr	r3, [r3, #12]
 800f928:	603b      	str	r3, [r7, #0]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800f92a:	68b9      	ldr	r1, [r7, #8]
 800f92c:	2006      	movs	r0, #6
 800f92e:	f7f9 fcb9 	bl	80092a4 <memp_free>
        if (handler != NULL) {
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	2b00      	cmp	r3, #0
 800f936:	d002      	beq.n	800f93e <sys_check_timeouts+0x8a>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
#endif /* !NO_SYS */
          handler(arg);
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	6838      	ldr	r0, [r7, #0]
 800f93c:	4798      	blx	r3
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
 800f93e:	7cfb      	ldrb	r3, [r7, #19]
 800f940:	2b00      	cmp	r3, #0
 800f942:	d1c6      	bne.n	800f8d2 <sys_check_timeouts+0x1e>
  }
}
 800f944:	bf00      	nop
 800f946:	3718      	adds	r7, #24
 800f948:	46bd      	mov	sp, r7
 800f94a:	bd80      	pop	{r7, pc}
 800f94c:	20000288 	.word	0x20000288
 800f950:	2000028c 	.word	0x2000028c
 800f954:	2000327c 	.word	0x2000327c

0800f958 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800f958:	b480      	push	{r7}
 800f95a:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 800f95c:	bf00      	nop
 800f95e:	46bd      	mov	sp, r7
 800f960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f964:	4770      	bx	lr
	...

0800f968 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800f968:	b480      	push	{r7}
 800f96a:	b085      	sub	sp, #20
 800f96c:	af00      	add	r7, sp, #0
 800f96e:	60f8      	str	r0, [r7, #12]
 800f970:	60b9      	str	r1, [r7, #8]
 800f972:	4613      	mov	r3, r2
 800f974:	71fb      	strb	r3, [r7, #7]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800f976:	79fb      	ldrb	r3, [r7, #7]
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d018      	beq.n	800f9ae <udp_input_local_match+0x46>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f97c:	68fb      	ldr	r3, [r7, #12]
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d013      	beq.n	800f9aa <udp_input_local_match+0x42>
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	681b      	ldr	r3, [r3, #0]
 800f986:	2b00      	cmp	r3, #0
 800f988:	d00f      	beq.n	800f9aa <udp_input_local_match+0x42>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800f98a:	4b14      	ldr	r3, [pc, #80]	; (800f9dc <udp_input_local_match+0x74>)
 800f98c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f98e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f992:	d00a      	beq.n	800f9aa <udp_input_local_match+0x42>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800f994:	68fb      	ldr	r3, [r7, #12]
 800f996:	681a      	ldr	r2, [r3, #0]
 800f998:	4b10      	ldr	r3, [pc, #64]	; (800f9dc <udp_input_local_match+0x74>)
 800f99a:	695b      	ldr	r3, [r3, #20]
 800f99c:	405a      	eors	r2, r3
 800f99e:	68bb      	ldr	r3, [r7, #8]
 800f9a0:	3308      	adds	r3, #8
 800f9a2:	681b      	ldr	r3, [r3, #0]
 800f9a4:	4013      	ands	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d110      	bne.n	800f9cc <udp_input_local_match+0x64>
          return 1;
 800f9aa:	2301      	movs	r3, #1
 800f9ac:	e00f      	b.n	800f9ce <udp_input_local_match+0x66>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f9ae:	68fb      	ldr	r3, [r7, #12]
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d009      	beq.n	800f9c8 <udp_input_local_match+0x60>
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d005      	beq.n	800f9c8 <udp_input_local_match+0x60>
 800f9bc:	68fb      	ldr	r3, [r7, #12]
 800f9be:	681a      	ldr	r2, [r3, #0]
 800f9c0:	4b06      	ldr	r3, [pc, #24]	; (800f9dc <udp_input_local_match+0x74>)
 800f9c2:	695b      	ldr	r3, [r3, #20]
 800f9c4:	429a      	cmp	r2, r3
 800f9c6:	d101      	bne.n	800f9cc <udp_input_local_match+0x64>
      return 1;
 800f9c8:	2301      	movs	r3, #1
 800f9ca:	e000      	b.n	800f9ce <udp_input_local_match+0x66>
    }
  }

  return 0;
 800f9cc:	2300      	movs	r3, #0
}
 800f9ce:	4618      	mov	r0, r3
 800f9d0:	3714      	adds	r7, #20
 800f9d2:	46bd      	mov	sp, r7
 800f9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9d8:	4770      	bx	lr
 800f9da:	bf00      	nop
 800f9dc:	200003a8 	.word	0x200003a8

0800f9e0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800f9e0:	b590      	push	{r4, r7, lr}
 800f9e2:	b08d      	sub	sp, #52	; 0x34
 800f9e4:	af02      	add	r7, sp, #8
 800f9e6:	6078      	str	r0, [r7, #4]
 800f9e8:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800f9ea:	2300      	movs	r3, #0
 800f9ec:	76fb      	strb	r3, [r7, #27]
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	895b      	ldrh	r3, [r3, #10]
 800f9f2:	2b07      	cmp	r3, #7
 800f9f4:	d803      	bhi.n	800f9fe <udp_input+0x1e>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800f9f6:	6878      	ldr	r0, [r7, #4]
 800f9f8:	f7fa f9f8 	bl	8009dec <pbuf_free>
    goto end;
 800f9fc:	e0c6      	b.n	800fb8c <udp_input+0x1ac>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	685b      	ldr	r3, [r3, #4]
 800fa02:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800fa04:	4b63      	ldr	r3, [pc, #396]	; (800fb94 <udp_input+0x1b4>)
 800fa06:	695a      	ldr	r2, [r3, #20]
 800fa08:	4b62      	ldr	r3, [pc, #392]	; (800fb94 <udp_input+0x1b4>)
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	4619      	mov	r1, r3
 800fa0e:	4610      	mov	r0, r2
 800fa10:	f001 fc1a 	bl	8011248 <ip4_addr_isbroadcast_u32>
 800fa14:	4603      	mov	r3, r0
 800fa16:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800fa18:	697b      	ldr	r3, [r7, #20]
 800fa1a:	881b      	ldrh	r3, [r3, #0]
 800fa1c:	b29b      	uxth	r3, r3
 800fa1e:	4618      	mov	r0, r3
 800fa20:	f7f9 f804 	bl	8008a2c <lwip_htons>
 800fa24:	4603      	mov	r3, r0
 800fa26:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800fa28:	697b      	ldr	r3, [r7, #20]
 800fa2a:	885b      	ldrh	r3, [r3, #2]
 800fa2c:	b29b      	uxth	r3, r3
 800fa2e:	4618      	mov	r0, r3
 800fa30:	f7f8 fffc 	bl	8008a2c <lwip_htons>
 800fa34:	4603      	mov	r3, r0
 800fa36:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800fa38:	2300      	movs	r3, #0
 800fa3a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800fa3c:	2300      	movs	r3, #0
 800fa3e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800fa40:	2300      	movs	r3, #0
 800fa42:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800fa44:	4b54      	ldr	r3, [pc, #336]	; (800fb98 <udp_input+0x1b8>)
 800fa46:	681b      	ldr	r3, [r3, #0]
 800fa48:	627b      	str	r3, [r7, #36]	; 0x24
 800fa4a:	e03b      	b.n	800fac4 <udp_input+0xe4>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800fa4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa4e:	8a5b      	ldrh	r3, [r3, #18]
 800fa50:	89fa      	ldrh	r2, [r7, #14]
 800fa52:	429a      	cmp	r2, r3
 800fa54:	d131      	bne.n	800faba <udp_input+0xda>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800fa56:	7cfb      	ldrb	r3, [r7, #19]
 800fa58:	461a      	mov	r2, r3
 800fa5a:	6839      	ldr	r1, [r7, #0]
 800fa5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fa5e:	f7ff ff83 	bl	800f968 <udp_input_local_match>
 800fa62:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d028      	beq.n	800faba <udp_input+0xda>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 800fa68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa6a:	7c1b      	ldrb	r3, [r3, #16]
 800fa6c:	f003 0304 	and.w	r3, r3, #4
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d104      	bne.n	800fa7e <udp_input+0x9e>
 800fa74:	69fb      	ldr	r3, [r7, #28]
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d101      	bne.n	800fa7e <udp_input+0x9e>
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
 800fa7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa7c:	61fb      	str	r3, [r7, #28]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800fa7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa80:	8a9b      	ldrh	r3, [r3, #20]
 800fa82:	8a3a      	ldrh	r2, [r7, #16]
 800fa84:	429a      	cmp	r2, r3
 800fa86:	d118      	bne.n	800faba <udp_input+0xda>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800fa88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa8a:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	d005      	beq.n	800fa9c <udp_input+0xbc>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800fa90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa92:	685a      	ldr	r2, [r3, #4]
 800fa94:	4b3f      	ldr	r3, [pc, #252]	; (800fb94 <udp_input+0x1b4>)
 800fa96:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800fa98:	429a      	cmp	r2, r3
 800fa9a:	d10e      	bne.n	800faba <udp_input+0xda>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800fa9c:	6a3b      	ldr	r3, [r7, #32]
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	d014      	beq.n	800facc <udp_input+0xec>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800faa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faa4:	68da      	ldr	r2, [r3, #12]
 800faa6:	6a3b      	ldr	r3, [r7, #32]
 800faa8:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800faaa:	4b3b      	ldr	r3, [pc, #236]	; (800fb98 <udp_input+0x1b8>)
 800faac:	681a      	ldr	r2, [r3, #0]
 800faae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fab0:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800fab2:	4a39      	ldr	r2, [pc, #228]	; (800fb98 <udp_input+0x1b8>)
 800fab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fab6:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800fab8:	e008      	b.n	800facc <udp_input+0xec>
      }
    }

    prev = pcb;
 800faba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fabc:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800fabe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fac0:	68db      	ldr	r3, [r3, #12]
 800fac2:	627b      	str	r3, [r7, #36]	; 0x24
 800fac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	d1c0      	bne.n	800fa4c <udp_input+0x6c>
 800faca:	e000      	b.n	800face <udp_input+0xee>
        break;
 800facc:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800face:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	d101      	bne.n	800fad8 <udp_input+0xf8>
    pcb = uncon_pcb;
 800fad4:	69fb      	ldr	r3, [r7, #28]
 800fad6:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800fad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d002      	beq.n	800fae4 <udp_input+0x104>
    for_us = 1;
 800fade:	2301      	movs	r3, #1
 800fae0:	76fb      	strb	r3, [r7, #27]
 800fae2:	e00a      	b.n	800fafa <udp_input+0x11a>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800fae4:	683b      	ldr	r3, [r7, #0]
 800fae6:	3304      	adds	r3, #4
 800fae8:	681a      	ldr	r2, [r3, #0]
 800faea:	4b2a      	ldr	r3, [pc, #168]	; (800fb94 <udp_input+0x1b4>)
 800faec:	695b      	ldr	r3, [r3, #20]
 800faee:	429a      	cmp	r2, r3
 800faf0:	bf0c      	ite	eq
 800faf2:	2301      	moveq	r3, #1
 800faf4:	2300      	movne	r3, #0
 800faf6:	b2db      	uxtb	r3, r3
 800faf8:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800fafa:	7efb      	ldrb	r3, [r7, #27]
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d042      	beq.n	800fb86 <udp_input+0x1a6>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 800fb00:	f06f 0107 	mvn.w	r1, #7
 800fb04:	6878      	ldr	r0, [r7, #4]
 800fb06:	f7fa f94d 	bl	8009da4 <pbuf_header>
 800fb0a:	4603      	mov	r3, r0
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d00a      	beq.n	800fb26 <udp_input+0x146>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
 800fb10:	4b22      	ldr	r3, [pc, #136]	; (800fb9c <udp_input+0x1bc>)
 800fb12:	f240 1255 	movw	r2, #341	; 0x155
 800fb16:	4922      	ldr	r1, [pc, #136]	; (800fba0 <udp_input+0x1c0>)
 800fb18:	4822      	ldr	r0, [pc, #136]	; (800fba4 <udp_input+0x1c4>)
 800fb1a:	f004 fa4f 	bl	8013fbc <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800fb1e:	6878      	ldr	r0, [r7, #4]
 800fb20:	f7fa f964 	bl	8009dec <pbuf_free>
      goto end;
 800fb24:	e032      	b.n	800fb8c <udp_input+0x1ac>
    }

    if (pcb != NULL) {
 800fb26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d012      	beq.n	800fb52 <udp_input+0x172>
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800fb2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb2e:	699b      	ldr	r3, [r3, #24]
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d00a      	beq.n	800fb4a <udp_input+0x16a>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800fb34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb36:	699c      	ldr	r4, [r3, #24]
 800fb38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb3a:	69d8      	ldr	r0, [r3, #28]
 800fb3c:	8a3b      	ldrh	r3, [r7, #16]
 800fb3e:	9300      	str	r3, [sp, #0]
 800fb40:	4b19      	ldr	r3, [pc, #100]	; (800fba8 <udp_input+0x1c8>)
 800fb42:	687a      	ldr	r2, [r7, #4]
 800fb44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fb46:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800fb48:	e021      	b.n	800fb8e <udp_input+0x1ae>
        pbuf_free(p);
 800fb4a:	6878      	ldr	r0, [r7, #4]
 800fb4c:	f7fa f94e 	bl	8009dec <pbuf_free>
        goto end;
 800fb50:	e01c      	b.n	800fb8c <udp_input+0x1ac>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800fb52:	7cfb      	ldrb	r3, [r7, #19]
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d112      	bne.n	800fb7e <udp_input+0x19e>
 800fb58:	4b0e      	ldr	r3, [pc, #56]	; (800fb94 <udp_input+0x1b4>)
 800fb5a:	695b      	ldr	r3, [r3, #20]
 800fb5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fb60:	2be0      	cmp	r3, #224	; 0xe0
 800fb62:	d00c      	beq.n	800fb7e <udp_input+0x19e>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800fb64:	4b0b      	ldr	r3, [pc, #44]	; (800fb94 <udp_input+0x1b4>)
 800fb66:	899b      	ldrh	r3, [r3, #12]
 800fb68:	3308      	adds	r3, #8
 800fb6a:	b29b      	uxth	r3, r3
 800fb6c:	b21b      	sxth	r3, r3
 800fb6e:	4619      	mov	r1, r3
 800fb70:	6878      	ldr	r0, [r7, #4]
 800fb72:	f7fa f929 	bl	8009dc8 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800fb76:	2103      	movs	r1, #3
 800fb78:	6878      	ldr	r0, [r7, #4]
 800fb7a:	f001 f863 	bl	8010c44 <icmp_dest_unreach>
      pbuf_free(p);
 800fb7e:	6878      	ldr	r0, [r7, #4]
 800fb80:	f7fa f934 	bl	8009dec <pbuf_free>
  return;
 800fb84:	e003      	b.n	800fb8e <udp_input+0x1ae>
    pbuf_free(p);
 800fb86:	6878      	ldr	r0, [r7, #4]
 800fb88:	f7fa f930 	bl	8009dec <pbuf_free>
  return;
 800fb8c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800fb8e:	372c      	adds	r7, #44	; 0x2c
 800fb90:	46bd      	mov	sp, r7
 800fb92:	bd90      	pop	{r4, r7, pc}
 800fb94:	200003a8 	.word	0x200003a8
 800fb98:	2000329c 	.word	0x2000329c
 800fb9c:	08016418 	.word	0x08016418
 800fba0:	08016480 	.word	0x08016480
 800fba4:	08016494 	.word	0x08016494
 800fba8:	200003b8 	.word	0x200003b8

0800fbac <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 800fbac:	b480      	push	{r7}
 800fbae:	b085      	sub	sp, #20
 800fbb0:	af00      	add	r7, sp, #0
 800fbb2:	6078      	str	r0, [r7, #4]
 800fbb4:	6039      	str	r1, [r7, #0]
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	d01e      	beq.n	800fbfa <udp_netif_ip_addr_changed+0x4e>
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d01a      	beq.n	800fbfa <udp_netif_ip_addr_changed+0x4e>
 800fbc4:	683b      	ldr	r3, [r7, #0]
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	d017      	beq.n	800fbfa <udp_netif_ip_addr_changed+0x4e>
 800fbca:	683b      	ldr	r3, [r7, #0]
 800fbcc:	681b      	ldr	r3, [r3, #0]
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d013      	beq.n	800fbfa <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800fbd2:	4b0d      	ldr	r3, [pc, #52]	; (800fc08 <udp_netif_ip_addr_changed+0x5c>)
 800fbd4:	681b      	ldr	r3, [r3, #0]
 800fbd6:	60fb      	str	r3, [r7, #12]
 800fbd8:	e00c      	b.n	800fbf4 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800fbda:	68fb      	ldr	r3, [r7, #12]
 800fbdc:	681a      	ldr	r2, [r3, #0]
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	429a      	cmp	r2, r3
 800fbe4:	d103      	bne.n	800fbee <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800fbe6:	683b      	ldr	r3, [r7, #0]
 800fbe8:	681a      	ldr	r2, [r3, #0]
 800fbea:	68fb      	ldr	r3, [r7, #12]
 800fbec:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800fbee:	68fb      	ldr	r3, [r7, #12]
 800fbf0:	68db      	ldr	r3, [r3, #12]
 800fbf2:	60fb      	str	r3, [r7, #12]
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	d1ef      	bne.n	800fbda <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800fbfa:	bf00      	nop
 800fbfc:	3714      	adds	r7, #20
 800fbfe:	46bd      	mov	sp, r7
 800fc00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc04:	4770      	bx	lr
 800fc06:	bf00      	nop
 800fc08:	2000329c 	.word	0x2000329c

0800fc0c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800fc0c:	b580      	push	{r7, lr}
 800fc0e:	b082      	sub	sp, #8
 800fc10:	af00      	add	r7, sp, #0
 800fc12:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800fc14:	4915      	ldr	r1, [pc, #84]	; (800fc6c <etharp_free_entry+0x60>)
 800fc16:	687a      	ldr	r2, [r7, #4]
 800fc18:	4613      	mov	r3, r2
 800fc1a:	005b      	lsls	r3, r3, #1
 800fc1c:	4413      	add	r3, r2
 800fc1e:	00db      	lsls	r3, r3, #3
 800fc20:	440b      	add	r3, r1
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d013      	beq.n	800fc50 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800fc28:	4910      	ldr	r1, [pc, #64]	; (800fc6c <etharp_free_entry+0x60>)
 800fc2a:	687a      	ldr	r2, [r7, #4]
 800fc2c:	4613      	mov	r3, r2
 800fc2e:	005b      	lsls	r3, r3, #1
 800fc30:	4413      	add	r3, r2
 800fc32:	00db      	lsls	r3, r3, #3
 800fc34:	440b      	add	r3, r1
 800fc36:	681b      	ldr	r3, [r3, #0]
 800fc38:	4618      	mov	r0, r3
 800fc3a:	f7fa f8d7 	bl	8009dec <pbuf_free>
    arp_table[i].q = NULL;
 800fc3e:	490b      	ldr	r1, [pc, #44]	; (800fc6c <etharp_free_entry+0x60>)
 800fc40:	687a      	ldr	r2, [r7, #4]
 800fc42:	4613      	mov	r3, r2
 800fc44:	005b      	lsls	r3, r3, #1
 800fc46:	4413      	add	r3, r2
 800fc48:	00db      	lsls	r3, r3, #3
 800fc4a:	440b      	add	r3, r1
 800fc4c:	2200      	movs	r2, #0
 800fc4e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800fc50:	4906      	ldr	r1, [pc, #24]	; (800fc6c <etharp_free_entry+0x60>)
 800fc52:	687a      	ldr	r2, [r7, #4]
 800fc54:	4613      	mov	r3, r2
 800fc56:	005b      	lsls	r3, r3, #1
 800fc58:	4413      	add	r3, r2
 800fc5a:	00db      	lsls	r3, r3, #3
 800fc5c:	440b      	add	r3, r1
 800fc5e:	3314      	adds	r3, #20
 800fc60:	2200      	movs	r2, #0
 800fc62:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800fc64:	bf00      	nop
 800fc66:	3708      	adds	r7, #8
 800fc68:	46bd      	mov	sp, r7
 800fc6a:	bd80      	pop	{r7, pc}
 800fc6c:	20000294 	.word	0x20000294

0800fc70 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800fc70:	b580      	push	{r7, lr}
 800fc72:	b082      	sub	sp, #8
 800fc74:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800fc76:	2300      	movs	r3, #0
 800fc78:	71fb      	strb	r3, [r7, #7]
 800fc7a:	e096      	b.n	800fdaa <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800fc7c:	79fa      	ldrb	r2, [r7, #7]
 800fc7e:	494f      	ldr	r1, [pc, #316]	; (800fdbc <etharp_tmr+0x14c>)
 800fc80:	4613      	mov	r3, r2
 800fc82:	005b      	lsls	r3, r3, #1
 800fc84:	4413      	add	r3, r2
 800fc86:	00db      	lsls	r3, r3, #3
 800fc88:	440b      	add	r3, r1
 800fc8a:	3314      	adds	r3, #20
 800fc8c:	781b      	ldrb	r3, [r3, #0]
 800fc8e:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 800fc90:	79bb      	ldrb	r3, [r7, #6]
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	f000 8086 	beq.w	800fda4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 800fc98:	79fa      	ldrb	r2, [r7, #7]
 800fc9a:	4948      	ldr	r1, [pc, #288]	; (800fdbc <etharp_tmr+0x14c>)
 800fc9c:	4613      	mov	r3, r2
 800fc9e:	005b      	lsls	r3, r3, #1
 800fca0:	4413      	add	r3, r2
 800fca2:	00db      	lsls	r3, r3, #3
 800fca4:	440b      	add	r3, r1
 800fca6:	3312      	adds	r3, #18
 800fca8:	881b      	ldrh	r3, [r3, #0]
 800fcaa:	3301      	adds	r3, #1
 800fcac:	b298      	uxth	r0, r3
 800fcae:	4943      	ldr	r1, [pc, #268]	; (800fdbc <etharp_tmr+0x14c>)
 800fcb0:	4613      	mov	r3, r2
 800fcb2:	005b      	lsls	r3, r3, #1
 800fcb4:	4413      	add	r3, r2
 800fcb6:	00db      	lsls	r3, r3, #3
 800fcb8:	440b      	add	r3, r1
 800fcba:	3312      	adds	r3, #18
 800fcbc:	4602      	mov	r2, r0
 800fcbe:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800fcc0:	79fa      	ldrb	r2, [r7, #7]
 800fcc2:	493e      	ldr	r1, [pc, #248]	; (800fdbc <etharp_tmr+0x14c>)
 800fcc4:	4613      	mov	r3, r2
 800fcc6:	005b      	lsls	r3, r3, #1
 800fcc8:	4413      	add	r3, r2
 800fcca:	00db      	lsls	r3, r3, #3
 800fccc:	440b      	add	r3, r1
 800fcce:	3312      	adds	r3, #18
 800fcd0:	881b      	ldrh	r3, [r3, #0]
 800fcd2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800fcd6:	d215      	bcs.n	800fd04 <etharp_tmr+0x94>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800fcd8:	79fa      	ldrb	r2, [r7, #7]
 800fcda:	4938      	ldr	r1, [pc, #224]	; (800fdbc <etharp_tmr+0x14c>)
 800fcdc:	4613      	mov	r3, r2
 800fcde:	005b      	lsls	r3, r3, #1
 800fce0:	4413      	add	r3, r2
 800fce2:	00db      	lsls	r3, r3, #3
 800fce4:	440b      	add	r3, r1
 800fce6:	3314      	adds	r3, #20
 800fce8:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800fcea:	2b01      	cmp	r3, #1
 800fcec:	d10f      	bne.n	800fd0e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800fcee:	79fa      	ldrb	r2, [r7, #7]
 800fcf0:	4932      	ldr	r1, [pc, #200]	; (800fdbc <etharp_tmr+0x14c>)
 800fcf2:	4613      	mov	r3, r2
 800fcf4:	005b      	lsls	r3, r3, #1
 800fcf6:	4413      	add	r3, r2
 800fcf8:	00db      	lsls	r3, r3, #3
 800fcfa:	440b      	add	r3, r1
 800fcfc:	3312      	adds	r3, #18
 800fcfe:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800fd00:	2b04      	cmp	r3, #4
 800fd02:	d904      	bls.n	800fd0e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800fd04:	79fb      	ldrb	r3, [r7, #7]
 800fd06:	4618      	mov	r0, r3
 800fd08:	f7ff ff80 	bl	800fc0c <etharp_free_entry>
 800fd0c:	e04a      	b.n	800fda4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800fd0e:	79fa      	ldrb	r2, [r7, #7]
 800fd10:	492a      	ldr	r1, [pc, #168]	; (800fdbc <etharp_tmr+0x14c>)
 800fd12:	4613      	mov	r3, r2
 800fd14:	005b      	lsls	r3, r3, #1
 800fd16:	4413      	add	r3, r2
 800fd18:	00db      	lsls	r3, r3, #3
 800fd1a:	440b      	add	r3, r1
 800fd1c:	3314      	adds	r3, #20
 800fd1e:	781b      	ldrb	r3, [r3, #0]
 800fd20:	2b03      	cmp	r3, #3
 800fd22:	d10a      	bne.n	800fd3a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800fd24:	79fa      	ldrb	r2, [r7, #7]
 800fd26:	4925      	ldr	r1, [pc, #148]	; (800fdbc <etharp_tmr+0x14c>)
 800fd28:	4613      	mov	r3, r2
 800fd2a:	005b      	lsls	r3, r3, #1
 800fd2c:	4413      	add	r3, r2
 800fd2e:	00db      	lsls	r3, r3, #3
 800fd30:	440b      	add	r3, r1
 800fd32:	3314      	adds	r3, #20
 800fd34:	2204      	movs	r2, #4
 800fd36:	701a      	strb	r2, [r3, #0]
 800fd38:	e034      	b.n	800fda4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800fd3a:	79fa      	ldrb	r2, [r7, #7]
 800fd3c:	491f      	ldr	r1, [pc, #124]	; (800fdbc <etharp_tmr+0x14c>)
 800fd3e:	4613      	mov	r3, r2
 800fd40:	005b      	lsls	r3, r3, #1
 800fd42:	4413      	add	r3, r2
 800fd44:	00db      	lsls	r3, r3, #3
 800fd46:	440b      	add	r3, r1
 800fd48:	3314      	adds	r3, #20
 800fd4a:	781b      	ldrb	r3, [r3, #0]
 800fd4c:	2b04      	cmp	r3, #4
 800fd4e:	d10a      	bne.n	800fd66 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800fd50:	79fa      	ldrb	r2, [r7, #7]
 800fd52:	491a      	ldr	r1, [pc, #104]	; (800fdbc <etharp_tmr+0x14c>)
 800fd54:	4613      	mov	r3, r2
 800fd56:	005b      	lsls	r3, r3, #1
 800fd58:	4413      	add	r3, r2
 800fd5a:	00db      	lsls	r3, r3, #3
 800fd5c:	440b      	add	r3, r1
 800fd5e:	3314      	adds	r3, #20
 800fd60:	2202      	movs	r2, #2
 800fd62:	701a      	strb	r2, [r3, #0]
 800fd64:	e01e      	b.n	800fda4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800fd66:	79fa      	ldrb	r2, [r7, #7]
 800fd68:	4914      	ldr	r1, [pc, #80]	; (800fdbc <etharp_tmr+0x14c>)
 800fd6a:	4613      	mov	r3, r2
 800fd6c:	005b      	lsls	r3, r3, #1
 800fd6e:	4413      	add	r3, r2
 800fd70:	00db      	lsls	r3, r3, #3
 800fd72:	440b      	add	r3, r1
 800fd74:	3314      	adds	r3, #20
 800fd76:	781b      	ldrb	r3, [r3, #0]
 800fd78:	2b01      	cmp	r3, #1
 800fd7a:	d113      	bne.n	800fda4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800fd7c:	79fa      	ldrb	r2, [r7, #7]
 800fd7e:	490f      	ldr	r1, [pc, #60]	; (800fdbc <etharp_tmr+0x14c>)
 800fd80:	4613      	mov	r3, r2
 800fd82:	005b      	lsls	r3, r3, #1
 800fd84:	4413      	add	r3, r2
 800fd86:	00db      	lsls	r3, r3, #3
 800fd88:	440b      	add	r3, r1
 800fd8a:	3308      	adds	r3, #8
 800fd8c:	6818      	ldr	r0, [r3, #0]
 800fd8e:	79fa      	ldrb	r2, [r7, #7]
 800fd90:	4613      	mov	r3, r2
 800fd92:	005b      	lsls	r3, r3, #1
 800fd94:	4413      	add	r3, r2
 800fd96:	00db      	lsls	r3, r3, #3
 800fd98:	4a08      	ldr	r2, [pc, #32]	; (800fdbc <etharp_tmr+0x14c>)
 800fd9a:	4413      	add	r3, r2
 800fd9c:	3304      	adds	r3, #4
 800fd9e:	4619      	mov	r1, r3
 800fda0:	f000 fe38 	bl	8010a14 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800fda4:	79fb      	ldrb	r3, [r7, #7]
 800fda6:	3301      	adds	r3, #1
 800fda8:	71fb      	strb	r3, [r7, #7]
 800fdaa:	79fb      	ldrb	r3, [r7, #7]
 800fdac:	2b09      	cmp	r3, #9
 800fdae:	f67f af65 	bls.w	800fc7c <etharp_tmr+0xc>
      }
    }
  }
}
 800fdb2:	bf00      	nop
 800fdb4:	3708      	adds	r7, #8
 800fdb6:	46bd      	mov	sp, r7
 800fdb8:	bd80      	pop	{r7, pc}
 800fdba:	bf00      	nop
 800fdbc:	20000294 	.word	0x20000294

0800fdc0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 800fdc0:	b580      	push	{r7, lr}
 800fdc2:	b088      	sub	sp, #32
 800fdc4:	af00      	add	r7, sp, #0
 800fdc6:	60f8      	str	r0, [r7, #12]
 800fdc8:	460b      	mov	r3, r1
 800fdca:	607a      	str	r2, [r7, #4]
 800fdcc:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800fdce:	230a      	movs	r3, #10
 800fdd0:	77fb      	strb	r3, [r7, #31]
 800fdd2:	230a      	movs	r3, #10
 800fdd4:	77bb      	strb	r3, [r7, #30]
  s8_t empty = ARP_TABLE_SIZE;
 800fdd6:	230a      	movs	r3, #10
 800fdd8:	777b      	strb	r3, [r7, #29]
  u8_t i = 0;
 800fdda:	2300      	movs	r3, #0
 800fddc:	773b      	strb	r3, [r7, #28]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 800fdde:	230a      	movs	r3, #10
 800fde0:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800fde2:	2300      	movs	r3, #0
 800fde4:	833b      	strh	r3, [r7, #24]
 800fde6:	2300      	movs	r3, #0
 800fde8:	82fb      	strh	r3, [r7, #22]
 800fdea:	2300      	movs	r3, #0
 800fdec:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800fdee:	2300      	movs	r3, #0
 800fdf0:	773b      	strb	r3, [r7, #28]
 800fdf2:	e093      	b.n	800ff1c <etharp_find_entry+0x15c>
    u8_t state = arp_table[i].state;
 800fdf4:	7f3a      	ldrb	r2, [r7, #28]
 800fdf6:	4990      	ldr	r1, [pc, #576]	; (8010038 <etharp_find_entry+0x278>)
 800fdf8:	4613      	mov	r3, r2
 800fdfa:	005b      	lsls	r3, r3, #1
 800fdfc:	4413      	add	r3, r2
 800fdfe:	00db      	lsls	r3, r3, #3
 800fe00:	440b      	add	r3, r1
 800fe02:	3314      	adds	r3, #20
 800fe04:	781b      	ldrb	r3, [r3, #0]
 800fe06:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800fe08:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800fe0c:	2b0a      	cmp	r3, #10
 800fe0e:	d105      	bne.n	800fe1c <etharp_find_entry+0x5c>
 800fe10:	7cfb      	ldrb	r3, [r7, #19]
 800fe12:	2b00      	cmp	r3, #0
 800fe14:	d102      	bne.n	800fe1c <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 800fe16:	7f3b      	ldrb	r3, [r7, #28]
 800fe18:	777b      	strb	r3, [r7, #29]
 800fe1a:	e07c      	b.n	800ff16 <etharp_find_entry+0x156>
    } else if (state != ETHARP_STATE_EMPTY) {
 800fe1c:	7cfb      	ldrb	r3, [r7, #19]
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d079      	beq.n	800ff16 <etharp_find_entry+0x156>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800fe22:	7cfb      	ldrb	r3, [r7, #19]
 800fe24:	2b01      	cmp	r3, #1
 800fe26:	d009      	beq.n	800fe3c <etharp_find_entry+0x7c>
 800fe28:	7cfb      	ldrb	r3, [r7, #19]
 800fe2a:	2b01      	cmp	r3, #1
 800fe2c:	d806      	bhi.n	800fe3c <etharp_find_entry+0x7c>
 800fe2e:	4b83      	ldr	r3, [pc, #524]	; (801003c <etharp_find_entry+0x27c>)
 800fe30:	f44f 7293 	mov.w	r2, #294	; 0x126
 800fe34:	4982      	ldr	r1, [pc, #520]	; (8010040 <etharp_find_entry+0x280>)
 800fe36:	4883      	ldr	r0, [pc, #524]	; (8010044 <etharp_find_entry+0x284>)
 800fe38:	f004 f8c0 	bl	8013fbc <iprintf>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800fe3c:	68fb      	ldr	r3, [r7, #12]
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d00f      	beq.n	800fe62 <etharp_find_entry+0xa2>
 800fe42:	68fb      	ldr	r3, [r7, #12]
 800fe44:	6819      	ldr	r1, [r3, #0]
 800fe46:	7f3a      	ldrb	r2, [r7, #28]
 800fe48:	487b      	ldr	r0, [pc, #492]	; (8010038 <etharp_find_entry+0x278>)
 800fe4a:	4613      	mov	r3, r2
 800fe4c:	005b      	lsls	r3, r3, #1
 800fe4e:	4413      	add	r3, r2
 800fe50:	00db      	lsls	r3, r3, #3
 800fe52:	4403      	add	r3, r0
 800fe54:	3304      	adds	r3, #4
 800fe56:	681b      	ldr	r3, [r3, #0]
 800fe58:	4299      	cmp	r1, r3
 800fe5a:	d102      	bne.n	800fe62 <etharp_find_entry+0xa2>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 800fe5c:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800fe60:	e0e5      	b.n	801002e <etharp_find_entry+0x26e>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800fe62:	7cfb      	ldrb	r3, [r7, #19]
 800fe64:	2b01      	cmp	r3, #1
 800fe66:	d13b      	bne.n	800fee0 <etharp_find_entry+0x120>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800fe68:	7f3a      	ldrb	r2, [r7, #28]
 800fe6a:	4973      	ldr	r1, [pc, #460]	; (8010038 <etharp_find_entry+0x278>)
 800fe6c:	4613      	mov	r3, r2
 800fe6e:	005b      	lsls	r3, r3, #1
 800fe70:	4413      	add	r3, r2
 800fe72:	00db      	lsls	r3, r3, #3
 800fe74:	440b      	add	r3, r1
 800fe76:	681b      	ldr	r3, [r3, #0]
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	d018      	beq.n	800feae <etharp_find_entry+0xee>
          if (arp_table[i].ctime >= age_queue) {
 800fe7c:	7f3a      	ldrb	r2, [r7, #28]
 800fe7e:	496e      	ldr	r1, [pc, #440]	; (8010038 <etharp_find_entry+0x278>)
 800fe80:	4613      	mov	r3, r2
 800fe82:	005b      	lsls	r3, r3, #1
 800fe84:	4413      	add	r3, r2
 800fe86:	00db      	lsls	r3, r3, #3
 800fe88:	440b      	add	r3, r1
 800fe8a:	3312      	adds	r3, #18
 800fe8c:	881b      	ldrh	r3, [r3, #0]
 800fe8e:	8b3a      	ldrh	r2, [r7, #24]
 800fe90:	429a      	cmp	r2, r3
 800fe92:	d840      	bhi.n	800ff16 <etharp_find_entry+0x156>
            old_queue = i;
 800fe94:	7f3b      	ldrb	r3, [r7, #28]
 800fe96:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 800fe98:	7f3a      	ldrb	r2, [r7, #28]
 800fe9a:	4967      	ldr	r1, [pc, #412]	; (8010038 <etharp_find_entry+0x278>)
 800fe9c:	4613      	mov	r3, r2
 800fe9e:	005b      	lsls	r3, r3, #1
 800fea0:	4413      	add	r3, r2
 800fea2:	00db      	lsls	r3, r3, #3
 800fea4:	440b      	add	r3, r1
 800fea6:	3312      	adds	r3, #18
 800fea8:	881b      	ldrh	r3, [r3, #0]
 800feaa:	833b      	strh	r3, [r7, #24]
 800feac:	e033      	b.n	800ff16 <etharp_find_entry+0x156>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800feae:	7f3a      	ldrb	r2, [r7, #28]
 800feb0:	4961      	ldr	r1, [pc, #388]	; (8010038 <etharp_find_entry+0x278>)
 800feb2:	4613      	mov	r3, r2
 800feb4:	005b      	lsls	r3, r3, #1
 800feb6:	4413      	add	r3, r2
 800feb8:	00db      	lsls	r3, r3, #3
 800feba:	440b      	add	r3, r1
 800febc:	3312      	adds	r3, #18
 800febe:	881b      	ldrh	r3, [r3, #0]
 800fec0:	8afa      	ldrh	r2, [r7, #22]
 800fec2:	429a      	cmp	r2, r3
 800fec4:	d827      	bhi.n	800ff16 <etharp_find_entry+0x156>
            old_pending = i;
 800fec6:	7f3b      	ldrb	r3, [r7, #28]
 800fec8:	77fb      	strb	r3, [r7, #31]
            age_pending = arp_table[i].ctime;
 800feca:	7f3a      	ldrb	r2, [r7, #28]
 800fecc:	495a      	ldr	r1, [pc, #360]	; (8010038 <etharp_find_entry+0x278>)
 800fece:	4613      	mov	r3, r2
 800fed0:	005b      	lsls	r3, r3, #1
 800fed2:	4413      	add	r3, r2
 800fed4:	00db      	lsls	r3, r3, #3
 800fed6:	440b      	add	r3, r1
 800fed8:	3312      	adds	r3, #18
 800feda:	881b      	ldrh	r3, [r3, #0]
 800fedc:	82fb      	strh	r3, [r7, #22]
 800fede:	e01a      	b.n	800ff16 <etharp_find_entry+0x156>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800fee0:	7cfb      	ldrb	r3, [r7, #19]
 800fee2:	2b01      	cmp	r3, #1
 800fee4:	d917      	bls.n	800ff16 <etharp_find_entry+0x156>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800fee6:	7f3a      	ldrb	r2, [r7, #28]
 800fee8:	4953      	ldr	r1, [pc, #332]	; (8010038 <etharp_find_entry+0x278>)
 800feea:	4613      	mov	r3, r2
 800feec:	005b      	lsls	r3, r3, #1
 800feee:	4413      	add	r3, r2
 800fef0:	00db      	lsls	r3, r3, #3
 800fef2:	440b      	add	r3, r1
 800fef4:	3312      	adds	r3, #18
 800fef6:	881b      	ldrh	r3, [r3, #0]
 800fef8:	8aba      	ldrh	r2, [r7, #20]
 800fefa:	429a      	cmp	r2, r3
 800fefc:	d80b      	bhi.n	800ff16 <etharp_find_entry+0x156>
            old_stable = i;
 800fefe:	7f3b      	ldrb	r3, [r7, #28]
 800ff00:	77bb      	strb	r3, [r7, #30]
            age_stable = arp_table[i].ctime;
 800ff02:	7f3a      	ldrb	r2, [r7, #28]
 800ff04:	494c      	ldr	r1, [pc, #304]	; (8010038 <etharp_find_entry+0x278>)
 800ff06:	4613      	mov	r3, r2
 800ff08:	005b      	lsls	r3, r3, #1
 800ff0a:	4413      	add	r3, r2
 800ff0c:	00db      	lsls	r3, r3, #3
 800ff0e:	440b      	add	r3, r1
 800ff10:	3312      	adds	r3, #18
 800ff12:	881b      	ldrh	r3, [r3, #0]
 800ff14:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ff16:	7f3b      	ldrb	r3, [r7, #28]
 800ff18:	3301      	adds	r3, #1
 800ff1a:	773b      	strb	r3, [r7, #28]
 800ff1c:	7f3b      	ldrb	r3, [r7, #28]
 800ff1e:	2b09      	cmp	r3, #9
 800ff20:	f67f af68 	bls.w	800fdf4 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800ff24:	7afb      	ldrb	r3, [r7, #11]
 800ff26:	f003 0302 	and.w	r3, r3, #2
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d108      	bne.n	800ff40 <etharp_find_entry+0x180>
 800ff2e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800ff32:	2b0a      	cmp	r3, #10
 800ff34:	d107      	bne.n	800ff46 <etharp_find_entry+0x186>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800ff36:	7afb      	ldrb	r3, [r7, #11]
 800ff38:	f003 0301 	and.w	r3, r3, #1
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d102      	bne.n	800ff46 <etharp_find_entry+0x186>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 800ff40:	f04f 33ff 	mov.w	r3, #4294967295
 800ff44:	e073      	b.n	801002e <etharp_find_entry+0x26e>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800ff46:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800ff4a:	2b09      	cmp	r3, #9
 800ff4c:	dc02      	bgt.n	800ff54 <etharp_find_entry+0x194>
    i = empty;
 800ff4e:	7f7b      	ldrb	r3, [r7, #29]
 800ff50:	773b      	strb	r3, [r7, #28]
 800ff52:	e036      	b.n	800ffc2 <etharp_find_entry+0x202>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800ff54:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800ff58:	2b09      	cmp	r3, #9
 800ff5a:	dc13      	bgt.n	800ff84 <etharp_find_entry+0x1c4>
      /* recycle oldest stable*/
      i = old_stable;
 800ff5c:	7fbb      	ldrb	r3, [r7, #30]
 800ff5e:	773b      	strb	r3, [r7, #28]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800ff60:	7f3a      	ldrb	r2, [r7, #28]
 800ff62:	4935      	ldr	r1, [pc, #212]	; (8010038 <etharp_find_entry+0x278>)
 800ff64:	4613      	mov	r3, r2
 800ff66:	005b      	lsls	r3, r3, #1
 800ff68:	4413      	add	r3, r2
 800ff6a:	00db      	lsls	r3, r3, #3
 800ff6c:	440b      	add	r3, r1
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d018      	beq.n	800ffa6 <etharp_find_entry+0x1e6>
 800ff74:	4b31      	ldr	r3, [pc, #196]	; (801003c <etharp_find_entry+0x27c>)
 800ff76:	f240 126f 	movw	r2, #367	; 0x16f
 800ff7a:	4933      	ldr	r1, [pc, #204]	; (8010048 <etharp_find_entry+0x288>)
 800ff7c:	4831      	ldr	r0, [pc, #196]	; (8010044 <etharp_find_entry+0x284>)
 800ff7e:	f004 f81d 	bl	8013fbc <iprintf>
 800ff82:	e010      	b.n	800ffa6 <etharp_find_entry+0x1e6>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800ff84:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ff88:	2b09      	cmp	r3, #9
 800ff8a:	dc02      	bgt.n	800ff92 <etharp_find_entry+0x1d2>
      /* recycle oldest pending */
      i = old_pending;
 800ff8c:	7ffb      	ldrb	r3, [r7, #31]
 800ff8e:	773b      	strb	r3, [r7, #28]
 800ff90:	e009      	b.n	800ffa6 <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800ff92:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800ff96:	2b09      	cmp	r3, #9
 800ff98:	dc02      	bgt.n	800ffa0 <etharp_find_entry+0x1e0>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800ff9a:	7efb      	ldrb	r3, [r7, #27]
 800ff9c:	773b      	strb	r3, [r7, #28]
 800ff9e:	e002      	b.n	800ffa6 <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 800ffa0:	f04f 33ff 	mov.w	r3, #4294967295
 800ffa4:	e043      	b.n	801002e <etharp_find_entry+0x26e>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800ffa6:	7f3b      	ldrb	r3, [r7, #28]
 800ffa8:	2b09      	cmp	r3, #9
 800ffaa:	d906      	bls.n	800ffba <etharp_find_entry+0x1fa>
 800ffac:	4b23      	ldr	r3, [pc, #140]	; (801003c <etharp_find_entry+0x27c>)
 800ffae:	f240 1281 	movw	r2, #385	; 0x181
 800ffb2:	4926      	ldr	r1, [pc, #152]	; (801004c <etharp_find_entry+0x28c>)
 800ffb4:	4823      	ldr	r0, [pc, #140]	; (8010044 <etharp_find_entry+0x284>)
 800ffb6:	f004 f801 	bl	8013fbc <iprintf>
    etharp_free_entry(i);
 800ffba:	7f3b      	ldrb	r3, [r7, #28]
 800ffbc:	4618      	mov	r0, r3
 800ffbe:	f7ff fe25 	bl	800fc0c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800ffc2:	7f3b      	ldrb	r3, [r7, #28]
 800ffc4:	2b09      	cmp	r3, #9
 800ffc6:	d906      	bls.n	800ffd6 <etharp_find_entry+0x216>
 800ffc8:	4b1c      	ldr	r3, [pc, #112]	; (801003c <etharp_find_entry+0x27c>)
 800ffca:	f240 1285 	movw	r2, #389	; 0x185
 800ffce:	491f      	ldr	r1, [pc, #124]	; (801004c <etharp_find_entry+0x28c>)
 800ffd0:	481c      	ldr	r0, [pc, #112]	; (8010044 <etharp_find_entry+0x284>)
 800ffd2:	f003 fff3 	bl	8013fbc <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800ffd6:	7f3a      	ldrb	r2, [r7, #28]
 800ffd8:	4917      	ldr	r1, [pc, #92]	; (8010038 <etharp_find_entry+0x278>)
 800ffda:	4613      	mov	r3, r2
 800ffdc:	005b      	lsls	r3, r3, #1
 800ffde:	4413      	add	r3, r2
 800ffe0:	00db      	lsls	r3, r3, #3
 800ffe2:	440b      	add	r3, r1
 800ffe4:	3314      	adds	r3, #20
 800ffe6:	781b      	ldrb	r3, [r3, #0]
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d006      	beq.n	800fffa <etharp_find_entry+0x23a>
 800ffec:	4b13      	ldr	r3, [pc, #76]	; (801003c <etharp_find_entry+0x27c>)
 800ffee:	f240 1287 	movw	r2, #391	; 0x187
 800fff2:	4917      	ldr	r1, [pc, #92]	; (8010050 <etharp_find_entry+0x290>)
 800fff4:	4813      	ldr	r0, [pc, #76]	; (8010044 <etharp_find_entry+0x284>)
 800fff6:	f003 ffe1 	bl	8013fbc <iprintf>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800fffa:	68fb      	ldr	r3, [r7, #12]
 800fffc:	2b00      	cmp	r3, #0
 800fffe:	d00a      	beq.n	8010016 <etharp_find_entry+0x256>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8010000:	7f3a      	ldrb	r2, [r7, #28]
 8010002:	68fb      	ldr	r3, [r7, #12]
 8010004:	6819      	ldr	r1, [r3, #0]
 8010006:	480c      	ldr	r0, [pc, #48]	; (8010038 <etharp_find_entry+0x278>)
 8010008:	4613      	mov	r3, r2
 801000a:	005b      	lsls	r3, r3, #1
 801000c:	4413      	add	r3, r2
 801000e:	00db      	lsls	r3, r3, #3
 8010010:	4403      	add	r3, r0
 8010012:	3304      	adds	r3, #4
 8010014:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8010016:	7f3a      	ldrb	r2, [r7, #28]
 8010018:	4907      	ldr	r1, [pc, #28]	; (8010038 <etharp_find_entry+0x278>)
 801001a:	4613      	mov	r3, r2
 801001c:	005b      	lsls	r3, r3, #1
 801001e:	4413      	add	r3, r2
 8010020:	00db      	lsls	r3, r3, #3
 8010022:	440b      	add	r3, r1
 8010024:	3312      	adds	r3, #18
 8010026:	2200      	movs	r2, #0
 8010028:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 801002a:	f997 301c 	ldrsb.w	r3, [r7, #28]
}
 801002e:	4618      	mov	r0, r3
 8010030:	3720      	adds	r7, #32
 8010032:	46bd      	mov	sp, r7
 8010034:	bd80      	pop	{r7, pc}
 8010036:	bf00      	nop
 8010038:	20000294 	.word	0x20000294
 801003c:	080164ec 	.word	0x080164ec
 8010040:	0801655c 	.word	0x0801655c
 8010044:	0801659c 	.word	0x0801659c
 8010048:	080165c4 	.word	0x080165c4
 801004c:	080165dc 	.word	0x080165dc
 8010050:	080165f0 	.word	0x080165f0

08010054 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8010054:	b580      	push	{r7, lr}
 8010056:	b088      	sub	sp, #32
 8010058:	af02      	add	r7, sp, #8
 801005a:	60f8      	str	r0, [r7, #12]
 801005c:	60b9      	str	r1, [r7, #8]
 801005e:	607a      	str	r2, [r7, #4]
 8010060:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8010062:	68fb      	ldr	r3, [r7, #12]
 8010064:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010068:	2b06      	cmp	r3, #6
 801006a:	d006      	beq.n	801007a <etharp_update_arp_entry+0x26>
 801006c:	4b48      	ldr	r3, [pc, #288]	; (8010190 <etharp_update_arp_entry+0x13c>)
 801006e:	f240 12ab 	movw	r2, #427	; 0x1ab
 8010072:	4948      	ldr	r1, [pc, #288]	; (8010194 <etharp_update_arp_entry+0x140>)
 8010074:	4848      	ldr	r0, [pc, #288]	; (8010198 <etharp_update_arp_entry+0x144>)
 8010076:	f003 ffa1 	bl	8013fbc <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801007a:	68bb      	ldr	r3, [r7, #8]
 801007c:	2b00      	cmp	r3, #0
 801007e:	d012      	beq.n	80100a6 <etharp_update_arp_entry+0x52>
 8010080:	68bb      	ldr	r3, [r7, #8]
 8010082:	681b      	ldr	r3, [r3, #0]
 8010084:	2b00      	cmp	r3, #0
 8010086:	d00e      	beq.n	80100a6 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8010088:	68bb      	ldr	r3, [r7, #8]
 801008a:	681b      	ldr	r3, [r3, #0]
 801008c:	68f9      	ldr	r1, [r7, #12]
 801008e:	4618      	mov	r0, r3
 8010090:	f001 f8da 	bl	8011248 <ip4_addr_isbroadcast_u32>
 8010094:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8010096:	2b00      	cmp	r3, #0
 8010098:	d105      	bne.n	80100a6 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801009a:	68bb      	ldr	r3, [r7, #8]
 801009c:	681b      	ldr	r3, [r3, #0]
 801009e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80100a2:	2be0      	cmp	r3, #224	; 0xe0
 80100a4:	d102      	bne.n	80100ac <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80100a6:	f06f 030f 	mvn.w	r3, #15
 80100aa:	e06c      	b.n	8010186 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80100ac:	78fb      	ldrb	r3, [r7, #3]
 80100ae:	68fa      	ldr	r2, [r7, #12]
 80100b0:	4619      	mov	r1, r3
 80100b2:	68b8      	ldr	r0, [r7, #8]
 80100b4:	f7ff fe84 	bl	800fdc0 <etharp_find_entry>
 80100b8:	4603      	mov	r3, r0
 80100ba:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
 80100bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	da02      	bge.n	80100ca <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80100c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80100c8:	e05d      	b.n	8010186 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80100ca:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80100ce:	4933      	ldr	r1, [pc, #204]	; (801019c <etharp_update_arp_entry+0x148>)
 80100d0:	4613      	mov	r3, r2
 80100d2:	005b      	lsls	r3, r3, #1
 80100d4:	4413      	add	r3, r2
 80100d6:	00db      	lsls	r3, r3, #3
 80100d8:	440b      	add	r3, r1
 80100da:	3314      	adds	r3, #20
 80100dc:	2202      	movs	r2, #2
 80100de:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80100e0:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80100e4:	492d      	ldr	r1, [pc, #180]	; (801019c <etharp_update_arp_entry+0x148>)
 80100e6:	4613      	mov	r3, r2
 80100e8:	005b      	lsls	r3, r3, #1
 80100ea:	4413      	add	r3, r2
 80100ec:	00db      	lsls	r3, r3, #3
 80100ee:	440b      	add	r3, r1
 80100f0:	3308      	adds	r3, #8
 80100f2:	68fa      	ldr	r2, [r7, #12]
 80100f4:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 80100f6:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80100fa:	4613      	mov	r3, r2
 80100fc:	005b      	lsls	r3, r3, #1
 80100fe:	4413      	add	r3, r2
 8010100:	00db      	lsls	r3, r3, #3
 8010102:	3308      	adds	r3, #8
 8010104:	4a25      	ldr	r2, [pc, #148]	; (801019c <etharp_update_arp_entry+0x148>)
 8010106:	4413      	add	r3, r2
 8010108:	3304      	adds	r3, #4
 801010a:	2206      	movs	r2, #6
 801010c:	6879      	ldr	r1, [r7, #4]
 801010e:	4618      	mov	r0, r3
 8010110:	f003 fe99 	bl	8013e46 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8010114:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8010118:	4920      	ldr	r1, [pc, #128]	; (801019c <etharp_update_arp_entry+0x148>)
 801011a:	4613      	mov	r3, r2
 801011c:	005b      	lsls	r3, r3, #1
 801011e:	4413      	add	r3, r2
 8010120:	00db      	lsls	r3, r3, #3
 8010122:	440b      	add	r3, r1
 8010124:	3312      	adds	r3, #18
 8010126:	2200      	movs	r2, #0
 8010128:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801012a:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801012e:	491b      	ldr	r1, [pc, #108]	; (801019c <etharp_update_arp_entry+0x148>)
 8010130:	4613      	mov	r3, r2
 8010132:	005b      	lsls	r3, r3, #1
 8010134:	4413      	add	r3, r2
 8010136:	00db      	lsls	r3, r3, #3
 8010138:	440b      	add	r3, r1
 801013a:	681b      	ldr	r3, [r3, #0]
 801013c:	2b00      	cmp	r3, #0
 801013e:	d021      	beq.n	8010184 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8010140:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8010144:	4915      	ldr	r1, [pc, #84]	; (801019c <etharp_update_arp_entry+0x148>)
 8010146:	4613      	mov	r3, r2
 8010148:	005b      	lsls	r3, r3, #1
 801014a:	4413      	add	r3, r2
 801014c:	00db      	lsls	r3, r3, #3
 801014e:	440b      	add	r3, r1
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8010154:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8010158:	4910      	ldr	r1, [pc, #64]	; (801019c <etharp_update_arp_entry+0x148>)
 801015a:	4613      	mov	r3, r2
 801015c:	005b      	lsls	r3, r3, #1
 801015e:	4413      	add	r3, r2
 8010160:	00db      	lsls	r3, r3, #3
 8010162:	440b      	add	r3, r1
 8010164:	2200      	movs	r2, #0
 8010166:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	f103 022d 	add.w	r2, r3, #45	; 0x2d
 801016e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010172:	9300      	str	r3, [sp, #0]
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	6939      	ldr	r1, [r7, #16]
 8010178:	68f8      	ldr	r0, [r7, #12]
 801017a:	f001 ff07 	bl	8011f8c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801017e:	6938      	ldr	r0, [r7, #16]
 8010180:	f7f9 fe34 	bl	8009dec <pbuf_free>
  }
  return ERR_OK;
 8010184:	2300      	movs	r3, #0
}
 8010186:	4618      	mov	r0, r3
 8010188:	3718      	adds	r7, #24
 801018a:	46bd      	mov	sp, r7
 801018c:	bd80      	pop	{r7, pc}
 801018e:	bf00      	nop
 8010190:	080164ec 	.word	0x080164ec
 8010194:	0801661c 	.word	0x0801661c
 8010198:	0801659c 	.word	0x0801659c
 801019c:	20000294 	.word	0x20000294

080101a0 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80101a0:	b580      	push	{r7, lr}
 80101a2:	b084      	sub	sp, #16
 80101a4:	af00      	add	r7, sp, #0
 80101a6:	6078      	str	r0, [r7, #4]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80101a8:	2300      	movs	r3, #0
 80101aa:	73fb      	strb	r3, [r7, #15]
 80101ac:	e01f      	b.n	80101ee <etharp_cleanup_netif+0x4e>
    u8_t state = arp_table[i].state;
 80101ae:	7bfa      	ldrb	r2, [r7, #15]
 80101b0:	4912      	ldr	r1, [pc, #72]	; (80101fc <etharp_cleanup_netif+0x5c>)
 80101b2:	4613      	mov	r3, r2
 80101b4:	005b      	lsls	r3, r3, #1
 80101b6:	4413      	add	r3, r2
 80101b8:	00db      	lsls	r3, r3, #3
 80101ba:	440b      	add	r3, r1
 80101bc:	3314      	adds	r3, #20
 80101be:	781b      	ldrb	r3, [r3, #0]
 80101c0:	73bb      	strb	r3, [r7, #14]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80101c2:	7bbb      	ldrb	r3, [r7, #14]
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d00f      	beq.n	80101e8 <etharp_cleanup_netif+0x48>
 80101c8:	7bfa      	ldrb	r2, [r7, #15]
 80101ca:	490c      	ldr	r1, [pc, #48]	; (80101fc <etharp_cleanup_netif+0x5c>)
 80101cc:	4613      	mov	r3, r2
 80101ce:	005b      	lsls	r3, r3, #1
 80101d0:	4413      	add	r3, r2
 80101d2:	00db      	lsls	r3, r3, #3
 80101d4:	440b      	add	r3, r1
 80101d6:	3308      	adds	r3, #8
 80101d8:	681b      	ldr	r3, [r3, #0]
 80101da:	687a      	ldr	r2, [r7, #4]
 80101dc:	429a      	cmp	r2, r3
 80101de:	d103      	bne.n	80101e8 <etharp_cleanup_netif+0x48>
      etharp_free_entry(i);
 80101e0:	7bfb      	ldrb	r3, [r7, #15]
 80101e2:	4618      	mov	r0, r3
 80101e4:	f7ff fd12 	bl	800fc0c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80101e8:	7bfb      	ldrb	r3, [r7, #15]
 80101ea:	3301      	adds	r3, #1
 80101ec:	73fb      	strb	r3, [r7, #15]
 80101ee:	7bfb      	ldrb	r3, [r7, #15]
 80101f0:	2b09      	cmp	r3, #9
 80101f2:	d9dc      	bls.n	80101ae <etharp_cleanup_netif+0xe>
    }
  }
}
 80101f4:	bf00      	nop
 80101f6:	3710      	adds	r7, #16
 80101f8:	46bd      	mov	sp, r7
 80101fa:	bd80      	pop	{r7, pc}
 80101fc:	20000294 	.word	0x20000294

08010200 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8010200:	b5b0      	push	{r4, r5, r7, lr}
 8010202:	b08a      	sub	sp, #40	; 0x28
 8010204:	af04      	add	r7, sp, #16
 8010206:	6078      	str	r0, [r7, #4]
 8010208:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801020a:	683b      	ldr	r3, [r7, #0]
 801020c:	2b00      	cmp	r3, #0
 801020e:	d107      	bne.n	8010220 <etharp_input+0x20>
 8010210:	4b3d      	ldr	r3, [pc, #244]	; (8010308 <etharp_input+0x108>)
 8010212:	f44f 7222 	mov.w	r2, #648	; 0x288
 8010216:	493d      	ldr	r1, [pc, #244]	; (801030c <etharp_input+0x10c>)
 8010218:	483d      	ldr	r0, [pc, #244]	; (8010310 <etharp_input+0x110>)
 801021a:	f003 fecf 	bl	8013fbc <iprintf>
 801021e:	e06f      	b.n	8010300 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	685b      	ldr	r3, [r3, #4]
 8010224:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 8010226:	693b      	ldr	r3, [r7, #16]
 8010228:	881b      	ldrh	r3, [r3, #0]
 801022a:	b29b      	uxth	r3, r3
 801022c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010230:	d10c      	bne.n	801024c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8010232:	693b      	ldr	r3, [r7, #16]
 8010234:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 8010236:	2b06      	cmp	r3, #6
 8010238:	d108      	bne.n	801024c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801023a:	693b      	ldr	r3, [r7, #16]
 801023c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801023e:	2b04      	cmp	r3, #4
 8010240:	d104      	bne.n	801024c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8010242:	693b      	ldr	r3, [r7, #16]
 8010244:	885b      	ldrh	r3, [r3, #2]
 8010246:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8010248:	2b08      	cmp	r3, #8
 801024a:	d003      	beq.n	8010254 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801024c:	6878      	ldr	r0, [r7, #4]
 801024e:	f7f9 fdcd 	bl	8009dec <pbuf_free>
    return;
 8010252:	e055      	b.n	8010300 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 8010254:	693b      	ldr	r3, [r7, #16]
 8010256:	330e      	adds	r3, #14
 8010258:	681b      	ldr	r3, [r3, #0]
 801025a:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 801025c:	693b      	ldr	r3, [r7, #16]
 801025e:	3318      	adds	r3, #24
 8010260:	681b      	ldr	r3, [r3, #0]
 8010262:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8010264:	683b      	ldr	r3, [r7, #0]
 8010266:	3304      	adds	r3, #4
 8010268:	681b      	ldr	r3, [r3, #0]
 801026a:	2b00      	cmp	r3, #0
 801026c:	d102      	bne.n	8010274 <etharp_input+0x74>
    for_us = 0;
 801026e:	2300      	movs	r3, #0
 8010270:	75fb      	strb	r3, [r7, #23]
 8010272:	e009      	b.n	8010288 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8010274:	68ba      	ldr	r2, [r7, #8]
 8010276:	683b      	ldr	r3, [r7, #0]
 8010278:	3304      	adds	r3, #4
 801027a:	681b      	ldr	r3, [r3, #0]
 801027c:	429a      	cmp	r2, r3
 801027e:	bf0c      	ite	eq
 8010280:	2301      	moveq	r3, #1
 8010282:	2300      	movne	r3, #0
 8010284:	b2db      	uxtb	r3, r3
 8010286:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8010288:	693b      	ldr	r3, [r7, #16]
 801028a:	f103 0208 	add.w	r2, r3, #8
 801028e:	7dfb      	ldrb	r3, [r7, #23]
 8010290:	2b00      	cmp	r3, #0
 8010292:	d001      	beq.n	8010298 <etharp_input+0x98>
 8010294:	2301      	movs	r3, #1
 8010296:	e000      	b.n	801029a <etharp_input+0x9a>
 8010298:	2302      	movs	r3, #2
 801029a:	f107 010c 	add.w	r1, r7, #12
 801029e:	6838      	ldr	r0, [r7, #0]
 80102a0:	f7ff fed8 	bl	8010054 <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80102a4:	693b      	ldr	r3, [r7, #16]
 80102a6:	88db      	ldrh	r3, [r3, #6]
 80102a8:	b29b      	uxth	r3, r3
 80102aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80102ae:	d003      	beq.n	80102b8 <etharp_input+0xb8>
 80102b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80102b4:	d01e      	beq.n	80102f4 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
 80102b6:	e020      	b.n	80102fa <etharp_input+0xfa>
    if (for_us) {
 80102b8:	7dfb      	ldrb	r3, [r7, #23]
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d01c      	beq.n	80102f8 <etharp_input+0xf8>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80102be:	683b      	ldr	r3, [r7, #0]
 80102c0:	f103 002d 	add.w	r0, r3, #45	; 0x2d
 80102c4:	693b      	ldr	r3, [r7, #16]
 80102c6:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80102ca:	683b      	ldr	r3, [r7, #0]
 80102cc:	f103 052d 	add.w	r5, r3, #45	; 0x2d
 80102d0:	683b      	ldr	r3, [r7, #0]
 80102d2:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 80102d4:	693a      	ldr	r2, [r7, #16]
 80102d6:	3208      	adds	r2, #8
      etharp_raw(netif,
 80102d8:	2102      	movs	r1, #2
 80102da:	9103      	str	r1, [sp, #12]
 80102dc:	f107 010c 	add.w	r1, r7, #12
 80102e0:	9102      	str	r1, [sp, #8]
 80102e2:	9201      	str	r2, [sp, #4]
 80102e4:	9300      	str	r3, [sp, #0]
 80102e6:	462b      	mov	r3, r5
 80102e8:	4622      	mov	r2, r4
 80102ea:	4601      	mov	r1, r0
 80102ec:	6838      	ldr	r0, [r7, #0]
 80102ee:	f000 fae3 	bl	80108b8 <etharp_raw>
    break;
 80102f2:	e001      	b.n	80102f8 <etharp_input+0xf8>
    break;
 80102f4:	bf00      	nop
 80102f6:	e000      	b.n	80102fa <etharp_input+0xfa>
    break;
 80102f8:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80102fa:	6878      	ldr	r0, [r7, #4]
 80102fc:	f7f9 fd76 	bl	8009dec <pbuf_free>
}
 8010300:	3718      	adds	r7, #24
 8010302:	46bd      	mov	sp, r7
 8010304:	bdb0      	pop	{r4, r5, r7, pc}
 8010306:	bf00      	nop
 8010308:	080164ec 	.word	0x080164ec
 801030c:	08016674 	.word	0x08016674
 8010310:	0801659c 	.word	0x0801659c

08010314 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 8010314:	b580      	push	{r7, lr}
 8010316:	b086      	sub	sp, #24
 8010318:	af02      	add	r7, sp, #8
 801031a:	60f8      	str	r0, [r7, #12]
 801031c:	60b9      	str	r1, [r7, #8]
 801031e:	4613      	mov	r3, r2
 8010320:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8010322:	79fa      	ldrb	r2, [r7, #7]
 8010324:	4944      	ldr	r1, [pc, #272]	; (8010438 <etharp_output_to_arp_index+0x124>)
 8010326:	4613      	mov	r3, r2
 8010328:	005b      	lsls	r3, r3, #1
 801032a:	4413      	add	r3, r2
 801032c:	00db      	lsls	r3, r3, #3
 801032e:	440b      	add	r3, r1
 8010330:	3314      	adds	r3, #20
 8010332:	781b      	ldrb	r3, [r3, #0]
 8010334:	2b01      	cmp	r3, #1
 8010336:	d806      	bhi.n	8010346 <etharp_output_to_arp_index+0x32>
 8010338:	4b40      	ldr	r3, [pc, #256]	; (801043c <etharp_output_to_arp_index+0x128>)
 801033a:	f240 22ed 	movw	r2, #749	; 0x2ed
 801033e:	4940      	ldr	r1, [pc, #256]	; (8010440 <etharp_output_to_arp_index+0x12c>)
 8010340:	4840      	ldr	r0, [pc, #256]	; (8010444 <etharp_output_to_arp_index+0x130>)
 8010342:	f003 fe3b 	bl	8013fbc <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8010346:	79fa      	ldrb	r2, [r7, #7]
 8010348:	493b      	ldr	r1, [pc, #236]	; (8010438 <etharp_output_to_arp_index+0x124>)
 801034a:	4613      	mov	r3, r2
 801034c:	005b      	lsls	r3, r3, #1
 801034e:	4413      	add	r3, r2
 8010350:	00db      	lsls	r3, r3, #3
 8010352:	440b      	add	r3, r1
 8010354:	3314      	adds	r3, #20
 8010356:	781b      	ldrb	r3, [r3, #0]
 8010358:	2b02      	cmp	r3, #2
 801035a:	d153      	bne.n	8010404 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801035c:	79fa      	ldrb	r2, [r7, #7]
 801035e:	4936      	ldr	r1, [pc, #216]	; (8010438 <etharp_output_to_arp_index+0x124>)
 8010360:	4613      	mov	r3, r2
 8010362:	005b      	lsls	r3, r3, #1
 8010364:	4413      	add	r3, r2
 8010366:	00db      	lsls	r3, r3, #3
 8010368:	440b      	add	r3, r1
 801036a:	3312      	adds	r3, #18
 801036c:	881b      	ldrh	r3, [r3, #0]
 801036e:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8010372:	d919      	bls.n	80103a8 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8010374:	79fa      	ldrb	r2, [r7, #7]
 8010376:	4613      	mov	r3, r2
 8010378:	005b      	lsls	r3, r3, #1
 801037a:	4413      	add	r3, r2
 801037c:	00db      	lsls	r3, r3, #3
 801037e:	4a2e      	ldr	r2, [pc, #184]	; (8010438 <etharp_output_to_arp_index+0x124>)
 8010380:	4413      	add	r3, r2
 8010382:	3304      	adds	r3, #4
 8010384:	4619      	mov	r1, r3
 8010386:	68f8      	ldr	r0, [r7, #12]
 8010388:	f000 fb44 	bl	8010a14 <etharp_request>
 801038c:	4603      	mov	r3, r0
 801038e:	2b00      	cmp	r3, #0
 8010390:	d138      	bne.n	8010404 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8010392:	79fa      	ldrb	r2, [r7, #7]
 8010394:	4928      	ldr	r1, [pc, #160]	; (8010438 <etharp_output_to_arp_index+0x124>)
 8010396:	4613      	mov	r3, r2
 8010398:	005b      	lsls	r3, r3, #1
 801039a:	4413      	add	r3, r2
 801039c:	00db      	lsls	r3, r3, #3
 801039e:	440b      	add	r3, r1
 80103a0:	3314      	adds	r3, #20
 80103a2:	2203      	movs	r2, #3
 80103a4:	701a      	strb	r2, [r3, #0]
 80103a6:	e02d      	b.n	8010404 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80103a8:	79fa      	ldrb	r2, [r7, #7]
 80103aa:	4923      	ldr	r1, [pc, #140]	; (8010438 <etharp_output_to_arp_index+0x124>)
 80103ac:	4613      	mov	r3, r2
 80103ae:	005b      	lsls	r3, r3, #1
 80103b0:	4413      	add	r3, r2
 80103b2:	00db      	lsls	r3, r3, #3
 80103b4:	440b      	add	r3, r1
 80103b6:	3312      	adds	r3, #18
 80103b8:	881b      	ldrh	r3, [r3, #0]
 80103ba:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80103be:	d321      	bcc.n	8010404 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80103c0:	79fa      	ldrb	r2, [r7, #7]
 80103c2:	4613      	mov	r3, r2
 80103c4:	005b      	lsls	r3, r3, #1
 80103c6:	4413      	add	r3, r2
 80103c8:	00db      	lsls	r3, r3, #3
 80103ca:	4a1b      	ldr	r2, [pc, #108]	; (8010438 <etharp_output_to_arp_index+0x124>)
 80103cc:	4413      	add	r3, r2
 80103ce:	1d19      	adds	r1, r3, #4
 80103d0:	79fa      	ldrb	r2, [r7, #7]
 80103d2:	4613      	mov	r3, r2
 80103d4:	005b      	lsls	r3, r3, #1
 80103d6:	4413      	add	r3, r2
 80103d8:	00db      	lsls	r3, r3, #3
 80103da:	3308      	adds	r3, #8
 80103dc:	4a16      	ldr	r2, [pc, #88]	; (8010438 <etharp_output_to_arp_index+0x124>)
 80103de:	4413      	add	r3, r2
 80103e0:	3304      	adds	r3, #4
 80103e2:	461a      	mov	r2, r3
 80103e4:	68f8      	ldr	r0, [r7, #12]
 80103e6:	f000 faf3 	bl	80109d0 <etharp_request_dst>
 80103ea:	4603      	mov	r3, r0
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	d109      	bne.n	8010404 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80103f0:	79fa      	ldrb	r2, [r7, #7]
 80103f2:	4911      	ldr	r1, [pc, #68]	; (8010438 <etharp_output_to_arp_index+0x124>)
 80103f4:	4613      	mov	r3, r2
 80103f6:	005b      	lsls	r3, r3, #1
 80103f8:	4413      	add	r3, r2
 80103fa:	00db      	lsls	r3, r3, #3
 80103fc:	440b      	add	r3, r1
 80103fe:	3314      	adds	r3, #20
 8010400:	2203      	movs	r2, #3
 8010402:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8010404:	68fb      	ldr	r3, [r7, #12]
 8010406:	f103 012d 	add.w	r1, r3, #45	; 0x2d
 801040a:	79fa      	ldrb	r2, [r7, #7]
 801040c:	4613      	mov	r3, r2
 801040e:	005b      	lsls	r3, r3, #1
 8010410:	4413      	add	r3, r2
 8010412:	00db      	lsls	r3, r3, #3
 8010414:	3308      	adds	r3, #8
 8010416:	4a08      	ldr	r2, [pc, #32]	; (8010438 <etharp_output_to_arp_index+0x124>)
 8010418:	4413      	add	r3, r2
 801041a:	1d1a      	adds	r2, r3, #4
 801041c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010420:	9300      	str	r3, [sp, #0]
 8010422:	4613      	mov	r3, r2
 8010424:	460a      	mov	r2, r1
 8010426:	68b9      	ldr	r1, [r7, #8]
 8010428:	68f8      	ldr	r0, [r7, #12]
 801042a:	f001 fdaf 	bl	8011f8c <ethernet_output>
 801042e:	4603      	mov	r3, r0
}
 8010430:	4618      	mov	r0, r3
 8010432:	3710      	adds	r7, #16
 8010434:	46bd      	mov	sp, r7
 8010436:	bd80      	pop	{r7, pc}
 8010438:	20000294 	.word	0x20000294
 801043c:	080164ec 	.word	0x080164ec
 8010440:	08016694 	.word	0x08016694
 8010444:	0801659c 	.word	0x0801659c

08010448 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8010448:	b580      	push	{r7, lr}
 801044a:	b08a      	sub	sp, #40	; 0x28
 801044c:	af02      	add	r7, sp, #8
 801044e:	60f8      	str	r0, [r7, #12]
 8010450:	60b9      	str	r1, [r7, #8]
 8010452:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8010458:	68fb      	ldr	r3, [r7, #12]
 801045a:	2b00      	cmp	r3, #0
 801045c:	d106      	bne.n	801046c <etharp_output+0x24>
 801045e:	4b69      	ldr	r3, [pc, #420]	; (8010604 <etharp_output+0x1bc>)
 8010460:	f240 321b 	movw	r2, #795	; 0x31b
 8010464:	4968      	ldr	r1, [pc, #416]	; (8010608 <etharp_output+0x1c0>)
 8010466:	4869      	ldr	r0, [pc, #420]	; (801060c <etharp_output+0x1c4>)
 8010468:	f003 fda8 	bl	8013fbc <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801046c:	68bb      	ldr	r3, [r7, #8]
 801046e:	2b00      	cmp	r3, #0
 8010470:	d106      	bne.n	8010480 <etharp_output+0x38>
 8010472:	4b64      	ldr	r3, [pc, #400]	; (8010604 <etharp_output+0x1bc>)
 8010474:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8010478:	4965      	ldr	r1, [pc, #404]	; (8010610 <etharp_output+0x1c8>)
 801047a:	4864      	ldr	r0, [pc, #400]	; (801060c <etharp_output+0x1c4>)
 801047c:	f003 fd9e 	bl	8013fbc <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	2b00      	cmp	r3, #0
 8010484:	d106      	bne.n	8010494 <etharp_output+0x4c>
 8010486:	4b5f      	ldr	r3, [pc, #380]	; (8010604 <etharp_output+0x1bc>)
 8010488:	f240 321d 	movw	r2, #797	; 0x31d
 801048c:	4961      	ldr	r1, [pc, #388]	; (8010614 <etharp_output+0x1cc>)
 801048e:	485f      	ldr	r0, [pc, #380]	; (801060c <etharp_output+0x1c4>)
 8010490:	f003 fd94 	bl	8013fbc <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	681b      	ldr	r3, [r3, #0]
 8010498:	68f9      	ldr	r1, [r7, #12]
 801049a:	4618      	mov	r0, r3
 801049c:	f000 fed4 	bl	8011248 <ip4_addr_isbroadcast_u32>
 80104a0:	4603      	mov	r3, r0
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	d002      	beq.n	80104ac <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80104a6:	4b5c      	ldr	r3, [pc, #368]	; (8010618 <etharp_output+0x1d0>)
 80104a8:	61fb      	str	r3, [r7, #28]
 80104aa:	e09b      	b.n	80105e4 <etharp_output+0x19c>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	681b      	ldr	r3, [r3, #0]
 80104b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80104b4:	2be0      	cmp	r3, #224	; 0xe0
 80104b6:	d118      	bne.n	80104ea <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80104b8:	2301      	movs	r3, #1
 80104ba:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80104bc:	2300      	movs	r3, #0
 80104be:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80104c0:	235e      	movs	r3, #94	; 0x5e
 80104c2:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	3301      	adds	r3, #1
 80104c8:	781b      	ldrb	r3, [r3, #0]
 80104ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80104ce:	b2db      	uxtb	r3, r3
 80104d0:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	3302      	adds	r3, #2
 80104d6:	781b      	ldrb	r3, [r3, #0]
 80104d8:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	3303      	adds	r3, #3
 80104de:	781b      	ldrb	r3, [r3, #0]
 80104e0:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80104e2:	f107 0310 	add.w	r3, r7, #16
 80104e6:	61fb      	str	r3, [r7, #28]
 80104e8:	e07c      	b.n	80105e4 <etharp_output+0x19c>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	681a      	ldr	r2, [r3, #0]
 80104ee:	68fb      	ldr	r3, [r7, #12]
 80104f0:	3304      	adds	r3, #4
 80104f2:	681b      	ldr	r3, [r3, #0]
 80104f4:	405a      	eors	r2, r3
 80104f6:	68fb      	ldr	r3, [r7, #12]
 80104f8:	3308      	adds	r3, #8
 80104fa:	681b      	ldr	r3, [r3, #0]
 80104fc:	4013      	ands	r3, r2
 80104fe:	2b00      	cmp	r3, #0
 8010500:	d012      	beq.n	8010528 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	681b      	ldr	r3, [r3, #0]
 8010506:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8010508:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801050c:	4293      	cmp	r3, r2
 801050e:	d00b      	beq.n	8010528 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8010510:	68fb      	ldr	r3, [r7, #12]
 8010512:	330c      	adds	r3, #12
 8010514:	681b      	ldr	r3, [r3, #0]
 8010516:	2b00      	cmp	r3, #0
 8010518:	d003      	beq.n	8010522 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801051a:	68fb      	ldr	r3, [r7, #12]
 801051c:	330c      	adds	r3, #12
 801051e:	61bb      	str	r3, [r7, #24]
 8010520:	e002      	b.n	8010528 <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8010522:	f06f 0303 	mvn.w	r3, #3
 8010526:	e069      	b.n	80105fc <etharp_output+0x1b4>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8010528:	4b3c      	ldr	r3, [pc, #240]	; (801061c <etharp_output+0x1d4>)
 801052a:	781b      	ldrb	r3, [r3, #0]
 801052c:	4619      	mov	r1, r3
 801052e:	4a3c      	ldr	r2, [pc, #240]	; (8010620 <etharp_output+0x1d8>)
 8010530:	460b      	mov	r3, r1
 8010532:	005b      	lsls	r3, r3, #1
 8010534:	440b      	add	r3, r1
 8010536:	00db      	lsls	r3, r3, #3
 8010538:	4413      	add	r3, r2
 801053a:	3314      	adds	r3, #20
 801053c:	781b      	ldrb	r3, [r3, #0]
 801053e:	2b01      	cmp	r3, #1
 8010540:	d917      	bls.n	8010572 <etharp_output+0x12a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8010542:	69bb      	ldr	r3, [r7, #24]
 8010544:	681a      	ldr	r2, [r3, #0]
 8010546:	4b35      	ldr	r3, [pc, #212]	; (801061c <etharp_output+0x1d4>)
 8010548:	781b      	ldrb	r3, [r3, #0]
 801054a:	4618      	mov	r0, r3
 801054c:	4934      	ldr	r1, [pc, #208]	; (8010620 <etharp_output+0x1d8>)
 801054e:	4603      	mov	r3, r0
 8010550:	005b      	lsls	r3, r3, #1
 8010552:	4403      	add	r3, r0
 8010554:	00db      	lsls	r3, r3, #3
 8010556:	440b      	add	r3, r1
 8010558:	3304      	adds	r3, #4
 801055a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801055c:	429a      	cmp	r2, r3
 801055e:	d108      	bne.n	8010572 <etharp_output+0x12a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8010560:	4b2e      	ldr	r3, [pc, #184]	; (801061c <etharp_output+0x1d4>)
 8010562:	781b      	ldrb	r3, [r3, #0]
 8010564:	461a      	mov	r2, r3
 8010566:	68b9      	ldr	r1, [r7, #8]
 8010568:	68f8      	ldr	r0, [r7, #12]
 801056a:	f7ff fed3 	bl	8010314 <etharp_output_to_arp_index>
 801056e:	4603      	mov	r3, r0
 8010570:	e044      	b.n	80105fc <etharp_output+0x1b4>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8010572:	2300      	movs	r3, #0
 8010574:	75fb      	strb	r3, [r7, #23]
 8010576:	e02a      	b.n	80105ce <etharp_output+0x186>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8010578:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801057c:	4928      	ldr	r1, [pc, #160]	; (8010620 <etharp_output+0x1d8>)
 801057e:	4613      	mov	r3, r2
 8010580:	005b      	lsls	r3, r3, #1
 8010582:	4413      	add	r3, r2
 8010584:	00db      	lsls	r3, r3, #3
 8010586:	440b      	add	r3, r1
 8010588:	3314      	adds	r3, #20
 801058a:	781b      	ldrb	r3, [r3, #0]
 801058c:	2b01      	cmp	r3, #1
 801058e:	d918      	bls.n	80105c2 <etharp_output+0x17a>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8010590:	69bb      	ldr	r3, [r7, #24]
 8010592:	6819      	ldr	r1, [r3, #0]
 8010594:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8010598:	4821      	ldr	r0, [pc, #132]	; (8010620 <etharp_output+0x1d8>)
 801059a:	4613      	mov	r3, r2
 801059c:	005b      	lsls	r3, r3, #1
 801059e:	4413      	add	r3, r2
 80105a0:	00db      	lsls	r3, r3, #3
 80105a2:	4403      	add	r3, r0
 80105a4:	3304      	adds	r3, #4
 80105a6:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80105a8:	4299      	cmp	r1, r3
 80105aa:	d10a      	bne.n	80105c2 <etharp_output+0x17a>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 80105ac:	7dfa      	ldrb	r2, [r7, #23]
 80105ae:	4b1b      	ldr	r3, [pc, #108]	; (801061c <etharp_output+0x1d4>)
 80105b0:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80105b2:	7dfb      	ldrb	r3, [r7, #23]
 80105b4:	461a      	mov	r2, r3
 80105b6:	68b9      	ldr	r1, [r7, #8]
 80105b8:	68f8      	ldr	r0, [r7, #12]
 80105ba:	f7ff feab 	bl	8010314 <etharp_output_to_arp_index>
 80105be:	4603      	mov	r3, r0
 80105c0:	e01c      	b.n	80105fc <etharp_output+0x1b4>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80105c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80105c6:	b2db      	uxtb	r3, r3
 80105c8:	3301      	adds	r3, #1
 80105ca:	b2db      	uxtb	r3, r3
 80105cc:	75fb      	strb	r3, [r7, #23]
 80105ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80105d2:	2b09      	cmp	r3, #9
 80105d4:	ddd0      	ble.n	8010578 <etharp_output+0x130>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80105d6:	68ba      	ldr	r2, [r7, #8]
 80105d8:	69b9      	ldr	r1, [r7, #24]
 80105da:	68f8      	ldr	r0, [r7, #12]
 80105dc:	f000 f822 	bl	8010624 <etharp_query>
 80105e0:	4603      	mov	r3, r0
 80105e2:	e00b      	b.n	80105fc <etharp_output+0x1b4>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 80105e4:	68fb      	ldr	r3, [r7, #12]
 80105e6:	f103 022d 	add.w	r2, r3, #45	; 0x2d
 80105ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80105ee:	9300      	str	r3, [sp, #0]
 80105f0:	69fb      	ldr	r3, [r7, #28]
 80105f2:	68b9      	ldr	r1, [r7, #8]
 80105f4:	68f8      	ldr	r0, [r7, #12]
 80105f6:	f001 fcc9 	bl	8011f8c <ethernet_output>
 80105fa:	4603      	mov	r3, r0
}
 80105fc:	4618      	mov	r0, r3
 80105fe:	3720      	adds	r7, #32
 8010600:	46bd      	mov	sp, r7
 8010602:	bd80      	pop	{r7, pc}
 8010604:	080164ec 	.word	0x080164ec
 8010608:	08016674 	.word	0x08016674
 801060c:	0801659c 	.word	0x0801659c
 8010610:	080166c4 	.word	0x080166c4
 8010614:	08016664 	.word	0x08016664
 8010618:	08016e4c 	.word	0x08016e4c
 801061c:	20000384 	.word	0x20000384
 8010620:	20000294 	.word	0x20000294

08010624 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8010624:	b580      	push	{r7, lr}
 8010626:	b08c      	sub	sp, #48	; 0x30
 8010628:	af02      	add	r7, sp, #8
 801062a:	60f8      	str	r0, [r7, #12]
 801062c:	60b9      	str	r1, [r7, #8]
 801062e:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 8010630:	68fb      	ldr	r3, [r7, #12]
 8010632:	332d      	adds	r3, #45	; 0x2d
 8010634:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8010636:	23ff      	movs	r3, #255	; 0xff
 8010638:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 801063c:	2300      	movs	r3, #0
 801063e:	623b      	str	r3, [r7, #32]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8010640:	68bb      	ldr	r3, [r7, #8]
 8010642:	681b      	ldr	r3, [r3, #0]
 8010644:	68f9      	ldr	r1, [r7, #12]
 8010646:	4618      	mov	r0, r3
 8010648:	f000 fdfe 	bl	8011248 <ip4_addr_isbroadcast_u32>
 801064c:	4603      	mov	r3, r0
 801064e:	2b00      	cmp	r3, #0
 8010650:	d10c      	bne.n	801066c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8010652:	68bb      	ldr	r3, [r7, #8]
 8010654:	681b      	ldr	r3, [r3, #0]
 8010656:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801065a:	2be0      	cmp	r3, #224	; 0xe0
 801065c:	d006      	beq.n	801066c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801065e:	68bb      	ldr	r3, [r7, #8]
 8010660:	2b00      	cmp	r3, #0
 8010662:	d003      	beq.n	801066c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8010664:	68bb      	ldr	r3, [r7, #8]
 8010666:	681b      	ldr	r3, [r3, #0]
 8010668:	2b00      	cmp	r3, #0
 801066a:	d102      	bne.n	8010672 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801066c:	f06f 030f 	mvn.w	r3, #15
 8010670:	e10f      	b.n	8010892 <etharp_query+0x26e>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8010672:	68fa      	ldr	r2, [r7, #12]
 8010674:	2101      	movs	r1, #1
 8010676:	68b8      	ldr	r0, [r7, #8]
 8010678:	f7ff fba2 	bl	800fdc0 <etharp_find_entry>
 801067c:	4603      	mov	r3, r0
 801067e:	74fb      	strb	r3, [r7, #19]

  /* could not find or create entry? */
  if (i < 0) {
 8010680:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010684:	2b00      	cmp	r3, #0
 8010686:	da02      	bge.n	801068e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
 8010688:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801068c:	e101      	b.n	8010892 <etharp_query+0x26e>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801068e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8010692:	4982      	ldr	r1, [pc, #520]	; (801089c <etharp_query+0x278>)
 8010694:	4613      	mov	r3, r2
 8010696:	005b      	lsls	r3, r3, #1
 8010698:	4413      	add	r3, r2
 801069a:	00db      	lsls	r3, r3, #3
 801069c:	440b      	add	r3, r1
 801069e:	3314      	adds	r3, #20
 80106a0:	781b      	ldrb	r3, [r3, #0]
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	d117      	bne.n	80106d6 <etharp_query+0xb2>
    is_new_entry = 1;
 80106a6:	2301      	movs	r3, #1
 80106a8:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80106aa:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80106ae:	497b      	ldr	r1, [pc, #492]	; (801089c <etharp_query+0x278>)
 80106b0:	4613      	mov	r3, r2
 80106b2:	005b      	lsls	r3, r3, #1
 80106b4:	4413      	add	r3, r2
 80106b6:	00db      	lsls	r3, r3, #3
 80106b8:	440b      	add	r3, r1
 80106ba:	3314      	adds	r3, #20
 80106bc:	2201      	movs	r2, #1
 80106be:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80106c0:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80106c4:	4975      	ldr	r1, [pc, #468]	; (801089c <etharp_query+0x278>)
 80106c6:	4613      	mov	r3, r2
 80106c8:	005b      	lsls	r3, r3, #1
 80106ca:	4413      	add	r3, r2
 80106cc:	00db      	lsls	r3, r3, #3
 80106ce:	440b      	add	r3, r1
 80106d0:	3308      	adds	r3, #8
 80106d2:	68fa      	ldr	r2, [r7, #12]
 80106d4:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80106d6:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80106da:	4970      	ldr	r1, [pc, #448]	; (801089c <etharp_query+0x278>)
 80106dc:	4613      	mov	r3, r2
 80106de:	005b      	lsls	r3, r3, #1
 80106e0:	4413      	add	r3, r2
 80106e2:	00db      	lsls	r3, r3, #3
 80106e4:	440b      	add	r3, r1
 80106e6:	3314      	adds	r3, #20
 80106e8:	781b      	ldrb	r3, [r3, #0]
 80106ea:	2b01      	cmp	r3, #1
 80106ec:	d012      	beq.n	8010714 <etharp_query+0xf0>
 80106ee:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80106f2:	496a      	ldr	r1, [pc, #424]	; (801089c <etharp_query+0x278>)
 80106f4:	4613      	mov	r3, r2
 80106f6:	005b      	lsls	r3, r3, #1
 80106f8:	4413      	add	r3, r2
 80106fa:	00db      	lsls	r3, r3, #3
 80106fc:	440b      	add	r3, r1
 80106fe:	3314      	adds	r3, #20
 8010700:	781b      	ldrb	r3, [r3, #0]
 8010702:	2b01      	cmp	r3, #1
 8010704:	d806      	bhi.n	8010714 <etharp_query+0xf0>
 8010706:	4b66      	ldr	r3, [pc, #408]	; (80108a0 <etharp_query+0x27c>)
 8010708:	f240 32c9 	movw	r2, #969	; 0x3c9
 801070c:	4965      	ldr	r1, [pc, #404]	; (80108a4 <etharp_query+0x280>)
 801070e:	4866      	ldr	r0, [pc, #408]	; (80108a8 <etharp_query+0x284>)
 8010710:	f003 fc54 	bl	8013fbc <iprintf>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8010714:	6a3b      	ldr	r3, [r7, #32]
 8010716:	2b00      	cmp	r3, #0
 8010718:	d102      	bne.n	8010720 <etharp_query+0xfc>
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	2b00      	cmp	r3, #0
 801071e:	d10c      	bne.n	801073a <etharp_query+0x116>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8010720:	68b9      	ldr	r1, [r7, #8]
 8010722:	68f8      	ldr	r0, [r7, #12]
 8010724:	f000 f976 	bl	8010a14 <etharp_request>
 8010728:	4603      	mov	r3, r0
 801072a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	2b00      	cmp	r3, #0
 8010732:	d102      	bne.n	801073a <etharp_query+0x116>
      return result;
 8010734:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010738:	e0ab      	b.n	8010892 <etharp_query+0x26e>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	2b00      	cmp	r3, #0
 801073e:	d106      	bne.n	801074e <etharp_query+0x12a>
 8010740:	4b57      	ldr	r3, [pc, #348]	; (80108a0 <etharp_query+0x27c>)
 8010742:	f240 32db 	movw	r2, #987	; 0x3db
 8010746:	4959      	ldr	r1, [pc, #356]	; (80108ac <etharp_query+0x288>)
 8010748:	4857      	ldr	r0, [pc, #348]	; (80108a8 <etharp_query+0x284>)
 801074a:	f003 fc37 	bl	8013fbc <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801074e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8010752:	4952      	ldr	r1, [pc, #328]	; (801089c <etharp_query+0x278>)
 8010754:	4613      	mov	r3, r2
 8010756:	005b      	lsls	r3, r3, #1
 8010758:	4413      	add	r3, r2
 801075a:	00db      	lsls	r3, r3, #3
 801075c:	440b      	add	r3, r1
 801075e:	3314      	adds	r3, #20
 8010760:	781b      	ldrb	r3, [r3, #0]
 8010762:	2b01      	cmp	r3, #1
 8010764:	d919      	bls.n	801079a <etharp_query+0x176>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 8010766:	7cfa      	ldrb	r2, [r7, #19]
 8010768:	4b51      	ldr	r3, [pc, #324]	; (80108b0 <etharp_query+0x28c>)
 801076a:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801076c:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8010770:	4613      	mov	r3, r2
 8010772:	005b      	lsls	r3, r3, #1
 8010774:	4413      	add	r3, r2
 8010776:	00db      	lsls	r3, r3, #3
 8010778:	3308      	adds	r3, #8
 801077a:	4a48      	ldr	r2, [pc, #288]	; (801089c <etharp_query+0x278>)
 801077c:	4413      	add	r3, r2
 801077e:	1d1a      	adds	r2, r3, #4
 8010780:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010784:	9300      	str	r3, [sp, #0]
 8010786:	4613      	mov	r3, r2
 8010788:	697a      	ldr	r2, [r7, #20]
 801078a:	6879      	ldr	r1, [r7, #4]
 801078c:	68f8      	ldr	r0, [r7, #12]
 801078e:	f001 fbfd 	bl	8011f8c <ethernet_output>
 8010792:	4603      	mov	r3, r0
 8010794:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010798:	e079      	b.n	801088e <etharp_query+0x26a>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801079a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801079e:	493f      	ldr	r1, [pc, #252]	; (801089c <etharp_query+0x278>)
 80107a0:	4613      	mov	r3, r2
 80107a2:	005b      	lsls	r3, r3, #1
 80107a4:	4413      	add	r3, r2
 80107a6:	00db      	lsls	r3, r3, #3
 80107a8:	440b      	add	r3, r1
 80107aa:	3314      	adds	r3, #20
 80107ac:	781b      	ldrb	r3, [r3, #0]
 80107ae:	2b01      	cmp	r3, #1
 80107b0:	d16d      	bne.n	801088e <etharp_query+0x26a>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80107b2:	2300      	movs	r3, #0
 80107b4:	61bb      	str	r3, [r7, #24]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	61fb      	str	r3, [r7, #28]
    while (p) {
 80107ba:	e01a      	b.n	80107f2 <etharp_query+0x1ce>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80107bc:	69fb      	ldr	r3, [r7, #28]
 80107be:	895a      	ldrh	r2, [r3, #10]
 80107c0:	69fb      	ldr	r3, [r7, #28]
 80107c2:	891b      	ldrh	r3, [r3, #8]
 80107c4:	429a      	cmp	r2, r3
 80107c6:	d10a      	bne.n	80107de <etharp_query+0x1ba>
 80107c8:	69fb      	ldr	r3, [r7, #28]
 80107ca:	681b      	ldr	r3, [r3, #0]
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	d006      	beq.n	80107de <etharp_query+0x1ba>
 80107d0:	4b33      	ldr	r3, [pc, #204]	; (80108a0 <etharp_query+0x27c>)
 80107d2:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 80107d6:	4937      	ldr	r1, [pc, #220]	; (80108b4 <etharp_query+0x290>)
 80107d8:	4833      	ldr	r0, [pc, #204]	; (80108a8 <etharp_query+0x284>)
 80107da:	f003 fbef 	bl	8013fbc <iprintf>
      if (p->type != PBUF_ROM) {
 80107de:	69fb      	ldr	r3, [r7, #28]
 80107e0:	7b1b      	ldrb	r3, [r3, #12]
 80107e2:	2b01      	cmp	r3, #1
 80107e4:	d002      	beq.n	80107ec <etharp_query+0x1c8>
        copy_needed = 1;
 80107e6:	2301      	movs	r3, #1
 80107e8:	61bb      	str	r3, [r7, #24]
        break;
 80107ea:	e005      	b.n	80107f8 <etharp_query+0x1d4>
      }
      p = p->next;
 80107ec:	69fb      	ldr	r3, [r7, #28]
 80107ee:	681b      	ldr	r3, [r3, #0]
 80107f0:	61fb      	str	r3, [r7, #28]
    while (p) {
 80107f2:	69fb      	ldr	r3, [r7, #28]
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	d1e1      	bne.n	80107bc <etharp_query+0x198>
    }
    if (copy_needed) {
 80107f8:	69bb      	ldr	r3, [r7, #24]
 80107fa:	2b00      	cmp	r3, #0
 80107fc:	d017      	beq.n	801082e <etharp_query+0x20a>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 80107fe:	69fb      	ldr	r3, [r7, #28]
 8010800:	891b      	ldrh	r3, [r3, #8]
 8010802:	2200      	movs	r2, #0
 8010804:	4619      	mov	r1, r3
 8010806:	2002      	movs	r0, #2
 8010808:	f7f8 ff7e 	bl	8009708 <pbuf_alloc>
 801080c:	61f8      	str	r0, [r7, #28]
      if (p != NULL) {
 801080e:	69fb      	ldr	r3, [r7, #28]
 8010810:	2b00      	cmp	r3, #0
 8010812:	d011      	beq.n	8010838 <etharp_query+0x214>
        if (pbuf_copy(p, q) != ERR_OK) {
 8010814:	6879      	ldr	r1, [r7, #4]
 8010816:	69f8      	ldr	r0, [r7, #28]
 8010818:	f7f9 fc1c 	bl	800a054 <pbuf_copy>
 801081c:	4603      	mov	r3, r0
 801081e:	2b00      	cmp	r3, #0
 8010820:	d00a      	beq.n	8010838 <etharp_query+0x214>
          pbuf_free(p);
 8010822:	69f8      	ldr	r0, [r7, #28]
 8010824:	f7f9 fae2 	bl	8009dec <pbuf_free>
          p = NULL;
 8010828:	2300      	movs	r3, #0
 801082a:	61fb      	str	r3, [r7, #28]
 801082c:	e004      	b.n	8010838 <etharp_query+0x214>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8010832:	69f8      	ldr	r0, [r7, #28]
 8010834:	f7f9 fb86 	bl	8009f44 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8010838:	69fb      	ldr	r3, [r7, #28]
 801083a:	2b00      	cmp	r3, #0
 801083c:	d024      	beq.n	8010888 <etharp_query+0x264>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801083e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8010842:	4916      	ldr	r1, [pc, #88]	; (801089c <etharp_query+0x278>)
 8010844:	4613      	mov	r3, r2
 8010846:	005b      	lsls	r3, r3, #1
 8010848:	4413      	add	r3, r2
 801084a:	00db      	lsls	r3, r3, #3
 801084c:	440b      	add	r3, r1
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	2b00      	cmp	r3, #0
 8010852:	d00b      	beq.n	801086c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 8010854:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8010858:	4910      	ldr	r1, [pc, #64]	; (801089c <etharp_query+0x278>)
 801085a:	4613      	mov	r3, r2
 801085c:	005b      	lsls	r3, r3, #1
 801085e:	4413      	add	r3, r2
 8010860:	00db      	lsls	r3, r3, #3
 8010862:	440b      	add	r3, r1
 8010864:	681b      	ldr	r3, [r3, #0]
 8010866:	4618      	mov	r0, r3
 8010868:	f7f9 fac0 	bl	8009dec <pbuf_free>
      }
      arp_table[i].q = p;
 801086c:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8010870:	490a      	ldr	r1, [pc, #40]	; (801089c <etharp_query+0x278>)
 8010872:	4613      	mov	r3, r2
 8010874:	005b      	lsls	r3, r3, #1
 8010876:	4413      	add	r3, r2
 8010878:	00db      	lsls	r3, r3, #3
 801087a:	440b      	add	r3, r1
 801087c:	69fa      	ldr	r2, [r7, #28]
 801087e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8010880:	2300      	movs	r3, #0
 8010882:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010886:	e002      	b.n	801088e <etharp_query+0x26a>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8010888:	23ff      	movs	r3, #255	; 0xff
 801088a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801088e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8010892:	4618      	mov	r0, r3
 8010894:	3728      	adds	r7, #40	; 0x28
 8010896:	46bd      	mov	sp, r7
 8010898:	bd80      	pop	{r7, pc}
 801089a:	bf00      	nop
 801089c:	20000294 	.word	0x20000294
 80108a0:	080164ec 	.word	0x080164ec
 80108a4:	080166d0 	.word	0x080166d0
 80108a8:	0801659c 	.word	0x0801659c
 80108ac:	080166c4 	.word	0x080166c4
 80108b0:	20000384 	.word	0x20000384
 80108b4:	080166f8 	.word	0x080166f8

080108b8 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80108b8:	b580      	push	{r7, lr}
 80108ba:	b08a      	sub	sp, #40	; 0x28
 80108bc:	af02      	add	r7, sp, #8
 80108be:	60f8      	str	r0, [r7, #12]
 80108c0:	60b9      	str	r1, [r7, #8]
 80108c2:	607a      	str	r2, [r7, #4]
 80108c4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80108c6:	2300      	movs	r3, #0
 80108c8:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80108ca:	68fb      	ldr	r3, [r7, #12]
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	d106      	bne.n	80108de <etharp_raw+0x26>
 80108d0:	4b3a      	ldr	r3, [pc, #232]	; (80109bc <etharp_raw+0x104>)
 80108d2:	f44f 628b 	mov.w	r2, #1112	; 0x458
 80108d6:	493a      	ldr	r1, [pc, #232]	; (80109c0 <etharp_raw+0x108>)
 80108d8:	483a      	ldr	r0, [pc, #232]	; (80109c4 <etharp_raw+0x10c>)
 80108da:	f003 fb6f 	bl	8013fbc <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80108de:	2200      	movs	r2, #0
 80108e0:	211c      	movs	r1, #28
 80108e2:	2002      	movs	r0, #2
 80108e4:	f7f8 ff10 	bl	8009708 <pbuf_alloc>
 80108e8:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80108ea:	69bb      	ldr	r3, [r7, #24]
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d102      	bne.n	80108f6 <etharp_raw+0x3e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80108f0:	f04f 33ff 	mov.w	r3, #4294967295
 80108f4:	e05d      	b.n	80109b2 <etharp_raw+0xfa>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80108f6:	69bb      	ldr	r3, [r7, #24]
 80108f8:	895b      	ldrh	r3, [r3, #10]
 80108fa:	2b1b      	cmp	r3, #27
 80108fc:	d806      	bhi.n	801090c <etharp_raw+0x54>
 80108fe:	4b2f      	ldr	r3, [pc, #188]	; (80109bc <etharp_raw+0x104>)
 8010900:	f240 4264 	movw	r2, #1124	; 0x464
 8010904:	4930      	ldr	r1, [pc, #192]	; (80109c8 <etharp_raw+0x110>)
 8010906:	482f      	ldr	r0, [pc, #188]	; (80109c4 <etharp_raw+0x10c>)
 8010908:	f003 fb58 	bl	8013fbc <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801090c:	69bb      	ldr	r3, [r7, #24]
 801090e:	685b      	ldr	r3, [r3, #4]
 8010910:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8010912:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8010914:	4618      	mov	r0, r3
 8010916:	f7f8 f889 	bl	8008a2c <lwip_htons>
 801091a:	4603      	mov	r3, r0
 801091c:	461a      	mov	r2, r3
 801091e:	697b      	ldr	r3, [r7, #20]
 8010920:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8010922:	68fb      	ldr	r3, [r7, #12]
 8010924:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010928:	2b06      	cmp	r3, #6
 801092a:	d006      	beq.n	801093a <etharp_raw+0x82>
 801092c:	4b23      	ldr	r3, [pc, #140]	; (80109bc <etharp_raw+0x104>)
 801092e:	f240 426b 	movw	r2, #1131	; 0x46b
 8010932:	4926      	ldr	r1, [pc, #152]	; (80109cc <etharp_raw+0x114>)
 8010934:	4823      	ldr	r0, [pc, #140]	; (80109c4 <etharp_raw+0x10c>)
 8010936:	f003 fb41 	bl	8013fbc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 801093a:	697b      	ldr	r3, [r7, #20]
 801093c:	3308      	adds	r3, #8
 801093e:	2206      	movs	r2, #6
 8010940:	6839      	ldr	r1, [r7, #0]
 8010942:	4618      	mov	r0, r3
 8010944:	f003 fa7f 	bl	8013e46 <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 8010948:	697b      	ldr	r3, [r7, #20]
 801094a:	3312      	adds	r3, #18
 801094c:	2206      	movs	r2, #6
 801094e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010950:	4618      	mov	r0, r3
 8010952:	f003 fa78 	bl	8013e46 <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 8010956:	697b      	ldr	r3, [r7, #20]
 8010958:	330e      	adds	r3, #14
 801095a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801095c:	6812      	ldr	r2, [r2, #0]
 801095e:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 8010960:	697b      	ldr	r3, [r7, #20]
 8010962:	3318      	adds	r3, #24
 8010964:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010966:	6812      	ldr	r2, [r2, #0]
 8010968:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 801096a:	697b      	ldr	r3, [r7, #20]
 801096c:	2200      	movs	r2, #0
 801096e:	701a      	strb	r2, [r3, #0]
 8010970:	2200      	movs	r2, #0
 8010972:	f042 0201 	orr.w	r2, r2, #1
 8010976:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8010978:	697b      	ldr	r3, [r7, #20]
 801097a:	2200      	movs	r2, #0
 801097c:	f042 0208 	orr.w	r2, r2, #8
 8010980:	709a      	strb	r2, [r3, #2]
 8010982:	2200      	movs	r2, #0
 8010984:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8010986:	697b      	ldr	r3, [r7, #20]
 8010988:	2206      	movs	r2, #6
 801098a:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801098c:	697b      	ldr	r3, [r7, #20]
 801098e:	2204      	movs	r2, #4
 8010990:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8010992:	f640 0306 	movw	r3, #2054	; 0x806
 8010996:	9300      	str	r3, [sp, #0]
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	68ba      	ldr	r2, [r7, #8]
 801099c:	69b9      	ldr	r1, [r7, #24]
 801099e:	68f8      	ldr	r0, [r7, #12]
 80109a0:	f001 faf4 	bl	8011f8c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80109a4:	69b8      	ldr	r0, [r7, #24]
 80109a6:	f7f9 fa21 	bl	8009dec <pbuf_free>
  p = NULL;
 80109aa:	2300      	movs	r3, #0
 80109ac:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80109ae:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80109b2:	4618      	mov	r0, r3
 80109b4:	3720      	adds	r7, #32
 80109b6:	46bd      	mov	sp, r7
 80109b8:	bd80      	pop	{r7, pc}
 80109ba:	bf00      	nop
 80109bc:	080164ec 	.word	0x080164ec
 80109c0:	08016674 	.word	0x08016674
 80109c4:	0801659c 	.word	0x0801659c
 80109c8:	08016714 	.word	0x08016714
 80109cc:	08016748 	.word	0x08016748

080109d0 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 80109d0:	b580      	push	{r7, lr}
 80109d2:	b088      	sub	sp, #32
 80109d4:	af04      	add	r7, sp, #16
 80109d6:	60f8      	str	r0, [r7, #12]
 80109d8:	60b9      	str	r1, [r7, #8]
 80109da:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80109dc:	68fb      	ldr	r3, [r7, #12]
 80109de:	f103 012d 	add.w	r1, r3, #45	; 0x2d
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80109e2:	68fb      	ldr	r3, [r7, #12]
 80109e4:	f103 002d 	add.w	r0, r3, #45	; 0x2d
 80109e8:	68fb      	ldr	r3, [r7, #12]
 80109ea:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80109ec:	2201      	movs	r2, #1
 80109ee:	9203      	str	r2, [sp, #12]
 80109f0:	68ba      	ldr	r2, [r7, #8]
 80109f2:	9202      	str	r2, [sp, #8]
 80109f4:	4a06      	ldr	r2, [pc, #24]	; (8010a10 <etharp_request_dst+0x40>)
 80109f6:	9201      	str	r2, [sp, #4]
 80109f8:	9300      	str	r3, [sp, #0]
 80109fa:	4603      	mov	r3, r0
 80109fc:	687a      	ldr	r2, [r7, #4]
 80109fe:	68f8      	ldr	r0, [r7, #12]
 8010a00:	f7ff ff5a 	bl	80108b8 <etharp_raw>
 8010a04:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8010a06:	4618      	mov	r0, r3
 8010a08:	3710      	adds	r7, #16
 8010a0a:	46bd      	mov	sp, r7
 8010a0c:	bd80      	pop	{r7, pc}
 8010a0e:	bf00      	nop
 8010a10:	08016e54 	.word	0x08016e54

08010a14 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8010a14:	b580      	push	{r7, lr}
 8010a16:	b082      	sub	sp, #8
 8010a18:	af00      	add	r7, sp, #0
 8010a1a:	6078      	str	r0, [r7, #4]
 8010a1c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8010a1e:	4a05      	ldr	r2, [pc, #20]	; (8010a34 <etharp_request+0x20>)
 8010a20:	6839      	ldr	r1, [r7, #0]
 8010a22:	6878      	ldr	r0, [r7, #4]
 8010a24:	f7ff ffd4 	bl	80109d0 <etharp_request_dst>
 8010a28:	4603      	mov	r3, r0
}
 8010a2a:	4618      	mov	r0, r3
 8010a2c:	3708      	adds	r7, #8
 8010a2e:	46bd      	mov	sp, r7
 8010a30:	bd80      	pop	{r7, pc}
 8010a32:	bf00      	nop
 8010a34:	08016e4c 	.word	0x08016e4c

08010a38 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8010a38:	b580      	push	{r7, lr}
 8010a3a:	b08e      	sub	sp, #56	; 0x38
 8010a3c:	af04      	add	r7, sp, #16
 8010a3e:	6078      	str	r0, [r7, #4]
 8010a40:	6039      	str	r1, [r7, #0]
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8010a42:	4b7a      	ldr	r3, [pc, #488]	; (8010c2c <icmp_input+0x1f4>)
 8010a44:	689b      	ldr	r3, [r3, #8]
 8010a46:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL(iphdr_in) * 4;
 8010a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a4a:	781b      	ldrb	r3, [r3, #0]
 8010a4c:	b29b      	uxth	r3, r3
 8010a4e:	f003 030f 	and.w	r3, r3, #15
 8010a52:	b29b      	uxth	r3, r3
 8010a54:	009b      	lsls	r3, r3, #2
 8010a56:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8010a58:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010a5a:	2b13      	cmp	r3, #19
 8010a5c:	f240 80d1 	bls.w	8010c02 <icmp_input+0x1ca>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	895b      	ldrh	r3, [r3, #10]
 8010a64:	2b03      	cmp	r3, #3
 8010a66:	f240 80ce 	bls.w	8010c06 <icmp_input+0x1ce>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	685b      	ldr	r3, [r3, #4]
 8010a6e:	781b      	ldrb	r3, [r3, #0]
 8010a70:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 8010a74:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	f000 80bb 	beq.w	8010bf4 <icmp_input+0x1bc>
 8010a7e:	2b08      	cmp	r3, #8
 8010a80:	f040 80bb 	bne.w	8010bfa <icmp_input+0x1c2>
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
    break;
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
    src = ip4_current_dest_addr();
 8010a84:	4b6a      	ldr	r3, [pc, #424]	; (8010c30 <icmp_input+0x1f8>)
 8010a86:	61fb      	str	r3, [r7, #28]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8010a88:	4b68      	ldr	r3, [pc, #416]	; (8010c2c <icmp_input+0x1f4>)
 8010a8a:	695b      	ldr	r3, [r3, #20]
 8010a8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010a90:	2be0      	cmp	r3, #224	; 0xe0
 8010a92:	f000 80bf 	beq.w	8010c14 <icmp_input+0x1dc>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8010a96:	4b65      	ldr	r3, [pc, #404]	; (8010c2c <icmp_input+0x1f4>)
 8010a98:	695a      	ldr	r2, [r3, #20]
 8010a9a:	4b64      	ldr	r3, [pc, #400]	; (8010c2c <icmp_input+0x1f4>)
 8010a9c:	681b      	ldr	r3, [r3, #0]
 8010a9e:	4619      	mov	r1, r3
 8010aa0:	4610      	mov	r0, r2
 8010aa2:	f000 fbd1 	bl	8011248 <ip4_addr_isbroadcast_u32>
 8010aa6:	4603      	mov	r3, r0
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	f040 80b5 	bne.w	8010c18 <icmp_input+0x1e0>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	891b      	ldrh	r3, [r3, #8]
 8010ab2:	2b07      	cmp	r3, #7
 8010ab4:	f240 80a9 	bls.w	8010c0a <icmp_input+0x1d2>
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8010ab8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010aba:	330e      	adds	r3, #14
 8010abc:	b29b      	uxth	r3, r3
 8010abe:	b21b      	sxth	r3, r3
 8010ac0:	4619      	mov	r1, r3
 8010ac2:	6878      	ldr	r0, [r7, #4]
 8010ac4:	f7f9 f96e 	bl	8009da4 <pbuf_header>
 8010ac8:	4603      	mov	r3, r0
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	d046      	beq.n	8010b5c <icmp_input+0x124>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	891a      	ldrh	r2, [r3, #8]
 8010ad2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010ad4:	4413      	add	r3, r2
 8010ad6:	b29b      	uxth	r3, r3
 8010ad8:	2200      	movs	r2, #0
 8010ada:	4619      	mov	r1, r3
 8010adc:	2002      	movs	r0, #2
 8010ade:	f7f8 fe13 	bl	8009708 <pbuf_alloc>
 8010ae2:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 8010ae4:	69bb      	ldr	r3, [r7, #24]
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	f000 8098 	beq.w	8010c1c <icmp_input+0x1e4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8010aec:	69bb      	ldr	r3, [r7, #24]
 8010aee:	895b      	ldrh	r3, [r3, #10]
 8010af0:	461a      	mov	r2, r3
 8010af2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010af4:	3308      	adds	r3, #8
 8010af6:	429a      	cmp	r2, r3
 8010af8:	d203      	bcs.n	8010b02 <icmp_input+0xca>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 8010afa:	69b8      	ldr	r0, [r7, #24]
 8010afc:	f7f9 f976 	bl	8009dec <pbuf_free>
        goto icmperr;
 8010b00:	e08d      	b.n	8010c1e <icmp_input+0x1e6>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 8010b02:	69bb      	ldr	r3, [r7, #24]
 8010b04:	685b      	ldr	r3, [r3, #4]
 8010b06:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010b08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010b0a:	4618      	mov	r0, r3
 8010b0c:	f003 f99b 	bl	8013e46 <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 8010b10:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010b12:	425b      	negs	r3, r3
 8010b14:	b29b      	uxth	r3, r3
 8010b16:	b21b      	sxth	r3, r3
 8010b18:	4619      	mov	r1, r3
 8010b1a:	69b8      	ldr	r0, [r7, #24]
 8010b1c:	f7f9 f942 	bl	8009da4 <pbuf_header>
 8010b20:	4603      	mov	r3, r0
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	d009      	beq.n	8010b3a <icmp_input+0x102>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8010b26:	4b43      	ldr	r3, [pc, #268]	; (8010c34 <icmp_input+0x1fc>)
 8010b28:	22af      	movs	r2, #175	; 0xaf
 8010b2a:	4943      	ldr	r1, [pc, #268]	; (8010c38 <icmp_input+0x200>)
 8010b2c:	4843      	ldr	r0, [pc, #268]	; (8010c3c <icmp_input+0x204>)
 8010b2e:	f003 fa45 	bl	8013fbc <iprintf>
        pbuf_free(r);
 8010b32:	69b8      	ldr	r0, [r7, #24]
 8010b34:	f7f9 f95a 	bl	8009dec <pbuf_free>
        goto icmperr;
 8010b38:	e071      	b.n	8010c1e <icmp_input+0x1e6>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 8010b3a:	6879      	ldr	r1, [r7, #4]
 8010b3c:	69b8      	ldr	r0, [r7, #24]
 8010b3e:	f7f9 fa89 	bl	800a054 <pbuf_copy>
 8010b42:	4603      	mov	r3, r0
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	d003      	beq.n	8010b50 <icmp_input+0x118>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 8010b48:	69b8      	ldr	r0, [r7, #24]
 8010b4a:	f7f9 f94f 	bl	8009dec <pbuf_free>
        goto icmperr;
 8010b4e:	e066      	b.n	8010c1e <icmp_input+0x1e6>
      }
      /* free the original p */
      pbuf_free(p);
 8010b50:	6878      	ldr	r0, [r7, #4]
 8010b52:	f7f9 f94b 	bl	8009dec <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 8010b56:	69bb      	ldr	r3, [r7, #24]
 8010b58:	607b      	str	r3, [r7, #4]
 8010b5a:	e015      	b.n	8010b88 <icmp_input+0x150>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8010b5c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010b5e:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 8010b62:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8010b66:	33f2      	adds	r3, #242	; 0xf2
 8010b68:	b29b      	uxth	r3, r3
 8010b6a:	b21b      	sxth	r3, r3
 8010b6c:	4619      	mov	r1, r3
 8010b6e:	6878      	ldr	r0, [r7, #4]
 8010b70:	f7f9 f918 	bl	8009da4 <pbuf_header>
 8010b74:	4603      	mov	r3, r0
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d006      	beq.n	8010b88 <icmp_input+0x150>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8010b7a:	4b2e      	ldr	r3, [pc, #184]	; (8010c34 <icmp_input+0x1fc>)
 8010b7c:	22c0      	movs	r2, #192	; 0xc0
 8010b7e:	4930      	ldr	r1, [pc, #192]	; (8010c40 <icmp_input+0x208>)
 8010b80:	482e      	ldr	r0, [pc, #184]	; (8010c3c <icmp_input+0x204>)
 8010b82:	f003 fa1b 	bl	8013fbc <iprintf>
        goto icmperr;
 8010b86:	e04a      	b.n	8010c1e <icmp_input+0x1e6>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	685b      	ldr	r3, [r3, #4]
 8010b8c:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 8010b8e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8010b92:	4619      	mov	r1, r3
 8010b94:	6878      	ldr	r0, [r7, #4]
 8010b96:	f7f9 f905 	bl	8009da4 <pbuf_header>
 8010b9a:	4603      	mov	r3, r0
 8010b9c:	2b00      	cmp	r3, #0
 8010b9e:	d12b      	bne.n	8010bf8 <icmp_input+0x1c0>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	685b      	ldr	r3, [r3, #4]
 8010ba4:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 8010ba6:	69fb      	ldr	r3, [r7, #28]
 8010ba8:	681a      	ldr	r2, [r3, #0]
 8010baa:	693b      	ldr	r3, [r7, #16]
 8010bac:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8010bae:	4b1f      	ldr	r3, [pc, #124]	; (8010c2c <icmp_input+0x1f4>)
 8010bb0:	691a      	ldr	r2, [r3, #16]
 8010bb2:	693b      	ldr	r3, [r7, #16]
 8010bb4:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 8010bb6:	697b      	ldr	r3, [r7, #20]
 8010bb8:	2200      	movs	r2, #0
 8010bba:	701a      	strb	r2, [r3, #0]
      else {
        iecho->chksum = 0;
      }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
 8010bbc:	697b      	ldr	r3, [r7, #20]
 8010bbe:	2200      	movs	r2, #0
 8010bc0:	709a      	strb	r2, [r3, #2]
 8010bc2:	2200      	movs	r2, #0
 8010bc4:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 8010bc6:	693b      	ldr	r3, [r7, #16]
 8010bc8:	22ff      	movs	r2, #255	; 0xff
 8010bca:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 8010bcc:	693b      	ldr	r3, [r7, #16]
 8010bce:	2200      	movs	r2, #0
 8010bd0:	729a      	strb	r2, [r3, #10]
 8010bd2:	2200      	movs	r2, #0
 8010bd4:	72da      	strb	r2, [r3, #11]
      MIB2_STATS_INC(mib2.icmpoutmsgs);
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8010bd6:	683b      	ldr	r3, [r7, #0]
 8010bd8:	9302      	str	r3, [sp, #8]
 8010bda:	2301      	movs	r3, #1
 8010bdc:	9301      	str	r3, [sp, #4]
 8010bde:	2300      	movs	r3, #0
 8010be0:	9300      	str	r3, [sp, #0]
 8010be2:	23ff      	movs	r3, #255	; 0xff
 8010be4:	2200      	movs	r2, #0
 8010be6:	69f9      	ldr	r1, [r7, #28]
 8010be8:	6878      	ldr	r0, [r7, #4]
 8010bea:	f000 fa5b 	bl	80110a4 <ip4_output_if>
 8010bee:	4603      	mov	r3, r0
 8010bf0:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 8010bf2:	e001      	b.n	8010bf8 <icmp_input+0x1c0>
    break;
 8010bf4:	bf00      	nop
 8010bf6:	e000      	b.n	8010bfa <icmp_input+0x1c2>
    break;
 8010bf8:	bf00      	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8010bfa:	6878      	ldr	r0, [r7, #4]
 8010bfc:	f7f9 f8f6 	bl	8009dec <pbuf_free>
  return;
 8010c00:	e011      	b.n	8010c26 <icmp_input+0x1ee>
    goto lenerr;
 8010c02:	bf00      	nop
 8010c04:	e002      	b.n	8010c0c <icmp_input+0x1d4>
    goto lenerr;
 8010c06:	bf00      	nop
 8010c08:	e000      	b.n	8010c0c <icmp_input+0x1d4>
      goto lenerr;
 8010c0a:	bf00      	nop
lenerr:
  pbuf_free(p);
 8010c0c:	6878      	ldr	r0, [r7, #4]
 8010c0e:	f7f9 f8ed 	bl	8009dec <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8010c12:	e008      	b.n	8010c26 <icmp_input+0x1ee>
      goto icmperr;
 8010c14:	bf00      	nop
 8010c16:	e002      	b.n	8010c1e <icmp_input+0x1e6>
      goto icmperr;
 8010c18:	bf00      	nop
 8010c1a:	e000      	b.n	8010c1e <icmp_input+0x1e6>
        goto icmperr;
 8010c1c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8010c1e:	6878      	ldr	r0, [r7, #4]
 8010c20:	f7f9 f8e4 	bl	8009dec <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8010c24:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8010c26:	3728      	adds	r7, #40	; 0x28
 8010c28:	46bd      	mov	sp, r7
 8010c2a:	bd80      	pop	{r7, pc}
 8010c2c:	200003a8 	.word	0x200003a8
 8010c30:	200003bc 	.word	0x200003bc
 8010c34:	0801678c 	.word	0x0801678c
 8010c38:	080167f8 	.word	0x080167f8
 8010c3c:	08016830 	.word	0x08016830
 8010c40:	08016858 	.word	0x08016858

08010c44 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8010c44:	b580      	push	{r7, lr}
 8010c46:	b082      	sub	sp, #8
 8010c48:	af00      	add	r7, sp, #0
 8010c4a:	6078      	str	r0, [r7, #4]
 8010c4c:	460b      	mov	r3, r1
 8010c4e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8010c50:	78fb      	ldrb	r3, [r7, #3]
 8010c52:	461a      	mov	r2, r3
 8010c54:	2103      	movs	r1, #3
 8010c56:	6878      	ldr	r0, [r7, #4]
 8010c58:	f000 f814 	bl	8010c84 <icmp_send_response>
}
 8010c5c:	bf00      	nop
 8010c5e:	3708      	adds	r7, #8
 8010c60:	46bd      	mov	sp, r7
 8010c62:	bd80      	pop	{r7, pc}

08010c64 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8010c64:	b580      	push	{r7, lr}
 8010c66:	b082      	sub	sp, #8
 8010c68:	af00      	add	r7, sp, #0
 8010c6a:	6078      	str	r0, [r7, #4]
 8010c6c:	460b      	mov	r3, r1
 8010c6e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8010c70:	78fb      	ldrb	r3, [r7, #3]
 8010c72:	461a      	mov	r2, r3
 8010c74:	210b      	movs	r1, #11
 8010c76:	6878      	ldr	r0, [r7, #4]
 8010c78:	f000 f804 	bl	8010c84 <icmp_send_response>
}
 8010c7c:	bf00      	nop
 8010c7e:	3708      	adds	r7, #8
 8010c80:	46bd      	mov	sp, r7
 8010c82:	bd80      	pop	{r7, pc}

08010c84 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8010c84:	b580      	push	{r7, lr}
 8010c86:	b08c      	sub	sp, #48	; 0x30
 8010c88:	af04      	add	r7, sp, #16
 8010c8a:	6078      	str	r0, [r7, #4]
 8010c8c:	460b      	mov	r3, r1
 8010c8e:	70fb      	strb	r3, [r7, #3]
 8010c90:	4613      	mov	r3, r2
 8010c92:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8010c94:	2200      	movs	r2, #0
 8010c96:	2124      	movs	r1, #36	; 0x24
 8010c98:	2001      	movs	r0, #1
 8010c9a:	f7f8 fd35 	bl	8009708 <pbuf_alloc>
 8010c9e:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8010ca0:	69fb      	ldr	r3, [r7, #28]
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	d04c      	beq.n	8010d40 <icmp_send_response+0xbc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8010ca6:	69fb      	ldr	r3, [r7, #28]
 8010ca8:	895b      	ldrh	r3, [r3, #10]
 8010caa:	2b23      	cmp	r3, #35	; 0x23
 8010cac:	d806      	bhi.n	8010cbc <icmp_send_response+0x38>
 8010cae:	4b26      	ldr	r3, [pc, #152]	; (8010d48 <icmp_send_response+0xc4>)
 8010cb0:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8010cb4:	4925      	ldr	r1, [pc, #148]	; (8010d4c <icmp_send_response+0xc8>)
 8010cb6:	4826      	ldr	r0, [pc, #152]	; (8010d50 <icmp_send_response+0xcc>)
 8010cb8:	f003 f980 	bl	8013fbc <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	685b      	ldr	r3, [r3, #4]
 8010cc0:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8010cc2:	69fb      	ldr	r3, [r7, #28]
 8010cc4:	685b      	ldr	r3, [r3, #4]
 8010cc6:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8010cc8:	697b      	ldr	r3, [r7, #20]
 8010cca:	78fa      	ldrb	r2, [r7, #3]
 8010ccc:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8010cce:	697b      	ldr	r3, [r7, #20]
 8010cd0:	78ba      	ldrb	r2, [r7, #2]
 8010cd2:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8010cd4:	697b      	ldr	r3, [r7, #20]
 8010cd6:	2200      	movs	r2, #0
 8010cd8:	711a      	strb	r2, [r3, #4]
 8010cda:	2200      	movs	r2, #0
 8010cdc:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8010cde:	697b      	ldr	r3, [r7, #20]
 8010ce0:	2200      	movs	r2, #0
 8010ce2:	719a      	strb	r2, [r3, #6]
 8010ce4:	2200      	movs	r2, #0
 8010ce6:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8010ce8:	69fb      	ldr	r3, [r7, #28]
 8010cea:	685b      	ldr	r3, [r3, #4]
 8010cec:	f103 0008 	add.w	r0, r3, #8
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	685b      	ldr	r3, [r3, #4]
 8010cf4:	221c      	movs	r2, #28
 8010cf6:	4619      	mov	r1, r3
 8010cf8:	f003 f8a5 	bl	8013e46 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8010cfc:	69bb      	ldr	r3, [r7, #24]
 8010cfe:	68db      	ldr	r3, [r3, #12]
 8010d00:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 8010d02:	f107 030c 	add.w	r3, r7, #12
 8010d06:	4618      	mov	r0, r3
 8010d08:	f000 f824 	bl	8010d54 <ip4_route>
 8010d0c:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8010d0e:	693b      	ldr	r3, [r7, #16]
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d011      	beq.n	8010d38 <icmp_send_response+0xb4>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8010d14:	697b      	ldr	r3, [r7, #20]
 8010d16:	2200      	movs	r2, #0
 8010d18:	709a      	strb	r2, [r3, #2]
 8010d1a:	2200      	movs	r2, #0
 8010d1c:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8010d1e:	f107 020c 	add.w	r2, r7, #12
 8010d22:	693b      	ldr	r3, [r7, #16]
 8010d24:	9302      	str	r3, [sp, #8]
 8010d26:	2301      	movs	r3, #1
 8010d28:	9301      	str	r3, [sp, #4]
 8010d2a:	2300      	movs	r3, #0
 8010d2c:	9300      	str	r3, [sp, #0]
 8010d2e:	23ff      	movs	r3, #255	; 0xff
 8010d30:	2100      	movs	r1, #0
 8010d32:	69f8      	ldr	r0, [r7, #28]
 8010d34:	f000 f9b6 	bl	80110a4 <ip4_output_if>
  }
  pbuf_free(q);
 8010d38:	69f8      	ldr	r0, [r7, #28]
 8010d3a:	f7f9 f857 	bl	8009dec <pbuf_free>
 8010d3e:	e000      	b.n	8010d42 <icmp_send_response+0xbe>
    return;
 8010d40:	bf00      	nop
}
 8010d42:	3720      	adds	r7, #32
 8010d44:	46bd      	mov	sp, r7
 8010d46:	bd80      	pop	{r7, pc}
 8010d48:	0801678c 	.word	0x0801678c
 8010d4c:	0801688c 	.word	0x0801688c
 8010d50:	08016830 	.word	0x08016830

08010d54 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8010d54:	b480      	push	{r7}
 8010d56:	b085      	sub	sp, #20
 8010d58:	af00      	add	r7, sp, #0
 8010d5a:	6078      	str	r0, [r7, #4]
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8010d5c:	4b30      	ldr	r3, [pc, #192]	; (8010e20 <ip4_route+0xcc>)
 8010d5e:	681b      	ldr	r3, [r3, #0]
 8010d60:	60fb      	str	r3, [r7, #12]
 8010d62:	e036      	b.n	8010dd2 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8010d64:	68fb      	ldr	r3, [r7, #12]
 8010d66:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8010d6a:	f003 0301 	and.w	r3, r3, #1
 8010d6e:	b2db      	uxtb	r3, r3
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	d02b      	beq.n	8010dcc <ip4_route+0x78>
 8010d74:	68fb      	ldr	r3, [r7, #12]
 8010d76:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8010d7a:	089b      	lsrs	r3, r3, #2
 8010d7c:	f003 0301 	and.w	r3, r3, #1
 8010d80:	b2db      	uxtb	r3, r3
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d022      	beq.n	8010dcc <ip4_route+0x78>
 8010d86:	68fb      	ldr	r3, [r7, #12]
 8010d88:	3304      	adds	r3, #4
 8010d8a:	681b      	ldr	r3, [r3, #0]
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	d01d      	beq.n	8010dcc <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	681a      	ldr	r2, [r3, #0]
 8010d94:	68fb      	ldr	r3, [r7, #12]
 8010d96:	3304      	adds	r3, #4
 8010d98:	681b      	ldr	r3, [r3, #0]
 8010d9a:	405a      	eors	r2, r3
 8010d9c:	68fb      	ldr	r3, [r7, #12]
 8010d9e:	3308      	adds	r3, #8
 8010da0:	681b      	ldr	r3, [r3, #0]
 8010da2:	4013      	ands	r3, r2
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	d101      	bne.n	8010dac <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8010da8:	68fb      	ldr	r3, [r7, #12]
 8010daa:	e033      	b.n	8010e14 <ip4_route+0xc0>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8010dac:	68fb      	ldr	r3, [r7, #12]
 8010dae:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8010db2:	f003 0302 	and.w	r3, r3, #2
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d108      	bne.n	8010dcc <ip4_route+0x78>
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	681a      	ldr	r2, [r3, #0]
 8010dbe:	68fb      	ldr	r3, [r7, #12]
 8010dc0:	330c      	adds	r3, #12
 8010dc2:	681b      	ldr	r3, [r3, #0]
 8010dc4:	429a      	cmp	r2, r3
 8010dc6:	d101      	bne.n	8010dcc <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8010dc8:	68fb      	ldr	r3, [r7, #12]
 8010dca:	e023      	b.n	8010e14 <ip4_route+0xc0>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8010dcc:	68fb      	ldr	r3, [r7, #12]
 8010dce:	681b      	ldr	r3, [r3, #0]
 8010dd0:	60fb      	str	r3, [r7, #12]
 8010dd2:	68fb      	ldr	r3, [r7, #12]
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d1c5      	bne.n	8010d64 <ip4_route+0x10>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8010dd8:	4b12      	ldr	r3, [pc, #72]	; (8010e24 <ip4_route+0xd0>)
 8010dda:	681b      	ldr	r3, [r3, #0]
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	d015      	beq.n	8010e0c <ip4_route+0xb8>
 8010de0:	4b10      	ldr	r3, [pc, #64]	; (8010e24 <ip4_route+0xd0>)
 8010de2:	681b      	ldr	r3, [r3, #0]
 8010de4:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8010de8:	f003 0301 	and.w	r3, r3, #1
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	d00d      	beq.n	8010e0c <ip4_route+0xb8>
 8010df0:	4b0c      	ldr	r3, [pc, #48]	; (8010e24 <ip4_route+0xd0>)
 8010df2:	681b      	ldr	r3, [r3, #0]
 8010df4:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8010df8:	f003 0304 	and.w	r3, r3, #4
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	d005      	beq.n	8010e0c <ip4_route+0xb8>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 8010e00:	4b08      	ldr	r3, [pc, #32]	; (8010e24 <ip4_route+0xd0>)
 8010e02:	681b      	ldr	r3, [r3, #0]
 8010e04:	3304      	adds	r3, #4
 8010e06:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	d101      	bne.n	8010e10 <ip4_route+0xbc>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8010e0c:	2300      	movs	r3, #0
 8010e0e:	e001      	b.n	8010e14 <ip4_route+0xc0>
  }

  return netif_default;
 8010e10:	4b04      	ldr	r3, [pc, #16]	; (8010e24 <ip4_route+0xd0>)
 8010e12:	681b      	ldr	r3, [r3, #0]
}
 8010e14:	4618      	mov	r0, r3
 8010e16:	3714      	adds	r7, #20
 8010e18:	46bd      	mov	sp, r7
 8010e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e1e:	4770      	bx	lr
 8010e20:	20003274 	.word	0x20003274
 8010e24:	20003278 	.word	0x20003278

08010e28 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8010e28:	b580      	push	{r7, lr}
 8010e2a:	b086      	sub	sp, #24
 8010e2c:	af00      	add	r7, sp, #0
 8010e2e:	6078      	str	r0, [r7, #4]
 8010e30:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	685b      	ldr	r3, [r3, #4]
 8010e36:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8010e38:	697b      	ldr	r3, [r7, #20]
 8010e3a:	781b      	ldrb	r3, [r3, #0]
 8010e3c:	091b      	lsrs	r3, r3, #4
 8010e3e:	b2db      	uxtb	r3, r3
 8010e40:	2b04      	cmp	r3, #4
 8010e42:	d004      	beq.n	8010e4e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8010e44:	6878      	ldr	r0, [r7, #4]
 8010e46:	f7f8 ffd1 	bl	8009dec <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8010e4a:	2300      	movs	r3, #0
 8010e4c:	e122      	b.n	8011094 <ip4_input+0x26c>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 8010e4e:	697b      	ldr	r3, [r7, #20]
 8010e50:	781b      	ldrb	r3, [r3, #0]
 8010e52:	b29b      	uxth	r3, r3
 8010e54:	f003 030f 	and.w	r3, r3, #15
 8010e58:	817b      	strh	r3, [r7, #10]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 8010e5a:	897b      	ldrh	r3, [r7, #10]
 8010e5c:	009b      	lsls	r3, r3, #2
 8010e5e:	817b      	strh	r3, [r7, #10]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8010e60:	697b      	ldr	r3, [r7, #20]
 8010e62:	885b      	ldrh	r3, [r3, #2]
 8010e64:	b29b      	uxth	r3, r3
 8010e66:	4618      	mov	r0, r3
 8010e68:	f7f7 fde0 	bl	8008a2c <lwip_htons>
 8010e6c:	4603      	mov	r3, r0
 8010e6e:	813b      	strh	r3, [r7, #8]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	891b      	ldrh	r3, [r3, #8]
 8010e74:	893a      	ldrh	r2, [r7, #8]
 8010e76:	429a      	cmp	r2, r3
 8010e78:	d204      	bcs.n	8010e84 <ip4_input+0x5c>
    pbuf_realloc(p, iphdr_len);
 8010e7a:	893b      	ldrh	r3, [r7, #8]
 8010e7c:	4619      	mov	r1, r3
 8010e7e:	6878      	ldr	r0, [r7, #4]
 8010e80:	f7f8 fe40 	bl	8009b04 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	895b      	ldrh	r3, [r3, #10]
 8010e88:	897a      	ldrh	r2, [r7, #10]
 8010e8a:	429a      	cmp	r2, r3
 8010e8c:	d807      	bhi.n	8010e9e <ip4_input+0x76>
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	891b      	ldrh	r3, [r3, #8]
 8010e92:	893a      	ldrh	r2, [r7, #8]
 8010e94:	429a      	cmp	r2, r3
 8010e96:	d802      	bhi.n	8010e9e <ip4_input+0x76>
 8010e98:	897b      	ldrh	r3, [r7, #10]
 8010e9a:	2b13      	cmp	r3, #19
 8010e9c:	d804      	bhi.n	8010ea8 <ip4_input+0x80>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8010e9e:	6878      	ldr	r0, [r7, #4]
 8010ea0:	f7f8 ffa4 	bl	8009dec <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8010ea4:	2300      	movs	r3, #0
 8010ea6:	e0f5      	b.n	8011094 <ip4_input+0x26c>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8010ea8:	697b      	ldr	r3, [r7, #20]
 8010eaa:	691b      	ldr	r3, [r3, #16]
 8010eac:	4a7b      	ldr	r2, [pc, #492]	; (801109c <ip4_input+0x274>)
 8010eae:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8010eb0:	697b      	ldr	r3, [r7, #20]
 8010eb2:	68db      	ldr	r3, [r3, #12]
 8010eb4:	4a79      	ldr	r2, [pc, #484]	; (801109c <ip4_input+0x274>)
 8010eb6:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8010eb8:	4b78      	ldr	r3, [pc, #480]	; (801109c <ip4_input+0x274>)
 8010eba:	695b      	ldr	r3, [r3, #20]
 8010ebc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010ec0:	2be0      	cmp	r3, #224	; 0xe0
 8010ec2:	d112      	bne.n	8010eea <ip4_input+0xc2>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8010ec4:	683b      	ldr	r3, [r7, #0]
 8010ec6:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8010eca:	f003 0301 	and.w	r3, r3, #1
 8010ece:	b2db      	uxtb	r3, r3
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d007      	beq.n	8010ee4 <ip4_input+0xbc>
 8010ed4:	683b      	ldr	r3, [r7, #0]
 8010ed6:	3304      	adds	r3, #4
 8010ed8:	681b      	ldr	r3, [r3, #0]
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	d002      	beq.n	8010ee4 <ip4_input+0xbc>
      netif = inp;
 8010ede:	683b      	ldr	r3, [r7, #0]
 8010ee0:	613b      	str	r3, [r7, #16]
 8010ee2:	e041      	b.n	8010f68 <ip4_input+0x140>
    } else {
      netif = NULL;
 8010ee4:	2300      	movs	r3, #0
 8010ee6:	613b      	str	r3, [r7, #16]
 8010ee8:	e03e      	b.n	8010f68 <ip4_input+0x140>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 8010eea:	2301      	movs	r3, #1
 8010eec:	60fb      	str	r3, [r7, #12]
    netif = inp;
 8010eee:	683b      	ldr	r3, [r7, #0]
 8010ef0:	613b      	str	r3, [r7, #16]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8010ef2:	693b      	ldr	r3, [r7, #16]
 8010ef4:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8010ef8:	f003 0301 	and.w	r3, r3, #1
 8010efc:	b2db      	uxtb	r3, r3
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	d014      	beq.n	8010f2c <ip4_input+0x104>
 8010f02:	693b      	ldr	r3, [r7, #16]
 8010f04:	3304      	adds	r3, #4
 8010f06:	681b      	ldr	r3, [r3, #0]
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	d00f      	beq.n	8010f2c <ip4_input+0x104>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8010f0c:	4b63      	ldr	r3, [pc, #396]	; (801109c <ip4_input+0x274>)
 8010f0e:	695a      	ldr	r2, [r3, #20]
 8010f10:	693b      	ldr	r3, [r7, #16]
 8010f12:	3304      	adds	r3, #4
 8010f14:	681b      	ldr	r3, [r3, #0]
 8010f16:	429a      	cmp	r2, r3
 8010f18:	d026      	beq.n	8010f68 <ip4_input+0x140>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8010f1a:	4b60      	ldr	r3, [pc, #384]	; (801109c <ip4_input+0x274>)
 8010f1c:	695b      	ldr	r3, [r3, #20]
 8010f1e:	6939      	ldr	r1, [r7, #16]
 8010f20:	4618      	mov	r0, r3
 8010f22:	f000 f991 	bl	8011248 <ip4_addr_isbroadcast_u32>
 8010f26:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d11d      	bne.n	8010f68 <ip4_input+0x140>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 8010f2c:	68fb      	ldr	r3, [r7, #12]
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	d00d      	beq.n	8010f4e <ip4_input+0x126>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 8010f32:	4b5a      	ldr	r3, [pc, #360]	; (801109c <ip4_input+0x274>)
 8010f34:	695b      	ldr	r3, [r3, #20]
 8010f36:	b2db      	uxtb	r3, r3
 8010f38:	2b7f      	cmp	r3, #127	; 0x7f
 8010f3a:	d102      	bne.n	8010f42 <ip4_input+0x11a>
          netif = NULL;
 8010f3c:	2300      	movs	r3, #0
 8010f3e:	613b      	str	r3, [r7, #16]
          break;
 8010f40:	e012      	b.n	8010f68 <ip4_input+0x140>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 8010f42:	2300      	movs	r3, #0
 8010f44:	60fb      	str	r3, [r7, #12]
        netif = netif_list;
 8010f46:	4b56      	ldr	r3, [pc, #344]	; (80110a0 <ip4_input+0x278>)
 8010f48:	681b      	ldr	r3, [r3, #0]
 8010f4a:	613b      	str	r3, [r7, #16]
 8010f4c:	e002      	b.n	8010f54 <ip4_input+0x12c>
      } else {
        netif = netif->next;
 8010f4e:	693b      	ldr	r3, [r7, #16]
 8010f50:	681b      	ldr	r3, [r3, #0]
 8010f52:	613b      	str	r3, [r7, #16]
      }
      if (netif == inp) {
 8010f54:	693a      	ldr	r2, [r7, #16]
 8010f56:	683b      	ldr	r3, [r7, #0]
 8010f58:	429a      	cmp	r2, r3
 8010f5a:	d102      	bne.n	8010f62 <ip4_input+0x13a>
        netif = netif->next;
 8010f5c:	693b      	ldr	r3, [r7, #16]
 8010f5e:	681b      	ldr	r3, [r3, #0]
 8010f60:	613b      	str	r3, [r7, #16]
      }
    } while (netif != NULL);
 8010f62:	693b      	ldr	r3, [r7, #16]
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	d1c4      	bne.n	8010ef2 <ip4_input+0xca>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8010f68:	4b4c      	ldr	r3, [pc, #304]	; (801109c <ip4_input+0x274>)
 8010f6a:	691b      	ldr	r3, [r3, #16]
 8010f6c:	6839      	ldr	r1, [r7, #0]
 8010f6e:	4618      	mov	r0, r3
 8010f70:	f000 f96a 	bl	8011248 <ip4_addr_isbroadcast_u32>
 8010f74:	4603      	mov	r3, r0
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	d105      	bne.n	8010f86 <ip4_input+0x15e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8010f7a:	4b48      	ldr	r3, [pc, #288]	; (801109c <ip4_input+0x274>)
 8010f7c:	691b      	ldr	r3, [r3, #16]
 8010f7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8010f82:	2be0      	cmp	r3, #224	; 0xe0
 8010f84:	d104      	bne.n	8010f90 <ip4_input+0x168>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8010f86:	6878      	ldr	r0, [r7, #4]
 8010f88:	f7f8 ff30 	bl	8009dec <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8010f8c:	2300      	movs	r3, #0
 8010f8e:	e081      	b.n	8011094 <ip4_input+0x26c>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8010f90:	693b      	ldr	r3, [r7, #16]
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	d104      	bne.n	8010fa0 <ip4_input+0x178>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8010f96:	6878      	ldr	r0, [r7, #4]
 8010f98:	f7f8 ff28 	bl	8009dec <pbuf_free>
    return ERR_OK;
 8010f9c:	2300      	movs	r3, #0
 8010f9e:	e079      	b.n	8011094 <ip4_input+0x26c>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8010fa0:	697b      	ldr	r3, [r7, #20]
 8010fa2:	88db      	ldrh	r3, [r3, #6]
 8010fa4:	b29b      	uxth	r3, r3
 8010fa6:	461a      	mov	r2, r3
 8010fa8:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8010fac:	4013      	ands	r3, r2
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	d00b      	beq.n	8010fca <ip4_input+0x1a2>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8010fb2:	6878      	ldr	r0, [r7, #4]
 8010fb4:	f000 fc8e 	bl	80118d4 <ip4_reass>
 8010fb8:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	d101      	bne.n	8010fc4 <ip4_input+0x19c>
      return ERR_OK;
 8010fc0:	2300      	movs	r3, #0
 8010fc2:	e067      	b.n	8011094 <ip4_input+0x26c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	685b      	ldr	r3, [r3, #4]
 8010fc8:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8010fca:	4a34      	ldr	r2, [pc, #208]	; (801109c <ip4_input+0x274>)
 8010fcc:	693b      	ldr	r3, [r7, #16]
 8010fce:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8010fd0:	4a32      	ldr	r2, [pc, #200]	; (801109c <ip4_input+0x274>)
 8010fd2:	683b      	ldr	r3, [r7, #0]
 8010fd4:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8010fd6:	4a31      	ldr	r2, [pc, #196]	; (801109c <ip4_input+0x274>)
 8010fd8:	697b      	ldr	r3, [r7, #20]
 8010fda:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 8010fdc:	697b      	ldr	r3, [r7, #20]
 8010fde:	781b      	ldrb	r3, [r3, #0]
 8010fe0:	b29b      	uxth	r3, r3
 8010fe2:	f003 030f 	and.w	r3, r3, #15
 8010fe6:	b29b      	uxth	r3, r3
 8010fe8:	009b      	lsls	r3, r3, #2
 8010fea:	b29a      	uxth	r2, r3
 8010fec:	4b2b      	ldr	r3, [pc, #172]	; (801109c <ip4_input+0x274>)
 8010fee:	819a      	strh	r2, [r3, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 8010ff0:	897b      	ldrh	r3, [r7, #10]
 8010ff2:	425b      	negs	r3, r3
 8010ff4:	b29b      	uxth	r3, r3
 8010ff6:	b21b      	sxth	r3, r3
 8010ff8:	4619      	mov	r1, r3
 8010ffa:	6878      	ldr	r0, [r7, #4]
 8010ffc:	f7f8 fed2 	bl	8009da4 <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 8011000:	697b      	ldr	r3, [r7, #20]
 8011002:	7a5b      	ldrb	r3, [r3, #9]
 8011004:	2b06      	cmp	r3, #6
 8011006:	d009      	beq.n	801101c <ip4_input+0x1f4>
 8011008:	2b11      	cmp	r3, #17
 801100a:	d002      	beq.n	8011012 <ip4_input+0x1ea>
 801100c:	2b01      	cmp	r3, #1
 801100e:	d00a      	beq.n	8011026 <ip4_input+0x1fe>
 8011010:	e00e      	b.n	8011030 <ip4_input+0x208>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
      udp_input(p, inp);
 8011012:	6839      	ldr	r1, [r7, #0]
 8011014:	6878      	ldr	r0, [r7, #4]
 8011016:	f7fe fce3 	bl	800f9e0 <udp_input>
      break;
 801101a:	e028      	b.n	801106e <ip4_input+0x246>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
      tcp_input(p, inp);
 801101c:	6839      	ldr	r1, [r7, #0]
 801101e:	6878      	ldr	r0, [r7, #4]
 8011020:	f7fa fd84 	bl	800bb2c <tcp_input>
      break;
 8011024:	e023      	b.n	801106e <ip4_input+0x246>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
      icmp_input(p, inp);
 8011026:	6839      	ldr	r1, [r7, #0]
 8011028:	6878      	ldr	r0, [r7, #4]
 801102a:	f7ff fd05 	bl	8010a38 <icmp_input>
      break;
 801102e:	e01e      	b.n	801106e <ip4_input+0x246>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8011030:	4b1a      	ldr	r3, [pc, #104]	; (801109c <ip4_input+0x274>)
 8011032:	695b      	ldr	r3, [r3, #20]
 8011034:	6939      	ldr	r1, [r7, #16]
 8011036:	4618      	mov	r0, r3
 8011038:	f000 f906 	bl	8011248 <ip4_addr_isbroadcast_u32>
 801103c:	4603      	mov	r3, r0
 801103e:	2b00      	cmp	r3, #0
 8011040:	d112      	bne.n	8011068 <ip4_input+0x240>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011042:	4b16      	ldr	r3, [pc, #88]	; (801109c <ip4_input+0x274>)
 8011044:	695b      	ldr	r3, [r3, #20]
 8011046:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801104a:	2be0      	cmp	r3, #224	; 0xe0
 801104c:	d00c      	beq.n	8011068 <ip4_input+0x240>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 801104e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8011052:	4619      	mov	r1, r3
 8011054:	6878      	ldr	r0, [r7, #4]
 8011056:	f7f8 feb7 	bl	8009dc8 <pbuf_header_force>
        p->payload = iphdr;
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	697a      	ldr	r2, [r7, #20]
 801105e:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8011060:	2102      	movs	r1, #2
 8011062:	6878      	ldr	r0, [r7, #4]
 8011064:	f7ff fdee 	bl	8010c44 <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 8011068:	6878      	ldr	r0, [r7, #4]
 801106a:	f7f8 febf 	bl	8009dec <pbuf_free>
      MIB2_STATS_INC(mib2.ipinunknownprotos);
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801106e:	4b0b      	ldr	r3, [pc, #44]	; (801109c <ip4_input+0x274>)
 8011070:	2200      	movs	r2, #0
 8011072:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8011074:	4b09      	ldr	r3, [pc, #36]	; (801109c <ip4_input+0x274>)
 8011076:	2200      	movs	r2, #0
 8011078:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801107a:	4b08      	ldr	r3, [pc, #32]	; (801109c <ip4_input+0x274>)
 801107c:	2200      	movs	r2, #0
 801107e:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8011080:	4b06      	ldr	r3, [pc, #24]	; (801109c <ip4_input+0x274>)
 8011082:	2200      	movs	r2, #0
 8011084:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8011086:	4b05      	ldr	r3, [pc, #20]	; (801109c <ip4_input+0x274>)
 8011088:	2200      	movs	r2, #0
 801108a:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801108c:	4b03      	ldr	r3, [pc, #12]	; (801109c <ip4_input+0x274>)
 801108e:	2200      	movs	r2, #0
 8011090:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8011092:	2300      	movs	r3, #0
}
 8011094:	4618      	mov	r0, r3
 8011096:	3718      	adds	r7, #24
 8011098:	46bd      	mov	sp, r7
 801109a:	bd80      	pop	{r7, pc}
 801109c:	200003a8 	.word	0x200003a8
 80110a0:	20003274 	.word	0x20003274

080110a4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 80110a4:	b580      	push	{r7, lr}
 80110a6:	b08a      	sub	sp, #40	; 0x28
 80110a8:	af04      	add	r7, sp, #16
 80110aa:	60f8      	str	r0, [r7, #12]
 80110ac:	60b9      	str	r1, [r7, #8]
 80110ae:	607a      	str	r2, [r7, #4]
 80110b0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80110b2:	68bb      	ldr	r3, [r7, #8]
 80110b4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	d009      	beq.n	80110d0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80110bc:	68bb      	ldr	r3, [r7, #8]
 80110be:	2b00      	cmp	r3, #0
 80110c0:	d003      	beq.n	80110ca <ip4_output_if+0x26>
 80110c2:	68bb      	ldr	r3, [r7, #8]
 80110c4:	681b      	ldr	r3, [r3, #0]
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d102      	bne.n	80110d0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80110ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110cc:	3304      	adds	r3, #4
 80110ce:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80110d0:	78fa      	ldrb	r2, [r7, #3]
 80110d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110d4:	9302      	str	r3, [sp, #8]
 80110d6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80110da:	9301      	str	r3, [sp, #4]
 80110dc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80110e0:	9300      	str	r3, [sp, #0]
 80110e2:	4613      	mov	r3, r2
 80110e4:	687a      	ldr	r2, [r7, #4]
 80110e6:	6979      	ldr	r1, [r7, #20]
 80110e8:	68f8      	ldr	r0, [r7, #12]
 80110ea:	f000 f805 	bl	80110f8 <ip4_output_if_src>
 80110ee:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80110f0:	4618      	mov	r0, r3
 80110f2:	3718      	adds	r7, #24
 80110f4:	46bd      	mov	sp, r7
 80110f6:	bd80      	pop	{r7, pc}

080110f8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 80110f8:	b580      	push	{r7, lr}
 80110fa:	b088      	sub	sp, #32
 80110fc:	af00      	add	r7, sp, #0
 80110fe:	60f8      	str	r0, [r7, #12]
 8011100:	60b9      	str	r1, [r7, #8]
 8011102:	607a      	str	r2, [r7, #4]
 8011104:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8011106:	68fb      	ldr	r3, [r7, #12]
 8011108:	89db      	ldrh	r3, [r3, #14]
 801110a:	2b01      	cmp	r3, #1
 801110c:	d006      	beq.n	801111c <ip4_output_if_src+0x24>
 801110e:	4b48      	ldr	r3, [pc, #288]	; (8011230 <ip4_output_if_src+0x138>)
 8011110:	f240 3233 	movw	r2, #819	; 0x333
 8011114:	4947      	ldr	r1, [pc, #284]	; (8011234 <ip4_output_if_src+0x13c>)
 8011116:	4848      	ldr	r0, [pc, #288]	; (8011238 <ip4_output_if_src+0x140>)
 8011118:	f002 ff50 	bl	8013fbc <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	2b00      	cmp	r3, #0
 8011120:	d060      	beq.n	80111e4 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8011122:	2314      	movs	r3, #20
 8011124:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 8011126:	2114      	movs	r1, #20
 8011128:	68f8      	ldr	r0, [r7, #12]
 801112a:	f7f8 fe3b 	bl	8009da4 <pbuf_header>
 801112e:	4603      	mov	r3, r0
 8011130:	2b00      	cmp	r3, #0
 8011132:	d002      	beq.n	801113a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8011134:	f06f 0301 	mvn.w	r3, #1
 8011138:	e075      	b.n	8011226 <ip4_output_if_src+0x12e>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801113a:	68fb      	ldr	r3, [r7, #12]
 801113c:	685b      	ldr	r3, [r3, #4]
 801113e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8011140:	68fb      	ldr	r3, [r7, #12]
 8011142:	895b      	ldrh	r3, [r3, #10]
 8011144:	2b13      	cmp	r3, #19
 8011146:	d806      	bhi.n	8011156 <ip4_output_if_src+0x5e>
 8011148:	4b39      	ldr	r3, [pc, #228]	; (8011230 <ip4_output_if_src+0x138>)
 801114a:	f240 3261 	movw	r2, #865	; 0x361
 801114e:	493b      	ldr	r1, [pc, #236]	; (801123c <ip4_output_if_src+0x144>)
 8011150:	4839      	ldr	r0, [pc, #228]	; (8011238 <ip4_output_if_src+0x140>)
 8011152:	f002 ff33 	bl	8013fbc <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8011156:	69fb      	ldr	r3, [r7, #28]
 8011158:	78fa      	ldrb	r2, [r7, #3]
 801115a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801115c:	69fb      	ldr	r3, [r7, #28]
 801115e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8011162:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	681a      	ldr	r2, [r3, #0]
 8011168:	69fb      	ldr	r3, [r7, #28]
 801116a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801116c:	8b7b      	ldrh	r3, [r7, #26]
 801116e:	089b      	lsrs	r3, r3, #2
 8011170:	b29b      	uxth	r3, r3
 8011172:	b2db      	uxtb	r3, r3
 8011174:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011178:	b2da      	uxtb	r2, r3
 801117a:	69fb      	ldr	r3, [r7, #28]
 801117c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801117e:	69fb      	ldr	r3, [r7, #28]
 8011180:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8011184:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8011186:	68fb      	ldr	r3, [r7, #12]
 8011188:	891b      	ldrh	r3, [r3, #8]
 801118a:	4618      	mov	r0, r3
 801118c:	f7f7 fc4e 	bl	8008a2c <lwip_htons>
 8011190:	4603      	mov	r3, r0
 8011192:	461a      	mov	r2, r3
 8011194:	69fb      	ldr	r3, [r7, #28]
 8011196:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8011198:	69fb      	ldr	r3, [r7, #28]
 801119a:	2200      	movs	r2, #0
 801119c:	719a      	strb	r2, [r3, #6]
 801119e:	2200      	movs	r2, #0
 80111a0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80111a2:	4b27      	ldr	r3, [pc, #156]	; (8011240 <ip4_output_if_src+0x148>)
 80111a4:	881b      	ldrh	r3, [r3, #0]
 80111a6:	4618      	mov	r0, r3
 80111a8:	f7f7 fc40 	bl	8008a2c <lwip_htons>
 80111ac:	4603      	mov	r3, r0
 80111ae:	461a      	mov	r2, r3
 80111b0:	69fb      	ldr	r3, [r7, #28]
 80111b2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80111b4:	4b22      	ldr	r3, [pc, #136]	; (8011240 <ip4_output_if_src+0x148>)
 80111b6:	881b      	ldrh	r3, [r3, #0]
 80111b8:	3301      	adds	r3, #1
 80111ba:	b29a      	uxth	r2, r3
 80111bc:	4b20      	ldr	r3, [pc, #128]	; (8011240 <ip4_output_if_src+0x148>)
 80111be:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80111c0:	68bb      	ldr	r3, [r7, #8]
 80111c2:	2b00      	cmp	r3, #0
 80111c4:	d104      	bne.n	80111d0 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80111c6:	4b1f      	ldr	r3, [pc, #124]	; (8011244 <ip4_output_if_src+0x14c>)
 80111c8:	681a      	ldr	r2, [r3, #0]
 80111ca:	69fb      	ldr	r3, [r7, #28]
 80111cc:	60da      	str	r2, [r3, #12]
 80111ce:	e003      	b.n	80111d8 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80111d0:	68bb      	ldr	r3, [r7, #8]
 80111d2:	681a      	ldr	r2, [r3, #0]
 80111d4:	69fb      	ldr	r3, [r7, #28]
 80111d6:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80111d8:	69fb      	ldr	r3, [r7, #28]
 80111da:	2200      	movs	r2, #0
 80111dc:	729a      	strb	r2, [r3, #10]
 80111de:	2200      	movs	r2, #0
 80111e0:	72da      	strb	r2, [r3, #11]
 80111e2:	e008      	b.n	80111f6 <ip4_output_if_src+0xfe>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 80111e4:	68fb      	ldr	r3, [r7, #12]
 80111e6:	685b      	ldr	r3, [r3, #4]
 80111e8:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80111ea:	69fb      	ldr	r3, [r7, #28]
 80111ec:	691b      	ldr	r3, [r3, #16]
 80111ee:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80111f0:	f107 0314 	add.w	r3, r7, #20
 80111f4:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80111f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80111fa:	2b00      	cmp	r3, #0
 80111fc:	d00c      	beq.n	8011218 <ip4_output_if_src+0x120>
 80111fe:	68fb      	ldr	r3, [r7, #12]
 8011200:	891a      	ldrh	r2, [r3, #8]
 8011202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011204:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011206:	429a      	cmp	r2, r3
 8011208:	d906      	bls.n	8011218 <ip4_output_if_src+0x120>
    return ip4_frag(p, netif, dest);
 801120a:	687a      	ldr	r2, [r7, #4]
 801120c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801120e:	68f8      	ldr	r0, [r7, #12]
 8011210:	f000 fd0a 	bl	8011c28 <ip4_frag>
 8011214:	4603      	mov	r3, r0
 8011216:	e006      	b.n	8011226 <ip4_output_if_src+0x12e>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8011218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801121a:	695b      	ldr	r3, [r3, #20]
 801121c:	687a      	ldr	r2, [r7, #4]
 801121e:	68f9      	ldr	r1, [r7, #12]
 8011220:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011222:	4798      	blx	r3
 8011224:	4603      	mov	r3, r0
}
 8011226:	4618      	mov	r0, r3
 8011228:	3720      	adds	r7, #32
 801122a:	46bd      	mov	sp, r7
 801122c:	bd80      	pop	{r7, pc}
 801122e:	bf00      	nop
 8011230:	080168b8 	.word	0x080168b8
 8011234:	08016924 	.word	0x08016924
 8011238:	08016930 	.word	0x08016930
 801123c:	08016958 	.word	0x08016958
 8011240:	20000386 	.word	0x20000386
 8011244:	08016e48 	.word	0x08016e48

08011248 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8011248:	b480      	push	{r7}
 801124a:	b085      	sub	sp, #20
 801124c:	af00      	add	r7, sp, #0
 801124e:	6078      	str	r0, [r7, #4]
 8011250:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	f1b3 3fff 	cmp.w	r3, #4294967295
 801125c:	d002      	beq.n	8011264 <ip4_addr_isbroadcast_u32+0x1c>
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	2b00      	cmp	r3, #0
 8011262:	d101      	bne.n	8011268 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8011264:	2301      	movs	r3, #1
 8011266:	e02a      	b.n	80112be <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8011268:	683b      	ldr	r3, [r7, #0]
 801126a:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 801126e:	f003 0302 	and.w	r3, r3, #2
 8011272:	2b00      	cmp	r3, #0
 8011274:	d101      	bne.n	801127a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8011276:	2300      	movs	r3, #0
 8011278:	e021      	b.n	80112be <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801127a:	683b      	ldr	r3, [r7, #0]
 801127c:	3304      	adds	r3, #4
 801127e:	681b      	ldr	r3, [r3, #0]
 8011280:	687a      	ldr	r2, [r7, #4]
 8011282:	429a      	cmp	r2, r3
 8011284:	d101      	bne.n	801128a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8011286:	2300      	movs	r3, #0
 8011288:	e019      	b.n	80112be <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801128a:	68fa      	ldr	r2, [r7, #12]
 801128c:	683b      	ldr	r3, [r7, #0]
 801128e:	3304      	adds	r3, #4
 8011290:	681b      	ldr	r3, [r3, #0]
 8011292:	405a      	eors	r2, r3
 8011294:	683b      	ldr	r3, [r7, #0]
 8011296:	3308      	adds	r3, #8
 8011298:	681b      	ldr	r3, [r3, #0]
 801129a:	4013      	ands	r3, r2
 801129c:	2b00      	cmp	r3, #0
 801129e:	d10d      	bne.n	80112bc <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80112a0:	683b      	ldr	r3, [r7, #0]
 80112a2:	3308      	adds	r3, #8
 80112a4:	681b      	ldr	r3, [r3, #0]
 80112a6:	43da      	mvns	r2, r3
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80112ac:	683b      	ldr	r3, [r7, #0]
 80112ae:	3308      	adds	r3, #8
 80112b0:	681b      	ldr	r3, [r3, #0]
 80112b2:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80112b4:	429a      	cmp	r2, r3
 80112b6:	d101      	bne.n	80112bc <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80112b8:	2301      	movs	r3, #1
 80112ba:	e000      	b.n	80112be <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80112bc:	2300      	movs	r3, #0
  }
}
 80112be:	4618      	mov	r0, r3
 80112c0:	3714      	adds	r7, #20
 80112c2:	46bd      	mov	sp, r7
 80112c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112c8:	4770      	bx	lr
	...

080112cc <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80112cc:	b580      	push	{r7, lr}
 80112ce:	b084      	sub	sp, #16
 80112d0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80112d2:	2300      	movs	r3, #0
 80112d4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80112d6:	4b12      	ldr	r3, [pc, #72]	; (8011320 <ip_reass_tmr+0x54>)
 80112d8:	681b      	ldr	r3, [r3, #0]
 80112da:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80112dc:	e018      	b.n	8011310 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80112de:	68fb      	ldr	r3, [r7, #12]
 80112e0:	7fdb      	ldrb	r3, [r3, #31]
 80112e2:	2b00      	cmp	r3, #0
 80112e4:	d00b      	beq.n	80112fe <ip_reass_tmr+0x32>
      r->timer--;
 80112e6:	68fb      	ldr	r3, [r7, #12]
 80112e8:	7fdb      	ldrb	r3, [r3, #31]
 80112ea:	3b01      	subs	r3, #1
 80112ec:	b2da      	uxtb	r2, r3
 80112ee:	68fb      	ldr	r3, [r7, #12]
 80112f0:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 80112f2:	68fb      	ldr	r3, [r7, #12]
 80112f4:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80112f6:	68fb      	ldr	r3, [r7, #12]
 80112f8:	681b      	ldr	r3, [r3, #0]
 80112fa:	60fb      	str	r3, [r7, #12]
 80112fc:	e008      	b.n	8011310 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80112fe:	68fb      	ldr	r3, [r7, #12]
 8011300:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8011302:	68fb      	ldr	r3, [r7, #12]
 8011304:	681b      	ldr	r3, [r3, #0]
 8011306:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8011308:	68b9      	ldr	r1, [r7, #8]
 801130a:	6878      	ldr	r0, [r7, #4]
 801130c:	f000 f80a 	bl	8011324 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8011310:	68fb      	ldr	r3, [r7, #12]
 8011312:	2b00      	cmp	r3, #0
 8011314:	d1e3      	bne.n	80112de <ip_reass_tmr+0x12>
     }
   }
}
 8011316:	bf00      	nop
 8011318:	3710      	adds	r7, #16
 801131a:	46bd      	mov	sp, r7
 801131c:	bd80      	pop	{r7, pc}
 801131e:	bf00      	nop
 8011320:	20000388 	.word	0x20000388

08011324 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8011324:	b580      	push	{r7, lr}
 8011326:	b088      	sub	sp, #32
 8011328:	af00      	add	r7, sp, #0
 801132a:	6078      	str	r0, [r7, #4]
 801132c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801132e:	2300      	movs	r3, #0
 8011330:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8011332:	683a      	ldr	r2, [r7, #0]
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	429a      	cmp	r2, r3
 8011338:	d105      	bne.n	8011346 <ip_reass_free_complete_datagram+0x22>
 801133a:	4b45      	ldr	r3, [pc, #276]	; (8011450 <ip_reass_free_complete_datagram+0x12c>)
 801133c:	22ab      	movs	r2, #171	; 0xab
 801133e:	4945      	ldr	r1, [pc, #276]	; (8011454 <ip_reass_free_complete_datagram+0x130>)
 8011340:	4845      	ldr	r0, [pc, #276]	; (8011458 <ip_reass_free_complete_datagram+0x134>)
 8011342:	f002 fe3b 	bl	8013fbc <iprintf>
  if (prev != NULL) {
 8011346:	683b      	ldr	r3, [r7, #0]
 8011348:	2b00      	cmp	r3, #0
 801134a:	d00a      	beq.n	8011362 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801134c:	683b      	ldr	r3, [r7, #0]
 801134e:	681b      	ldr	r3, [r3, #0]
 8011350:	687a      	ldr	r2, [r7, #4]
 8011352:	429a      	cmp	r2, r3
 8011354:	d005      	beq.n	8011362 <ip_reass_free_complete_datagram+0x3e>
 8011356:	4b3e      	ldr	r3, [pc, #248]	; (8011450 <ip_reass_free_complete_datagram+0x12c>)
 8011358:	22ad      	movs	r2, #173	; 0xad
 801135a:	4940      	ldr	r1, [pc, #256]	; (801145c <ip_reass_free_complete_datagram+0x138>)
 801135c:	483e      	ldr	r0, [pc, #248]	; (8011458 <ip_reass_free_complete_datagram+0x134>)
 801135e:	f002 fe2d 	bl	8013fbc <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	685b      	ldr	r3, [r3, #4]
 8011366:	685b      	ldr	r3, [r3, #4]
 8011368:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801136a:	697b      	ldr	r3, [r7, #20]
 801136c:	889b      	ldrh	r3, [r3, #4]
 801136e:	b29b      	uxth	r3, r3
 8011370:	2b00      	cmp	r3, #0
 8011372:	d12a      	bne.n	80113ca <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	685b      	ldr	r3, [r3, #4]
 8011378:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801137a:	697b      	ldr	r3, [r7, #20]
 801137c:	681a      	ldr	r2, [r3, #0]
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8011382:	69bb      	ldr	r3, [r7, #24]
 8011384:	6858      	ldr	r0, [r3, #4]
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	3308      	adds	r3, #8
 801138a:	2214      	movs	r2, #20
 801138c:	4619      	mov	r1, r3
 801138e:	f002 fd5a 	bl	8013e46 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8011392:	2101      	movs	r1, #1
 8011394:	69b8      	ldr	r0, [r7, #24]
 8011396:	f7ff fc65 	bl	8010c64 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801139a:	69b8      	ldr	r0, [r7, #24]
 801139c:	f7f8 fdba 	bl	8009f14 <pbuf_clen>
 80113a0:	4603      	mov	r3, r0
 80113a2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80113a4:	8bfa      	ldrh	r2, [r7, #30]
 80113a6:	8a7b      	ldrh	r3, [r7, #18]
 80113a8:	4413      	add	r3, r2
 80113aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80113ae:	db05      	blt.n	80113bc <ip_reass_free_complete_datagram+0x98>
 80113b0:	4b27      	ldr	r3, [pc, #156]	; (8011450 <ip_reass_free_complete_datagram+0x12c>)
 80113b2:	22bc      	movs	r2, #188	; 0xbc
 80113b4:	492a      	ldr	r1, [pc, #168]	; (8011460 <ip_reass_free_complete_datagram+0x13c>)
 80113b6:	4828      	ldr	r0, [pc, #160]	; (8011458 <ip_reass_free_complete_datagram+0x134>)
 80113b8:	f002 fe00 	bl	8013fbc <iprintf>
    pbufs_freed += clen;
 80113bc:	8bfa      	ldrh	r2, [r7, #30]
 80113be:	8a7b      	ldrh	r3, [r7, #18]
 80113c0:	4413      	add	r3, r2
 80113c2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80113c4:	69b8      	ldr	r0, [r7, #24]
 80113c6:	f7f8 fd11 	bl	8009dec <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	685b      	ldr	r3, [r3, #4]
 80113ce:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80113d0:	e01f      	b.n	8011412 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80113d2:	69bb      	ldr	r3, [r7, #24]
 80113d4:	685b      	ldr	r3, [r3, #4]
 80113d6:	617b      	str	r3, [r7, #20]
    pcur = p;
 80113d8:	69bb      	ldr	r3, [r7, #24]
 80113da:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80113dc:	697b      	ldr	r3, [r7, #20]
 80113de:	681b      	ldr	r3, [r3, #0]
 80113e0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80113e2:	68f8      	ldr	r0, [r7, #12]
 80113e4:	f7f8 fd96 	bl	8009f14 <pbuf_clen>
 80113e8:	4603      	mov	r3, r0
 80113ea:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80113ec:	8bfa      	ldrh	r2, [r7, #30]
 80113ee:	8a7b      	ldrh	r3, [r7, #18]
 80113f0:	4413      	add	r3, r2
 80113f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80113f6:	db05      	blt.n	8011404 <ip_reass_free_complete_datagram+0xe0>
 80113f8:	4b15      	ldr	r3, [pc, #84]	; (8011450 <ip_reass_free_complete_datagram+0x12c>)
 80113fa:	22cc      	movs	r2, #204	; 0xcc
 80113fc:	4918      	ldr	r1, [pc, #96]	; (8011460 <ip_reass_free_complete_datagram+0x13c>)
 80113fe:	4816      	ldr	r0, [pc, #88]	; (8011458 <ip_reass_free_complete_datagram+0x134>)
 8011400:	f002 fddc 	bl	8013fbc <iprintf>
    pbufs_freed += clen;
 8011404:	8bfa      	ldrh	r2, [r7, #30]
 8011406:	8a7b      	ldrh	r3, [r7, #18]
 8011408:	4413      	add	r3, r2
 801140a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801140c:	68f8      	ldr	r0, [r7, #12]
 801140e:	f7f8 fced 	bl	8009dec <pbuf_free>
  while (p != NULL) {
 8011412:	69bb      	ldr	r3, [r7, #24]
 8011414:	2b00      	cmp	r3, #0
 8011416:	d1dc      	bne.n	80113d2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8011418:	6839      	ldr	r1, [r7, #0]
 801141a:	6878      	ldr	r0, [r7, #4]
 801141c:	f000 f8c2 	bl	80115a4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 8011420:	4b10      	ldr	r3, [pc, #64]	; (8011464 <ip_reass_free_complete_datagram+0x140>)
 8011422:	881b      	ldrh	r3, [r3, #0]
 8011424:	8bfa      	ldrh	r2, [r7, #30]
 8011426:	429a      	cmp	r2, r3
 8011428:	d905      	bls.n	8011436 <ip_reass_free_complete_datagram+0x112>
 801142a:	4b09      	ldr	r3, [pc, #36]	; (8011450 <ip_reass_free_complete_datagram+0x12c>)
 801142c:	22d2      	movs	r2, #210	; 0xd2
 801142e:	490e      	ldr	r1, [pc, #56]	; (8011468 <ip_reass_free_complete_datagram+0x144>)
 8011430:	4809      	ldr	r0, [pc, #36]	; (8011458 <ip_reass_free_complete_datagram+0x134>)
 8011432:	f002 fdc3 	bl	8013fbc <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 8011436:	4b0b      	ldr	r3, [pc, #44]	; (8011464 <ip_reass_free_complete_datagram+0x140>)
 8011438:	881a      	ldrh	r2, [r3, #0]
 801143a:	8bfb      	ldrh	r3, [r7, #30]
 801143c:	1ad3      	subs	r3, r2, r3
 801143e:	b29a      	uxth	r2, r3
 8011440:	4b08      	ldr	r3, [pc, #32]	; (8011464 <ip_reass_free_complete_datagram+0x140>)
 8011442:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8011444:	8bfb      	ldrh	r3, [r7, #30]
}
 8011446:	4618      	mov	r0, r3
 8011448:	3720      	adds	r7, #32
 801144a:	46bd      	mov	sp, r7
 801144c:	bd80      	pop	{r7, pc}
 801144e:	bf00      	nop
 8011450:	08016988 	.word	0x08016988
 8011454:	080169f8 	.word	0x080169f8
 8011458:	08016a04 	.word	0x08016a04
 801145c:	08016a2c 	.word	0x08016a2c
 8011460:	08016a40 	.word	0x08016a40
 8011464:	2000038c 	.word	0x2000038c
 8011468:	08016a60 	.word	0x08016a60

0801146c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801146c:	b580      	push	{r7, lr}
 801146e:	b08a      	sub	sp, #40	; 0x28
 8011470:	af00      	add	r7, sp, #0
 8011472:	6078      	str	r0, [r7, #4]
 8011474:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8011476:	2300      	movs	r3, #0
 8011478:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801147a:	2300      	movs	r3, #0
 801147c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801147e:	2300      	movs	r3, #0
 8011480:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8011482:	2300      	movs	r3, #0
 8011484:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8011486:	2300      	movs	r3, #0
 8011488:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801148a:	4b28      	ldr	r3, [pc, #160]	; (801152c <ip_reass_remove_oldest_datagram+0xc0>)
 801148c:	681b      	ldr	r3, [r3, #0]
 801148e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8011490:	e030      	b.n	80114f4 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8011492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011494:	695a      	ldr	r2, [r3, #20]
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	68db      	ldr	r3, [r3, #12]
 801149a:	429a      	cmp	r2, r3
 801149c:	d10c      	bne.n	80114b8 <ip_reass_remove_oldest_datagram+0x4c>
 801149e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114a0:	699a      	ldr	r2, [r3, #24]
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	691b      	ldr	r3, [r3, #16]
 80114a6:	429a      	cmp	r2, r3
 80114a8:	d106      	bne.n	80114b8 <ip_reass_remove_oldest_datagram+0x4c>
 80114aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114ac:	899a      	ldrh	r2, [r3, #12]
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	889b      	ldrh	r3, [r3, #4]
 80114b2:	b29b      	uxth	r3, r3
 80114b4:	429a      	cmp	r2, r3
 80114b6:	d014      	beq.n	80114e2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80114b8:	693b      	ldr	r3, [r7, #16]
 80114ba:	3301      	adds	r3, #1
 80114bc:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80114be:	6a3b      	ldr	r3, [r7, #32]
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	d104      	bne.n	80114ce <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80114c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114c6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80114c8:	69fb      	ldr	r3, [r7, #28]
 80114ca:	61bb      	str	r3, [r7, #24]
 80114cc:	e009      	b.n	80114e2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80114ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114d0:	7fda      	ldrb	r2, [r3, #31]
 80114d2:	6a3b      	ldr	r3, [r7, #32]
 80114d4:	7fdb      	ldrb	r3, [r3, #31]
 80114d6:	429a      	cmp	r2, r3
 80114d8:	d803      	bhi.n	80114e2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80114da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114dc:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80114de:	69fb      	ldr	r3, [r7, #28]
 80114e0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80114e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114e4:	681b      	ldr	r3, [r3, #0]
 80114e6:	2b00      	cmp	r3, #0
 80114e8:	d001      	beq.n	80114ee <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80114ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114ec:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80114ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114f0:	681b      	ldr	r3, [r3, #0]
 80114f2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80114f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	d1cb      	bne.n	8011492 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80114fa:	6a3b      	ldr	r3, [r7, #32]
 80114fc:	2b00      	cmp	r3, #0
 80114fe:	d008      	beq.n	8011512 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8011500:	69b9      	ldr	r1, [r7, #24]
 8011502:	6a38      	ldr	r0, [r7, #32]
 8011504:	f7ff ff0e 	bl	8011324 <ip_reass_free_complete_datagram>
 8011508:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801150a:	697a      	ldr	r2, [r7, #20]
 801150c:	68fb      	ldr	r3, [r7, #12]
 801150e:	4413      	add	r3, r2
 8011510:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8011512:	697a      	ldr	r2, [r7, #20]
 8011514:	683b      	ldr	r3, [r7, #0]
 8011516:	429a      	cmp	r2, r3
 8011518:	da02      	bge.n	8011520 <ip_reass_remove_oldest_datagram+0xb4>
 801151a:	693b      	ldr	r3, [r7, #16]
 801151c:	2b01      	cmp	r3, #1
 801151e:	dcac      	bgt.n	801147a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8011520:	697b      	ldr	r3, [r7, #20]
}
 8011522:	4618      	mov	r0, r3
 8011524:	3728      	adds	r7, #40	; 0x28
 8011526:	46bd      	mov	sp, r7
 8011528:	bd80      	pop	{r7, pc}
 801152a:	bf00      	nop
 801152c:	20000388 	.word	0x20000388

08011530 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8011530:	b580      	push	{r7, lr}
 8011532:	b084      	sub	sp, #16
 8011534:	af00      	add	r7, sp, #0
 8011536:	6078      	str	r0, [r7, #4]
 8011538:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801153a:	2004      	movs	r0, #4
 801153c:	f7f7 fe42 	bl	80091c4 <memp_malloc>
 8011540:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8011542:	68fb      	ldr	r3, [r7, #12]
 8011544:	2b00      	cmp	r3, #0
 8011546:	d110      	bne.n	801156a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8011548:	6839      	ldr	r1, [r7, #0]
 801154a:	6878      	ldr	r0, [r7, #4]
 801154c:	f7ff ff8e 	bl	801146c <ip_reass_remove_oldest_datagram>
 8011550:	4602      	mov	r2, r0
 8011552:	683b      	ldr	r3, [r7, #0]
 8011554:	4293      	cmp	r3, r2
 8011556:	dc03      	bgt.n	8011560 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8011558:	2004      	movs	r0, #4
 801155a:	f7f7 fe33 	bl	80091c4 <memp_malloc>
 801155e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8011560:	68fb      	ldr	r3, [r7, #12]
 8011562:	2b00      	cmp	r3, #0
 8011564:	d101      	bne.n	801156a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 8011566:	2300      	movs	r3, #0
 8011568:	e016      	b.n	8011598 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801156a:	2220      	movs	r2, #32
 801156c:	2100      	movs	r1, #0
 801156e:	68f8      	ldr	r0, [r7, #12]
 8011570:	f002 fc74 	bl	8013e5c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8011574:	68fb      	ldr	r3, [r7, #12]
 8011576:	2203      	movs	r2, #3
 8011578:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801157a:	4b09      	ldr	r3, [pc, #36]	; (80115a0 <ip_reass_enqueue_new_datagram+0x70>)
 801157c:	681a      	ldr	r2, [r3, #0]
 801157e:	68fb      	ldr	r3, [r7, #12]
 8011580:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8011582:	4a07      	ldr	r2, [pc, #28]	; (80115a0 <ip_reass_enqueue_new_datagram+0x70>)
 8011584:	68fb      	ldr	r3, [r7, #12]
 8011586:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8011588:	68fb      	ldr	r3, [r7, #12]
 801158a:	3308      	adds	r3, #8
 801158c:	2214      	movs	r2, #20
 801158e:	6879      	ldr	r1, [r7, #4]
 8011590:	4618      	mov	r0, r3
 8011592:	f002 fc58 	bl	8013e46 <memcpy>
  return ipr;
 8011596:	68fb      	ldr	r3, [r7, #12]
}
 8011598:	4618      	mov	r0, r3
 801159a:	3710      	adds	r7, #16
 801159c:	46bd      	mov	sp, r7
 801159e:	bd80      	pop	{r7, pc}
 80115a0:	20000388 	.word	0x20000388

080115a4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80115a4:	b580      	push	{r7, lr}
 80115a6:	b082      	sub	sp, #8
 80115a8:	af00      	add	r7, sp, #0
 80115aa:	6078      	str	r0, [r7, #4]
 80115ac:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80115ae:	4b10      	ldr	r3, [pc, #64]	; (80115f0 <ip_reass_dequeue_datagram+0x4c>)
 80115b0:	681b      	ldr	r3, [r3, #0]
 80115b2:	687a      	ldr	r2, [r7, #4]
 80115b4:	429a      	cmp	r2, r3
 80115b6:	d104      	bne.n	80115c2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	681b      	ldr	r3, [r3, #0]
 80115bc:	4a0c      	ldr	r2, [pc, #48]	; (80115f0 <ip_reass_dequeue_datagram+0x4c>)
 80115be:	6013      	str	r3, [r2, #0]
 80115c0:	e00d      	b.n	80115de <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80115c2:	683b      	ldr	r3, [r7, #0]
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	d106      	bne.n	80115d6 <ip_reass_dequeue_datagram+0x32>
 80115c8:	4b0a      	ldr	r3, [pc, #40]	; (80115f4 <ip_reass_dequeue_datagram+0x50>)
 80115ca:	f240 1245 	movw	r2, #325	; 0x145
 80115ce:	490a      	ldr	r1, [pc, #40]	; (80115f8 <ip_reass_dequeue_datagram+0x54>)
 80115d0:	480a      	ldr	r0, [pc, #40]	; (80115fc <ip_reass_dequeue_datagram+0x58>)
 80115d2:	f002 fcf3 	bl	8013fbc <iprintf>
    prev->next = ipr->next;
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	681a      	ldr	r2, [r3, #0]
 80115da:	683b      	ldr	r3, [r7, #0]
 80115dc:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80115de:	6879      	ldr	r1, [r7, #4]
 80115e0:	2004      	movs	r0, #4
 80115e2:	f7f7 fe5f 	bl	80092a4 <memp_free>
}
 80115e6:	bf00      	nop
 80115e8:	3708      	adds	r7, #8
 80115ea:	46bd      	mov	sp, r7
 80115ec:	bd80      	pop	{r7, pc}
 80115ee:	bf00      	nop
 80115f0:	20000388 	.word	0x20000388
 80115f4:	08016988 	.word	0x08016988
 80115f8:	08016a7c 	.word	0x08016a7c
 80115fc:	08016a04 	.word	0x08016a04

08011600 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8011600:	b580      	push	{r7, lr}
 8011602:	b08c      	sub	sp, #48	; 0x30
 8011604:	af00      	add	r7, sp, #0
 8011606:	60f8      	str	r0, [r7, #12]
 8011608:	60b9      	str	r1, [r7, #8]
 801160a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 801160c:	2300      	movs	r3, #0
 801160e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8011610:	2301      	movs	r3, #1
 8011612:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 8011614:	68bb      	ldr	r3, [r7, #8]
 8011616:	685b      	ldr	r3, [r3, #4]
 8011618:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 801161a:	69fb      	ldr	r3, [r7, #28]
 801161c:	885b      	ldrh	r3, [r3, #2]
 801161e:	b29b      	uxth	r3, r3
 8011620:	4618      	mov	r0, r3
 8011622:	f7f7 fa03 	bl	8008a2c <lwip_htons>
 8011626:	4603      	mov	r3, r0
 8011628:	461a      	mov	r2, r3
 801162a:	69fb      	ldr	r3, [r7, #28]
 801162c:	781b      	ldrb	r3, [r3, #0]
 801162e:	b29b      	uxth	r3, r3
 8011630:	f003 030f 	and.w	r3, r3, #15
 8011634:	b29b      	uxth	r3, r3
 8011636:	009b      	lsls	r3, r3, #2
 8011638:	b29b      	uxth	r3, r3
 801163a:	1ad3      	subs	r3, r2, r3
 801163c:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 801163e:	69fb      	ldr	r3, [r7, #28]
 8011640:	88db      	ldrh	r3, [r3, #6]
 8011642:	b29b      	uxth	r3, r3
 8011644:	4618      	mov	r0, r3
 8011646:	f7f7 f9f1 	bl	8008a2c <lwip_htons>
 801164a:	4603      	mov	r3, r0
 801164c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011650:	b29b      	uxth	r3, r3
 8011652:	00db      	lsls	r3, r3, #3
 8011654:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 8011656:	68bb      	ldr	r3, [r7, #8]
 8011658:	685b      	ldr	r3, [r3, #4]
 801165a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801165c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801165e:	2200      	movs	r2, #0
 8011660:	701a      	strb	r2, [r3, #0]
 8011662:	2200      	movs	r2, #0
 8011664:	705a      	strb	r2, [r3, #1]
 8011666:	2200      	movs	r2, #0
 8011668:	709a      	strb	r2, [r3, #2]
 801166a:	2200      	movs	r2, #0
 801166c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801166e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011670:	8b3a      	ldrh	r2, [r7, #24]
 8011672:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 8011674:	8b3a      	ldrh	r2, [r7, #24]
 8011676:	8b7b      	ldrh	r3, [r7, #26]
 8011678:	4413      	add	r3, r2
 801167a:	b29a      	uxth	r2, r3
 801167c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801167e:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8011680:	68fb      	ldr	r3, [r7, #12]
 8011682:	685b      	ldr	r3, [r3, #4]
 8011684:	627b      	str	r3, [r7, #36]	; 0x24
 8011686:	e061      	b.n	801174c <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 8011688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801168a:	685b      	ldr	r3, [r3, #4]
 801168c:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 801168e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011690:	889b      	ldrh	r3, [r3, #4]
 8011692:	b29a      	uxth	r2, r3
 8011694:	697b      	ldr	r3, [r7, #20]
 8011696:	889b      	ldrh	r3, [r3, #4]
 8011698:	b29b      	uxth	r3, r3
 801169a:	429a      	cmp	r2, r3
 801169c:	d232      	bcs.n	8011704 <ip_reass_chain_frag_into_datagram_and_validate+0x104>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801169e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80116a2:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80116a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	d01f      	beq.n	80116ea <ip_reass_chain_frag_into_datagram_and_validate+0xea>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80116aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116ac:	889b      	ldrh	r3, [r3, #4]
 80116ae:	b29a      	uxth	r2, r3
 80116b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116b2:	88db      	ldrh	r3, [r3, #6]
 80116b4:	b29b      	uxth	r3, r3
 80116b6:	429a      	cmp	r2, r3
 80116b8:	f0c0 80e3 	bcc.w	8011882 <ip_reass_chain_frag_into_datagram_and_validate+0x282>
 80116bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116be:	88db      	ldrh	r3, [r3, #6]
 80116c0:	b29a      	uxth	r2, r3
 80116c2:	697b      	ldr	r3, [r7, #20]
 80116c4:	889b      	ldrh	r3, [r3, #4]
 80116c6:	b29b      	uxth	r3, r3
 80116c8:	429a      	cmp	r2, r3
 80116ca:	f200 80da 	bhi.w	8011882 <ip_reass_chain_frag_into_datagram_and_validate+0x282>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80116ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116d0:	68ba      	ldr	r2, [r7, #8]
 80116d2:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80116d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116d6:	88db      	ldrh	r3, [r3, #6]
 80116d8:	b29a      	uxth	r2, r3
 80116da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116dc:	889b      	ldrh	r3, [r3, #4]
 80116de:	b29b      	uxth	r3, r3
 80116e0:	429a      	cmp	r2, r3
 80116e2:	d037      	beq.n	8011754 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80116e4:	2300      	movs	r3, #0
 80116e6:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80116e8:	e034      	b.n	8011754 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        if (iprh->end > iprh_tmp->start) {
 80116ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116ec:	88db      	ldrh	r3, [r3, #6]
 80116ee:	b29a      	uxth	r2, r3
 80116f0:	697b      	ldr	r3, [r7, #20]
 80116f2:	889b      	ldrh	r3, [r3, #4]
 80116f4:	b29b      	uxth	r3, r3
 80116f6:	429a      	cmp	r2, r3
 80116f8:	f200 80c5 	bhi.w	8011886 <ip_reass_chain_frag_into_datagram_and_validate+0x286>
        ipr->p = new_p;
 80116fc:	68fb      	ldr	r3, [r7, #12]
 80116fe:	68ba      	ldr	r2, [r7, #8]
 8011700:	605a      	str	r2, [r3, #4]
      break;
 8011702:	e027      	b.n	8011754 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
    } else if (iprh->start == iprh_tmp->start) {
 8011704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011706:	889b      	ldrh	r3, [r3, #4]
 8011708:	b29a      	uxth	r2, r3
 801170a:	697b      	ldr	r3, [r7, #20]
 801170c:	889b      	ldrh	r3, [r3, #4]
 801170e:	b29b      	uxth	r3, r3
 8011710:	429a      	cmp	r2, r3
 8011712:	f000 80ba 	beq.w	801188a <ip_reass_chain_frag_into_datagram_and_validate+0x28a>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8011716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011718:	889b      	ldrh	r3, [r3, #4]
 801171a:	b29a      	uxth	r2, r3
 801171c:	697b      	ldr	r3, [r7, #20]
 801171e:	88db      	ldrh	r3, [r3, #6]
 8011720:	b29b      	uxth	r3, r3
 8011722:	429a      	cmp	r2, r3
 8011724:	f0c0 80b3 	bcc.w	801188e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8011728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801172a:	2b00      	cmp	r3, #0
 801172c:	d009      	beq.n	8011742 <ip_reass_chain_frag_into_datagram_and_validate+0x142>
        if (iprh_prev->end != iprh_tmp->start) {
 801172e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011730:	88db      	ldrh	r3, [r3, #6]
 8011732:	b29a      	uxth	r2, r3
 8011734:	697b      	ldr	r3, [r7, #20]
 8011736:	889b      	ldrh	r3, [r3, #4]
 8011738:	b29b      	uxth	r3, r3
 801173a:	429a      	cmp	r2, r3
 801173c:	d001      	beq.n	8011742 <ip_reass_chain_frag_into_datagram_and_validate+0x142>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801173e:	2300      	movs	r3, #0
 8011740:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8011742:	697b      	ldr	r3, [r7, #20]
 8011744:	681b      	ldr	r3, [r3, #0]
 8011746:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8011748:	697b      	ldr	r3, [r7, #20]
 801174a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801174c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801174e:	2b00      	cmp	r3, #0
 8011750:	d19a      	bne.n	8011688 <ip_reass_chain_frag_into_datagram_and_validate+0x88>
 8011752:	e000      	b.n	8011756 <ip_reass_chain_frag_into_datagram_and_validate+0x156>
      break;
 8011754:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8011756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011758:	2b00      	cmp	r3, #0
 801175a:	d12d      	bne.n	80117b8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
    if (iprh_prev != NULL) {
 801175c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801175e:	2b00      	cmp	r3, #0
 8011760:	d01c      	beq.n	801179c <ip_reass_chain_frag_into_datagram_and_validate+0x19c>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8011762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011764:	88db      	ldrh	r3, [r3, #6]
 8011766:	b29a      	uxth	r2, r3
 8011768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801176a:	889b      	ldrh	r3, [r3, #4]
 801176c:	b29b      	uxth	r3, r3
 801176e:	429a      	cmp	r2, r3
 8011770:	d906      	bls.n	8011780 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
 8011772:	4b51      	ldr	r3, [pc, #324]	; (80118b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8011774:	f240 12ab 	movw	r2, #427	; 0x1ab
 8011778:	4950      	ldr	r1, [pc, #320]	; (80118bc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801177a:	4851      	ldr	r0, [pc, #324]	; (80118c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801177c:	f002 fc1e 	bl	8013fbc <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8011780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011782:	68ba      	ldr	r2, [r7, #8]
 8011784:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8011786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011788:	88db      	ldrh	r3, [r3, #6]
 801178a:	b29a      	uxth	r2, r3
 801178c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801178e:	889b      	ldrh	r3, [r3, #4]
 8011790:	b29b      	uxth	r3, r3
 8011792:	429a      	cmp	r2, r3
 8011794:	d010      	beq.n	80117b8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
        valid = 0;
 8011796:	2300      	movs	r3, #0
 8011798:	623b      	str	r3, [r7, #32]
 801179a:	e00d      	b.n	80117b8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801179c:	68fb      	ldr	r3, [r7, #12]
 801179e:	685b      	ldr	r3, [r3, #4]
 80117a0:	2b00      	cmp	r3, #0
 80117a2:	d006      	beq.n	80117b2 <ip_reass_chain_frag_into_datagram_and_validate+0x1b2>
 80117a4:	4b44      	ldr	r3, [pc, #272]	; (80118b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 80117a6:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 80117aa:	4946      	ldr	r1, [pc, #280]	; (80118c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80117ac:	4844      	ldr	r0, [pc, #272]	; (80118c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80117ae:	f002 fc05 	bl	8013fbc <iprintf>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80117b2:	68fb      	ldr	r3, [r7, #12]
 80117b4:	68ba      	ldr	r2, [r7, #8]
 80117b6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	d105      	bne.n	80117ca <ip_reass_chain_frag_into_datagram_and_validate+0x1ca>
 80117be:	68fb      	ldr	r3, [r7, #12]
 80117c0:	7f9b      	ldrb	r3, [r3, #30]
 80117c2:	f003 0301 	and.w	r3, r3, #1
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	d059      	beq.n	801187e <ip_reass_chain_frag_into_datagram_and_validate+0x27e>
    /* and had no holes so far */
    if (valid) {
 80117ca:	6a3b      	ldr	r3, [r7, #32]
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	d04f      	beq.n	8011870 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 80117d0:	68fb      	ldr	r3, [r7, #12]
 80117d2:	685b      	ldr	r3, [r3, #4]
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	d006      	beq.n	80117e6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80117d8:	68fb      	ldr	r3, [r7, #12]
 80117da:	685b      	ldr	r3, [r3, #4]
 80117dc:	685b      	ldr	r3, [r3, #4]
 80117de:	889b      	ldrh	r3, [r3, #4]
 80117e0:	b29b      	uxth	r3, r3
 80117e2:	2b00      	cmp	r3, #0
 80117e4:	d002      	beq.n	80117ec <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80117e6:	2300      	movs	r3, #0
 80117e8:	623b      	str	r3, [r7, #32]
 80117ea:	e041      	b.n	8011870 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80117ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117ee:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80117f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117f2:	681b      	ldr	r3, [r3, #0]
 80117f4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80117f6:	e012      	b.n	801181e <ip_reass_chain_frag_into_datagram_and_validate+0x21e>
          iprh = (struct ip_reass_helper*)q->payload;
 80117f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117fa:	685b      	ldr	r3, [r3, #4]
 80117fc:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80117fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011800:	88db      	ldrh	r3, [r3, #6]
 8011802:	b29a      	uxth	r2, r3
 8011804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011806:	889b      	ldrh	r3, [r3, #4]
 8011808:	b29b      	uxth	r3, r3
 801180a:	429a      	cmp	r2, r3
 801180c:	d002      	beq.n	8011814 <ip_reass_chain_frag_into_datagram_and_validate+0x214>
            valid = 0;
 801180e:	2300      	movs	r3, #0
 8011810:	623b      	str	r3, [r7, #32]
            break;
 8011812:	e007      	b.n	8011824 <ip_reass_chain_frag_into_datagram_and_validate+0x224>
          }
          iprh_prev = iprh;
 8011814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011816:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8011818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801181a:	681b      	ldr	r3, [r3, #0]
 801181c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801181e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011820:	2b00      	cmp	r3, #0
 8011822:	d1e9      	bne.n	80117f8 <ip_reass_chain_frag_into_datagram_and_validate+0x1f8>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8011824:	6a3b      	ldr	r3, [r7, #32]
 8011826:	2b00      	cmp	r3, #0
 8011828:	d022      	beq.n	8011870 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801182a:	68fb      	ldr	r3, [r7, #12]
 801182c:	685b      	ldr	r3, [r3, #4]
 801182e:	2b00      	cmp	r3, #0
 8011830:	d106      	bne.n	8011840 <ip_reass_chain_frag_into_datagram_and_validate+0x240>
 8011832:	4b21      	ldr	r3, [pc, #132]	; (80118b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8011834:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 8011838:	4923      	ldr	r1, [pc, #140]	; (80118c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801183a:	4821      	ldr	r0, [pc, #132]	; (80118c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801183c:	f002 fbbe 	bl	8013fbc <iprintf>
          LWIP_ASSERT("sanity check",
 8011840:	68fb      	ldr	r3, [r7, #12]
 8011842:	685b      	ldr	r3, [r3, #4]
 8011844:	685b      	ldr	r3, [r3, #4]
 8011846:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011848:	429a      	cmp	r2, r3
 801184a:	d106      	bne.n	801185a <ip_reass_chain_frag_into_datagram_and_validate+0x25a>
 801184c:	4b1a      	ldr	r3, [pc, #104]	; (80118b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 801184e:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8011852:	491d      	ldr	r1, [pc, #116]	; (80118c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8011854:	481a      	ldr	r0, [pc, #104]	; (80118c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8011856:	f002 fbb1 	bl	8013fbc <iprintf>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801185a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801185c:	681b      	ldr	r3, [r3, #0]
 801185e:	2b00      	cmp	r3, #0
 8011860:	d006      	beq.n	8011870 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
 8011862:	4b15      	ldr	r3, [pc, #84]	; (80118b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8011864:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8011868:	4918      	ldr	r1, [pc, #96]	; (80118cc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801186a:	4815      	ldr	r0, [pc, #84]	; (80118c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801186c:	f002 fba6 	bl	8013fbc <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8011870:	6a3b      	ldr	r3, [r7, #32]
 8011872:	2b00      	cmp	r3, #0
 8011874:	bf14      	ite	ne
 8011876:	2301      	movne	r3, #1
 8011878:	2300      	moveq	r3, #0
 801187a:	b2db      	uxtb	r3, r3
 801187c:	e018      	b.n	80118b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801187e:	2300      	movs	r3, #0
 8011880:	e016      	b.n	80118b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
#if IP_REASS_CHECK_OVERLAP
freepbuf:
 8011882:	bf00      	nop
 8011884:	e004      	b.n	8011890 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
          goto freepbuf;
 8011886:	bf00      	nop
 8011888:	e002      	b.n	8011890 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 801188a:	bf00      	nop
 801188c:	e000      	b.n	8011890 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 801188e:	bf00      	nop
  ip_reass_pbufcount -= pbuf_clen(new_p);
 8011890:	68b8      	ldr	r0, [r7, #8]
 8011892:	f7f8 fb3f 	bl	8009f14 <pbuf_clen>
 8011896:	4603      	mov	r3, r0
 8011898:	461a      	mov	r2, r3
 801189a:	4b0d      	ldr	r3, [pc, #52]	; (80118d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801189c:	881b      	ldrh	r3, [r3, #0]
 801189e:	1a9b      	subs	r3, r3, r2
 80118a0:	b29a      	uxth	r2, r3
 80118a2:	4b0b      	ldr	r3, [pc, #44]	; (80118d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80118a4:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 80118a6:	68b8      	ldr	r0, [r7, #8]
 80118a8:	f7f8 faa0 	bl	8009dec <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 80118ac:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* IP_REASS_CHECK_OVERLAP */
}
 80118b0:	4618      	mov	r0, r3
 80118b2:	3730      	adds	r7, #48	; 0x30
 80118b4:	46bd      	mov	sp, r7
 80118b6:	bd80      	pop	{r7, pc}
 80118b8:	08016988 	.word	0x08016988
 80118bc:	08016a98 	.word	0x08016a98
 80118c0:	08016a04 	.word	0x08016a04
 80118c4:	08016ab8 	.word	0x08016ab8
 80118c8:	08016af0 	.word	0x08016af0
 80118cc:	08016b00 	.word	0x08016b00
 80118d0:	2000038c 	.word	0x2000038c

080118d4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80118d4:	b580      	push	{r7, lr}
 80118d6:	b08e      	sub	sp, #56	; 0x38
 80118d8:	af00      	add	r7, sp, #0
 80118da:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr*)p->payload;
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	685b      	ldr	r3, [r3, #4]
 80118e0:	62bb      	str	r3, [r7, #40]	; 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 80118e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118e4:	781b      	ldrb	r3, [r3, #0]
 80118e6:	f003 030f 	and.w	r3, r3, #15
 80118ea:	009b      	lsls	r3, r3, #2
 80118ec:	2b14      	cmp	r3, #20
 80118ee:	f040 8131 	bne.w	8011b54 <ip4_reass+0x280>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 80118f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118f4:	88db      	ldrh	r3, [r3, #6]
 80118f6:	b29b      	uxth	r3, r3
 80118f8:	4618      	mov	r0, r3
 80118fa:	f7f7 f897 	bl	8008a2c <lwip_htons>
 80118fe:	4603      	mov	r3, r0
 8011900:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011904:	b29b      	uxth	r3, r3
 8011906:	00db      	lsls	r3, r3, #3
 8011908:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 801190a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801190c:	885b      	ldrh	r3, [r3, #2]
 801190e:	b29b      	uxth	r3, r3
 8011910:	4618      	mov	r0, r3
 8011912:	f7f7 f88b 	bl	8008a2c <lwip_htons>
 8011916:	4603      	mov	r3, r0
 8011918:	461a      	mov	r2, r3
 801191a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801191c:	781b      	ldrb	r3, [r3, #0]
 801191e:	b29b      	uxth	r3, r3
 8011920:	f003 030f 	and.w	r3, r3, #15
 8011924:	b29b      	uxth	r3, r3
 8011926:	009b      	lsls	r3, r3, #2
 8011928:	b29b      	uxth	r3, r3
 801192a:	1ad3      	subs	r3, r2, r3
 801192c:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801192e:	6878      	ldr	r0, [r7, #4]
 8011930:	f7f8 faf0 	bl	8009f14 <pbuf_clen>
 8011934:	4603      	mov	r3, r0
 8011936:	847b      	strh	r3, [r7, #34]	; 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8011938:	4b8d      	ldr	r3, [pc, #564]	; (8011b70 <ip4_reass+0x29c>)
 801193a:	881b      	ldrh	r3, [r3, #0]
 801193c:	461a      	mov	r2, r3
 801193e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011940:	4413      	add	r3, r2
 8011942:	2b0a      	cmp	r3, #10
 8011944:	dd10      	ble.n	8011968 <ip4_reass+0x94>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8011946:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011948:	4619      	mov	r1, r3
 801194a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801194c:	f7ff fd8e 	bl	801146c <ip_reass_remove_oldest_datagram>
 8011950:	4603      	mov	r3, r0
 8011952:	2b00      	cmp	r3, #0
 8011954:	f000 8100 	beq.w	8011b58 <ip4_reass+0x284>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8011958:	4b85      	ldr	r3, [pc, #532]	; (8011b70 <ip4_reass+0x29c>)
 801195a:	881b      	ldrh	r3, [r3, #0]
 801195c:	461a      	mov	r2, r3
 801195e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011960:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8011962:	2b0a      	cmp	r3, #10
 8011964:	f300 80f8 	bgt.w	8011b58 <ip4_reass+0x284>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8011968:	4b82      	ldr	r3, [pc, #520]	; (8011b74 <ip4_reass+0x2a0>)
 801196a:	681b      	ldr	r3, [r3, #0]
 801196c:	633b      	str	r3, [r7, #48]	; 0x30
 801196e:	e015      	b.n	801199c <ip4_reass+0xc8>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8011970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011972:	695a      	ldr	r2, [r3, #20]
 8011974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011976:	68db      	ldr	r3, [r3, #12]
 8011978:	429a      	cmp	r2, r3
 801197a:	d10c      	bne.n	8011996 <ip4_reass+0xc2>
 801197c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801197e:	699a      	ldr	r2, [r3, #24]
 8011980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011982:	691b      	ldr	r3, [r3, #16]
 8011984:	429a      	cmp	r2, r3
 8011986:	d106      	bne.n	8011996 <ip4_reass+0xc2>
 8011988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801198a:	899a      	ldrh	r2, [r3, #12]
 801198c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801198e:	889b      	ldrh	r3, [r3, #4]
 8011990:	b29b      	uxth	r3, r3
 8011992:	429a      	cmp	r2, r3
 8011994:	d006      	beq.n	80119a4 <ip4_reass+0xd0>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8011996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011998:	681b      	ldr	r3, [r3, #0]
 801199a:	633b      	str	r3, [r7, #48]	; 0x30
 801199c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801199e:	2b00      	cmp	r3, #0
 80119a0:	d1e6      	bne.n	8011970 <ip4_reass+0x9c>
 80119a2:	e000      	b.n	80119a6 <ip4_reass+0xd2>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80119a4:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80119a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	d109      	bne.n	80119c0 <ip4_reass+0xec>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80119ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80119ae:	4619      	mov	r1, r3
 80119b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80119b2:	f7ff fdbd 	bl	8011530 <ip_reass_enqueue_new_datagram>
 80119b6:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80119b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	d11c      	bne.n	80119f8 <ip4_reass+0x124>
      goto nullreturn;
 80119be:	e0ce      	b.n	8011b5e <ip4_reass+0x28a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80119c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119c2:	88db      	ldrh	r3, [r3, #6]
 80119c4:	b29b      	uxth	r3, r3
 80119c6:	4618      	mov	r0, r3
 80119c8:	f7f7 f830 	bl	8008a2c <lwip_htons>
 80119cc:	4603      	mov	r3, r0
 80119ce:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	d110      	bne.n	80119f8 <ip4_reass+0x124>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80119d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119d8:	89db      	ldrh	r3, [r3, #14]
 80119da:	4618      	mov	r0, r3
 80119dc:	f7f7 f826 	bl	8008a2c <lwip_htons>
 80119e0:	4603      	mov	r3, r0
 80119e2:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80119e6:	2b00      	cmp	r3, #0
 80119e8:	d006      	beq.n	80119f8 <ip4_reass+0x124>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80119ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119ec:	3308      	adds	r3, #8
 80119ee:	2214      	movs	r2, #20
 80119f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80119f2:	4618      	mov	r0, r3
 80119f4:	f002 fa27 	bl	8013e46 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80119f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119fa:	88db      	ldrh	r3, [r3, #6]
 80119fc:	b29b      	uxth	r3, r3
 80119fe:	f003 0320 	and.w	r3, r3, #32
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	bf0c      	ite	eq
 8011a06:	2301      	moveq	r3, #1
 8011a08:	2300      	movne	r3, #0
 8011a0a:	b2db      	uxtb	r3, r3
 8011a0c:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8011a0e:	69fb      	ldr	r3, [r7, #28]
 8011a10:	2b00      	cmp	r3, #0
 8011a12:	d00e      	beq.n	8011a32 <ip4_reass+0x15e>
    u16_t datagram_len = (u16_t)(offset + len);
 8011a14:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011a16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011a18:	4413      	add	r3, r2
 8011a1a:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8011a1c:	8b7a      	ldrh	r2, [r7, #26]
 8011a1e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011a20:	429a      	cmp	r2, r3
 8011a22:	f0c0 8099 	bcc.w	8011b58 <ip4_reass+0x284>
 8011a26:	8b7b      	ldrh	r3, [r7, #26]
 8011a28:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8011a2c:	4293      	cmp	r3, r2
 8011a2e:	f200 8093 	bhi.w	8011b58 <ip4_reass+0x284>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8011a32:	69fa      	ldr	r2, [r7, #28]
 8011a34:	6879      	ldr	r1, [r7, #4]
 8011a36:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011a38:	f7ff fde2 	bl	8011600 <ip_reass_chain_frag_into_datagram_and_validate>
 8011a3c:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8011a3e:	697b      	ldr	r3, [r7, #20]
 8011a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a44:	f000 808a 	beq.w	8011b5c <ip4_reass+0x288>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8011a48:	4b49      	ldr	r3, [pc, #292]	; (8011b70 <ip4_reass+0x29c>)
 8011a4a:	881a      	ldrh	r2, [r3, #0]
 8011a4c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011a4e:	4413      	add	r3, r2
 8011a50:	b29a      	uxth	r2, r3
 8011a52:	4b47      	ldr	r3, [pc, #284]	; (8011b70 <ip4_reass+0x29c>)
 8011a54:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8011a56:	69fb      	ldr	r3, [r7, #28]
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	d00d      	beq.n	8011a78 <ip4_reass+0x1a4>
    u16_t datagram_len = (u16_t)(offset + len);
 8011a5c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011a5e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011a60:	4413      	add	r3, r2
 8011a62:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8011a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a66:	8a7a      	ldrh	r2, [r7, #18]
 8011a68:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8011a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a6c:	7f9b      	ldrb	r3, [r3, #30]
 8011a6e:	f043 0301 	orr.w	r3, r3, #1
 8011a72:	b2da      	uxtb	r2, r3
 8011a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a76:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8011a78:	697b      	ldr	r3, [r7, #20]
 8011a7a:	2b01      	cmp	r3, #1
 8011a7c:	d168      	bne.n	8011b50 <ip4_reass+0x27c>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 8011a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a80:	8b9b      	ldrh	r3, [r3, #28]
 8011a82:	3314      	adds	r3, #20
 8011a84:	b29a      	uxth	r2, r3
 8011a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a88:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 8011a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a8c:	685b      	ldr	r3, [r3, #4]
 8011a8e:	685b      	ldr	r3, [r3, #4]
 8011a90:	681b      	ldr	r3, [r3, #0]
 8011a92:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 8011a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a96:	685b      	ldr	r3, [r3, #4]
 8011a98:	685b      	ldr	r3, [r3, #4]
 8011a9a:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8011a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a9e:	3308      	adds	r3, #8
 8011aa0:	2214      	movs	r2, #20
 8011aa2:	4619      	mov	r1, r3
 8011aa4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011aa6:	f002 f9ce 	bl	8013e46 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 8011aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011aac:	8b9b      	ldrh	r3, [r3, #28]
 8011aae:	4618      	mov	r0, r3
 8011ab0:	f7f6 ffbc 	bl	8008a2c <lwip_htons>
 8011ab4:	4603      	mov	r3, r0
 8011ab6:	461a      	mov	r2, r3
 8011ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011aba:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8011abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011abe:	2200      	movs	r2, #0
 8011ac0:	719a      	strb	r2, [r3, #6]
 8011ac2:	2200      	movs	r2, #0
 8011ac4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8011ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ac8:	2200      	movs	r2, #0
 8011aca:	729a      	strb	r2, [r3, #10]
 8011acc:	2200      	movs	r2, #0
 8011ace:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8011ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ad2:	685b      	ldr	r3, [r3, #4]
 8011ad4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8011ad6:	e00e      	b.n	8011af6 <ip4_reass+0x222>
      iprh = (struct ip_reass_helper*)r->payload;
 8011ad8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011ada:	685b      	ldr	r3, [r3, #4]
 8011adc:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 8011ade:	f06f 0113 	mvn.w	r1, #19
 8011ae2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8011ae4:	f7f8 f95e 	bl	8009da4 <pbuf_header>
      pbuf_cat(p, r);
 8011ae8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011aea:	6878      	ldr	r0, [r7, #4]
 8011aec:	f7f8 fa4c 	bl	8009f88 <pbuf_cat>
      r = iprh->next_pbuf;
 8011af0:	68fb      	ldr	r3, [r7, #12]
 8011af2:	681b      	ldr	r3, [r3, #0]
 8011af4:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8011af6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011af8:	2b00      	cmp	r3, #0
 8011afa:	d1ed      	bne.n	8011ad8 <ip4_reass+0x204>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8011afc:	4b1d      	ldr	r3, [pc, #116]	; (8011b74 <ip4_reass+0x2a0>)
 8011afe:	681b      	ldr	r3, [r3, #0]
 8011b00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011b02:	429a      	cmp	r2, r3
 8011b04:	d102      	bne.n	8011b0c <ip4_reass+0x238>
      ipr_prev = NULL;
 8011b06:	2300      	movs	r3, #0
 8011b08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011b0a:	e010      	b.n	8011b2e <ip4_reass+0x25a>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8011b0c:	4b19      	ldr	r3, [pc, #100]	; (8011b74 <ip4_reass+0x2a0>)
 8011b0e:	681b      	ldr	r3, [r3, #0]
 8011b10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011b12:	e007      	b.n	8011b24 <ip4_reass+0x250>
        if (ipr_prev->next == ipr) {
 8011b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b16:	681b      	ldr	r3, [r3, #0]
 8011b18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011b1a:	429a      	cmp	r2, r3
 8011b1c:	d006      	beq.n	8011b2c <ip4_reass+0x258>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8011b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b20:	681b      	ldr	r3, [r3, #0]
 8011b22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	d1f4      	bne.n	8011b14 <ip4_reass+0x240>
 8011b2a:	e000      	b.n	8011b2e <ip4_reass+0x25a>
          break;
 8011b2c:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8011b2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011b30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011b32:	f7ff fd37 	bl	80115a4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 8011b36:	6878      	ldr	r0, [r7, #4]
 8011b38:	f7f8 f9ec 	bl	8009f14 <pbuf_clen>
 8011b3c:	4603      	mov	r3, r0
 8011b3e:	461a      	mov	r2, r3
 8011b40:	4b0b      	ldr	r3, [pc, #44]	; (8011b70 <ip4_reass+0x29c>)
 8011b42:	881b      	ldrh	r3, [r3, #0]
 8011b44:	1a9b      	subs	r3, r3, r2
 8011b46:	b29a      	uxth	r2, r3
 8011b48:	4b09      	ldr	r3, [pc, #36]	; (8011b70 <ip4_reass+0x29c>)
 8011b4a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	e00a      	b.n	8011b66 <ip4_reass+0x292>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8011b50:	2300      	movs	r3, #0
 8011b52:	e008      	b.n	8011b66 <ip4_reass+0x292>
    goto nullreturn;
 8011b54:	bf00      	nop
 8011b56:	e002      	b.n	8011b5e <ip4_reass+0x28a>

nullreturn:
 8011b58:	bf00      	nop
 8011b5a:	e000      	b.n	8011b5e <ip4_reass+0x28a>
    goto nullreturn;
 8011b5c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8011b5e:	6878      	ldr	r0, [r7, #4]
 8011b60:	f7f8 f944 	bl	8009dec <pbuf_free>
  return NULL;
 8011b64:	2300      	movs	r3, #0
}
 8011b66:	4618      	mov	r0, r3
 8011b68:	3738      	adds	r7, #56	; 0x38
 8011b6a:	46bd      	mov	sp, r7
 8011b6c:	bd80      	pop	{r7, pc}
 8011b6e:	bf00      	nop
 8011b70:	2000038c 	.word	0x2000038c
 8011b74:	20000388 	.word	0x20000388

08011b78 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 8011b78:	b580      	push	{r7, lr}
 8011b7a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 8011b7c:	2005      	movs	r0, #5
 8011b7e:	f7f7 fb21 	bl	80091c4 <memp_malloc>
 8011b82:	4603      	mov	r3, r0
}
 8011b84:	4618      	mov	r0, r3
 8011b86:	bd80      	pop	{r7, pc}

08011b88 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 8011b88:	b580      	push	{r7, lr}
 8011b8a:	b082      	sub	sp, #8
 8011b8c:	af00      	add	r7, sp, #0
 8011b8e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	d106      	bne.n	8011ba4 <ip_frag_free_pbuf_custom_ref+0x1c>
 8011b96:	4b07      	ldr	r3, [pc, #28]	; (8011bb4 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8011b98:	f240 22ae 	movw	r2, #686	; 0x2ae
 8011b9c:	4906      	ldr	r1, [pc, #24]	; (8011bb8 <ip_frag_free_pbuf_custom_ref+0x30>)
 8011b9e:	4807      	ldr	r0, [pc, #28]	; (8011bbc <ip_frag_free_pbuf_custom_ref+0x34>)
 8011ba0:	f002 fa0c 	bl	8013fbc <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8011ba4:	6879      	ldr	r1, [r7, #4]
 8011ba6:	2005      	movs	r0, #5
 8011ba8:	f7f7 fb7c 	bl	80092a4 <memp_free>
}
 8011bac:	bf00      	nop
 8011bae:	3708      	adds	r7, #8
 8011bb0:	46bd      	mov	sp, r7
 8011bb2:	bd80      	pop	{r7, pc}
 8011bb4:	08016988 	.word	0x08016988
 8011bb8:	08016b24 	.word	0x08016b24
 8011bbc:	08016a04 	.word	0x08016a04

08011bc0 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8011bc0:	b580      	push	{r7, lr}
 8011bc2:	b084      	sub	sp, #16
 8011bc4:	af00      	add	r7, sp, #0
 8011bc6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8011bcc:	68fb      	ldr	r3, [r7, #12]
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	d106      	bne.n	8011be0 <ipfrag_free_pbuf_custom+0x20>
 8011bd2:	4b11      	ldr	r3, [pc, #68]	; (8011c18 <ipfrag_free_pbuf_custom+0x58>)
 8011bd4:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 8011bd8:	4910      	ldr	r1, [pc, #64]	; (8011c1c <ipfrag_free_pbuf_custom+0x5c>)
 8011bda:	4811      	ldr	r0, [pc, #68]	; (8011c20 <ipfrag_free_pbuf_custom+0x60>)
 8011bdc:	f002 f9ee 	bl	8013fbc <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 8011be0:	68fa      	ldr	r2, [r7, #12]
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	429a      	cmp	r2, r3
 8011be6:	d006      	beq.n	8011bf6 <ipfrag_free_pbuf_custom+0x36>
 8011be8:	4b0b      	ldr	r3, [pc, #44]	; (8011c18 <ipfrag_free_pbuf_custom+0x58>)
 8011bea:	f240 22b9 	movw	r2, #697	; 0x2b9
 8011bee:	490d      	ldr	r1, [pc, #52]	; (8011c24 <ipfrag_free_pbuf_custom+0x64>)
 8011bf0:	480b      	ldr	r0, [pc, #44]	; (8011c20 <ipfrag_free_pbuf_custom+0x60>)
 8011bf2:	f002 f9e3 	bl	8013fbc <iprintf>
  if (pcr->original != NULL) {
 8011bf6:	68fb      	ldr	r3, [r7, #12]
 8011bf8:	695b      	ldr	r3, [r3, #20]
 8011bfa:	2b00      	cmp	r3, #0
 8011bfc:	d004      	beq.n	8011c08 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8011bfe:	68fb      	ldr	r3, [r7, #12]
 8011c00:	695b      	ldr	r3, [r3, #20]
 8011c02:	4618      	mov	r0, r3
 8011c04:	f7f8 f8f2 	bl	8009dec <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8011c08:	68f8      	ldr	r0, [r7, #12]
 8011c0a:	f7ff ffbd 	bl	8011b88 <ip_frag_free_pbuf_custom_ref>
}
 8011c0e:	bf00      	nop
 8011c10:	3710      	adds	r7, #16
 8011c12:	46bd      	mov	sp, r7
 8011c14:	bd80      	pop	{r7, pc}
 8011c16:	bf00      	nop
 8011c18:	08016988 	.word	0x08016988
 8011c1c:	08016b30 	.word	0x08016b30
 8011c20:	08016a04 	.word	0x08016a04
 8011c24:	08016b3c 	.word	0x08016b3c

08011c28 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8011c28:	b580      	push	{r7, lr}
 8011c2a:	b092      	sub	sp, #72	; 0x48
 8011c2c:	af02      	add	r7, sp, #8
 8011c2e:	60f8      	str	r0, [r7, #12]
 8011c30:	60b9      	str	r1, [r7, #8]
 8011c32:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8011c34:	2300      	movs	r3, #0
 8011c36:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 8011c38:	68bb      	ldr	r3, [r7, #8]
 8011c3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011c3c:	3b14      	subs	r3, #20
 8011c3e:	2b00      	cmp	r3, #0
 8011c40:	da00      	bge.n	8011c44 <ip4_frag+0x1c>
 8011c42:	3307      	adds	r3, #7
 8011c44:	10db      	asrs	r3, r3, #3
 8011c46:	867b      	strh	r3, [r7, #50]	; 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8011c48:	2314      	movs	r3, #20
 8011c4a:	86fb      	strh	r3, [r7, #54]	; 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 8011c4c:	68fb      	ldr	r3, [r7, #12]
 8011c4e:	685b      	ldr	r3, [r3, #4]
 8011c50:	62fb      	str	r3, [r7, #44]	; 0x2c
  iphdr = original_iphdr;
 8011c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c54:	62bb      	str	r3, [r7, #40]	; 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 8011c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c58:	781b      	ldrb	r3, [r3, #0]
 8011c5a:	f003 030f 	and.w	r3, r3, #15
 8011c5e:	009b      	lsls	r3, r3, #2
 8011c60:	2b14      	cmp	r3, #20
 8011c62:	d009      	beq.n	8011c78 <ip4_frag+0x50>
 8011c64:	4b79      	ldr	r3, [pc, #484]	; (8011e4c <ip4_frag+0x224>)
 8011c66:	f240 22e1 	movw	r2, #737	; 0x2e1
 8011c6a:	4979      	ldr	r1, [pc, #484]	; (8011e50 <ip4_frag+0x228>)
 8011c6c:	4879      	ldr	r0, [pc, #484]	; (8011e54 <ip4_frag+0x22c>)
 8011c6e:	f002 f9a5 	bl	8013fbc <iprintf>
 8011c72:	f06f 0305 	mvn.w	r3, #5
 8011c76:	e0e5      	b.n	8011e44 <ip4_frag+0x21c>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8011c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c7a:	88db      	ldrh	r3, [r3, #6]
 8011c7c:	b29b      	uxth	r3, r3
 8011c7e:	4618      	mov	r0, r3
 8011c80:	f7f6 fed4 	bl	8008a2c <lwip_htons>
 8011c84:	4603      	mov	r3, r0
 8011c86:	86bb      	strh	r3, [r7, #52]	; 0x34
  ofo = tmp & IP_OFFMASK;
 8011c88:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8011c8a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011c8e:	873b      	strh	r3, [r7, #56]	; 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 8011c90:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8011c92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	d009      	beq.n	8011cae <ip4_frag+0x86>
 8011c9a:	4b6c      	ldr	r3, [pc, #432]	; (8011e4c <ip4_frag+0x224>)
 8011c9c:	f240 22e6 	movw	r2, #742	; 0x2e6
 8011ca0:	496d      	ldr	r1, [pc, #436]	; (8011e58 <ip4_frag+0x230>)
 8011ca2:	486c      	ldr	r0, [pc, #432]	; (8011e54 <ip4_frag+0x22c>)
 8011ca4:	f002 f98a 	bl	8013fbc <iprintf>
 8011ca8:	f06f 0305 	mvn.w	r3, #5
 8011cac:	e0ca      	b.n	8011e44 <ip4_frag+0x21c>

  left = p->tot_len - IP_HLEN;
 8011cae:	68fb      	ldr	r3, [r7, #12]
 8011cb0:	891b      	ldrh	r3, [r3, #8]
 8011cb2:	3b14      	subs	r3, #20
 8011cb4:	877b      	strh	r3, [r7, #58]	; 0x3a

  while (left) {
 8011cb6:	e0bc      	b.n	8011e32 <ip4_frag+0x20a>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 8011cb8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8011cba:	00da      	lsls	r2, r3, #3
 8011cbc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011cbe:	4293      	cmp	r3, r2
 8011cc0:	bfa8      	it	ge
 8011cc2:	4613      	movge	r3, r2
 8011cc4:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8011cc6:	2200      	movs	r2, #0
 8011cc8:	2114      	movs	r1, #20
 8011cca:	2002      	movs	r0, #2
 8011ccc:	f7f7 fd1c 	bl	8009708 <pbuf_alloc>
 8011cd0:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 8011cd2:	6a3b      	ldr	r3, [r7, #32]
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	f000 80b2 	beq.w	8011e3e <ip4_frag+0x216>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8011cda:	68fb      	ldr	r3, [r7, #12]
 8011cdc:	895b      	ldrh	r3, [r3, #10]
 8011cde:	2b13      	cmp	r3, #19
 8011ce0:	d806      	bhi.n	8011cf0 <ip4_frag+0xc8>
 8011ce2:	4b5a      	ldr	r3, [pc, #360]	; (8011e4c <ip4_frag+0x224>)
 8011ce4:	f240 3209 	movw	r2, #777	; 0x309
 8011ce8:	495c      	ldr	r1, [pc, #368]	; (8011e5c <ip4_frag+0x234>)
 8011cea:	485a      	ldr	r0, [pc, #360]	; (8011e54 <ip4_frag+0x22c>)
 8011cec:	f002 f966 	bl	8013fbc <iprintf>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8011cf0:	6a3b      	ldr	r3, [r7, #32]
 8011cf2:	685b      	ldr	r3, [r3, #4]
 8011cf4:	2214      	movs	r2, #20
 8011cf6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011cf8:	4618      	mov	r0, r3
 8011cfa:	f002 f8a4 	bl	8013e46 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8011cfe:	6a3b      	ldr	r3, [r7, #32]
 8011d00:	685b      	ldr	r3, [r3, #4]
 8011d02:	62bb      	str	r3, [r7, #40]	; 0x28

    left_to_copy = fragsize;
 8011d04:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011d06:	87bb      	strh	r3, [r7, #60]	; 0x3c
    while (left_to_copy) {
 8011d08:	e04f      	b.n	8011daa <ip4_frag+0x182>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 8011d0a:	68fb      	ldr	r3, [r7, #12]
 8011d0c:	895a      	ldrh	r2, [r3, #10]
 8011d0e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011d10:	1ad3      	subs	r3, r2, r3
 8011d12:	837b      	strh	r3, [r7, #26]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8011d14:	8b7a      	ldrh	r2, [r7, #26]
 8011d16:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011d18:	4293      	cmp	r3, r2
 8011d1a:	bf28      	it	cs
 8011d1c:	4613      	movcs	r3, r2
 8011d1e:	87fb      	strh	r3, [r7, #62]	; 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8011d20:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011d22:	2b00      	cmp	r3, #0
 8011d24:	d105      	bne.n	8011d32 <ip4_frag+0x10a>
        poff = 0;
 8011d26:	2300      	movs	r3, #0
 8011d28:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 8011d2a:	68fb      	ldr	r3, [r7, #12]
 8011d2c:	681b      	ldr	r3, [r3, #0]
 8011d2e:	60fb      	str	r3, [r7, #12]
        continue;
 8011d30:	e03b      	b.n	8011daa <ip4_frag+0x182>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8011d32:	f7ff ff21 	bl	8011b78 <ip_frag_alloc_pbuf_custom_ref>
 8011d36:	6178      	str	r0, [r7, #20]
      if (pcr == NULL) {
 8011d38:	697b      	ldr	r3, [r7, #20]
 8011d3a:	2b00      	cmp	r3, #0
 8011d3c:	d103      	bne.n	8011d46 <ip4_frag+0x11e>
        pbuf_free(rambuf);
 8011d3e:	6a38      	ldr	r0, [r7, #32]
 8011d40:	f7f8 f854 	bl	8009dec <pbuf_free>
        goto memerr;
 8011d44:	e07c      	b.n	8011e40 <ip4_frag+0x218>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8011d46:	6978      	ldr	r0, [r7, #20]
        (u8_t*)p->payload + poff, newpbuflen);
 8011d48:	68fb      	ldr	r3, [r7, #12]
 8011d4a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8011d4c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011d4e:	4413      	add	r3, r2
 8011d50:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 8011d52:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8011d54:	9201      	str	r2, [sp, #4]
 8011d56:	9300      	str	r3, [sp, #0]
 8011d58:	4603      	mov	r3, r0
 8011d5a:	2202      	movs	r2, #2
 8011d5c:	2004      	movs	r0, #4
 8011d5e:	f7f7 fe67 	bl	8009a30 <pbuf_alloced_custom>
 8011d62:	6138      	str	r0, [r7, #16]
      if (newpbuf == NULL) {
 8011d64:	693b      	ldr	r3, [r7, #16]
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	d106      	bne.n	8011d78 <ip4_frag+0x150>
        ip_frag_free_pbuf_custom_ref(pcr);
 8011d6a:	6978      	ldr	r0, [r7, #20]
 8011d6c:	f7ff ff0c 	bl	8011b88 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8011d70:	6a38      	ldr	r0, [r7, #32]
 8011d72:	f7f8 f83b 	bl	8009dec <pbuf_free>
        goto memerr;
 8011d76:	e063      	b.n	8011e40 <ip4_frag+0x218>
      }
      pbuf_ref(p);
 8011d78:	68f8      	ldr	r0, [r7, #12]
 8011d7a:	f7f8 f8e3 	bl	8009f44 <pbuf_ref>
      pcr->original = p;
 8011d7e:	697b      	ldr	r3, [r7, #20]
 8011d80:	68fa      	ldr	r2, [r7, #12]
 8011d82:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8011d84:	697b      	ldr	r3, [r7, #20]
 8011d86:	4a36      	ldr	r2, [pc, #216]	; (8011e60 <ip4_frag+0x238>)
 8011d88:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8011d8a:	6939      	ldr	r1, [r7, #16]
 8011d8c:	6a38      	ldr	r0, [r7, #32]
 8011d8e:	f7f8 f8fb 	bl	8009f88 <pbuf_cat>
      left_to_copy -= newpbuflen;
 8011d92:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8011d94:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011d96:	1ad3      	subs	r3, r2, r3
 8011d98:	87bb      	strh	r3, [r7, #60]	; 0x3c
      if (left_to_copy) {
 8011d9a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	d004      	beq.n	8011daa <ip4_frag+0x182>
        poff = 0;
 8011da0:	2300      	movs	r3, #0
 8011da2:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 8011da4:	68fb      	ldr	r3, [r7, #12]
 8011da6:	681b      	ldr	r3, [r3, #0]
 8011da8:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8011daa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011dac:	2b00      	cmp	r3, #0
 8011dae:	d1ac      	bne.n	8011d0a <ip4_frag+0xe2>
      }
    }
    poff += newpbuflen;
 8011db0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8011db2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011db4:	4413      	add	r3, r2
 8011db6:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8011db8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011dba:	68bb      	ldr	r3, [r7, #8]
 8011dbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011dbe:	3b14      	subs	r3, #20
 8011dc0:	429a      	cmp	r2, r3
 8011dc2:	bfd4      	ite	le
 8011dc4:	2301      	movle	r3, #1
 8011dc6:	2300      	movgt	r3, #0
 8011dc8:	b2db      	uxtb	r3, r3
 8011dca:	61fb      	str	r3, [r7, #28]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8011dcc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8011dce:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011dd2:	86bb      	strh	r3, [r7, #52]	; 0x34
    if (!last) {
 8011dd4:	69fb      	ldr	r3, [r7, #28]
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	d103      	bne.n	8011de2 <ip4_frag+0x1ba>
      tmp = tmp | IP_MF;
 8011dda:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8011ddc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8011de0:	86bb      	strh	r3, [r7, #52]	; 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8011de2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8011de4:	4618      	mov	r0, r3
 8011de6:	f7f6 fe21 	bl	8008a2c <lwip_htons>
 8011dea:	4603      	mov	r3, r0
 8011dec:	461a      	mov	r2, r3
 8011dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011df0:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 8011df2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011df4:	3314      	adds	r3, #20
 8011df6:	b29b      	uxth	r3, r3
 8011df8:	4618      	mov	r0, r3
 8011dfa:	f7f6 fe17 	bl	8008a2c <lwip_htons>
 8011dfe:	4603      	mov	r3, r0
 8011e00:	461a      	mov	r2, r3
 8011e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e04:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8011e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e08:	2200      	movs	r2, #0
 8011e0a:	729a      	strb	r2, [r3, #10]
 8011e0c:	2200      	movs	r2, #0
 8011e0e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8011e10:	68bb      	ldr	r3, [r7, #8]
 8011e12:	695b      	ldr	r3, [r3, #20]
 8011e14:	687a      	ldr	r2, [r7, #4]
 8011e16:	6a39      	ldr	r1, [r7, #32]
 8011e18:	68b8      	ldr	r0, [r7, #8]
 8011e1a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8011e1c:	6a38      	ldr	r0, [r7, #32]
 8011e1e:	f7f7 ffe5 	bl	8009dec <pbuf_free>
    left -= fragsize;
 8011e22:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011e24:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011e26:	1ad3      	subs	r3, r2, r3
 8011e28:	877b      	strh	r3, [r7, #58]	; 0x3a
    ofo += nfb;
 8011e2a:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8011e2c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8011e2e:	4413      	add	r3, r2
 8011e30:	873b      	strh	r3, [r7, #56]	; 0x38
  while (left) {
 8011e32:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011e34:	2b00      	cmp	r3, #0
 8011e36:	f47f af3f 	bne.w	8011cb8 <ip4_frag+0x90>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8011e3a:	2300      	movs	r3, #0
 8011e3c:	e002      	b.n	8011e44 <ip4_frag+0x21c>
      goto memerr;
 8011e3e:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8011e40:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011e44:	4618      	mov	r0, r3
 8011e46:	3740      	adds	r7, #64	; 0x40
 8011e48:	46bd      	mov	sp, r7
 8011e4a:	bd80      	pop	{r7, pc}
 8011e4c:	08016988 	.word	0x08016988
 8011e50:	08016b48 	.word	0x08016b48
 8011e54:	08016a04 	.word	0x08016a04
 8011e58:	08016b70 	.word	0x08016b70
 8011e5c:	08016b8c 	.word	0x08016b8c
 8011e60:	08011bc1 	.word	0x08011bc1

08011e64 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8011e64:	b580      	push	{r7, lr}
 8011e66:	b086      	sub	sp, #24
 8011e68:	af00      	add	r7, sp, #0
 8011e6a:	6078      	str	r0, [r7, #4]
 8011e6c:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 8011e6e:	230e      	movs	r3, #14
 8011e70:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	895b      	ldrh	r3, [r3, #10]
 8011e76:	2b0e      	cmp	r3, #14
 8011e78:	d977      	bls.n	8011f6a <ethernet_input+0x106>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	685b      	ldr	r3, [r3, #4]
 8011e7e:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8011e80:	693b      	ldr	r3, [r7, #16]
 8011e82:	7b1a      	ldrb	r2, [r3, #12]
 8011e84:	7b5b      	ldrb	r3, [r3, #13]
 8011e86:	021b      	lsls	r3, r3, #8
 8011e88:	4313      	orrs	r3, r2
 8011e8a:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8011e8c:	693b      	ldr	r3, [r7, #16]
 8011e8e:	781b      	ldrb	r3, [r3, #0]
 8011e90:	f003 0301 	and.w	r3, r3, #1
 8011e94:	2b00      	cmp	r3, #0
 8011e96:	d023      	beq.n	8011ee0 <ethernet_input+0x7c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8011e98:	693b      	ldr	r3, [r7, #16]
 8011e9a:	781b      	ldrb	r3, [r3, #0]
 8011e9c:	2b01      	cmp	r3, #1
 8011e9e:	d10f      	bne.n	8011ec0 <ethernet_input+0x5c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8011ea0:	693b      	ldr	r3, [r7, #16]
 8011ea2:	785b      	ldrb	r3, [r3, #1]
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	d11b      	bne.n	8011ee0 <ethernet_input+0x7c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8011ea8:	693b      	ldr	r3, [r7, #16]
 8011eaa:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8011eac:	2b5e      	cmp	r3, #94	; 0x5e
 8011eae:	d117      	bne.n	8011ee0 <ethernet_input+0x7c>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	7b5b      	ldrb	r3, [r3, #13]
 8011eb4:	f043 0310 	orr.w	r3, r3, #16
 8011eb8:	b2da      	uxtb	r2, r3
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	735a      	strb	r2, [r3, #13]
 8011ebe:	e00f      	b.n	8011ee0 <ethernet_input+0x7c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8011ec0:	693b      	ldr	r3, [r7, #16]
 8011ec2:	2206      	movs	r2, #6
 8011ec4:	4930      	ldr	r1, [pc, #192]	; (8011f88 <ethernet_input+0x124>)
 8011ec6:	4618      	mov	r0, r3
 8011ec8:	f001 ffae 	bl	8013e28 <memcmp>
 8011ecc:	4603      	mov	r3, r0
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	d106      	bne.n	8011ee0 <ethernet_input+0x7c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	7b5b      	ldrb	r3, [r3, #13]
 8011ed6:	f043 0308 	orr.w	r3, r3, #8
 8011eda:	b2da      	uxtb	r2, r3
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8011ee0:	89fb      	ldrh	r3, [r7, #14]
 8011ee2:	2b08      	cmp	r3, #8
 8011ee4:	d003      	beq.n	8011eee <ethernet_input+0x8a>
 8011ee6:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8011eea:	d01e      	beq.n	8011f2a <ethernet_input+0xc6>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8011eec:	e044      	b.n	8011f78 <ethernet_input+0x114>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8011eee:	683b      	ldr	r3, [r7, #0]
 8011ef0:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8011ef4:	f003 0308 	and.w	r3, r3, #8
 8011ef8:	2b00      	cmp	r3, #0
 8011efa:	d038      	beq.n	8011f6e <ethernet_input+0x10a>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	895b      	ldrh	r3, [r3, #10]
 8011f00:	461a      	mov	r2, r3
 8011f02:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8011f06:	429a      	cmp	r2, r3
 8011f08:	db33      	blt.n	8011f72 <ethernet_input+0x10e>
 8011f0a:	8afb      	ldrh	r3, [r7, #22]
 8011f0c:	425b      	negs	r3, r3
 8011f0e:	b29b      	uxth	r3, r3
 8011f10:	b21b      	sxth	r3, r3
 8011f12:	4619      	mov	r1, r3
 8011f14:	6878      	ldr	r0, [r7, #4]
 8011f16:	f7f7 ff45 	bl	8009da4 <pbuf_header>
 8011f1a:	4603      	mov	r3, r0
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	d128      	bne.n	8011f72 <ethernet_input+0x10e>
        ip4_input(p, netif);
 8011f20:	6839      	ldr	r1, [r7, #0]
 8011f22:	6878      	ldr	r0, [r7, #4]
 8011f24:	f7fe ff80 	bl	8010e28 <ip4_input>
      break;
 8011f28:	e01d      	b.n	8011f66 <ethernet_input+0x102>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8011f2a:	683b      	ldr	r3, [r7, #0]
 8011f2c:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8011f30:	f003 0308 	and.w	r3, r3, #8
 8011f34:	2b00      	cmp	r3, #0
 8011f36:	d01e      	beq.n	8011f76 <ethernet_input+0x112>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	895b      	ldrh	r3, [r3, #10]
 8011f3c:	461a      	mov	r2, r3
 8011f3e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8011f42:	429a      	cmp	r2, r3
 8011f44:	db15      	blt.n	8011f72 <ethernet_input+0x10e>
 8011f46:	8afb      	ldrh	r3, [r7, #22]
 8011f48:	425b      	negs	r3, r3
 8011f4a:	b29b      	uxth	r3, r3
 8011f4c:	b21b      	sxth	r3, r3
 8011f4e:	4619      	mov	r1, r3
 8011f50:	6878      	ldr	r0, [r7, #4]
 8011f52:	f7f7 ff27 	bl	8009da4 <pbuf_header>
 8011f56:	4603      	mov	r3, r0
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	d10a      	bne.n	8011f72 <ethernet_input+0x10e>
        etharp_input(p, netif);
 8011f5c:	6839      	ldr	r1, [r7, #0]
 8011f5e:	6878      	ldr	r0, [r7, #4]
 8011f60:	f7fe f94e 	bl	8010200 <etharp_input>
      break;
 8011f64:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8011f66:	2300      	movs	r3, #0
 8011f68:	e00a      	b.n	8011f80 <ethernet_input+0x11c>
    goto free_and_return;
 8011f6a:	bf00      	nop
 8011f6c:	e004      	b.n	8011f78 <ethernet_input+0x114>
        goto free_and_return;
 8011f6e:	bf00      	nop
 8011f70:	e002      	b.n	8011f78 <ethernet_input+0x114>

free_and_return:
 8011f72:	bf00      	nop
 8011f74:	e000      	b.n	8011f78 <ethernet_input+0x114>
        goto free_and_return;
 8011f76:	bf00      	nop
  pbuf_free(p);
 8011f78:	6878      	ldr	r0, [r7, #4]
 8011f7a:	f7f7 ff37 	bl	8009dec <pbuf_free>
  return ERR_OK;
 8011f7e:	2300      	movs	r3, #0
}
 8011f80:	4618      	mov	r0, r3
 8011f82:	3718      	adds	r7, #24
 8011f84:	46bd      	mov	sp, r7
 8011f86:	bd80      	pop	{r7, pc}
 8011f88:	08016e4c 	.word	0x08016e4c

08011f8c <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 8011f8c:	b580      	push	{r7, lr}
 8011f8e:	b086      	sub	sp, #24
 8011f90:	af00      	add	r7, sp, #0
 8011f92:	60f8      	str	r0, [r7, #12]
 8011f94:	60b9      	str	r1, [r7, #8]
 8011f96:	607a      	str	r2, [r7, #4]
 8011f98:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8011f9a:	8c3b      	ldrh	r3, [r7, #32]
 8011f9c:	4618      	mov	r0, r3
 8011f9e:	f7f6 fd45 	bl	8008a2c <lwip_htons>
 8011fa2:	4603      	mov	r3, r0
 8011fa4:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 8011fa6:	210e      	movs	r1, #14
 8011fa8:	68b8      	ldr	r0, [r7, #8]
 8011faa:	f7f7 fefb 	bl	8009da4 <pbuf_header>
 8011fae:	4603      	mov	r3, r0
 8011fb0:	2b00      	cmp	r3, #0
 8011fb2:	d125      	bne.n	8012000 <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 8011fb4:	68bb      	ldr	r3, [r7, #8]
 8011fb6:	685b      	ldr	r3, [r3, #4]
 8011fb8:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8011fba:	693b      	ldr	r3, [r7, #16]
 8011fbc:	8afa      	ldrh	r2, [r7, #22]
 8011fbe:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 8011fc0:	693b      	ldr	r3, [r7, #16]
 8011fc2:	2206      	movs	r2, #6
 8011fc4:	6839      	ldr	r1, [r7, #0]
 8011fc6:	4618      	mov	r0, r3
 8011fc8:	f001 ff3d 	bl	8013e46 <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 8011fcc:	693b      	ldr	r3, [r7, #16]
 8011fce:	3306      	adds	r3, #6
 8011fd0:	2206      	movs	r2, #6
 8011fd2:	6879      	ldr	r1, [r7, #4]
 8011fd4:	4618      	mov	r0, r3
 8011fd6:	f001 ff36 	bl	8013e46 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8011fda:	68fb      	ldr	r3, [r7, #12]
 8011fdc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011fe0:	2b06      	cmp	r3, #6
 8011fe2:	d006      	beq.n	8011ff2 <ethernet_output+0x66>
 8011fe4:	4b0a      	ldr	r3, [pc, #40]	; (8012010 <ethernet_output+0x84>)
 8011fe6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8011fea:	490a      	ldr	r1, [pc, #40]	; (8012014 <ethernet_output+0x88>)
 8011fec:	480a      	ldr	r0, [pc, #40]	; (8012018 <ethernet_output+0x8c>)
 8011fee:	f001 ffe5 	bl	8013fbc <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8011ff2:	68fb      	ldr	r3, [r7, #12]
 8011ff4:	699b      	ldr	r3, [r3, #24]
 8011ff6:	68b9      	ldr	r1, [r7, #8]
 8011ff8:	68f8      	ldr	r0, [r7, #12]
 8011ffa:	4798      	blx	r3
 8011ffc:	4603      	mov	r3, r0
 8011ffe:	e002      	b.n	8012006 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8012000:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8012002:	f06f 0301 	mvn.w	r3, #1
}
 8012006:	4618      	mov	r0, r3
 8012008:	3718      	adds	r7, #24
 801200a:	46bd      	mov	sp, r7
 801200c:	bd80      	pop	{r7, pc}
 801200e:	bf00      	nop
 8012010:	08016bac 	.word	0x08016bac
 8012014:	08016c18 	.word	0x08016c18
 8012018:	08016c4c 	.word	0x08016c4c

0801201c <SCB_InvalidateDCache_by_Addr>:
{
 801201c:	b480      	push	{r7}
 801201e:	b087      	sub	sp, #28
 8012020:	af00      	add	r7, sp, #0
 8012022:	6078      	str	r0, [r7, #4]
 8012024:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 8012026:	683b      	ldr	r3, [r7, #0]
 8012028:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 801202e:	2320      	movs	r3, #32
 8012030:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8012032:	f3bf 8f4f 	dsb	sy
    while (op_size > 0) {
 8012036:	e00b      	b.n	8012050 <SCB_InvalidateDCache_by_Addr+0x34>
      SCB->DCIMVAC = op_addr;
 8012038:	4a0c      	ldr	r2, [pc, #48]	; (801206c <SCB_InvalidateDCache_by_Addr+0x50>)
 801203a:	693b      	ldr	r3, [r7, #16]
 801203c:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 8012040:	68fb      	ldr	r3, [r7, #12]
 8012042:	693a      	ldr	r2, [r7, #16]
 8012044:	4413      	add	r3, r2
 8012046:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8012048:	697a      	ldr	r2, [r7, #20]
 801204a:	68fb      	ldr	r3, [r7, #12]
 801204c:	1ad3      	subs	r3, r2, r3
 801204e:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8012050:	697b      	ldr	r3, [r7, #20]
 8012052:	2b00      	cmp	r3, #0
 8012054:	dcf0      	bgt.n	8012038 <SCB_InvalidateDCache_by_Addr+0x1c>
 8012056:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 801205a:	f3bf 8f6f 	isb	sy
}
 801205e:	bf00      	nop
 8012060:	371c      	adds	r7, #28
 8012062:	46bd      	mov	sp, r7
 8012064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012068:	4770      	bx	lr
 801206a:	bf00      	nop
 801206c:	e000ed00 	.word	0xe000ed00

08012070 <HAL_ETH_MspInit>:
/* Private functions ---------------------------------------------------------*/
void pbuf_free_custom(struct pbuf *p);
void Error_Handler(void);

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8012070:	b580      	push	{r7, lr}
 8012072:	b08e      	sub	sp, #56	; 0x38
 8012074:	af00      	add	r7, sp, #0
 8012076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012078:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801207c:	2200      	movs	r2, #0
 801207e:	601a      	str	r2, [r3, #0]
 8012080:	605a      	str	r2, [r3, #4]
 8012082:	609a      	str	r2, [r3, #8]
 8012084:	60da      	str	r2, [r3, #12]
 8012086:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	681b      	ldr	r3, [r3, #0]
 801208c:	4a49      	ldr	r2, [pc, #292]	; (80121b4 <HAL_ETH_MspInit+0x144>)
 801208e:	4293      	cmp	r3, r2
 8012090:	f040 808b 	bne.w	80121aa <HAL_ETH_MspInit+0x13a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8012094:	4b48      	ldr	r3, [pc, #288]	; (80121b8 <HAL_ETH_MspInit+0x148>)
 8012096:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801209a:	4a47      	ldr	r2, [pc, #284]	; (80121b8 <HAL_ETH_MspInit+0x148>)
 801209c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80120a0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80120a4:	4b44      	ldr	r3, [pc, #272]	; (80121b8 <HAL_ETH_MspInit+0x148>)
 80120a6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80120aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80120ae:	623b      	str	r3, [r7, #32]
 80120b0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80120b2:	4b41      	ldr	r3, [pc, #260]	; (80121b8 <HAL_ETH_MspInit+0x148>)
 80120b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80120b8:	4a3f      	ldr	r2, [pc, #252]	; (80121b8 <HAL_ETH_MspInit+0x148>)
 80120ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80120be:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80120c2:	4b3d      	ldr	r3, [pc, #244]	; (80121b8 <HAL_ETH_MspInit+0x148>)
 80120c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80120c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80120cc:	61fb      	str	r3, [r7, #28]
 80120ce:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80120d0:	4b39      	ldr	r3, [pc, #228]	; (80121b8 <HAL_ETH_MspInit+0x148>)
 80120d2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80120d6:	4a38      	ldr	r2, [pc, #224]	; (80121b8 <HAL_ETH_MspInit+0x148>)
 80120d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80120dc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80120e0:	4b35      	ldr	r3, [pc, #212]	; (80121b8 <HAL_ETH_MspInit+0x148>)
 80120e2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80120e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80120ea:	61bb      	str	r3, [r7, #24]
 80120ec:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80120ee:	4b32      	ldr	r3, [pc, #200]	; (80121b8 <HAL_ETH_MspInit+0x148>)
 80120f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80120f4:	4a30      	ldr	r2, [pc, #192]	; (80121b8 <HAL_ETH_MspInit+0x148>)
 80120f6:	f043 0304 	orr.w	r3, r3, #4
 80120fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80120fe:	4b2e      	ldr	r3, [pc, #184]	; (80121b8 <HAL_ETH_MspInit+0x148>)
 8012100:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012104:	f003 0304 	and.w	r3, r3, #4
 8012108:	617b      	str	r3, [r7, #20]
 801210a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801210c:	4b2a      	ldr	r3, [pc, #168]	; (80121b8 <HAL_ETH_MspInit+0x148>)
 801210e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012112:	4a29      	ldr	r2, [pc, #164]	; (80121b8 <HAL_ETH_MspInit+0x148>)
 8012114:	f043 0301 	orr.w	r3, r3, #1
 8012118:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801211c:	4b26      	ldr	r3, [pc, #152]	; (80121b8 <HAL_ETH_MspInit+0x148>)
 801211e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012122:	f003 0301 	and.w	r3, r3, #1
 8012126:	613b      	str	r3, [r7, #16]
 8012128:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 801212a:	4b23      	ldr	r3, [pc, #140]	; (80121b8 <HAL_ETH_MspInit+0x148>)
 801212c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012130:	4a21      	ldr	r2, [pc, #132]	; (80121b8 <HAL_ETH_MspInit+0x148>)
 8012132:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012136:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801213a:	4b1f      	ldr	r3, [pc, #124]	; (80121b8 <HAL_ETH_MspInit+0x148>)
 801213c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012144:	60fb      	str	r3, [r7, #12]
 8012146:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PG11     ------> ETH_TX_EN
    PG12     ------> ETH_TXD1
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8012148:	2332      	movs	r3, #50	; 0x32
 801214a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801214c:	2302      	movs	r3, #2
 801214e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012150:	2300      	movs	r3, #0
 8012152:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8012154:	2302      	movs	r3, #2
 8012156:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8012158:	230b      	movs	r3, #11
 801215a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801215c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012160:	4619      	mov	r1, r3
 8012162:	4816      	ldr	r0, [pc, #88]	; (80121bc <HAL_ETH_MspInit+0x14c>)
 8012164:	f7f0 fa56 	bl	8002614 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8012168:	2386      	movs	r3, #134	; 0x86
 801216a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801216c:	2302      	movs	r3, #2
 801216e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012170:	2300      	movs	r3, #0
 8012172:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8012174:	2302      	movs	r3, #2
 8012176:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8012178:	230b      	movs	r3, #11
 801217a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801217c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012180:	4619      	mov	r1, r3
 8012182:	480f      	ldr	r0, [pc, #60]	; (80121c0 <HAL_ETH_MspInit+0x150>)
 8012184:	f7f0 fa46 	bl	8002614 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8012188:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 801218c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801218e:	2302      	movs	r3, #2
 8012190:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012192:	2300      	movs	r3, #0
 8012194:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8012196:	2302      	movs	r3, #2
 8012198:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801219a:	230b      	movs	r3, #11
 801219c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 801219e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80121a2:	4619      	mov	r1, r3
 80121a4:	4807      	ldr	r0, [pc, #28]	; (80121c4 <HAL_ETH_MspInit+0x154>)
 80121a6:	f7f0 fa35 	bl	8002614 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80121aa:	bf00      	nop
 80121ac:	3738      	adds	r7, #56	; 0x38
 80121ae:	46bd      	mov	sp, r7
 80121b0:	bd80      	pop	{r7, pc}
 80121b2:	bf00      	nop
 80121b4:	40028000 	.word	0x40028000
 80121b8:	58024400 	.word	0x58024400
 80121bc:	58020800 	.word	0x58020800
 80121c0:	58020000 	.word	0x58020000
 80121c4:	58021800 	.word	0x58021800

080121c8 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80121c8:	b580      	push	{r7, lr}
 80121ca:	b086      	sub	sp, #24
 80121cc:	af00      	add	r7, sp, #0
 80121ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status;
  uint32_t idx = 0;
 80121d0:	2300      	movs	r3, #0
 80121d2:	617b      	str	r3, [r7, #20]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80121d4:	4b4a      	ldr	r3, [pc, #296]	; (8012300 <low_level_init+0x138>)
 80121d6:	4a4b      	ldr	r2, [pc, #300]	; (8012304 <low_level_init+0x13c>)
 80121d8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80121da:	2300      	movs	r3, #0
 80121dc:	733b      	strb	r3, [r7, #12]
  MACAddr[1] = 0x80;
 80121de:	2380      	movs	r3, #128	; 0x80
 80121e0:	737b      	strb	r3, [r7, #13]
  MACAddr[2] = 0xE1;
 80121e2:	23e1      	movs	r3, #225	; 0xe1
 80121e4:	73bb      	strb	r3, [r7, #14]
  MACAddr[3] = 0x00;
 80121e6:	2300      	movs	r3, #0
 80121e8:	73fb      	strb	r3, [r7, #15]
  MACAddr[4] = 0x00;
 80121ea:	2300      	movs	r3, #0
 80121ec:	743b      	strb	r3, [r7, #16]
  MACAddr[5] = 0x00;
 80121ee:	2300      	movs	r3, #0
 80121f0:	747b      	strb	r3, [r7, #17]
  heth.Init.MACAddr = &MACAddr[0];
 80121f2:	4a43      	ldr	r2, [pc, #268]	; (8012300 <low_level_init+0x138>)
 80121f4:	f107 030c 	add.w	r3, r7, #12
 80121f8:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80121fa:	4b41      	ldr	r3, [pc, #260]	; (8012300 <low_level_init+0x138>)
 80121fc:	2201      	movs	r2, #1
 80121fe:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8012200:	4b3f      	ldr	r3, [pc, #252]	; (8012300 <low_level_init+0x138>)
 8012202:	4a41      	ldr	r2, [pc, #260]	; (8012308 <low_level_init+0x140>)
 8012204:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8012206:	4b3e      	ldr	r3, [pc, #248]	; (8012300 <low_level_init+0x138>)
 8012208:	4a40      	ldr	r2, [pc, #256]	; (801230c <low_level_init+0x144>)
 801220a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 801220c:	4b3c      	ldr	r3, [pc, #240]	; (8012300 <low_level_init+0x138>)
 801220e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8012212:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8012214:	483a      	ldr	r0, [pc, #232]	; (8012300 <low_level_init+0x138>)
 8012216:	f7ee fd09 	bl	8000c2c <HAL_ETH_Init>
 801221a:	4603      	mov	r3, r0
 801221c:	74fb      	strb	r3, [r7, #19]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 801221e:	2234      	movs	r2, #52	; 0x34
 8012220:	2100      	movs	r1, #0
 8012222:	483b      	ldr	r0, [pc, #236]	; (8012310 <low_level_init+0x148>)
 8012224:	f001 fe1a 	bl	8013e5c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8012228:	4b39      	ldr	r3, [pc, #228]	; (8012310 <low_level_init+0x148>)
 801222a:	2221      	movs	r2, #33	; 0x21
 801222c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 801222e:	4b38      	ldr	r3, [pc, #224]	; (8012310 <low_level_init+0x148>)
 8012230:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8012234:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8012236:	4b36      	ldr	r3, [pc, #216]	; (8012310 <low_level_init+0x148>)
 8012238:	2200      	movs	r2, #0
 801223a:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */
  
  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 801223c:	4835      	ldr	r0, [pc, #212]	; (8012314 <low_level_init+0x14c>)
 801223e:	f7f6 ff2b 	bl	8009098 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET 

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	2206      	movs	r2, #6
 8012246:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 801224a:	4b2d      	ldr	r3, [pc, #180]	; (8012300 <low_level_init+0x138>)
 801224c:	685b      	ldr	r3, [r3, #4]
 801224e:	781a      	ldrb	r2, [r3, #0]
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8012256:	4b2a      	ldr	r3, [pc, #168]	; (8012300 <low_level_init+0x138>)
 8012258:	685b      	ldr	r3, [r3, #4]
 801225a:	785a      	ldrb	r2, [r3, #1]
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8012262:	4b27      	ldr	r3, [pc, #156]	; (8012300 <low_level_init+0x138>)
 8012264:	685b      	ldr	r3, [r3, #4]
 8012266:	789a      	ldrb	r2, [r3, #2]
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 801226e:	4b24      	ldr	r3, [pc, #144]	; (8012300 <low_level_init+0x138>)
 8012270:	685b      	ldr	r3, [r3, #4]
 8012272:	78da      	ldrb	r2, [r3, #3]
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 801227a:	4b21      	ldr	r3, [pc, #132]	; (8012300 <low_level_init+0x138>)
 801227c:	685b      	ldr	r3, [r3, #4]
 801227e:	791a      	ldrb	r2, [r3, #4]
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8012286:	4b1e      	ldr	r3, [pc, #120]	; (8012300 <low_level_init+0x138>)
 8012288:	685b      	ldr	r3, [r3, #4]
 801228a:	795a      	ldrb	r2, [r3, #5]
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  
  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8012298:	855a      	strh	r2, [r3, #42]	; 0x2a
  
  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80122a0:	f043 030a 	orr.w	r3, r3, #10
 80122a4:	b2da      	uxtb	r2, r3
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  #else 
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 80122ac:	2300      	movs	r3, #0
 80122ae:	617b      	str	r3, [r7, #20]
 80122b0:	e00e      	b.n	80122d0 <low_level_init+0x108>
  {
    HAL_ETH_DescAssignMemory(&heth, idx, Rx_Buff[idx], NULL);
 80122b2:	697a      	ldr	r2, [r7, #20]
 80122b4:	4613      	mov	r3, r2
 80122b6:	005b      	lsls	r3, r3, #1
 80122b8:	4413      	add	r3, r2
 80122ba:	025b      	lsls	r3, r3, #9
 80122bc:	4a16      	ldr	r2, [pc, #88]	; (8012318 <low_level_init+0x150>)
 80122be:	441a      	add	r2, r3
 80122c0:	2300      	movs	r3, #0
 80122c2:	6979      	ldr	r1, [r7, #20]
 80122c4:	480e      	ldr	r0, [pc, #56]	; (8012300 <low_level_init+0x138>)
 80122c6:	f7ee fd8b 	bl	8000de0 <HAL_ETH_DescAssignMemory>
  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 80122ca:	697b      	ldr	r3, [r7, #20]
 80122cc:	3301      	adds	r3, #1
 80122ce:	617b      	str	r3, [r7, #20]
 80122d0:	697b      	ldr	r3, [r7, #20]
 80122d2:	2b03      	cmp	r3, #3
 80122d4:	d9ed      	bls.n	80122b2 <low_level_init+0xea>
      
/* USER CODE BEGIN PHY_PRE_CONFIG */ 
    
/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 80122d6:	4911      	ldr	r1, [pc, #68]	; (801231c <low_level_init+0x154>)
 80122d8:	4811      	ldr	r0, [pc, #68]	; (8012320 <low_level_init+0x158>)
 80122da:	f7ee f8c1 	bl	8000460 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 80122de:	4810      	ldr	r0, [pc, #64]	; (8012320 <low_level_init+0x158>)
 80122e0:	f7ee f8f0 	bl	80004c4 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 80122e4:	7cfb      	ldrb	r3, [r7, #19]
 80122e6:	2b00      	cmp	r3, #0
 80122e8:	d103      	bne.n	80122f2 <low_level_init+0x12a>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 80122ea:	6878      	ldr	r0, [r7, #4]
 80122ec:	f000 f99a 	bl	8012624 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */ 
    
/* USER CODE END LOW_LEVEL_INIT */
}
 80122f0:	e001      	b.n	80122f6 <low_level_init+0x12e>
    Error_Handler();
 80122f2:	f000 fd45 	bl	8012d80 <Error_Handler>
}
 80122f6:	bf00      	nop
 80122f8:	3718      	adds	r7, #24
 80122fa:	46bd      	mov	sp, r7
 80122fc:	bd80      	pop	{r7, pc}
 80122fe:	bf00      	nop
 8012300:	2000338c 	.word	0x2000338c
 8012304:	40028000 	.word	0x40028000
 8012308:	30040060 	.word	0x30040060
 801230c:	30040000 	.word	0x30040000
 8012310:	200033fc 	.word	0x200033fc
 8012314:	08016e5c 	.word	0x08016e5c
 8012318:	30040200 	.word	0x30040200
 801231c:	20000128 	.word	0x20000128
 8012320:	2000336c 	.word	0x2000336c

08012324 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8012324:	b580      	push	{r7, lr}
 8012326:	b092      	sub	sp, #72	; 0x48
 8012328:	af00      	add	r7, sp, #0
 801232a:	6078      	str	r0, [r7, #4]
 801232c:	6039      	str	r1, [r7, #0]
  uint32_t i=0, framelen = 0;
 801232e:	2300      	movs	r3, #0
 8012330:	647b      	str	r3, [r7, #68]	; 0x44
 8012332:	2300      	movs	r3, #0
 8012334:	643b      	str	r3, [r7, #64]	; 0x40
  struct pbuf *q;
  err_t errval = ERR_OK;
 8012336:	2300      	movs	r3, #0
 8012338:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];
  
  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 801233c:	f107 0308 	add.w	r3, r7, #8
 8012340:	2230      	movs	r2, #48	; 0x30
 8012342:	2100      	movs	r1, #0
 8012344:	4618      	mov	r0, r3
 8012346:	f001 fd89 	bl	8013e5c <memset>
  
  for(q = p; q != NULL; q = q->next)
 801234a:	683b      	ldr	r3, [r7, #0]
 801234c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801234e:	e04f      	b.n	80123f0 <low_level_output+0xcc>
  {
    if(i >= ETH_TX_DESC_CNT)	
 8012350:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012352:	2b03      	cmp	r3, #3
 8012354:	d902      	bls.n	801235c <low_level_output+0x38>
      return ERR_IF;
 8012356:	f06f 030b 	mvn.w	r3, #11
 801235a:	e05a      	b.n	8012412 <low_level_output+0xee>
    
    Txbuffer[i].buffer = q->payload;
 801235c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801235e:	6859      	ldr	r1, [r3, #4]
 8012360:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012362:	4613      	mov	r3, r2
 8012364:	005b      	lsls	r3, r3, #1
 8012366:	4413      	add	r3, r2
 8012368:	009b      	lsls	r3, r3, #2
 801236a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801236e:	4413      	add	r3, r2
 8012370:	3b40      	subs	r3, #64	; 0x40
 8012372:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8012374:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012376:	895b      	ldrh	r3, [r3, #10]
 8012378:	4619      	mov	r1, r3
 801237a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801237c:	4613      	mov	r3, r2
 801237e:	005b      	lsls	r3, r3, #1
 8012380:	4413      	add	r3, r2
 8012382:	009b      	lsls	r3, r3, #2
 8012384:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8012388:	4413      	add	r3, r2
 801238a:	3b3c      	subs	r3, #60	; 0x3c
 801238c:	6019      	str	r1, [r3, #0]
    framelen += q->len;
 801238e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012390:	895b      	ldrh	r3, [r3, #10]
 8012392:	461a      	mov	r2, r3
 8012394:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012396:	4413      	add	r3, r2
 8012398:	643b      	str	r3, [r7, #64]	; 0x40
    
    if(i>0)
 801239a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801239c:	2b00      	cmp	r3, #0
 801239e:	d012      	beq.n	80123c6 <low_level_output+0xa2>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80123a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80123a2:	1e5a      	subs	r2, r3, #1
 80123a4:	f107 0008 	add.w	r0, r7, #8
 80123a8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80123aa:	460b      	mov	r3, r1
 80123ac:	005b      	lsls	r3, r3, #1
 80123ae:	440b      	add	r3, r1
 80123b0:	009b      	lsls	r3, r3, #2
 80123b2:	18c1      	adds	r1, r0, r3
 80123b4:	4613      	mov	r3, r2
 80123b6:	005b      	lsls	r3, r3, #1
 80123b8:	4413      	add	r3, r2
 80123ba:	009b      	lsls	r3, r3, #2
 80123bc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80123c0:	4413      	add	r3, r2
 80123c2:	3b38      	subs	r3, #56	; 0x38
 80123c4:	6019      	str	r1, [r3, #0]
    }
    
    if(q->next == NULL)
 80123c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80123c8:	681b      	ldr	r3, [r3, #0]
 80123ca:	2b00      	cmp	r3, #0
 80123cc:	d10a      	bne.n	80123e4 <low_level_output+0xc0>
    {
      Txbuffer[i].next = NULL;
 80123ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80123d0:	4613      	mov	r3, r2
 80123d2:	005b      	lsls	r3, r3, #1
 80123d4:	4413      	add	r3, r2
 80123d6:	009b      	lsls	r3, r3, #2
 80123d8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80123dc:	4413      	add	r3, r2
 80123de:	3b38      	subs	r3, #56	; 0x38
 80123e0:	2200      	movs	r2, #0
 80123e2:	601a      	str	r2, [r3, #0]
    }
    
    i++;
 80123e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80123e6:	3301      	adds	r3, #1
 80123e8:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 80123ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80123ec:	681b      	ldr	r3, [r3, #0]
 80123ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80123f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80123f2:	2b00      	cmp	r3, #0
 80123f4:	d1ac      	bne.n	8012350 <low_level_output+0x2c>
  }

  TxConfig.Length = framelen;
 80123f6:	4a09      	ldr	r2, [pc, #36]	; (801241c <low_level_output+0xf8>)
 80123f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80123fa:	6053      	str	r3, [r2, #4]
  TxConfig.TxBuffer = Txbuffer;
 80123fc:	4a07      	ldr	r2, [pc, #28]	; (801241c <low_level_output+0xf8>)
 80123fe:	f107 0308 	add.w	r3, r7, #8
 8012402:	6093      	str	r3, [r2, #8]

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8012404:	2214      	movs	r2, #20
 8012406:	4905      	ldr	r1, [pc, #20]	; (801241c <low_level_output+0xf8>)
 8012408:	4805      	ldr	r0, [pc, #20]	; (8012420 <low_level_output+0xfc>)
 801240a:	f7ee fdd6 	bl	8000fba <HAL_ETH_Transmit>
  
  return errval;
 801240e:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
}
 8012412:	4618      	mov	r0, r3
 8012414:	3748      	adds	r7, #72	; 0x48
 8012416:	46bd      	mov	sp, r7
 8012418:	bd80      	pop	{r7, pc}
 801241a:	bf00      	nop
 801241c:	200033fc 	.word	0x200033fc
 8012420:	2000338c 	.word	0x2000338c

08012424 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8012424:	b580      	push	{r7, lr}
 8012426:	b08a      	sub	sp, #40	; 0x28
 8012428:	af02      	add	r7, sp, #8
 801242a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 801242c:	2300      	movs	r3, #0
 801242e:	61fb      	str	r3, [r7, #28]
  ETH_BufferTypeDef RxBuff;
  uint32_t framelength = 0;
 8012430:	2300      	movs	r3, #0
 8012432:	60bb      	str	r3, [r7, #8]
  struct pbuf_custom* custom_pbuf;
  
  
  if (HAL_ETH_IsRxDataAvailable(&heth))
 8012434:	481a      	ldr	r0, [pc, #104]	; (80124a0 <low_level_input+0x7c>)
 8012436:	f7ee fe4c 	bl	80010d2 <HAL_ETH_IsRxDataAvailable>
 801243a:	4603      	mov	r3, r0
 801243c:	2b00      	cmp	r3, #0
 801243e:	d02a      	beq.n	8012496 <low_level_input+0x72>
  {
    HAL_ETH_GetRxDataBuffer(&heth, &RxBuff);
 8012440:	f107 030c 	add.w	r3, r7, #12
 8012444:	4619      	mov	r1, r3
 8012446:	4816      	ldr	r0, [pc, #88]	; (80124a0 <low_level_input+0x7c>)
 8012448:	f7ee ff21 	bl	800128e <HAL_ETH_GetRxDataBuffer>
    HAL_ETH_GetRxDataLength(&heth, &framelength);
 801244c:	f107 0308 	add.w	r3, r7, #8
 8012450:	4619      	mov	r1, r3
 8012452:	4813      	ldr	r0, [pc, #76]	; (80124a0 <low_level_input+0x7c>)
 8012454:	f7ee ffb9 	bl	80013ca <HAL_ETH_GetRxDataLength>
    
    /* Build Rx descriptor to be ready for next data reception */
    HAL_ETH_BuildRxDescriptors(&heth);
 8012458:	4811      	ldr	r0, [pc, #68]	; (80124a0 <low_level_input+0x7c>)
 801245a:	f7ee ffe9 	bl	8001430 <HAL_ETH_BuildRxDescriptors>

#if !defined(DUAL_CORE) || defined(CORE_CM7)
    /* Invalidate data cache for ETH Rx Buffers */
    SCB_InvalidateDCache_by_Addr((uint32_t *)RxBuff.buffer, framelength);
 801245e:	68fb      	ldr	r3, [r7, #12]
 8012460:	68ba      	ldr	r2, [r7, #8]
 8012462:	4611      	mov	r1, r2
 8012464:	4618      	mov	r0, r3
 8012466:	f7ff fdd9 	bl	801201c <SCB_InvalidateDCache_by_Addr>
#endif
    
    custom_pbuf  = (struct pbuf_custom*)LWIP_MEMPOOL_ALLOC(RX_POOL);
 801246a:	480e      	ldr	r0, [pc, #56]	; (80124a4 <low_level_input+0x80>)
 801246c:	f7f6 fe88 	bl	8009180 <memp_malloc_pool>
 8012470:	61b8      	str	r0, [r7, #24]
    custom_pbuf->custom_free_function = pbuf_free_custom;
 8012472:	69bb      	ldr	r3, [r7, #24]
 8012474:	4a0c      	ldr	r2, [pc, #48]	; (80124a8 <low_level_input+0x84>)
 8012476:	611a      	str	r2, [r3, #16]
    
    p = pbuf_alloced_custom(PBUF_RAW, framelength, PBUF_REF, custom_pbuf, RxBuff.buffer, ETH_RX_BUFFER_SIZE);
 8012478:	68bb      	ldr	r3, [r7, #8]
 801247a:	b299      	uxth	r1, r3
 801247c:	68fb      	ldr	r3, [r7, #12]
 801247e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8012482:	9201      	str	r2, [sp, #4]
 8012484:	9300      	str	r3, [sp, #0]
 8012486:	69bb      	ldr	r3, [r7, #24]
 8012488:	2202      	movs	r2, #2
 801248a:	2004      	movs	r0, #4
 801248c:	f7f7 fad0 	bl	8009a30 <pbuf_alloced_custom>
 8012490:	61f8      	str	r0, [r7, #28]
    
    return p;
 8012492:	69fb      	ldr	r3, [r7, #28]
 8012494:	e000      	b.n	8012498 <low_level_input+0x74>
  }
  else
  {
    return NULL;
 8012496:	2300      	movs	r3, #0
  }
}
 8012498:	4618      	mov	r0, r3
 801249a:	3720      	adds	r7, #32
 801249c:	46bd      	mov	sp, r7
 801249e:	bd80      	pop	{r7, pc}
 80124a0:	2000338c 	.word	0x2000338c
 80124a4:	08016e5c 	.word	0x08016e5c
 80124a8:	08012549 	.word	0x08012549

080124ac <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 80124ac:	b580      	push	{r7, lr}
 80124ae:	b084      	sub	sp, #16
 80124b0:	af00      	add	r7, sp, #0
 80124b2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 80124b4:	6878      	ldr	r0, [r7, #4]
 80124b6:	f7ff ffb5 	bl	8012424 <low_level_input>
 80124ba:	60f8      	str	r0, [r7, #12]
    
  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 80124bc:	68fb      	ldr	r3, [r7, #12]
 80124be:	2b00      	cmp	r3, #0
 80124c0:	d010      	beq.n	80124e4 <ethernetif_input+0x38>
    
  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	691b      	ldr	r3, [r3, #16]
 80124c6:	6879      	ldr	r1, [r7, #4]
 80124c8:	68f8      	ldr	r0, [r7, #12]
 80124ca:	4798      	blx	r3
 80124cc:	4603      	mov	r3, r0
 80124ce:	72fb      	strb	r3, [r7, #11]
    
  if (err != ERR_OK)
 80124d0:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80124d4:	2b00      	cmp	r3, #0
 80124d6:	d006      	beq.n	80124e6 <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 80124d8:	68f8      	ldr	r0, [r7, #12]
 80124da:	f7f7 fc87 	bl	8009dec <pbuf_free>
    p = NULL;    
 80124de:	2300      	movs	r3, #0
 80124e0:	60fb      	str	r3, [r7, #12]
 80124e2:	e000      	b.n	80124e6 <ethernetif_input+0x3a>
  if (p == NULL) return;
 80124e4:	bf00      	nop
  }
  
}
 80124e6:	3710      	adds	r7, #16
 80124e8:	46bd      	mov	sp, r7
 80124ea:	bd80      	pop	{r7, pc}

080124ec <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80124ec:	b580      	push	{r7, lr}
 80124ee:	b082      	sub	sp, #8
 80124f0:	af00      	add	r7, sp, #0
 80124f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	2b00      	cmp	r3, #0
 80124f8:	d106      	bne.n	8012508 <ethernetif_init+0x1c>
 80124fa:	4b0e      	ldr	r3, [pc, #56]	; (8012534 <ethernetif_init+0x48>)
 80124fc:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8012500:	490d      	ldr	r1, [pc, #52]	; (8012538 <ethernetif_init+0x4c>)
 8012502:	480e      	ldr	r0, [pc, #56]	; (801253c <ethernetif_init+0x50>)
 8012504:	f001 fd5a 	bl	8013fbc <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	2273      	movs	r2, #115	; 0x73
 801250c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->name[1] = IFNAME1;
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	2274      	movs	r2, #116	; 0x74
 8012514:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	4a09      	ldr	r2, [pc, #36]	; (8012540 <ethernetif_init+0x54>)
 801251c:	615a      	str	r2, [r3, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	4a08      	ldr	r2, [pc, #32]	; (8012544 <ethernetif_init+0x58>)
 8012522:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8012524:	6878      	ldr	r0, [r7, #4]
 8012526:	f7ff fe4f 	bl	80121c8 <low_level_init>

  return ERR_OK;
 801252a:	2300      	movs	r3, #0
}
 801252c:	4618      	mov	r0, r3
 801252e:	3708      	adds	r7, #8
 8012530:	46bd      	mov	sp, r7
 8012532:	bd80      	pop	{r7, pc}
 8012534:	08016c74 	.word	0x08016c74
 8012538:	08016c88 	.word	0x08016c88
 801253c:	08016c98 	.word	0x08016c98
 8012540:	08010449 	.word	0x08010449
 8012544:	08012325 	.word	0x08012325

08012548 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8012548:	b580      	push	{r7, lr}
 801254a:	b084      	sub	sp, #16
 801254c:	af00      	add	r7, sp, #0
 801254e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	60fb      	str	r3, [r7, #12]
  
#if !defined(DUAL_CORE) || defined(CORE_CM7)
  /* Invalidate data cache: lwIP and/or application may have written into buffer */
  SCB_InvalidateDCache_by_Addr((uint32_t *)p->payload, p->tot_len);
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	685a      	ldr	r2, [r3, #4]
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	891b      	ldrh	r3, [r3, #8]
 801255c:	4619      	mov	r1, r3
 801255e:	4610      	mov	r0, r2
 8012560:	f7ff fd5c 	bl	801201c <SCB_InvalidateDCache_by_Addr>
#endif
  
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8012564:	68f9      	ldr	r1, [r7, #12]
 8012566:	4803      	ldr	r0, [pc, #12]	; (8012574 <pbuf_free_custom+0x2c>)
 8012568:	f7f6 fe78 	bl	800925c <memp_free_pool>
}
 801256c:	bf00      	nop
 801256e:	3710      	adds	r7, #16
 8012570:	46bd      	mov	sp, r7
 8012572:	bd80      	pop	{r7, pc}
 8012574:	08016e5c 	.word	0x08016e5c

08012578 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8012578:	b580      	push	{r7, lr}
 801257a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 801257c:	f7ee f96c 	bl	8000858 <HAL_GetTick>
 8012580:	4603      	mov	r3, r0
}
 8012582:	4618      	mov	r0, r3
 8012584:	bd80      	pop	{r7, pc}
	...

08012588 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{  
 8012588:	b580      	push	{r7, lr}
 801258a:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here 
  */
  
  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 801258c:	4802      	ldr	r0, [pc, #8]	; (8012598 <ETH_PHY_IO_Init+0x10>)
 801258e:	f7ef fa59 	bl	8001a44 <HAL_ETH_SetMDIOClockRange>
  
  return 0;
 8012592:	2300      	movs	r3, #0
}
 8012594:	4618      	mov	r0, r3
 8012596:	bd80      	pop	{r7, pc}
 8012598:	2000338c 	.word	0x2000338c

0801259c <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 801259c:	b480      	push	{r7}
 801259e:	af00      	add	r7, sp, #0
  return 0;
 80125a0:	2300      	movs	r3, #0
}
 80125a2:	4618      	mov	r0, r3
 80125a4:	46bd      	mov	sp, r7
 80125a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125aa:	4770      	bx	lr

080125ac <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value 
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 80125ac:	b580      	push	{r7, lr}
 80125ae:	b084      	sub	sp, #16
 80125b0:	af00      	add	r7, sp, #0
 80125b2:	60f8      	str	r0, [r7, #12]
 80125b4:	60b9      	str	r1, [r7, #8]
 80125b6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	68ba      	ldr	r2, [r7, #8]
 80125bc:	68f9      	ldr	r1, [r7, #12]
 80125be:	4807      	ldr	r0, [pc, #28]	; (80125dc <ETH_PHY_IO_ReadReg+0x30>)
 80125c0:	f7ee ffaa 	bl	8001518 <HAL_ETH_ReadPHYRegister>
 80125c4:	4603      	mov	r3, r0
 80125c6:	2b00      	cmp	r3, #0
 80125c8:	d002      	beq.n	80125d0 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 80125ca:	f04f 33ff 	mov.w	r3, #4294967295
 80125ce:	e000      	b.n	80125d2 <ETH_PHY_IO_ReadReg+0x26>
  }
  
  return 0;
 80125d0:	2300      	movs	r3, #0
}
 80125d2:	4618      	mov	r0, r3
 80125d4:	3710      	adds	r7, #16
 80125d6:	46bd      	mov	sp, r7
 80125d8:	bd80      	pop	{r7, pc}
 80125da:	bf00      	nop
 80125dc:	2000338c 	.word	0x2000338c

080125e0 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written 
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80125e0:	b580      	push	{r7, lr}
 80125e2:	b084      	sub	sp, #16
 80125e4:	af00      	add	r7, sp, #0
 80125e6:	60f8      	str	r0, [r7, #12]
 80125e8:	60b9      	str	r1, [r7, #8]
 80125ea:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	68ba      	ldr	r2, [r7, #8]
 80125f0:	68f9      	ldr	r1, [r7, #12]
 80125f2:	4807      	ldr	r0, [pc, #28]	; (8012610 <ETH_PHY_IO_WriteReg+0x30>)
 80125f4:	f7ee ffe4 	bl	80015c0 <HAL_ETH_WritePHYRegister>
 80125f8:	4603      	mov	r3, r0
 80125fa:	2b00      	cmp	r3, #0
 80125fc:	d002      	beq.n	8012604 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 80125fe:	f04f 33ff 	mov.w	r3, #4294967295
 8012602:	e000      	b.n	8012606 <ETH_PHY_IO_WriteReg+0x26>
  }
  
  return 0;
 8012604:	2300      	movs	r3, #0
}
 8012606:	4618      	mov	r0, r3
 8012608:	3710      	adds	r7, #16
 801260a:	46bd      	mov	sp, r7
 801260c:	bd80      	pop	{r7, pc}
 801260e:	bf00      	nop
 8012610:	2000338c 	.word	0x2000338c

08012614 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8012614:	b580      	push	{r7, lr}
 8012616:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8012618:	f7ee f91e 	bl	8000858 <HAL_GetTick>
 801261c:	4603      	mov	r3, r0
}
 801261e:	4618      	mov	r0, r3
 8012620:	bd80      	pop	{r7, pc}
	...

08012624 <ethernet_link_check_state>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @param  argument: netif
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8012624:	b580      	push	{r7, lr}
 8012626:	b0a0      	sub	sp, #128	; 0x80
 8012628:	af00      	add	r7, sp, #0
 801262a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf;
  uint32_t PHYLinkState;
  uint32_t linkchanged = 0, speed = 0, duplex =0;
 801262c:	2300      	movs	r3, #0
 801262e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8012630:	2300      	movs	r3, #0
 8012632:	67bb      	str	r3, [r7, #120]	; 0x78
 8012634:	2300      	movs	r3, #0
 8012636:	677b      	str	r3, [r7, #116]	; 0x74
  
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8012638:	483a      	ldr	r0, [pc, #232]	; (8012724 <ethernet_link_check_state+0x100>)
 801263a:	f7ed ffea 	bl	8000612 <LAN8742_GetLinkState>
 801263e:	4603      	mov	r3, r0
 8012640:	673b      	str	r3, [r7, #112]	; 0x70
  
  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8012648:	089b      	lsrs	r3, r3, #2
 801264a:	f003 0301 	and.w	r3, r3, #1
 801264e:	b2db      	uxtb	r3, r3
 8012650:	2b00      	cmp	r3, #0
 8012652:	d00c      	beq.n	801266e <ethernet_link_check_state+0x4a>
 8012654:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012656:	2b01      	cmp	r3, #1
 8012658:	d809      	bhi.n	801266e <ethernet_link_check_state+0x4a>
  {
    HAL_ETH_Stop(&heth);
 801265a:	4833      	ldr	r0, [pc, #204]	; (8012728 <ethernet_link_check_state+0x104>)
 801265c:	f7ee fc5d 	bl	8000f1a <HAL_ETH_Stop>
    netif_set_down(netif);
 8012660:	6878      	ldr	r0, [r7, #4]
 8012662:	f7f6 ff9b 	bl	800959c <netif_set_down>
    netif_set_link_down(netif);
 8012666:	6878      	ldr	r0, [r7, #4]
 8012668:	f7f6 ffed 	bl	8009646 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 801266c:	e055      	b.n	801271a <ethernet_link_check_state+0xf6>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8012674:	f003 0304 	and.w	r3, r3, #4
 8012678:	2b00      	cmp	r3, #0
 801267a:	d14e      	bne.n	801271a <ethernet_link_check_state+0xf6>
 801267c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801267e:	2b01      	cmp	r3, #1
 8012680:	d94b      	bls.n	801271a <ethernet_link_check_state+0xf6>
    switch (PHYLinkState)
 8012682:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012684:	3b02      	subs	r3, #2
 8012686:	2b03      	cmp	r3, #3
 8012688:	d82a      	bhi.n	80126e0 <ethernet_link_check_state+0xbc>
 801268a:	a201      	add	r2, pc, #4	; (adr r2, 8012690 <ethernet_link_check_state+0x6c>)
 801268c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012690:	080126a1 	.word	0x080126a1
 8012694:	080126b3 	.word	0x080126b3
 8012698:	080126c3 	.word	0x080126c3
 801269c:	080126d3 	.word	0x080126d3
      duplex = ETH_FULLDUPLEX_MODE;
 80126a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80126a4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80126a6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80126aa:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80126ac:	2301      	movs	r3, #1
 80126ae:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80126b0:	e017      	b.n	80126e2 <ethernet_link_check_state+0xbe>
      duplex = ETH_HALFDUPLEX_MODE;
 80126b2:	2300      	movs	r3, #0
 80126b4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80126b6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80126ba:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80126bc:	2301      	movs	r3, #1
 80126be:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80126c0:	e00f      	b.n	80126e2 <ethernet_link_check_state+0xbe>
      duplex = ETH_FULLDUPLEX_MODE;
 80126c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80126c6:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80126c8:	2300      	movs	r3, #0
 80126ca:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80126cc:	2301      	movs	r3, #1
 80126ce:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80126d0:	e007      	b.n	80126e2 <ethernet_link_check_state+0xbe>
      duplex = ETH_HALFDUPLEX_MODE;
 80126d2:	2300      	movs	r3, #0
 80126d4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80126d6:	2300      	movs	r3, #0
 80126d8:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80126da:	2301      	movs	r3, #1
 80126dc:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80126de:	e000      	b.n	80126e2 <ethernet_link_check_state+0xbe>
      break;      
 80126e0:	bf00      	nop
    if(linkchanged)
 80126e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	d018      	beq.n	801271a <ethernet_link_check_state+0xf6>
      HAL_ETH_GetMACConfig(&heth, &MACConf); 
 80126e8:	f107 030c 	add.w	r3, r7, #12
 80126ec:	4619      	mov	r1, r3
 80126ee:	480e      	ldr	r0, [pc, #56]	; (8012728 <ethernet_link_check_state+0x104>)
 80126f0:	f7ee ffba 	bl	8001668 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 80126f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80126f6:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 80126f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80126fa:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 80126fc:	f107 030c 	add.w	r3, r7, #12
 8012700:	4619      	mov	r1, r3
 8012702:	4809      	ldr	r0, [pc, #36]	; (8012728 <ethernet_link_check_state+0x104>)
 8012704:	f7ef f984 	bl	8001a10 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8012708:	4807      	ldr	r0, [pc, #28]	; (8012728 <ethernet_link_check_state+0x104>)
 801270a:	f7ee fbaa 	bl	8000e62 <HAL_ETH_Start>
      netif_set_up(netif);
 801270e:	6878      	ldr	r0, [r7, #4]
 8012710:	f7f6 fef8 	bl	8009504 <netif_set_up>
      netif_set_link_up(netif);
 8012714:	6878      	ldr	r0, [r7, #4]
 8012716:	f7f6 ff6b 	bl	80095f0 <netif_set_link_up>
}
 801271a:	bf00      	nop
 801271c:	3780      	adds	r7, #128	; 0x80
 801271e:	46bd      	mov	sp, r7
 8012720:	bd80      	pop	{r7, pc}
 8012722:	bf00      	nop
 8012724:	2000336c 	.word	0x2000336c
 8012728:	2000338c 	.word	0x2000338c

0801272c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 801272c:	b580      	push	{r7, lr}
 801272e:	b084      	sub	sp, #16
 8012730:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
	IP_ADDRESS[0] = IP_ADDR0;
 8012732:	4b8d      	ldr	r3, [pc, #564]	; (8012968 <MX_LWIP_Init+0x23c>)
 8012734:	22c0      	movs	r2, #192	; 0xc0
 8012736:	701a      	strb	r2, [r3, #0]
	IP_ADDRESS[1] = IP_ADDR1;
 8012738:	4b8b      	ldr	r3, [pc, #556]	; (8012968 <MX_LWIP_Init+0x23c>)
 801273a:	22a8      	movs	r2, #168	; 0xa8
 801273c:	705a      	strb	r2, [r3, #1]
	IP_ADDRESS[2] = IP_ADDR2;
 801273e:	4b8a      	ldr	r3, [pc, #552]	; (8012968 <MX_LWIP_Init+0x23c>)
 8012740:	2200      	movs	r2, #0
 8012742:	709a      	strb	r2, [r3, #2]
	IP_ADDRESS[3] = IP_ADDR3;
 8012744:	4b88      	ldr	r3, [pc, #544]	; (8012968 <MX_LWIP_Init+0x23c>)
 8012746:	2278      	movs	r2, #120	; 0x78
 8012748:	70da      	strb	r2, [r3, #3]

	NETMASK_ADDRESS[0] = NETMASK_ADDR0;
 801274a:	4b88      	ldr	r3, [pc, #544]	; (801296c <MX_LWIP_Init+0x240>)
 801274c:	22ff      	movs	r2, #255	; 0xff
 801274e:	701a      	strb	r2, [r3, #0]
	NETMASK_ADDRESS[1] = NETMASK_ADDR1;
 8012750:	4b86      	ldr	r3, [pc, #536]	; (801296c <MX_LWIP_Init+0x240>)
 8012752:	22ff      	movs	r2, #255	; 0xff
 8012754:	705a      	strb	r2, [r3, #1]
	NETMASK_ADDRESS[2] = NETMASK_ADDR2;
 8012756:	4b85      	ldr	r3, [pc, #532]	; (801296c <MX_LWIP_Init+0x240>)
 8012758:	22ff      	movs	r2, #255	; 0xff
 801275a:	709a      	strb	r2, [r3, #2]
	NETMASK_ADDRESS[3] = NETMASK_ADDR3;
 801275c:	4b83      	ldr	r3, [pc, #524]	; (801296c <MX_LWIP_Init+0x240>)
 801275e:	2200      	movs	r2, #0
 8012760:	70da      	strb	r2, [r3, #3]

	GATEWAY_ADDRESS[0] = GW_ADDR0;
 8012762:	4b83      	ldr	r3, [pc, #524]	; (8012970 <MX_LWIP_Init+0x244>)
 8012764:	22c0      	movs	r2, #192	; 0xc0
 8012766:	701a      	strb	r2, [r3, #0]
	GATEWAY_ADDRESS[1] = GW_ADDR1;
 8012768:	4b81      	ldr	r3, [pc, #516]	; (8012970 <MX_LWIP_Init+0x244>)
 801276a:	22a8      	movs	r2, #168	; 0xa8
 801276c:	705a      	strb	r2, [r3, #1]
	GATEWAY_ADDRESS[2] = GW_ADDR2;
 801276e:	4b80      	ldr	r3, [pc, #512]	; (8012970 <MX_LWIP_Init+0x244>)
 8012770:	2200      	movs	r2, #0
 8012772:	709a      	strb	r2, [r3, #2]
	GATEWAY_ADDRESS[3] = GW_ADDR3;
 8012774:	4b7e      	ldr	r3, [pc, #504]	; (8012970 <MX_LWIP_Init+0x244>)
 8012776:	2201      	movs	r2, #1
 8012778:	70da      	strb	r2, [r3, #3]

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 801277a:	f7f6 f97e 	bl	8008a7a <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 801277e:	4b7a      	ldr	r3, [pc, #488]	; (8012968 <MX_LWIP_Init+0x23c>)
 8012780:	781b      	ldrb	r3, [r3, #0]
 8012782:	061a      	lsls	r2, r3, #24
 8012784:	4b78      	ldr	r3, [pc, #480]	; (8012968 <MX_LWIP_Init+0x23c>)
 8012786:	785b      	ldrb	r3, [r3, #1]
 8012788:	041b      	lsls	r3, r3, #16
 801278a:	431a      	orrs	r2, r3
 801278c:	4b76      	ldr	r3, [pc, #472]	; (8012968 <MX_LWIP_Init+0x23c>)
 801278e:	789b      	ldrb	r3, [r3, #2]
 8012790:	021b      	lsls	r3, r3, #8
 8012792:	4313      	orrs	r3, r2
 8012794:	4a74      	ldr	r2, [pc, #464]	; (8012968 <MX_LWIP_Init+0x23c>)
 8012796:	78d2      	ldrb	r2, [r2, #3]
 8012798:	4313      	orrs	r3, r2
 801279a:	061a      	lsls	r2, r3, #24
 801279c:	4b72      	ldr	r3, [pc, #456]	; (8012968 <MX_LWIP_Init+0x23c>)
 801279e:	781b      	ldrb	r3, [r3, #0]
 80127a0:	0619      	lsls	r1, r3, #24
 80127a2:	4b71      	ldr	r3, [pc, #452]	; (8012968 <MX_LWIP_Init+0x23c>)
 80127a4:	785b      	ldrb	r3, [r3, #1]
 80127a6:	041b      	lsls	r3, r3, #16
 80127a8:	4319      	orrs	r1, r3
 80127aa:	4b6f      	ldr	r3, [pc, #444]	; (8012968 <MX_LWIP_Init+0x23c>)
 80127ac:	789b      	ldrb	r3, [r3, #2]
 80127ae:	021b      	lsls	r3, r3, #8
 80127b0:	430b      	orrs	r3, r1
 80127b2:	496d      	ldr	r1, [pc, #436]	; (8012968 <MX_LWIP_Init+0x23c>)
 80127b4:	78c9      	ldrb	r1, [r1, #3]
 80127b6:	430b      	orrs	r3, r1
 80127b8:	021b      	lsls	r3, r3, #8
 80127ba:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80127be:	431a      	orrs	r2, r3
 80127c0:	4b69      	ldr	r3, [pc, #420]	; (8012968 <MX_LWIP_Init+0x23c>)
 80127c2:	781b      	ldrb	r3, [r3, #0]
 80127c4:	0619      	lsls	r1, r3, #24
 80127c6:	4b68      	ldr	r3, [pc, #416]	; (8012968 <MX_LWIP_Init+0x23c>)
 80127c8:	785b      	ldrb	r3, [r3, #1]
 80127ca:	041b      	lsls	r3, r3, #16
 80127cc:	4319      	orrs	r1, r3
 80127ce:	4b66      	ldr	r3, [pc, #408]	; (8012968 <MX_LWIP_Init+0x23c>)
 80127d0:	789b      	ldrb	r3, [r3, #2]
 80127d2:	021b      	lsls	r3, r3, #8
 80127d4:	430b      	orrs	r3, r1
 80127d6:	4964      	ldr	r1, [pc, #400]	; (8012968 <MX_LWIP_Init+0x23c>)
 80127d8:	78c9      	ldrb	r1, [r1, #3]
 80127da:	430b      	orrs	r3, r1
 80127dc:	0a1b      	lsrs	r3, r3, #8
 80127de:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80127e2:	431a      	orrs	r2, r3
 80127e4:	4b60      	ldr	r3, [pc, #384]	; (8012968 <MX_LWIP_Init+0x23c>)
 80127e6:	781b      	ldrb	r3, [r3, #0]
 80127e8:	0619      	lsls	r1, r3, #24
 80127ea:	4b5f      	ldr	r3, [pc, #380]	; (8012968 <MX_LWIP_Init+0x23c>)
 80127ec:	785b      	ldrb	r3, [r3, #1]
 80127ee:	041b      	lsls	r3, r3, #16
 80127f0:	4319      	orrs	r1, r3
 80127f2:	4b5d      	ldr	r3, [pc, #372]	; (8012968 <MX_LWIP_Init+0x23c>)
 80127f4:	789b      	ldrb	r3, [r3, #2]
 80127f6:	021b      	lsls	r3, r3, #8
 80127f8:	430b      	orrs	r3, r1
 80127fa:	495b      	ldr	r1, [pc, #364]	; (8012968 <MX_LWIP_Init+0x23c>)
 80127fc:	78c9      	ldrb	r1, [r1, #3]
 80127fe:	430b      	orrs	r3, r1
 8012800:	0e1b      	lsrs	r3, r3, #24
 8012802:	4313      	orrs	r3, r2
 8012804:	4a5b      	ldr	r2, [pc, #364]	; (8012974 <MX_LWIP_Init+0x248>)
 8012806:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8012808:	4b58      	ldr	r3, [pc, #352]	; (801296c <MX_LWIP_Init+0x240>)
 801280a:	781b      	ldrb	r3, [r3, #0]
 801280c:	061a      	lsls	r2, r3, #24
 801280e:	4b57      	ldr	r3, [pc, #348]	; (801296c <MX_LWIP_Init+0x240>)
 8012810:	785b      	ldrb	r3, [r3, #1]
 8012812:	041b      	lsls	r3, r3, #16
 8012814:	431a      	orrs	r2, r3
 8012816:	4b55      	ldr	r3, [pc, #340]	; (801296c <MX_LWIP_Init+0x240>)
 8012818:	789b      	ldrb	r3, [r3, #2]
 801281a:	021b      	lsls	r3, r3, #8
 801281c:	4313      	orrs	r3, r2
 801281e:	4a53      	ldr	r2, [pc, #332]	; (801296c <MX_LWIP_Init+0x240>)
 8012820:	78d2      	ldrb	r2, [r2, #3]
 8012822:	4313      	orrs	r3, r2
 8012824:	061a      	lsls	r2, r3, #24
 8012826:	4b51      	ldr	r3, [pc, #324]	; (801296c <MX_LWIP_Init+0x240>)
 8012828:	781b      	ldrb	r3, [r3, #0]
 801282a:	0619      	lsls	r1, r3, #24
 801282c:	4b4f      	ldr	r3, [pc, #316]	; (801296c <MX_LWIP_Init+0x240>)
 801282e:	785b      	ldrb	r3, [r3, #1]
 8012830:	041b      	lsls	r3, r3, #16
 8012832:	4319      	orrs	r1, r3
 8012834:	4b4d      	ldr	r3, [pc, #308]	; (801296c <MX_LWIP_Init+0x240>)
 8012836:	789b      	ldrb	r3, [r3, #2]
 8012838:	021b      	lsls	r3, r3, #8
 801283a:	430b      	orrs	r3, r1
 801283c:	494b      	ldr	r1, [pc, #300]	; (801296c <MX_LWIP_Init+0x240>)
 801283e:	78c9      	ldrb	r1, [r1, #3]
 8012840:	430b      	orrs	r3, r1
 8012842:	021b      	lsls	r3, r3, #8
 8012844:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8012848:	431a      	orrs	r2, r3
 801284a:	4b48      	ldr	r3, [pc, #288]	; (801296c <MX_LWIP_Init+0x240>)
 801284c:	781b      	ldrb	r3, [r3, #0]
 801284e:	0619      	lsls	r1, r3, #24
 8012850:	4b46      	ldr	r3, [pc, #280]	; (801296c <MX_LWIP_Init+0x240>)
 8012852:	785b      	ldrb	r3, [r3, #1]
 8012854:	041b      	lsls	r3, r3, #16
 8012856:	4319      	orrs	r1, r3
 8012858:	4b44      	ldr	r3, [pc, #272]	; (801296c <MX_LWIP_Init+0x240>)
 801285a:	789b      	ldrb	r3, [r3, #2]
 801285c:	021b      	lsls	r3, r3, #8
 801285e:	430b      	orrs	r3, r1
 8012860:	4942      	ldr	r1, [pc, #264]	; (801296c <MX_LWIP_Init+0x240>)
 8012862:	78c9      	ldrb	r1, [r1, #3]
 8012864:	430b      	orrs	r3, r1
 8012866:	0a1b      	lsrs	r3, r3, #8
 8012868:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801286c:	431a      	orrs	r2, r3
 801286e:	4b3f      	ldr	r3, [pc, #252]	; (801296c <MX_LWIP_Init+0x240>)
 8012870:	781b      	ldrb	r3, [r3, #0]
 8012872:	0619      	lsls	r1, r3, #24
 8012874:	4b3d      	ldr	r3, [pc, #244]	; (801296c <MX_LWIP_Init+0x240>)
 8012876:	785b      	ldrb	r3, [r3, #1]
 8012878:	041b      	lsls	r3, r3, #16
 801287a:	4319      	orrs	r1, r3
 801287c:	4b3b      	ldr	r3, [pc, #236]	; (801296c <MX_LWIP_Init+0x240>)
 801287e:	789b      	ldrb	r3, [r3, #2]
 8012880:	021b      	lsls	r3, r3, #8
 8012882:	430b      	orrs	r3, r1
 8012884:	4939      	ldr	r1, [pc, #228]	; (801296c <MX_LWIP_Init+0x240>)
 8012886:	78c9      	ldrb	r1, [r1, #3]
 8012888:	430b      	orrs	r3, r1
 801288a:	0e1b      	lsrs	r3, r3, #24
 801288c:	4313      	orrs	r3, r2
 801288e:	4a3a      	ldr	r2, [pc, #232]	; (8012978 <MX_LWIP_Init+0x24c>)
 8012890:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8012892:	4b37      	ldr	r3, [pc, #220]	; (8012970 <MX_LWIP_Init+0x244>)
 8012894:	781b      	ldrb	r3, [r3, #0]
 8012896:	061a      	lsls	r2, r3, #24
 8012898:	4b35      	ldr	r3, [pc, #212]	; (8012970 <MX_LWIP_Init+0x244>)
 801289a:	785b      	ldrb	r3, [r3, #1]
 801289c:	041b      	lsls	r3, r3, #16
 801289e:	431a      	orrs	r2, r3
 80128a0:	4b33      	ldr	r3, [pc, #204]	; (8012970 <MX_LWIP_Init+0x244>)
 80128a2:	789b      	ldrb	r3, [r3, #2]
 80128a4:	021b      	lsls	r3, r3, #8
 80128a6:	4313      	orrs	r3, r2
 80128a8:	4a31      	ldr	r2, [pc, #196]	; (8012970 <MX_LWIP_Init+0x244>)
 80128aa:	78d2      	ldrb	r2, [r2, #3]
 80128ac:	4313      	orrs	r3, r2
 80128ae:	061a      	lsls	r2, r3, #24
 80128b0:	4b2f      	ldr	r3, [pc, #188]	; (8012970 <MX_LWIP_Init+0x244>)
 80128b2:	781b      	ldrb	r3, [r3, #0]
 80128b4:	0619      	lsls	r1, r3, #24
 80128b6:	4b2e      	ldr	r3, [pc, #184]	; (8012970 <MX_LWIP_Init+0x244>)
 80128b8:	785b      	ldrb	r3, [r3, #1]
 80128ba:	041b      	lsls	r3, r3, #16
 80128bc:	4319      	orrs	r1, r3
 80128be:	4b2c      	ldr	r3, [pc, #176]	; (8012970 <MX_LWIP_Init+0x244>)
 80128c0:	789b      	ldrb	r3, [r3, #2]
 80128c2:	021b      	lsls	r3, r3, #8
 80128c4:	430b      	orrs	r3, r1
 80128c6:	492a      	ldr	r1, [pc, #168]	; (8012970 <MX_LWIP_Init+0x244>)
 80128c8:	78c9      	ldrb	r1, [r1, #3]
 80128ca:	430b      	orrs	r3, r1
 80128cc:	021b      	lsls	r3, r3, #8
 80128ce:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80128d2:	431a      	orrs	r2, r3
 80128d4:	4b26      	ldr	r3, [pc, #152]	; (8012970 <MX_LWIP_Init+0x244>)
 80128d6:	781b      	ldrb	r3, [r3, #0]
 80128d8:	0619      	lsls	r1, r3, #24
 80128da:	4b25      	ldr	r3, [pc, #148]	; (8012970 <MX_LWIP_Init+0x244>)
 80128dc:	785b      	ldrb	r3, [r3, #1]
 80128de:	041b      	lsls	r3, r3, #16
 80128e0:	4319      	orrs	r1, r3
 80128e2:	4b23      	ldr	r3, [pc, #140]	; (8012970 <MX_LWIP_Init+0x244>)
 80128e4:	789b      	ldrb	r3, [r3, #2]
 80128e6:	021b      	lsls	r3, r3, #8
 80128e8:	430b      	orrs	r3, r1
 80128ea:	4921      	ldr	r1, [pc, #132]	; (8012970 <MX_LWIP_Init+0x244>)
 80128ec:	78c9      	ldrb	r1, [r1, #3]
 80128ee:	430b      	orrs	r3, r1
 80128f0:	0a1b      	lsrs	r3, r3, #8
 80128f2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80128f6:	431a      	orrs	r2, r3
 80128f8:	4b1d      	ldr	r3, [pc, #116]	; (8012970 <MX_LWIP_Init+0x244>)
 80128fa:	781b      	ldrb	r3, [r3, #0]
 80128fc:	0619      	lsls	r1, r3, #24
 80128fe:	4b1c      	ldr	r3, [pc, #112]	; (8012970 <MX_LWIP_Init+0x244>)
 8012900:	785b      	ldrb	r3, [r3, #1]
 8012902:	041b      	lsls	r3, r3, #16
 8012904:	4319      	orrs	r1, r3
 8012906:	4b1a      	ldr	r3, [pc, #104]	; (8012970 <MX_LWIP_Init+0x244>)
 8012908:	789b      	ldrb	r3, [r3, #2]
 801290a:	021b      	lsls	r3, r3, #8
 801290c:	430b      	orrs	r3, r1
 801290e:	4918      	ldr	r1, [pc, #96]	; (8012970 <MX_LWIP_Init+0x244>)
 8012910:	78c9      	ldrb	r1, [r1, #3]
 8012912:	430b      	orrs	r3, r1
 8012914:	0e1b      	lsrs	r3, r3, #24
 8012916:	4313      	orrs	r3, r2
 8012918:	4a18      	ldr	r2, [pc, #96]	; (801297c <MX_LWIP_Init+0x250>)
 801291a:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 801291c:	4b18      	ldr	r3, [pc, #96]	; (8012980 <MX_LWIP_Init+0x254>)
 801291e:	9302      	str	r3, [sp, #8]
 8012920:	4b18      	ldr	r3, [pc, #96]	; (8012984 <MX_LWIP_Init+0x258>)
 8012922:	9301      	str	r3, [sp, #4]
 8012924:	2300      	movs	r3, #0
 8012926:	9300      	str	r3, [sp, #0]
 8012928:	4b14      	ldr	r3, [pc, #80]	; (801297c <MX_LWIP_Init+0x250>)
 801292a:	4a13      	ldr	r2, [pc, #76]	; (8012978 <MX_LWIP_Init+0x24c>)
 801292c:	4911      	ldr	r1, [pc, #68]	; (8012974 <MX_LWIP_Init+0x248>)
 801292e:	4816      	ldr	r0, [pc, #88]	; (8012988 <MX_LWIP_Init+0x25c>)
 8012930:	f7f6 fcea 	bl	8009308 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8012934:	4814      	ldr	r0, [pc, #80]	; (8012988 <MX_LWIP_Init+0x25c>)
 8012936:	f7f6 fdd5 	bl	80094e4 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 801293a:	4b13      	ldr	r3, [pc, #76]	; (8012988 <MX_LWIP_Init+0x25c>)
 801293c:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8012940:	089b      	lsrs	r3, r3, #2
 8012942:	f003 0301 	and.w	r3, r3, #1
 8012946:	b2db      	uxtb	r3, r3
 8012948:	2b00      	cmp	r3, #0
 801294a:	d003      	beq.n	8012954 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 801294c:	480e      	ldr	r0, [pc, #56]	; (8012988 <MX_LWIP_Init+0x25c>)
 801294e:	f7f6 fdd9 	bl	8009504 <netif_set_up>
 8012952:	e002      	b.n	801295a <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8012954:	480c      	ldr	r0, [pc, #48]	; (8012988 <MX_LWIP_Init+0x25c>)
 8012956:	f7f6 fe21 	bl	800959c <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 801295a:	490c      	ldr	r1, [pc, #48]	; (801298c <MX_LWIP_Init+0x260>)
 801295c:	480a      	ldr	r0, [pc, #40]	; (8012988 <MX_LWIP_Init+0x25c>)
 801295e:	f7f6 fe92 	bl	8009686 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8012962:	bf00      	nop
 8012964:	46bd      	mov	sp, r7
 8012966:	bd80      	pop	{r7, pc}
 8012968:	20003478 	.word	0x20003478
 801296c:	20003474 	.word	0x20003474
 8012970:	20003430 	.word	0x20003430
 8012974:	2000346c 	.word	0x2000346c
 8012978:	2000347c 	.word	0x2000347c
 801297c:	20003480 	.word	0x20003480
 8012980:	08011e65 	.word	0x08011e65
 8012984:	080124ed 	.word	0x080124ed
 8012988:	20003434 	.word	0x20003434
 801298c:	080129e1 	.word	0x080129e1

08012990 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif 
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 8012990:	b580      	push	{r7, lr}
 8012992:	b082      	sub	sp, #8
 8012994:	af00      	add	r7, sp, #0
 8012996:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 8012998:	f7ed ff5e 	bl	8000858 <HAL_GetTick>
 801299c:	4602      	mov	r2, r0
 801299e:	4b08      	ldr	r3, [pc, #32]	; (80129c0 <Ethernet_Link_Periodic_Handle+0x30>)
 80129a0:	681b      	ldr	r3, [r3, #0]
 80129a2:	1ad3      	subs	r3, r2, r3
 80129a4:	2b63      	cmp	r3, #99	; 0x63
 80129a6:	d907      	bls.n	80129b8 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 80129a8:	f7ed ff56 	bl	8000858 <HAL_GetTick>
 80129ac:	4602      	mov	r2, r0
 80129ae:	4b04      	ldr	r3, [pc, #16]	; (80129c0 <Ethernet_Link_Periodic_Handle+0x30>)
 80129b0:	601a      	str	r2, [r3, #0]
    ethernet_link_check_state(netif);
 80129b2:	6878      	ldr	r0, [r7, #4]
 80129b4:	f7ff fe36 	bl	8012624 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 80129b8:	bf00      	nop
 80129ba:	3708      	adds	r7, #8
 80129bc:	46bd      	mov	sp, r7
 80129be:	bd80      	pop	{r7, pc}
 80129c0:	20003470 	.word	0x20003470

080129c4 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS 
 */
void MX_LWIP_Process(void)
{
 80129c4:	b580      	push	{r7, lr}
 80129c6:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 80129c8:	4804      	ldr	r0, [pc, #16]	; (80129dc <MX_LWIP_Process+0x18>)
 80129ca:	f7ff fd6f 	bl	80124ac <ethernetif_input>
  
/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */  
  /* Handle timeouts */
  sys_check_timeouts();
 80129ce:	f7fc ff71 	bl	800f8b4 <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 80129d2:	4802      	ldr	r0, [pc, #8]	; (80129dc <MX_LWIP_Process+0x18>)
 80129d4:	f7ff ffdc 	bl	8012990 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 80129d8:	bf00      	nop
 80129da:	bd80      	pop	{r7, pc}
 80129dc:	20003434 	.word	0x20003434

080129e0 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status 
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif) 
{
 80129e0:	b480      	push	{r7}
 80129e2:	b083      	sub	sp, #12
 80129e4:	af00      	add	r7, sp, #0
 80129e6:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {  
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  } 
}
 80129e8:	bf00      	nop
 80129ea:	370c      	adds	r7, #12
 80129ec:	46bd      	mov	sp, r7
 80129ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129f2:	4770      	bx	lr

080129f4 <SCB_EnableICache>:
{
 80129f4:	b480      	push	{r7}
 80129f6:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80129f8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80129fc:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8012a00:	4b0b      	ldr	r3, [pc, #44]	; (8012a30 <SCB_EnableICache+0x3c>)
 8012a02:	2200      	movs	r2, #0
 8012a04:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8012a08:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8012a0c:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8012a10:	4b07      	ldr	r3, [pc, #28]	; (8012a30 <SCB_EnableICache+0x3c>)
 8012a12:	695b      	ldr	r3, [r3, #20]
 8012a14:	4a06      	ldr	r2, [pc, #24]	; (8012a30 <SCB_EnableICache+0x3c>)
 8012a16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8012a1a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8012a1c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8012a20:	f3bf 8f6f 	isb	sy
}
 8012a24:	bf00      	nop
 8012a26:	46bd      	mov	sp, r7
 8012a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a2c:	4770      	bx	lr
 8012a2e:	bf00      	nop
 8012a30:	e000ed00 	.word	0xe000ed00

08012a34 <SCB_EnableDCache>:
{
 8012a34:	b480      	push	{r7}
 8012a36:	b085      	sub	sp, #20
 8012a38:	af00      	add	r7, sp, #0
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8012a3a:	4b1d      	ldr	r3, [pc, #116]	; (8012ab0 <SCB_EnableDCache+0x7c>)
 8012a3c:	2200      	movs	r2, #0
 8012a3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8012a42:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8012a46:	4b1a      	ldr	r3, [pc, #104]	; (8012ab0 <SCB_EnableDCache+0x7c>)
 8012a48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012a4c:	607b      	str	r3, [r7, #4]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	0b5b      	lsrs	r3, r3, #13
 8012a52:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8012a56:	60fb      	str	r3, [r7, #12]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	08db      	lsrs	r3, r3, #3
 8012a5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8012a60:	60bb      	str	r3, [r7, #8]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8012a62:	68fb      	ldr	r3, [r7, #12]
 8012a64:	015a      	lsls	r2, r3, #5
 8012a66:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8012a6a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8012a6c:	68ba      	ldr	r2, [r7, #8]
 8012a6e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8012a70:	490f      	ldr	r1, [pc, #60]	; (8012ab0 <SCB_EnableDCache+0x7c>)
 8012a72:	4313      	orrs	r3, r2
 8012a74:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 8012a78:	68bb      	ldr	r3, [r7, #8]
 8012a7a:	1e5a      	subs	r2, r3, #1
 8012a7c:	60ba      	str	r2, [r7, #8]
 8012a7e:	2b00      	cmp	r3, #0
 8012a80:	d1ef      	bne.n	8012a62 <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 8012a82:	68fb      	ldr	r3, [r7, #12]
 8012a84:	1e5a      	subs	r2, r3, #1
 8012a86:	60fa      	str	r2, [r7, #12]
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	d1e5      	bne.n	8012a58 <SCB_EnableDCache+0x24>
 8012a8c:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8012a90:	4b07      	ldr	r3, [pc, #28]	; (8012ab0 <SCB_EnableDCache+0x7c>)
 8012a92:	695b      	ldr	r3, [r3, #20]
 8012a94:	4a06      	ldr	r2, [pc, #24]	; (8012ab0 <SCB_EnableDCache+0x7c>)
 8012a96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8012a9a:	6153      	str	r3, [r2, #20]
 8012a9c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8012aa0:	f3bf 8f6f 	isb	sy
}
 8012aa4:	bf00      	nop
 8012aa6:	3714      	adds	r7, #20
 8012aa8:	46bd      	mov	sp, r7
 8012aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aae:	4770      	bx	lr
 8012ab0:	e000ed00 	.word	0xe000ed00

08012ab4 <__io_putchar>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */
int __io_putchar(int ch)
{
 8012ab4:	b580      	push	{r7, lr}
 8012ab6:	b084      	sub	sp, #16
 8012ab8:	af00      	add	r7, sp, #0
 8012aba:	6078      	str	r0, [r7, #4]
	uint8_t chr = (uint8_t)ch;
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	b2db      	uxtb	r3, r3
 8012ac0:	73fb      	strb	r3, [r7, #15]

	CDC_Transmit_FS(&chr, sizeof(uint8_t));
 8012ac2:	f107 030f 	add.w	r3, r7, #15
 8012ac6:	2101      	movs	r1, #1
 8012ac8:	4618      	mov	r0, r3
 8012aca:	f000 fd0b 	bl	80134e4 <CDC_Transmit_FS>

	return ch;
 8012ace:	687b      	ldr	r3, [r7, #4]
}
 8012ad0:	4618      	mov	r0, r3
 8012ad2:	3710      	adds	r7, #16
 8012ad4:	46bd      	mov	sp, r7
 8012ad6:	bd80      	pop	{r7, pc}

08012ad8 <MPU_Config>:

static void MPU_Config(void)
{
 8012ad8:	b580      	push	{r7, lr}
 8012ada:	b084      	sub	sp, #16
 8012adc:	af00      	add	r7, sp, #0
	MPU_Region_InitTypeDef MPU_InitStruct;

	/* Disable the MPU */
	HAL_MPU_Disable();
 8012ade:	f7ee f819 	bl	8000b14 <HAL_MPU_Disable>

	/* Configure the MPU attributes as Device not cacheable
	 for ETH DMA descriptors */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8012ae2:	2301      	movs	r3, #1
 8012ae4:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.BaseAddress = 0x30040000;
 8012ae6:	4b1c      	ldr	r3, [pc, #112]	; (8012b58 <MPU_Config+0x80>)
 8012ae8:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 8012aea:	2307      	movs	r3, #7
 8012aec:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8012aee:	2303      	movs	r3, #3
 8012af0:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8012af2:	2301      	movs	r3, #1
 8012af4:	73fb      	strb	r3, [r7, #15]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8012af6:	2300      	movs	r3, #0
 8012af8:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8012afa:	2300      	movs	r3, #0
 8012afc:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8012afe:	2300      	movs	r3, #0
 8012b00:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8012b02:	2300      	movs	r3, #0
 8012b04:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.SubRegionDisable = 0x00;
 8012b06:	2300      	movs	r3, #0
 8012b08:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8012b0a:	2300      	movs	r3, #0
 8012b0c:	733b      	strb	r3, [r7, #12]

	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8012b0e:	463b      	mov	r3, r7
 8012b10:	4618      	mov	r0, r3
 8012b12:	f7ee f833 	bl	8000b7c <HAL_MPU_ConfigRegion>

	/* Configure the MPU attributes as Normal Non Cacheable
	 for LwIP RAM heap which contains the Tx buffers */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8012b16:	2301      	movs	r3, #1
 8012b18:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.BaseAddress = 0x30044000;
 8012b1a:	4b10      	ldr	r3, [pc, #64]	; (8012b5c <MPU_Config+0x84>)
 8012b1c:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8012b1e:	230d      	movs	r3, #13
 8012b20:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8012b22:	2303      	movs	r3, #3
 8012b24:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8012b26:	2300      	movs	r3, #0
 8012b28:	73fb      	strb	r3, [r7, #15]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8012b2a:	2300      	movs	r3, #0
 8012b2c:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8012b2e:	2301      	movs	r3, #1
 8012b30:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8012b32:	2301      	movs	r3, #1
 8012b34:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8012b36:	2301      	movs	r3, #1
 8012b38:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.SubRegionDisable = 0x00;
 8012b3a:	2300      	movs	r3, #0
 8012b3c:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8012b3e:	2300      	movs	r3, #0
 8012b40:	733b      	strb	r3, [r7, #12]

	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8012b42:	463b      	mov	r3, r7
 8012b44:	4618      	mov	r0, r3
 8012b46:	f7ee f819 	bl	8000b7c <HAL_MPU_ConfigRegion>

	/* Enable the MPU */
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8012b4a:	2004      	movs	r0, #4
 8012b4c:	f7ed fff8 	bl	8000b40 <HAL_MPU_Enable>
}
 8012b50:	bf00      	nop
 8012b52:	3710      	adds	r7, #16
 8012b54:	46bd      	mov	sp, r7
 8012b56:	bd80      	pop	{r7, pc}
 8012b58:	30040000 	.word	0x30040000
 8012b5c:	30044000 	.word	0x30044000

08012b60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8012b60:	b580      	push	{r7, lr}
 8012b62:	b082      	sub	sp, #8
 8012b64:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */
  /* USER CODE BEGIN Boot_Mode_Sequence_0 */
    int32_t timeout; 
  /* USER CODE END Boot_Mode_Sequence_0 */
    MPU_Config();
 8012b66:	f7ff ffb7 	bl	8012ad8 <MPU_Config>
  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8012b6a:	f7ff ff43 	bl	80129f4 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8012b6e:	f7ff ff61 	bl	8012a34 <SCB_EnableDCache>

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8012b72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012b76:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8012b78:	bf00      	nop
 8012b7a:	4b25      	ldr	r3, [pc, #148]	; (8012c10 <main+0xb0>)
 8012b7c:	681b      	ldr	r3, [r3, #0]
 8012b7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012b82:	2b00      	cmp	r3, #0
 8012b84:	d004      	beq.n	8012b90 <main+0x30>
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	1e5a      	subs	r2, r3, #1
 8012b8a:	607a      	str	r2, [r7, #4]
 8012b8c:	2b00      	cmp	r3, #0
 8012b8e:	dcf4      	bgt.n	8012b7a <main+0x1a>
  if ( timeout < 0 )
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	2b00      	cmp	r3, #0
 8012b94:	da01      	bge.n	8012b9a <main+0x3a>
  {
  Error_Handler();
 8012b96:	f000 f8f3 	bl	8012d80 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8012b9a:	f7ed fdc1 	bl	8000720 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8012b9e:	f000 f83b 	bl	8012c18 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8012ba2:	4b1b      	ldr	r3, [pc, #108]	; (8012c10 <main+0xb0>)
 8012ba4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012ba8:	4a19      	ldr	r2, [pc, #100]	; (8012c10 <main+0xb0>)
 8012baa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8012bae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8012bb2:	4b17      	ldr	r3, [pc, #92]	; (8012c10 <main+0xb0>)
 8012bb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012bb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012bbc:	603b      	str	r3, [r7, #0]
 8012bbe:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8012bc0:	2000      	movs	r0, #0
 8012bc2:	f7ef fed7 	bl	8002974 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8012bc6:	2100      	movs	r1, #0
 8012bc8:	2000      	movs	r0, #0
 8012bca:	f7ef feed 	bl	80029a8 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8012bce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012bd2:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8012bd4:	bf00      	nop
 8012bd6:	4b0e      	ldr	r3, [pc, #56]	; (8012c10 <main+0xb0>)
 8012bd8:	681b      	ldr	r3, [r3, #0]
 8012bda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012bde:	2b00      	cmp	r3, #0
 8012be0:	d104      	bne.n	8012bec <main+0x8c>
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	1e5a      	subs	r2, r3, #1
 8012be6:	607a      	str	r2, [r7, #4]
 8012be8:	2b00      	cmp	r3, #0
 8012bea:	dcf4      	bgt.n	8012bd6 <main+0x76>
if ( timeout < 0 )
 8012bec:	687b      	ldr	r3, [r7, #4]
 8012bee:	2b00      	cmp	r3, #0
 8012bf0:	da01      	bge.n	8012bf6 <main+0x96>
{
Error_Handler();
 8012bf2:	f000 f8c5 	bl	8012d80 <Error_Handler>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
 // MX_GPIO_Init();
  MX_LWIP_Init();
 8012bf6:	f7ff fd99 	bl	801272c <MX_LWIP_Init>
  MX_USB_DEVICE_Init();
 8012bfa:	f000 fbb3 	bl	8013364 <MX_USB_DEVICE_Init>

  tcp_echoserver_init();
 8012bfe:	f000 f9b5 	bl	8012f6c <tcp_echoserver_init>
  /* USER CODE BEGIN WHILE */
  printf("initialized...\n");
 8012c02:	4804      	ldr	r0, [pc, #16]	; (8012c14 <main+0xb4>)
 8012c04:	f001 fa4e 	bl	80140a4 <puts>
  while (1)
  {
   MX_LWIP_Process();
 8012c08:	f7ff fedc 	bl	80129c4 <MX_LWIP_Process>
 8012c0c:	e7fc      	b.n	8012c08 <main+0xa8>
 8012c0e:	bf00      	nop
 8012c10:	58024400 	.word	0x58024400
 8012c14:	08016cc0 	.word	0x08016cc0

08012c18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8012c18:	b580      	push	{r7, lr}
 8012c1a:	b0cc      	sub	sp, #304	; 0x130
 8012c1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8012c1e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8012c22:	224c      	movs	r2, #76	; 0x4c
 8012c24:	2100      	movs	r1, #0
 8012c26:	4618      	mov	r0, r3
 8012c28:	f001 f918 	bl	8013e5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8012c2c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8012c30:	2220      	movs	r2, #32
 8012c32:	2100      	movs	r1, #0
 8012c34:	4618      	mov	r0, r3
 8012c36:	f001 f911 	bl	8013e5c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8012c3a:	f107 0308 	add.w	r3, r7, #8
 8012c3e:	4618      	mov	r0, r3
 8012c40:	23bc      	movs	r3, #188	; 0xbc
 8012c42:	461a      	mov	r2, r3
 8012c44:	2100      	movs	r1, #0
 8012c46:	f001 f909 	bl	8013e5c <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8012c4a:	2002      	movs	r0, #2
 8012c4c:	f7f1 f8a2 	bl	8003d94 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8012c50:	1d3b      	adds	r3, r7, #4
 8012c52:	2200      	movs	r2, #0
 8012c54:	601a      	str	r2, [r3, #0]
 8012c56:	4b48      	ldr	r3, [pc, #288]	; (8012d78 <SystemClock_Config+0x160>)
 8012c58:	699b      	ldr	r3, [r3, #24]
 8012c5a:	4a47      	ldr	r2, [pc, #284]	; (8012d78 <SystemClock_Config+0x160>)
 8012c5c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8012c60:	6193      	str	r3, [r2, #24]
 8012c62:	4b45      	ldr	r3, [pc, #276]	; (8012d78 <SystemClock_Config+0x160>)
 8012c64:	699b      	ldr	r3, [r3, #24]
 8012c66:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8012c6a:	1d3b      	adds	r3, r7, #4
 8012c6c:	601a      	str	r2, [r3, #0]
 8012c6e:	4b43      	ldr	r3, [pc, #268]	; (8012d7c <SystemClock_Config+0x164>)
 8012c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c72:	4a42      	ldr	r2, [pc, #264]	; (8012d7c <SystemClock_Config+0x164>)
 8012c74:	f043 0301 	orr.w	r3, r3, #1
 8012c78:	62d3      	str	r3, [r2, #44]	; 0x2c
 8012c7a:	4b40      	ldr	r3, [pc, #256]	; (8012d7c <SystemClock_Config+0x164>)
 8012c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c7e:	f003 0201 	and.w	r2, r3, #1
 8012c82:	1d3b      	adds	r3, r7, #4
 8012c84:	601a      	str	r2, [r3, #0]
 8012c86:	1d3b      	adds	r3, r7, #4
 8012c88:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8012c8a:	bf00      	nop
 8012c8c:	4b3a      	ldr	r3, [pc, #232]	; (8012d78 <SystemClock_Config+0x160>)
 8012c8e:	699b      	ldr	r3, [r3, #24]
 8012c90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012c94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012c98:	d1f8      	bne.n	8012c8c <SystemClock_Config+0x74>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8012c9a:	2301      	movs	r3, #1
 8012c9c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8012ca0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8012ca4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8012ca8:	2302      	movs	r3, #2
 8012caa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8012cae:	2302      	movs	r3, #2
 8012cb0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8012cb4:	2305      	movs	r3, #5
 8012cb6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 192;
 8012cba:	23c0      	movs	r3, #192	; 0xc0
 8012cbc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8012cc0:	2302      	movs	r3, #2
 8012cc2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 20;
 8012cc6:	2314      	movs	r3, #20
 8012cc8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8012ccc:	2302      	movs	r3, #2
 8012cce:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8012cd2:	2308      	movs	r3, #8
 8012cd4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8012cd8:	2300      	movs	r3, #0
 8012cda:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8012cde:	2300      	movs	r3, #0
 8012ce0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8012ce4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8012ce8:	4618      	mov	r0, r3
 8012cea:	f7f1 f8bb 	bl	8003e64 <HAL_RCC_OscConfig>
 8012cee:	4603      	mov	r3, r0
 8012cf0:	2b00      	cmp	r3, #0
 8012cf2:	d001      	beq.n	8012cf8 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8012cf4:	f000 f844 	bl	8012d80 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8012cf8:	233f      	movs	r3, #63	; 0x3f
 8012cfa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8012cfe:	2303      	movs	r3, #3
 8012d00:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8012d04:	2300      	movs	r3, #0
 8012d06:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8012d0a:	2308      	movs	r3, #8
 8012d0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8012d10:	2340      	movs	r3, #64	; 0x40
 8012d12:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8012d16:	2340      	movs	r3, #64	; 0x40
 8012d18:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8012d1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012d20:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8012d24:	2340      	movs	r3, #64	; 0x40
 8012d26:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8012d2a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8012d2e:	2104      	movs	r1, #4
 8012d30:	4618      	mov	r0, r3
 8012d32:	f7f1 fc4f 	bl	80045d4 <HAL_RCC_ClockConfig>
 8012d36:	4603      	mov	r3, r0
 8012d38:	2b00      	cmp	r3, #0
 8012d3a:	d001      	beq.n	8012d40 <SystemClock_Config+0x128>
  {
    Error_Handler();
 8012d3c:	f000 f820 	bl	8012d80 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8012d40:	f107 0308 	add.w	r3, r7, #8
 8012d44:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8012d48:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8012d4a:	f107 0308 	add.w	r3, r7, #8
 8012d4e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8012d52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8012d56:	f107 0308 	add.w	r3, r7, #8
 8012d5a:	4618      	mov	r0, r3
 8012d5c:	f7f1 ff6c 	bl	8004c38 <HAL_RCCEx_PeriphCLKConfig>
 8012d60:	4603      	mov	r3, r0
 8012d62:	2b00      	cmp	r3, #0
 8012d64:	d001      	beq.n	8012d6a <SystemClock_Config+0x152>
  {
    Error_Handler();
 8012d66:	f000 f80b 	bl	8012d80 <Error_Handler>
  }
  /** Enable USB Voltage detector 
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 8012d6a:	f7f1 f86b 	bl	8003e44 <HAL_PWREx_EnableUSBVoltageDetector>
}
 8012d6e:	bf00      	nop
 8012d70:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8012d74:	46bd      	mov	sp, r7
 8012d76:	bd80      	pop	{r7, pc}
 8012d78:	58024800 	.word	0x58024800
 8012d7c:	58000400 	.word	0x58000400

08012d80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8012d80:	b480      	push	{r7}
 8012d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8012d84:	bf00      	nop
 8012d86:	46bd      	mov	sp, r7
 8012d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d8c:	4770      	bx	lr
	...

08012d90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8012d90:	b480      	push	{r7}
 8012d92:	b083      	sub	sp, #12
 8012d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8012d96:	4b0a      	ldr	r3, [pc, #40]	; (8012dc0 <HAL_MspInit+0x30>)
 8012d98:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8012d9c:	4a08      	ldr	r2, [pc, #32]	; (8012dc0 <HAL_MspInit+0x30>)
 8012d9e:	f043 0302 	orr.w	r3, r3, #2
 8012da2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8012da6:	4b06      	ldr	r3, [pc, #24]	; (8012dc0 <HAL_MspInit+0x30>)
 8012da8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8012dac:	f003 0302 	and.w	r3, r3, #2
 8012db0:	607b      	str	r3, [r7, #4]
 8012db2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8012db4:	bf00      	nop
 8012db6:	370c      	adds	r7, #12
 8012db8:	46bd      	mov	sp, r7
 8012dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dbe:	4770      	bx	lr
 8012dc0:	58024400 	.word	0x58024400

08012dc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8012dc4:	b480      	push	{r7}
 8012dc6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8012dc8:	bf00      	nop
 8012dca:	46bd      	mov	sp, r7
 8012dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dd0:	4770      	bx	lr

08012dd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8012dd2:	b480      	push	{r7}
 8012dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8012dd6:	e7fe      	b.n	8012dd6 <HardFault_Handler+0x4>

08012dd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8012dd8:	b480      	push	{r7}
 8012dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8012ddc:	e7fe      	b.n	8012ddc <MemManage_Handler+0x4>

08012dde <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8012dde:	b480      	push	{r7}
 8012de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8012de2:	e7fe      	b.n	8012de2 <BusFault_Handler+0x4>

08012de4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8012de4:	b480      	push	{r7}
 8012de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8012de8:	e7fe      	b.n	8012de8 <UsageFault_Handler+0x4>

08012dea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8012dea:	b480      	push	{r7}
 8012dec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8012dee:	bf00      	nop
 8012df0:	46bd      	mov	sp, r7
 8012df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012df6:	4770      	bx	lr

08012df8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8012df8:	b480      	push	{r7}
 8012dfa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8012dfc:	bf00      	nop
 8012dfe:	46bd      	mov	sp, r7
 8012e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e04:	4770      	bx	lr

08012e06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8012e06:	b480      	push	{r7}
 8012e08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8012e0a:	bf00      	nop
 8012e0c:	46bd      	mov	sp, r7
 8012e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e12:	4770      	bx	lr

08012e14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8012e14:	b580      	push	{r7, lr}
 8012e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8012e18:	f7ed fd0a 	bl	8000830 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8012e1c:	bf00      	nop
 8012e1e:	bd80      	pop	{r7, pc}

08012e20 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8012e20:	b580      	push	{r7, lr}
 8012e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8012e24:	4802      	ldr	r0, [pc, #8]	; (8012e30 <OTG_FS_IRQHandler+0x10>)
 8012e26:	f7ef ff2a 	bl	8002c7e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8012e2a:	bf00      	nop
 8012e2c:	bd80      	pop	{r7, pc}
 8012e2e:	bf00      	nop
 8012e30:	20004748 	.word	0x20004748

08012e34 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8012e34:	b580      	push	{r7, lr}
 8012e36:	b086      	sub	sp, #24
 8012e38:	af00      	add	r7, sp, #0
 8012e3a:	60f8      	str	r0, [r7, #12]
 8012e3c:	60b9      	str	r1, [r7, #8]
 8012e3e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012e40:	2300      	movs	r3, #0
 8012e42:	617b      	str	r3, [r7, #20]
 8012e44:	e00a      	b.n	8012e5c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8012e46:	f3af 8000 	nop.w
 8012e4a:	4601      	mov	r1, r0
 8012e4c:	68bb      	ldr	r3, [r7, #8]
 8012e4e:	1c5a      	adds	r2, r3, #1
 8012e50:	60ba      	str	r2, [r7, #8]
 8012e52:	b2ca      	uxtb	r2, r1
 8012e54:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012e56:	697b      	ldr	r3, [r7, #20]
 8012e58:	3301      	adds	r3, #1
 8012e5a:	617b      	str	r3, [r7, #20]
 8012e5c:	697a      	ldr	r2, [r7, #20]
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	429a      	cmp	r2, r3
 8012e62:	dbf0      	blt.n	8012e46 <_read+0x12>
	}

return len;
 8012e64:	687b      	ldr	r3, [r7, #4]
}
 8012e66:	4618      	mov	r0, r3
 8012e68:	3718      	adds	r7, #24
 8012e6a:	46bd      	mov	sp, r7
 8012e6c:	bd80      	pop	{r7, pc}

08012e6e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8012e6e:	b580      	push	{r7, lr}
 8012e70:	b086      	sub	sp, #24
 8012e72:	af00      	add	r7, sp, #0
 8012e74:	60f8      	str	r0, [r7, #12]
 8012e76:	60b9      	str	r1, [r7, #8]
 8012e78:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012e7a:	2300      	movs	r3, #0
 8012e7c:	617b      	str	r3, [r7, #20]
 8012e7e:	e009      	b.n	8012e94 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8012e80:	68bb      	ldr	r3, [r7, #8]
 8012e82:	1c5a      	adds	r2, r3, #1
 8012e84:	60ba      	str	r2, [r7, #8]
 8012e86:	781b      	ldrb	r3, [r3, #0]
 8012e88:	4618      	mov	r0, r3
 8012e8a:	f7ff fe13 	bl	8012ab4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012e8e:	697b      	ldr	r3, [r7, #20]
 8012e90:	3301      	adds	r3, #1
 8012e92:	617b      	str	r3, [r7, #20]
 8012e94:	697a      	ldr	r2, [r7, #20]
 8012e96:	687b      	ldr	r3, [r7, #4]
 8012e98:	429a      	cmp	r2, r3
 8012e9a:	dbf1      	blt.n	8012e80 <_write+0x12>
	}
	return len;
 8012e9c:	687b      	ldr	r3, [r7, #4]
}
 8012e9e:	4618      	mov	r0, r3
 8012ea0:	3718      	adds	r7, #24
 8012ea2:	46bd      	mov	sp, r7
 8012ea4:	bd80      	pop	{r7, pc}

08012ea6 <_close>:

int _close(int file)
{
 8012ea6:	b480      	push	{r7}
 8012ea8:	b083      	sub	sp, #12
 8012eaa:	af00      	add	r7, sp, #0
 8012eac:	6078      	str	r0, [r7, #4]
	return -1;
 8012eae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012eb2:	4618      	mov	r0, r3
 8012eb4:	370c      	adds	r7, #12
 8012eb6:	46bd      	mov	sp, r7
 8012eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ebc:	4770      	bx	lr

08012ebe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8012ebe:	b480      	push	{r7}
 8012ec0:	b083      	sub	sp, #12
 8012ec2:	af00      	add	r7, sp, #0
 8012ec4:	6078      	str	r0, [r7, #4]
 8012ec6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8012ec8:	683b      	ldr	r3, [r7, #0]
 8012eca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8012ece:	605a      	str	r2, [r3, #4]
	return 0;
 8012ed0:	2300      	movs	r3, #0
}
 8012ed2:	4618      	mov	r0, r3
 8012ed4:	370c      	adds	r7, #12
 8012ed6:	46bd      	mov	sp, r7
 8012ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012edc:	4770      	bx	lr

08012ede <_isatty>:

int _isatty(int file)
{
 8012ede:	b480      	push	{r7}
 8012ee0:	b083      	sub	sp, #12
 8012ee2:	af00      	add	r7, sp, #0
 8012ee4:	6078      	str	r0, [r7, #4]
	return 1;
 8012ee6:	2301      	movs	r3, #1
}
 8012ee8:	4618      	mov	r0, r3
 8012eea:	370c      	adds	r7, #12
 8012eec:	46bd      	mov	sp, r7
 8012eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ef2:	4770      	bx	lr

08012ef4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8012ef4:	b480      	push	{r7}
 8012ef6:	b085      	sub	sp, #20
 8012ef8:	af00      	add	r7, sp, #0
 8012efa:	60f8      	str	r0, [r7, #12]
 8012efc:	60b9      	str	r1, [r7, #8]
 8012efe:	607a      	str	r2, [r7, #4]
	return 0;
 8012f00:	2300      	movs	r3, #0
}
 8012f02:	4618      	mov	r0, r3
 8012f04:	3714      	adds	r7, #20
 8012f06:	46bd      	mov	sp, r7
 8012f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f0c:	4770      	bx	lr
	...

08012f10 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8012f10:	b480      	push	{r7}
 8012f12:	b085      	sub	sp, #20
 8012f14:	af00      	add	r7, sp, #0
 8012f16:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8012f18:	4b11      	ldr	r3, [pc, #68]	; (8012f60 <_sbrk+0x50>)
 8012f1a:	681b      	ldr	r3, [r3, #0]
 8012f1c:	2b00      	cmp	r3, #0
 8012f1e:	d102      	bne.n	8012f26 <_sbrk+0x16>
		heap_end = &end;
 8012f20:	4b0f      	ldr	r3, [pc, #60]	; (8012f60 <_sbrk+0x50>)
 8012f22:	4a10      	ldr	r2, [pc, #64]	; (8012f64 <_sbrk+0x54>)
 8012f24:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8012f26:	4b0e      	ldr	r3, [pc, #56]	; (8012f60 <_sbrk+0x50>)
 8012f28:	681b      	ldr	r3, [r3, #0]
 8012f2a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8012f2c:	4b0c      	ldr	r3, [pc, #48]	; (8012f60 <_sbrk+0x50>)
 8012f2e:	681a      	ldr	r2, [r3, #0]
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	4413      	add	r3, r2
 8012f34:	466a      	mov	r2, sp
 8012f36:	4293      	cmp	r3, r2
 8012f38:	d905      	bls.n	8012f46 <_sbrk+0x36>
	{
		errno = ENOMEM;
 8012f3a:	4b0b      	ldr	r3, [pc, #44]	; (8012f68 <_sbrk+0x58>)
 8012f3c:	220c      	movs	r2, #12
 8012f3e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8012f40:	f04f 33ff 	mov.w	r3, #4294967295
 8012f44:	e006      	b.n	8012f54 <_sbrk+0x44>
	}

	heap_end += incr;
 8012f46:	4b06      	ldr	r3, [pc, #24]	; (8012f60 <_sbrk+0x50>)
 8012f48:	681a      	ldr	r2, [r3, #0]
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	4413      	add	r3, r2
 8012f4e:	4a04      	ldr	r2, [pc, #16]	; (8012f60 <_sbrk+0x50>)
 8012f50:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8012f52:	68fb      	ldr	r3, [r7, #12]
}
 8012f54:	4618      	mov	r0, r3
 8012f56:	3714      	adds	r7, #20
 8012f58:	46bd      	mov	sp, r7
 8012f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f5e:	4770      	bx	lr
 8012f60:	20000394 	.word	0x20000394
 8012f64:	20004d58 	.word	0x20004d58
 8012f68:	20004d50 	.word	0x20004d50

08012f6c <tcp_echoserver_init>:
  * @brief  Initializes the tcp echo server
  * @param  None
  * @retval None
  */
void tcp_echoserver_init(void)
{
 8012f6c:	b580      	push	{r7, lr}
 8012f6e:	b082      	sub	sp, #8
 8012f70:	af00      	add	r7, sp, #0
	/* create new tcp pcb */
	tcp_echoserver_pcb = tcp_new();
 8012f72:	f7f8 fbc5 	bl	800b700 <tcp_new>
 8012f76:	4602      	mov	r2, r0
 8012f78:	4b16      	ldr	r3, [pc, #88]	; (8012fd4 <tcp_echoserver_init+0x68>)
 8012f7a:	601a      	str	r2, [r3, #0]

	if(tcp_echoserver_pcb != NULL)
 8012f7c:	4b15      	ldr	r3, [pc, #84]	; (8012fd4 <tcp_echoserver_init+0x68>)
 8012f7e:	681b      	ldr	r3, [r3, #0]
 8012f80:	2b00      	cmp	r3, #0
 8012f82:	d022      	beq.n	8012fca <tcp_echoserver_init+0x5e>
	{
		err_t err;

		/* bind echo_pcb to port 7 (ECHO protocol) */
		err = tcp_bind(tcp_echoserver_pcb, IP_ADDR_ANY, 7);
 8012f84:	4b13      	ldr	r3, [pc, #76]	; (8012fd4 <tcp_echoserver_init+0x68>)
 8012f86:	681b      	ldr	r3, [r3, #0]
 8012f88:	2207      	movs	r2, #7
 8012f8a:	4913      	ldr	r1, [pc, #76]	; (8012fd8 <tcp_echoserver_init+0x6c>)
 8012f8c:	4618      	mov	r0, r3
 8012f8e:	f7f7 fc3b 	bl	800a808 <tcp_bind>
 8012f92:	4603      	mov	r3, r0
 8012f94:	71fb      	strb	r3, [r7, #7]

		if(err == ERR_OK)
 8012f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012f9a:	2b00      	cmp	r3, #0
 8012f9c:	d10f      	bne.n	8012fbe <tcp_echoserver_init+0x52>
		{
		  /* start tcp listening for echo_pcb */
		  tcp_echoserver_pcb = tcp_listen(tcp_echoserver_pcb);
 8012f9e:	4b0d      	ldr	r3, [pc, #52]	; (8012fd4 <tcp_echoserver_init+0x68>)
 8012fa0:	681b      	ldr	r3, [r3, #0]
 8012fa2:	21ff      	movs	r1, #255	; 0xff
 8012fa4:	4618      	mov	r0, r3
 8012fa6:	f7f7 fcd1 	bl	800a94c <tcp_listen_with_backlog>
 8012faa:	4602      	mov	r2, r0
 8012fac:	4b09      	ldr	r3, [pc, #36]	; (8012fd4 <tcp_echoserver_init+0x68>)
 8012fae:	601a      	str	r2, [r3, #0]

		  /* initialize LwIP tcp_accept callback function */
		  tcp_accept(tcp_echoserver_pcb, tcp_echoserver_accept);
 8012fb0:	4b08      	ldr	r3, [pc, #32]	; (8012fd4 <tcp_echoserver_init+0x68>)
 8012fb2:	681b      	ldr	r3, [r3, #0]
 8012fb4:	4909      	ldr	r1, [pc, #36]	; (8012fdc <tcp_echoserver_init+0x70>)
 8012fb6:	4618      	mov	r0, r3
 8012fb8:	f7f8 fc20 	bl	800b7fc <tcp_accept>
		{
		  /* deallocate the pcb */
		  memp_free(MEMP_TCP_PCB, tcp_echoserver_pcb);
		}
	}
}
 8012fbc:	e005      	b.n	8012fca <tcp_echoserver_init+0x5e>
		  memp_free(MEMP_TCP_PCB, tcp_echoserver_pcb);
 8012fbe:	4b05      	ldr	r3, [pc, #20]	; (8012fd4 <tcp_echoserver_init+0x68>)
 8012fc0:	681b      	ldr	r3, [r3, #0]
 8012fc2:	4619      	mov	r1, r3
 8012fc4:	2001      	movs	r0, #1
 8012fc6:	f7f6 f96d 	bl	80092a4 <memp_free>
}
 8012fca:	bf00      	nop
 8012fcc:	3708      	adds	r7, #8
 8012fce:	46bd      	mov	sp, r7
 8012fd0:	bd80      	pop	{r7, pc}
 8012fd2:	bf00      	nop
 8012fd4:	20000398 	.word	0x20000398
 8012fd8:	08016e48 	.word	0x08016e48
 8012fdc:	08012fe1 	.word	0x08012fe1

08012fe0 <tcp_echoserver_accept>:
  * @param  newpcb: pointer on tcp_pcb struct for the newly created tcp connection
  * @param  err: not used
  * @retval err_t: error status
  */
static err_t tcp_echoserver_accept(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8012fe0:	b580      	push	{r7, lr}
 8012fe2:	b086      	sub	sp, #24
 8012fe4:	af00      	add	r7, sp, #0
 8012fe6:	60f8      	str	r0, [r7, #12]
 8012fe8:	60b9      	str	r1, [r7, #8]
 8012fea:	4613      	mov	r3, r2
 8012fec:	71fb      	strb	r3, [r7, #7]

	LWIP_UNUSED_ARG(arg);
	LWIP_UNUSED_ARG(err);

	/* set priority for the newly accepted tcp connection newpcb */
	tcp_setprio(newpcb, TCP_PRIO_MIN);
 8012fee:	2101      	movs	r1, #1
 8012ff0:	68b8      	ldr	r0, [r7, #8]
 8012ff2:	f7f8 f9fa 	bl	800b3ea <tcp_setprio>

	/* allocate structure es to maintain tcp connection informations */
	es = (struct tcp_echoserver_struct *)mem_malloc(sizeof(struct tcp_echoserver_struct));
 8012ff6:	200c      	movs	r0, #12
 8012ff8:	f7f5 ff64 	bl	8008ec4 <mem_malloc>
 8012ffc:	6138      	str	r0, [r7, #16]
	if(es != NULL)
 8012ffe:	693b      	ldr	r3, [r7, #16]
 8013000:	2b00      	cmp	r3, #0
 8013002:	d01f      	beq.n	8013044 <tcp_echoserver_accept+0x64>
	{
		es->state = ES_ACCEPTED;
 8013004:	693b      	ldr	r3, [r7, #16]
 8013006:	2201      	movs	r2, #1
 8013008:	701a      	strb	r2, [r3, #0]
		es->pcb = newpcb;
 801300a:	693b      	ldr	r3, [r7, #16]
 801300c:	68ba      	ldr	r2, [r7, #8]
 801300e:	605a      	str	r2, [r3, #4]
		es->retries = 0;
 8013010:	693b      	ldr	r3, [r7, #16]
 8013012:	2200      	movs	r2, #0
 8013014:	705a      	strb	r2, [r3, #1]
		es->p = NULL;
 8013016:	693b      	ldr	r3, [r7, #16]
 8013018:	2200      	movs	r2, #0
 801301a:	609a      	str	r2, [r3, #8]

		/* pass newly allocated es structure as argument to newpcb */
		tcp_arg(newpcb, es);
 801301c:	6939      	ldr	r1, [r7, #16]
 801301e:	68b8      	ldr	r0, [r7, #8]
 8013020:	f7f8 fb76 	bl	800b710 <tcp_arg>

		/* initialize lwip tcp_recv callback function for newpcb  */
		tcp_recv(newpcb, tcp_echoserver_recv);
 8013024:	490d      	ldr	r1, [pc, #52]	; (801305c <tcp_echoserver_accept+0x7c>)
 8013026:	68b8      	ldr	r0, [r7, #8]
 8013028:	f7f8 fb84 	bl	800b734 <tcp_recv>

		/* initialize lwip tcp_err callback function for newpcb  */
		tcp_err(newpcb, tcp_echoserver_error);
 801302c:	490c      	ldr	r1, [pc, #48]	; (8013060 <tcp_echoserver_accept+0x80>)
 801302e:	68b8      	ldr	r0, [r7, #8]
 8013030:	f7f8 fbc2 	bl	800b7b8 <tcp_err>

		/* initialize lwip tcp_poll callback function for newpcb */
		tcp_poll(newpcb, tcp_echoserver_poll, 0);
 8013034:	2200      	movs	r2, #0
 8013036:	490b      	ldr	r1, [pc, #44]	; (8013064 <tcp_echoserver_accept+0x84>)
 8013038:	68b8      	ldr	r0, [r7, #8]
 801303a:	f7f8 fbf7 	bl	800b82c <tcp_poll>

		ret_err = ERR_OK;
 801303e:	2300      	movs	r3, #0
 8013040:	75fb      	strb	r3, [r7, #23]
 8013042:	e005      	b.n	8013050 <tcp_echoserver_accept+0x70>
	}
	else
	{
		/*  close tcp connection */
		tcp_echoserver_connection_close(newpcb, es);
 8013044:	6939      	ldr	r1, [r7, #16]
 8013046:	68b8      	ldr	r0, [r7, #8]
 8013048:	f000 f965 	bl	8013316 <tcp_echoserver_connection_close>
		/* return memory error */
		ret_err = ERR_MEM;
 801304c:	23ff      	movs	r3, #255	; 0xff
 801304e:	75fb      	strb	r3, [r7, #23]
	}
	return ret_err;
 8013050:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013054:	4618      	mov	r0, r3
 8013056:	3718      	adds	r7, #24
 8013058:	46bd      	mov	sp, r7
 801305a:	bd80      	pop	{r7, pc}
 801305c:	08013069 	.word	0x08013069
 8013060:	0801319d 	.word	0x0801319d
 8013064:	080131c1 	.word	0x080131c1

08013068 <tcp_echoserver_recv>:
  * @param  pbuf: pointer on the received pbuf
  * @param  err: error information regarding the reveived pbuf
  * @retval err_t: error code
  */
static err_t tcp_echoserver_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 8013068:	b580      	push	{r7, lr}
 801306a:	b088      	sub	sp, #32
 801306c:	af00      	add	r7, sp, #0
 801306e:	60f8      	str	r0, [r7, #12]
 8013070:	60b9      	str	r1, [r7, #8]
 8013072:	607a      	str	r2, [r7, #4]
 8013074:	70fb      	strb	r3, [r7, #3]
	struct tcp_echoserver_struct *es;
	err_t ret_err;

	LWIP_ASSERT("arg != NULL",arg != NULL);
 8013076:	68fb      	ldr	r3, [r7, #12]
 8013078:	2b00      	cmp	r3, #0
 801307a:	d105      	bne.n	8013088 <tcp_echoserver_recv+0x20>
 801307c:	4b43      	ldr	r3, [pc, #268]	; (801318c <tcp_echoserver_recv+0x124>)
 801307e:	2292      	movs	r2, #146	; 0x92
 8013080:	4943      	ldr	r1, [pc, #268]	; (8013190 <tcp_echoserver_recv+0x128>)
 8013082:	4844      	ldr	r0, [pc, #272]	; (8013194 <tcp_echoserver_recv+0x12c>)
 8013084:	f000 ff9a 	bl	8013fbc <iprintf>

	es = (struct tcp_echoserver_struct *)arg;
 8013088:	68fb      	ldr	r3, [r7, #12]
 801308a:	61bb      	str	r3, [r7, #24]

	/* if we receive an empty tcp frame from client => close connection */
	if(p == NULL)
 801308c:	687b      	ldr	r3, [r7, #4]
 801308e:	2b00      	cmp	r3, #0
 8013090:	d116      	bne.n	80130c0 <tcp_echoserver_recv+0x58>
	{
		/* remote host closed connection */
		es->state = ES_CLOSING;
 8013092:	69bb      	ldr	r3, [r7, #24]
 8013094:	2203      	movs	r2, #3
 8013096:	701a      	strb	r2, [r3, #0]
		if(es->p == NULL)
 8013098:	69bb      	ldr	r3, [r7, #24]
 801309a:	689b      	ldr	r3, [r3, #8]
 801309c:	2b00      	cmp	r3, #0
 801309e:	d104      	bne.n	80130aa <tcp_echoserver_recv+0x42>
		{
			/* we're done sending, close connection */
			tcp_echoserver_connection_close(tpcb, es);
 80130a0:	69b9      	ldr	r1, [r7, #24]
 80130a2:	68b8      	ldr	r0, [r7, #8]
 80130a4:	f000 f937 	bl	8013316 <tcp_echoserver_connection_close>
 80130a8:	e007      	b.n	80130ba <tcp_echoserver_recv+0x52>
		}
		else
		{
			/* we're not done yet */
			/* acknowledge received packet */
			tcp_sent(tpcb, tcp_echoserver_sent);
 80130aa:	493b      	ldr	r1, [pc, #236]	; (8013198 <tcp_echoserver_recv+0x130>)
 80130ac:	68b8      	ldr	r0, [r7, #8]
 80130ae:	f7f8 fb63 	bl	800b778 <tcp_sent>

			/* send remaining data*/
			tcp_echoserver_send(tpcb, es);
 80130b2:	69b9      	ldr	r1, [r7, #24]
 80130b4:	68b8      	ldr	r0, [r7, #8]
 80130b6:	f000 f8db 	bl	8013270 <tcp_echoserver_send>
		}
		ret_err = ERR_OK;
 80130ba:	2300      	movs	r3, #0
 80130bc:	77fb      	strb	r3, [r7, #31]
 80130be:	e05f      	b.n	8013180 <tcp_echoserver_recv+0x118>
	}
	/* else : a non empty frame was received from client but for some reason err != ERR_OK */
	else if(err != ERR_OK)
 80130c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80130c4:	2b00      	cmp	r3, #0
 80130c6:	d00b      	beq.n	80130e0 <tcp_echoserver_recv+0x78>
	{
		/* free received pbuf*/
		if(p != NULL)
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	2b00      	cmp	r3, #0
 80130cc:	d005      	beq.n	80130da <tcp_echoserver_recv+0x72>
		{
		  es->p = NULL;
 80130ce:	69bb      	ldr	r3, [r7, #24]
 80130d0:	2200      	movs	r2, #0
 80130d2:	609a      	str	r2, [r3, #8]
		  pbuf_free(p);
 80130d4:	6878      	ldr	r0, [r7, #4]
 80130d6:	f7f6 fe89 	bl	8009dec <pbuf_free>
		}

		ret_err = err;
 80130da:	78fb      	ldrb	r3, [r7, #3]
 80130dc:	77fb      	strb	r3, [r7, #31]
 80130de:	e04f      	b.n	8013180 <tcp_echoserver_recv+0x118>
	}
	else if(es->state == ES_ACCEPTED)
 80130e0:	69bb      	ldr	r3, [r7, #24]
 80130e2:	781b      	ldrb	r3, [r3, #0]
 80130e4:	2b01      	cmp	r3, #1
 80130e6:	d110      	bne.n	801310a <tcp_echoserver_recv+0xa2>
	{
		/* first data chunk in p->payload */
		es->state = ES_RECEIVED;
 80130e8:	69bb      	ldr	r3, [r7, #24]
 80130ea:	2202      	movs	r2, #2
 80130ec:	701a      	strb	r2, [r3, #0]

		/* store reference to incoming pbuf (chain) */
		es->p = p;
 80130ee:	69bb      	ldr	r3, [r7, #24]
 80130f0:	687a      	ldr	r2, [r7, #4]
 80130f2:	609a      	str	r2, [r3, #8]

		/* initialize LwIP tcp_sent callback function */
		tcp_sent(tpcb, tcp_echoserver_sent);
 80130f4:	4928      	ldr	r1, [pc, #160]	; (8013198 <tcp_echoserver_recv+0x130>)
 80130f6:	68b8      	ldr	r0, [r7, #8]
 80130f8:	f7f8 fb3e 	bl	800b778 <tcp_sent>

		/* send back the received data (echo) */
		tcp_echoserver_send(tpcb, es);
 80130fc:	69b9      	ldr	r1, [r7, #24]
 80130fe:	68b8      	ldr	r0, [r7, #8]
 8013100:	f000 f8b6 	bl	8013270 <tcp_echoserver_send>

		ret_err = ERR_OK;
 8013104:	2300      	movs	r3, #0
 8013106:	77fb      	strb	r3, [r7, #31]
 8013108:	e03a      	b.n	8013180 <tcp_echoserver_recv+0x118>
	}
	else if (es->state == ES_RECEIVED)
 801310a:	69bb      	ldr	r3, [r7, #24]
 801310c:	781b      	ldrb	r3, [r3, #0]
 801310e:	2b02      	cmp	r3, #2
 8013110:	d115      	bne.n	801313e <tcp_echoserver_recv+0xd6>
	{
		/* more data received from client and previous data has been already sent*/
		if(es->p == NULL)
 8013112:	69bb      	ldr	r3, [r7, #24]
 8013114:	689b      	ldr	r3, [r3, #8]
 8013116:	2b00      	cmp	r3, #0
 8013118:	d107      	bne.n	801312a <tcp_echoserver_recv+0xc2>
		{
			es->p = p;
 801311a:	69bb      	ldr	r3, [r7, #24]
 801311c:	687a      	ldr	r2, [r7, #4]
 801311e:	609a      	str	r2, [r3, #8]

			/* send back received data */
			tcp_echoserver_send(tpcb, es);
 8013120:	69b9      	ldr	r1, [r7, #24]
 8013122:	68b8      	ldr	r0, [r7, #8]
 8013124:	f000 f8a4 	bl	8013270 <tcp_echoserver_send>
 8013128:	e006      	b.n	8013138 <tcp_echoserver_recv+0xd0>
		else
		{
			struct pbuf *ptr;

			/* chain pbufs to the end of what we recv'ed previously  */
			ptr = es->p;
 801312a:	69bb      	ldr	r3, [r7, #24]
 801312c:	689b      	ldr	r3, [r3, #8]
 801312e:	617b      	str	r3, [r7, #20]
			pbuf_chain(ptr,p);
 8013130:	6879      	ldr	r1, [r7, #4]
 8013132:	6978      	ldr	r0, [r7, #20]
 8013134:	f7f6 ff7e 	bl	800a034 <pbuf_chain>
		}
		ret_err = ERR_OK;
 8013138:	2300      	movs	r3, #0
 801313a:	77fb      	strb	r3, [r7, #31]
 801313c:	e020      	b.n	8013180 <tcp_echoserver_recv+0x118>
	}
	else if(es->state == ES_CLOSING)
 801313e:	69bb      	ldr	r3, [r7, #24]
 8013140:	781b      	ldrb	r3, [r3, #0]
 8013142:	2b03      	cmp	r3, #3
 8013144:	d10e      	bne.n	8013164 <tcp_echoserver_recv+0xfc>
	{
		/* odd case, remote side closing twice, trash data */
		tcp_recved(tpcb, p->tot_len);
 8013146:	687b      	ldr	r3, [r7, #4]
 8013148:	891b      	ldrh	r3, [r3, #8]
 801314a:	4619      	mov	r1, r3
 801314c:	68b8      	ldr	r0, [r7, #8]
 801314e:	f7f7 fcf5 	bl	800ab3c <tcp_recved>
		es->p = NULL;
 8013152:	69bb      	ldr	r3, [r7, #24]
 8013154:	2200      	movs	r2, #0
 8013156:	609a      	str	r2, [r3, #8]
		pbuf_free(p);
 8013158:	6878      	ldr	r0, [r7, #4]
 801315a:	f7f6 fe47 	bl	8009dec <pbuf_free>
		ret_err = ERR_OK;
 801315e:	2300      	movs	r3, #0
 8013160:	77fb      	strb	r3, [r7, #31]
 8013162:	e00d      	b.n	8013180 <tcp_echoserver_recv+0x118>
	}
	else
	{
		/* unkown es->state, trash data  */
		tcp_recved(tpcb, p->tot_len);
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	891b      	ldrh	r3, [r3, #8]
 8013168:	4619      	mov	r1, r3
 801316a:	68b8      	ldr	r0, [r7, #8]
 801316c:	f7f7 fce6 	bl	800ab3c <tcp_recved>
		es->p = NULL;
 8013170:	69bb      	ldr	r3, [r7, #24]
 8013172:	2200      	movs	r2, #0
 8013174:	609a      	str	r2, [r3, #8]
		pbuf_free(p);
 8013176:	6878      	ldr	r0, [r7, #4]
 8013178:	f7f6 fe38 	bl	8009dec <pbuf_free>
		ret_err = ERR_OK;
 801317c:	2300      	movs	r3, #0
 801317e:	77fb      	strb	r3, [r7, #31]
	}
	return ret_err;
 8013180:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013184:	4618      	mov	r0, r3
 8013186:	3720      	adds	r7, #32
 8013188:	46bd      	mov	sp, r7
 801318a:	bd80      	pop	{r7, pc}
 801318c:	08016cd0 	.word	0x08016cd0
 8013190:	08016cec 	.word	0x08016cec
 8013194:	08016cf8 	.word	0x08016cf8
 8013198:	08013221 	.word	0x08013221

0801319c <tcp_echoserver_error>:
  * @param  arg: pointer on argument parameter
  * @param  err: not used
  * @retval None
  */
static void tcp_echoserver_error(void *arg, err_t err)
{
 801319c:	b580      	push	{r7, lr}
 801319e:	b084      	sub	sp, #16
 80131a0:	af00      	add	r7, sp, #0
 80131a2:	6078      	str	r0, [r7, #4]
 80131a4:	460b      	mov	r3, r1
 80131a6:	70fb      	strb	r3, [r7, #3]
	struct tcp_echoserver_struct *es;

	LWIP_UNUSED_ARG(err);

	es = (struct tcp_echoserver_struct *)arg;
 80131a8:	687b      	ldr	r3, [r7, #4]
 80131aa:	60fb      	str	r3, [r7, #12]
	if(es != NULL)
 80131ac:	68fb      	ldr	r3, [r7, #12]
 80131ae:	2b00      	cmp	r3, #0
 80131b0:	d002      	beq.n	80131b8 <tcp_echoserver_error+0x1c>
	{
		/*  free es structure */
		mem_free(es);
 80131b2:	68f8      	ldr	r0, [r7, #12]
 80131b4:	f7f5 fd48 	bl	8008c48 <mem_free>
	}
}
 80131b8:	bf00      	nop
 80131ba:	3710      	adds	r7, #16
 80131bc:	46bd      	mov	sp, r7
 80131be:	bd80      	pop	{r7, pc}

080131c0 <tcp_echoserver_poll>:
  * @param  arg: pointer on argument passed to callback
  * @param  tpcb: pointer on the tcp_pcb for the current tcp connection
  * @retval err_t: error code
  */
static err_t tcp_echoserver_poll(void *arg, struct tcp_pcb *tpcb)
{
 80131c0:	b580      	push	{r7, lr}
 80131c2:	b084      	sub	sp, #16
 80131c4:	af00      	add	r7, sp, #0
 80131c6:	6078      	str	r0, [r7, #4]
 80131c8:	6039      	str	r1, [r7, #0]
	err_t ret_err;
	struct tcp_echoserver_struct *es;

	es = (struct tcp_echoserver_struct *)arg;
 80131ca:	687b      	ldr	r3, [r7, #4]
 80131cc:	60bb      	str	r3, [r7, #8]
	if (es != NULL)
 80131ce:	68bb      	ldr	r3, [r7, #8]
 80131d0:	2b00      	cmp	r3, #0
 80131d2:	d017      	beq.n	8013204 <tcp_echoserver_poll+0x44>
	{
		if(es->p != NULL)
 80131d4:	68bb      	ldr	r3, [r7, #8]
 80131d6:	689b      	ldr	r3, [r3, #8]
 80131d8:	2b00      	cmp	r3, #0
 80131da:	d008      	beq.n	80131ee <tcp_echoserver_poll+0x2e>
		{
			tcp_sent(tpcb, tcp_echoserver_sent);
 80131dc:	490f      	ldr	r1, [pc, #60]	; (801321c <tcp_echoserver_poll+0x5c>)
 80131de:	6838      	ldr	r0, [r7, #0]
 80131e0:	f7f8 faca 	bl	800b778 <tcp_sent>
			/* there is a remaining pbuf (chain) , try to send data */
			tcp_echoserver_send(tpcb, es);
 80131e4:	68b9      	ldr	r1, [r7, #8]
 80131e6:	6838      	ldr	r0, [r7, #0]
 80131e8:	f000 f842 	bl	8013270 <tcp_echoserver_send>
 80131ec:	e007      	b.n	80131fe <tcp_echoserver_poll+0x3e>
		}
		else
		{
			/* no remaining pbuf (chain)  */
			if(es->state == ES_CLOSING)
 80131ee:	68bb      	ldr	r3, [r7, #8]
 80131f0:	781b      	ldrb	r3, [r3, #0]
 80131f2:	2b03      	cmp	r3, #3
 80131f4:	d103      	bne.n	80131fe <tcp_echoserver_poll+0x3e>
			{
				/*  close tcp connection */
				tcp_echoserver_connection_close(tpcb, es);
 80131f6:	68b9      	ldr	r1, [r7, #8]
 80131f8:	6838      	ldr	r0, [r7, #0]
 80131fa:	f000 f88c 	bl	8013316 <tcp_echoserver_connection_close>
			}
		}
		ret_err = ERR_OK;
 80131fe:	2300      	movs	r3, #0
 8013200:	73fb      	strb	r3, [r7, #15]
 8013202:	e004      	b.n	801320e <tcp_echoserver_poll+0x4e>
	}
	else
	{
		/* nothing to be done */
		tcp_abort(tpcb);
 8013204:	6838      	ldr	r0, [r7, #0]
 8013206:	f7f7 faf3 	bl	800a7f0 <tcp_abort>
		ret_err = ERR_ABRT;
 801320a:	23f3      	movs	r3, #243	; 0xf3
 801320c:	73fb      	strb	r3, [r7, #15]
	}
	return ret_err;
 801320e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013212:	4618      	mov	r0, r3
 8013214:	3710      	adds	r7, #16
 8013216:	46bd      	mov	sp, r7
 8013218:	bd80      	pop	{r7, pc}
 801321a:	bf00      	nop
 801321c:	08013221 	.word	0x08013221

08013220 <tcp_echoserver_sent>:
  *         is received from remote host for sent data)
  * @param  None
  * @retval None
  */
static err_t tcp_echoserver_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
 8013220:	b580      	push	{r7, lr}
 8013222:	b086      	sub	sp, #24
 8013224:	af00      	add	r7, sp, #0
 8013226:	60f8      	str	r0, [r7, #12]
 8013228:	60b9      	str	r1, [r7, #8]
 801322a:	4613      	mov	r3, r2
 801322c:	80fb      	strh	r3, [r7, #6]
	struct tcp_echoserver_struct *es;

	LWIP_UNUSED_ARG(len);

	es = (struct tcp_echoserver_struct *)arg;
 801322e:	68fb      	ldr	r3, [r7, #12]
 8013230:	617b      	str	r3, [r7, #20]
	es->retries = 0;
 8013232:	697b      	ldr	r3, [r7, #20]
 8013234:	2200      	movs	r2, #0
 8013236:	705a      	strb	r2, [r3, #1]

	if(es->p != NULL)
 8013238:	697b      	ldr	r3, [r7, #20]
 801323a:	689b      	ldr	r3, [r3, #8]
 801323c:	2b00      	cmp	r3, #0
 801323e:	d008      	beq.n	8013252 <tcp_echoserver_sent+0x32>
	{
		/* still got pbufs to send */
		tcp_sent(tpcb, tcp_echoserver_sent);
 8013240:	490a      	ldr	r1, [pc, #40]	; (801326c <tcp_echoserver_sent+0x4c>)
 8013242:	68b8      	ldr	r0, [r7, #8]
 8013244:	f7f8 fa98 	bl	800b778 <tcp_sent>
		tcp_echoserver_send(tpcb, es);
 8013248:	6979      	ldr	r1, [r7, #20]
 801324a:	68b8      	ldr	r0, [r7, #8]
 801324c:	f000 f810 	bl	8013270 <tcp_echoserver_send>
 8013250:	e007      	b.n	8013262 <tcp_echoserver_sent+0x42>
	}
	else
	{
		/* if no more data to send and client closed connection*/
		if(es->state == ES_CLOSING)
 8013252:	697b      	ldr	r3, [r7, #20]
 8013254:	781b      	ldrb	r3, [r3, #0]
 8013256:	2b03      	cmp	r3, #3
 8013258:	d103      	bne.n	8013262 <tcp_echoserver_sent+0x42>
			tcp_echoserver_connection_close(tpcb, es);
 801325a:	6979      	ldr	r1, [r7, #20]
 801325c:	68b8      	ldr	r0, [r7, #8]
 801325e:	f000 f85a 	bl	8013316 <tcp_echoserver_connection_close>
	}
	return ERR_OK;
 8013262:	2300      	movs	r3, #0
}
 8013264:	4618      	mov	r0, r3
 8013266:	3718      	adds	r7, #24
 8013268:	46bd      	mov	sp, r7
 801326a:	bd80      	pop	{r7, pc}
 801326c:	08013221 	.word	0x08013221

08013270 <tcp_echoserver_send>:
  * @param  tpcb: pointer on the tcp_pcb connection
  * @param  es: pointer on echo_state structure
  * @retval None
  */
static void tcp_echoserver_send(struct tcp_pcb *tpcb, struct tcp_echoserver_struct *es)
{
 8013270:	b580      	push	{r7, lr}
 8013272:	b086      	sub	sp, #24
 8013274:	af00      	add	r7, sp, #0
 8013276:	6078      	str	r0, [r7, #4]
 8013278:	6039      	str	r1, [r7, #0]
	struct pbuf *ptr;
	err_t wr_err = ERR_OK;
 801327a:	2300      	movs	r3, #0
 801327c:	75fb      	strb	r3, [r7, #23]

	while((wr_err == ERR_OK) && (es->p != NULL) && (es->p->len <= tcp_sndbuf(tpcb)))
 801327e:	e036      	b.n	80132ee <tcp_echoserver_send+0x7e>
	{

		/* get pointer on pbuf from es structure */
		ptr = es->p;
 8013280:	683b      	ldr	r3, [r7, #0]
 8013282:	689b      	ldr	r3, [r3, #8]
 8013284:	613b      	str	r3, [r7, #16]

		/* enqueue data for transmission */
		wr_err = tcp_write(tpcb, ptr->payload, ptr->len, 1);
 8013286:	693b      	ldr	r3, [r7, #16]
 8013288:	6859      	ldr	r1, [r3, #4]
 801328a:	693b      	ldr	r3, [r7, #16]
 801328c:	895a      	ldrh	r2, [r3, #10]
 801328e:	2301      	movs	r3, #1
 8013290:	6878      	ldr	r0, [r7, #4]
 8013292:	f7fb f87f 	bl	800e394 <tcp_write>
 8013296:	4603      	mov	r3, r0
 8013298:	75fb      	strb	r3, [r7, #23]

		if(wr_err == ERR_OK)
 801329a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801329e:	2b00      	cmp	r3, #0
 80132a0:	d11d      	bne.n	80132de <tcp_echoserver_send+0x6e>
		{
			u16_t plen;
			u8_t freed;

			plen = ptr->len;
 80132a2:	693b      	ldr	r3, [r7, #16]
 80132a4:	895b      	ldrh	r3, [r3, #10]
 80132a6:	81fb      	strh	r3, [r7, #14]

			/* continue with next pbuf in chain (if any) */
			es->p = ptr->next;
 80132a8:	693b      	ldr	r3, [r7, #16]
 80132aa:	681a      	ldr	r2, [r3, #0]
 80132ac:	683b      	ldr	r3, [r7, #0]
 80132ae:	609a      	str	r2, [r3, #8]

			if(es->p != NULL)
 80132b0:	683b      	ldr	r3, [r7, #0]
 80132b2:	689b      	ldr	r3, [r3, #8]
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	d004      	beq.n	80132c2 <tcp_echoserver_send+0x52>
			{
				/* increment reference count for es->p */
				pbuf_ref(es->p);
 80132b8:	683b      	ldr	r3, [r7, #0]
 80132ba:	689b      	ldr	r3, [r3, #8]
 80132bc:	4618      	mov	r0, r3
 80132be:	f7f6 fe41 	bl	8009f44 <pbuf_ref>

			/* chop first pbuf from chain */
			do
			{
				/* try hard to free pbuf */
				freed = pbuf_free(ptr);
 80132c2:	6938      	ldr	r0, [r7, #16]
 80132c4:	f7f6 fd92 	bl	8009dec <pbuf_free>
 80132c8:	4603      	mov	r3, r0
 80132ca:	737b      	strb	r3, [r7, #13]
			}
			while(freed == 0);
 80132cc:	7b7b      	ldrb	r3, [r7, #13]
 80132ce:	2b00      	cmp	r3, #0
 80132d0:	d0f7      	beq.n	80132c2 <tcp_echoserver_send+0x52>
			/* we can read more data now */
			tcp_recved(tpcb, plen);
 80132d2:	89fb      	ldrh	r3, [r7, #14]
 80132d4:	4619      	mov	r1, r3
 80132d6:	6878      	ldr	r0, [r7, #4]
 80132d8:	f7f7 fc30 	bl	800ab3c <tcp_recved>
 80132dc:	e007      	b.n	80132ee <tcp_echoserver_send+0x7e>
		}
		else if(wr_err == ERR_MEM)
 80132de:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80132e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80132e6:	d102      	bne.n	80132ee <tcp_echoserver_send+0x7e>
		{
			/* we are low on memory, try later / harder, defer to poll */
			es->p = ptr;
 80132e8:	683b      	ldr	r3, [r7, #0]
 80132ea:	693a      	ldr	r2, [r7, #16]
 80132ec:	609a      	str	r2, [r3, #8]
	while((wr_err == ERR_OK) && (es->p != NULL) && (es->p->len <= tcp_sndbuf(tpcb)))
 80132ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80132f2:	2b00      	cmp	r3, #0
 80132f4:	d10b      	bne.n	801330e <tcp_echoserver_send+0x9e>
 80132f6:	683b      	ldr	r3, [r7, #0]
 80132f8:	689b      	ldr	r3, [r3, #8]
 80132fa:	2b00      	cmp	r3, #0
 80132fc:	d007      	beq.n	801330e <tcp_echoserver_send+0x9e>
 80132fe:	683b      	ldr	r3, [r7, #0]
 8013300:	689b      	ldr	r3, [r3, #8]
 8013302:	895a      	ldrh	r2, [r3, #10]
 8013304:	687b      	ldr	r3, [r7, #4]
 8013306:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801330a:	429a      	cmp	r2, r3
 801330c:	d9b8      	bls.n	8013280 <tcp_echoserver_send+0x10>
		else
		{
			/* other problem ?? */
		}
	}
}
 801330e:	bf00      	nop
 8013310:	3718      	adds	r7, #24
 8013312:	46bd      	mov	sp, r7
 8013314:	bd80      	pop	{r7, pc}

08013316 <tcp_echoserver_connection_close>:
  * @param  tcp_pcb: pointer on the tcp connection
  * @param  es: pointer on echo_state structure
  * @retval None
  */
static void tcp_echoserver_connection_close(struct tcp_pcb *tpcb, struct tcp_echoserver_struct *es)
{
 8013316:	b580      	push	{r7, lr}
 8013318:	b082      	sub	sp, #8
 801331a:	af00      	add	r7, sp, #0
 801331c:	6078      	str	r0, [r7, #4]
 801331e:	6039      	str	r1, [r7, #0]

	/* remove all callbacks */
	tcp_arg(tpcb, NULL);
 8013320:	2100      	movs	r1, #0
 8013322:	6878      	ldr	r0, [r7, #4]
 8013324:	f7f8 f9f4 	bl	800b710 <tcp_arg>
	tcp_sent(tpcb, NULL);
 8013328:	2100      	movs	r1, #0
 801332a:	6878      	ldr	r0, [r7, #4]
 801332c:	f7f8 fa24 	bl	800b778 <tcp_sent>
	tcp_recv(tpcb, NULL);
 8013330:	2100      	movs	r1, #0
 8013332:	6878      	ldr	r0, [r7, #4]
 8013334:	f7f8 f9fe 	bl	800b734 <tcp_recv>
	tcp_err(tpcb, NULL);
 8013338:	2100      	movs	r1, #0
 801333a:	6878      	ldr	r0, [r7, #4]
 801333c:	f7f8 fa3c 	bl	800b7b8 <tcp_err>
	tcp_poll(tpcb, NULL, 0);
 8013340:	2200      	movs	r2, #0
 8013342:	2100      	movs	r1, #0
 8013344:	6878      	ldr	r0, [r7, #4]
 8013346:	f7f8 fa71 	bl	800b82c <tcp_poll>

	/* delete es structure */
	if(es != NULL)
 801334a:	683b      	ldr	r3, [r7, #0]
 801334c:	2b00      	cmp	r3, #0
 801334e:	d002      	beq.n	8013356 <tcp_echoserver_connection_close+0x40>
	{
		mem_free(es);
 8013350:	6838      	ldr	r0, [r7, #0]
 8013352:	f7f5 fc79 	bl	8008c48 <mem_free>
	}

	/* close tcp connection */
	tcp_close(tpcb);
 8013356:	6878      	ldr	r0, [r7, #4]
 8013358:	f7f7 f980 	bl	800a65c <tcp_close>
}
 801335c:	bf00      	nop
 801335e:	3708      	adds	r7, #8
 8013360:	46bd      	mov	sp, r7
 8013362:	bd80      	pop	{r7, pc}

08013364 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8013364:	b580      	push	{r7, lr}
 8013366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8013368:	2200      	movs	r2, #0
 801336a:	4913      	ldr	r1, [pc, #76]	; (80133b8 <MX_USB_DEVICE_Init+0x54>)
 801336c:	4813      	ldr	r0, [pc, #76]	; (80133bc <MX_USB_DEVICE_Init+0x58>)
 801336e:	f7f4 fa8d 	bl	800788c <USBD_Init>
 8013372:	4603      	mov	r3, r0
 8013374:	2b00      	cmp	r3, #0
 8013376:	d001      	beq.n	801337c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8013378:	f7ff fd02 	bl	8012d80 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801337c:	4910      	ldr	r1, [pc, #64]	; (80133c0 <MX_USB_DEVICE_Init+0x5c>)
 801337e:	480f      	ldr	r0, [pc, #60]	; (80133bc <MX_USB_DEVICE_Init+0x58>)
 8013380:	f7f4 faaf 	bl	80078e2 <USBD_RegisterClass>
 8013384:	4603      	mov	r3, r0
 8013386:	2b00      	cmp	r3, #0
 8013388:	d001      	beq.n	801338e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801338a:	f7ff fcf9 	bl	8012d80 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801338e:	490d      	ldr	r1, [pc, #52]	; (80133c4 <MX_USB_DEVICE_Init+0x60>)
 8013390:	480a      	ldr	r0, [pc, #40]	; (80133bc <MX_USB_DEVICE_Init+0x58>)
 8013392:	f7f4 f9dd 	bl	8007750 <USBD_CDC_RegisterInterface>
 8013396:	4603      	mov	r3, r0
 8013398:	2b00      	cmp	r3, #0
 801339a:	d001      	beq.n	80133a0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801339c:	f7ff fcf0 	bl	8012d80 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80133a0:	4806      	ldr	r0, [pc, #24]	; (80133bc <MX_USB_DEVICE_Init+0x58>)
 80133a2:	f7f4 fab8 	bl	8007916 <USBD_Start>
 80133a6:	4603      	mov	r3, r0
 80133a8:	2b00      	cmp	r3, #0
 80133aa:	d001      	beq.n	80133b0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80133ac:	f7ff fce8 	bl	8012d80 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 80133b0:	f7f0 fd48 	bl	8003e44 <HAL_PWREx_EnableUSBVoltageDetector>
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80133b4:	bf00      	nop
 80133b6:	bd80      	pop	{r7, pc}
 80133b8:	2000014c 	.word	0x2000014c
 80133bc:	20003484 	.word	0x20003484
 80133c0:	2000001c 	.word	0x2000001c
 80133c4:	2000013c 	.word	0x2000013c

080133c8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80133c8:	b580      	push	{r7, lr}
 80133ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80133cc:	2200      	movs	r2, #0
 80133ce:	4905      	ldr	r1, [pc, #20]	; (80133e4 <CDC_Init_FS+0x1c>)
 80133d0:	4805      	ldr	r0, [pc, #20]	; (80133e8 <CDC_Init_FS+0x20>)
 80133d2:	f7f4 f9d4 	bl	800777e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80133d6:	4905      	ldr	r1, [pc, #20]	; (80133ec <CDC_Init_FS+0x24>)
 80133d8:	4803      	ldr	r0, [pc, #12]	; (80133e8 <CDC_Init_FS+0x20>)
 80133da:	f7f4 f9ea 	bl	80077b2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80133de:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80133e0:	4618      	mov	r0, r3
 80133e2:	bd80      	pop	{r7, pc}
 80133e4:	20003f48 	.word	0x20003f48
 80133e8:	20003484 	.word	0x20003484
 80133ec:	20003748 	.word	0x20003748

080133f0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80133f0:	b480      	push	{r7}
 80133f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80133f4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80133f6:	4618      	mov	r0, r3
 80133f8:	46bd      	mov	sp, r7
 80133fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133fe:	4770      	bx	lr

08013400 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8013400:	b480      	push	{r7}
 8013402:	b083      	sub	sp, #12
 8013404:	af00      	add	r7, sp, #0
 8013406:	4603      	mov	r3, r0
 8013408:	6039      	str	r1, [r7, #0]
 801340a:	71fb      	strb	r3, [r7, #7]
 801340c:	4613      	mov	r3, r2
 801340e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8013410:	79fb      	ldrb	r3, [r7, #7]
 8013412:	2b23      	cmp	r3, #35	; 0x23
 8013414:	d84a      	bhi.n	80134ac <CDC_Control_FS+0xac>
 8013416:	a201      	add	r2, pc, #4	; (adr r2, 801341c <CDC_Control_FS+0x1c>)
 8013418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801341c:	080134ad 	.word	0x080134ad
 8013420:	080134ad 	.word	0x080134ad
 8013424:	080134ad 	.word	0x080134ad
 8013428:	080134ad 	.word	0x080134ad
 801342c:	080134ad 	.word	0x080134ad
 8013430:	080134ad 	.word	0x080134ad
 8013434:	080134ad 	.word	0x080134ad
 8013438:	080134ad 	.word	0x080134ad
 801343c:	080134ad 	.word	0x080134ad
 8013440:	080134ad 	.word	0x080134ad
 8013444:	080134ad 	.word	0x080134ad
 8013448:	080134ad 	.word	0x080134ad
 801344c:	080134ad 	.word	0x080134ad
 8013450:	080134ad 	.word	0x080134ad
 8013454:	080134ad 	.word	0x080134ad
 8013458:	080134ad 	.word	0x080134ad
 801345c:	080134ad 	.word	0x080134ad
 8013460:	080134ad 	.word	0x080134ad
 8013464:	080134ad 	.word	0x080134ad
 8013468:	080134ad 	.word	0x080134ad
 801346c:	080134ad 	.word	0x080134ad
 8013470:	080134ad 	.word	0x080134ad
 8013474:	080134ad 	.word	0x080134ad
 8013478:	080134ad 	.word	0x080134ad
 801347c:	080134ad 	.word	0x080134ad
 8013480:	080134ad 	.word	0x080134ad
 8013484:	080134ad 	.word	0x080134ad
 8013488:	080134ad 	.word	0x080134ad
 801348c:	080134ad 	.word	0x080134ad
 8013490:	080134ad 	.word	0x080134ad
 8013494:	080134ad 	.word	0x080134ad
 8013498:	080134ad 	.word	0x080134ad
 801349c:	080134ad 	.word	0x080134ad
 80134a0:	080134ad 	.word	0x080134ad
 80134a4:	080134ad 	.word	0x080134ad
 80134a8:	080134ad 	.word	0x080134ad
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80134ac:	bf00      	nop
  }

  return (USBD_OK);
 80134ae:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80134b0:	4618      	mov	r0, r3
 80134b2:	370c      	adds	r7, #12
 80134b4:	46bd      	mov	sp, r7
 80134b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134ba:	4770      	bx	lr

080134bc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80134bc:	b580      	push	{r7, lr}
 80134be:	b082      	sub	sp, #8
 80134c0:	af00      	add	r7, sp, #0
 80134c2:	6078      	str	r0, [r7, #4]
 80134c4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80134c6:	6879      	ldr	r1, [r7, #4]
 80134c8:	4805      	ldr	r0, [pc, #20]	; (80134e0 <CDC_Receive_FS+0x24>)
 80134ca:	f7f4 f972 	bl	80077b2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80134ce:	4804      	ldr	r0, [pc, #16]	; (80134e0 <CDC_Receive_FS+0x24>)
 80134d0:	f7f4 f9b2 	bl	8007838 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80134d4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80134d6:	4618      	mov	r0, r3
 80134d8:	3708      	adds	r7, #8
 80134da:	46bd      	mov	sp, r7
 80134dc:	bd80      	pop	{r7, pc}
 80134de:	bf00      	nop
 80134e0:	20003484 	.word	0x20003484

080134e4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80134e4:	b580      	push	{r7, lr}
 80134e6:	b084      	sub	sp, #16
 80134e8:	af00      	add	r7, sp, #0
 80134ea:	6078      	str	r0, [r7, #4]
 80134ec:	460b      	mov	r3, r1
 80134ee:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80134f0:	2300      	movs	r3, #0
 80134f2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80134f4:	4b0d      	ldr	r3, [pc, #52]	; (801352c <CDC_Transmit_FS+0x48>)
 80134f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80134fa:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80134fc:	68bb      	ldr	r3, [r7, #8]
 80134fe:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8013502:	2b00      	cmp	r3, #0
 8013504:	d001      	beq.n	801350a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8013506:	2301      	movs	r3, #1
 8013508:	e00b      	b.n	8013522 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801350a:	887b      	ldrh	r3, [r7, #2]
 801350c:	461a      	mov	r2, r3
 801350e:	6879      	ldr	r1, [r7, #4]
 8013510:	4806      	ldr	r0, [pc, #24]	; (801352c <CDC_Transmit_FS+0x48>)
 8013512:	f7f4 f934 	bl	800777e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8013516:	4805      	ldr	r0, [pc, #20]	; (801352c <CDC_Transmit_FS+0x48>)
 8013518:	f7f4 f95f 	bl	80077da <USBD_CDC_TransmitPacket>
 801351c:	4603      	mov	r3, r0
 801351e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8013520:	7bfb      	ldrb	r3, [r7, #15]
}
 8013522:	4618      	mov	r0, r3
 8013524:	3710      	adds	r7, #16
 8013526:	46bd      	mov	sp, r7
 8013528:	bd80      	pop	{r7, pc}
 801352a:	bf00      	nop
 801352c:	20003484 	.word	0x20003484

08013530 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8013530:	b580      	push	{r7, lr}
 8013532:	b08a      	sub	sp, #40	; 0x28
 8013534:	af00      	add	r7, sp, #0
 8013536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013538:	f107 0314 	add.w	r3, r7, #20
 801353c:	2200      	movs	r2, #0
 801353e:	601a      	str	r2, [r3, #0]
 8013540:	605a      	str	r2, [r3, #4]
 8013542:	609a      	str	r2, [r3, #8]
 8013544:	60da      	str	r2, [r3, #12]
 8013546:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8013548:	687b      	ldr	r3, [r7, #4]
 801354a:	681b      	ldr	r3, [r3, #0]
 801354c:	4a25      	ldr	r2, [pc, #148]	; (80135e4 <HAL_PCD_MspInit+0xb4>)
 801354e:	4293      	cmp	r3, r2
 8013550:	d143      	bne.n	80135da <HAL_PCD_MspInit+0xaa>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8013552:	4b25      	ldr	r3, [pc, #148]	; (80135e8 <HAL_PCD_MspInit+0xb8>)
 8013554:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8013558:	4a23      	ldr	r2, [pc, #140]	; (80135e8 <HAL_PCD_MspInit+0xb8>)
 801355a:	f043 0301 	orr.w	r3, r3, #1
 801355e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8013562:	4b21      	ldr	r3, [pc, #132]	; (80135e8 <HAL_PCD_MspInit+0xb8>)
 8013564:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8013568:	f003 0301 	and.w	r3, r3, #1
 801356c:	613b      	str	r3, [r7, #16]
 801356e:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8013570:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013574:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8013576:	2300      	movs	r3, #0
 8013578:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801357a:	2300      	movs	r3, #0
 801357c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801357e:	f107 0314 	add.w	r3, r7, #20
 8013582:	4619      	mov	r1, r3
 8013584:	4819      	ldr	r0, [pc, #100]	; (80135ec <HAL_PCD_MspInit+0xbc>)
 8013586:	f7ef f845 	bl	8002614 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801358a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801358e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013590:	2302      	movs	r3, #2
 8013592:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013594:	2300      	movs	r3, #0
 8013596:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8013598:	2302      	movs	r3, #2
 801359a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 801359c:	230a      	movs	r3, #10
 801359e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80135a0:	f107 0314 	add.w	r3, r7, #20
 80135a4:	4619      	mov	r1, r3
 80135a6:	4811      	ldr	r0, [pc, #68]	; (80135ec <HAL_PCD_MspInit+0xbc>)
 80135a8:	f7ef f834 	bl	8002614 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80135ac:	4b0e      	ldr	r3, [pc, #56]	; (80135e8 <HAL_PCD_MspInit+0xb8>)
 80135ae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80135b2:	4a0d      	ldr	r2, [pc, #52]	; (80135e8 <HAL_PCD_MspInit+0xb8>)
 80135b4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80135b8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80135bc:	4b0a      	ldr	r3, [pc, #40]	; (80135e8 <HAL_PCD_MspInit+0xb8>)
 80135be:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80135c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80135c6:	60fb      	str	r3, [r7, #12]
 80135c8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80135ca:	2200      	movs	r2, #0
 80135cc:	2100      	movs	r1, #0
 80135ce:	2065      	movs	r0, #101	; 0x65
 80135d0:	f7ed fa6b 	bl	8000aaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80135d4:	2065      	movs	r0, #101	; 0x65
 80135d6:	f7ed fa82 	bl	8000ade <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80135da:	bf00      	nop
 80135dc:	3728      	adds	r7, #40	; 0x28
 80135de:	46bd      	mov	sp, r7
 80135e0:	bd80      	pop	{r7, pc}
 80135e2:	bf00      	nop
 80135e4:	40080000 	.word	0x40080000
 80135e8:	58024400 	.word	0x58024400
 80135ec:	58020000 	.word	0x58020000

080135f0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80135f0:	b580      	push	{r7, lr}
 80135f2:	b082      	sub	sp, #8
 80135f4:	af00      	add	r7, sp, #0
 80135f6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80135fe:	687b      	ldr	r3, [r7, #4]
 8013600:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8013604:	4619      	mov	r1, r3
 8013606:	4610      	mov	r0, r2
 8013608:	f7f4 f9ce 	bl	80079a8 <USBD_LL_SetupStage>
}
 801360c:	bf00      	nop
 801360e:	3708      	adds	r7, #8
 8013610:	46bd      	mov	sp, r7
 8013612:	bd80      	pop	{r7, pc}

08013614 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013614:	b580      	push	{r7, lr}
 8013616:	b082      	sub	sp, #8
 8013618:	af00      	add	r7, sp, #0
 801361a:	6078      	str	r0, [r7, #4]
 801361c:	460b      	mov	r3, r1
 801361e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8013620:	687b      	ldr	r3, [r7, #4]
 8013622:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8013626:	78fa      	ldrb	r2, [r7, #3]
 8013628:	6879      	ldr	r1, [r7, #4]
 801362a:	4613      	mov	r3, r2
 801362c:	00db      	lsls	r3, r3, #3
 801362e:	1a9b      	subs	r3, r3, r2
 8013630:	009b      	lsls	r3, r3, #2
 8013632:	440b      	add	r3, r1
 8013634:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8013638:	681a      	ldr	r2, [r3, #0]
 801363a:	78fb      	ldrb	r3, [r7, #3]
 801363c:	4619      	mov	r1, r3
 801363e:	f7f4 f9fe 	bl	8007a3e <USBD_LL_DataOutStage>
}
 8013642:	bf00      	nop
 8013644:	3708      	adds	r7, #8
 8013646:	46bd      	mov	sp, r7
 8013648:	bd80      	pop	{r7, pc}

0801364a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801364a:	b580      	push	{r7, lr}
 801364c:	b082      	sub	sp, #8
 801364e:	af00      	add	r7, sp, #0
 8013650:	6078      	str	r0, [r7, #4]
 8013652:	460b      	mov	r3, r1
 8013654:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801365c:	78fa      	ldrb	r2, [r7, #3]
 801365e:	6879      	ldr	r1, [r7, #4]
 8013660:	4613      	mov	r3, r2
 8013662:	00db      	lsls	r3, r3, #3
 8013664:	1a9b      	subs	r3, r3, r2
 8013666:	009b      	lsls	r3, r3, #2
 8013668:	440b      	add	r3, r1
 801366a:	3348      	adds	r3, #72	; 0x48
 801366c:	681a      	ldr	r2, [r3, #0]
 801366e:	78fb      	ldrb	r3, [r7, #3]
 8013670:	4619      	mov	r1, r3
 8013672:	f7f4 fa55 	bl	8007b20 <USBD_LL_DataInStage>
}
 8013676:	bf00      	nop
 8013678:	3708      	adds	r7, #8
 801367a:	46bd      	mov	sp, r7
 801367c:	bd80      	pop	{r7, pc}

0801367e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801367e:	b580      	push	{r7, lr}
 8013680:	b082      	sub	sp, #8
 8013682:	af00      	add	r7, sp, #0
 8013684:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8013686:	687b      	ldr	r3, [r7, #4]
 8013688:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801368c:	4618      	mov	r0, r3
 801368e:	f7f4 fb68 	bl	8007d62 <USBD_LL_SOF>
}
 8013692:	bf00      	nop
 8013694:	3708      	adds	r7, #8
 8013696:	46bd      	mov	sp, r7
 8013698:	bd80      	pop	{r7, pc}

0801369a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 801369a:	b580      	push	{r7, lr}
 801369c:	b084      	sub	sp, #16
 801369e:	af00      	add	r7, sp, #0
 80136a0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80136a2:	2301      	movs	r3, #1
 80136a4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80136a6:	687b      	ldr	r3, [r7, #4]
 80136a8:	68db      	ldr	r3, [r3, #12]
 80136aa:	2b00      	cmp	r3, #0
 80136ac:	d102      	bne.n	80136b4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80136ae:	2300      	movs	r3, #0
 80136b0:	73fb      	strb	r3, [r7, #15]
 80136b2:	e008      	b.n	80136c6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80136b4:	687b      	ldr	r3, [r7, #4]
 80136b6:	68db      	ldr	r3, [r3, #12]
 80136b8:	2b02      	cmp	r3, #2
 80136ba:	d102      	bne.n	80136c2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80136bc:	2301      	movs	r3, #1
 80136be:	73fb      	strb	r3, [r7, #15]
 80136c0:	e001      	b.n	80136c6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80136c2:	f7ff fb5d 	bl	8012d80 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80136c6:	687b      	ldr	r3, [r7, #4]
 80136c8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80136cc:	7bfa      	ldrb	r2, [r7, #15]
 80136ce:	4611      	mov	r1, r2
 80136d0:	4618      	mov	r0, r3
 80136d2:	f7f4 fb0b 	bl	8007cec <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80136d6:	687b      	ldr	r3, [r7, #4]
 80136d8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80136dc:	4618      	mov	r0, r3
 80136de:	f7f4 fac4 	bl	8007c6a <USBD_LL_Reset>
}
 80136e2:	bf00      	nop
 80136e4:	3710      	adds	r7, #16
 80136e6:	46bd      	mov	sp, r7
 80136e8:	bd80      	pop	{r7, pc}
	...

080136ec <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80136ec:	b580      	push	{r7, lr}
 80136ee:	b082      	sub	sp, #8
 80136f0:	af00      	add	r7, sp, #0
 80136f2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80136fa:	4618      	mov	r0, r3
 80136fc:	f7f4 fb06 	bl	8007d0c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8013700:	687b      	ldr	r3, [r7, #4]
 8013702:	681b      	ldr	r3, [r3, #0]
 8013704:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013708:	681b      	ldr	r3, [r3, #0]
 801370a:	687a      	ldr	r2, [r7, #4]
 801370c:	6812      	ldr	r2, [r2, #0]
 801370e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8013712:	f043 0301 	orr.w	r3, r3, #1
 8013716:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	6a1b      	ldr	r3, [r3, #32]
 801371c:	2b00      	cmp	r3, #0
 801371e:	d005      	beq.n	801372c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8013720:	4b04      	ldr	r3, [pc, #16]	; (8013734 <HAL_PCD_SuspendCallback+0x48>)
 8013722:	691b      	ldr	r3, [r3, #16]
 8013724:	4a03      	ldr	r2, [pc, #12]	; (8013734 <HAL_PCD_SuspendCallback+0x48>)
 8013726:	f043 0306 	orr.w	r3, r3, #6
 801372a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801372c:	bf00      	nop
 801372e:	3708      	adds	r7, #8
 8013730:	46bd      	mov	sp, r7
 8013732:	bd80      	pop	{r7, pc}
 8013734:	e000ed00 	.word	0xe000ed00

08013738 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013738:	b580      	push	{r7, lr}
 801373a:	b082      	sub	sp, #8
 801373c:	af00      	add	r7, sp, #0
 801373e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8013740:	687b      	ldr	r3, [r7, #4]
 8013742:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8013746:	4618      	mov	r0, r3
 8013748:	f7f4 faf5 	bl	8007d36 <USBD_LL_Resume>
}
 801374c:	bf00      	nop
 801374e:	3708      	adds	r7, #8
 8013750:	46bd      	mov	sp, r7
 8013752:	bd80      	pop	{r7, pc}

08013754 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013754:	b580      	push	{r7, lr}
 8013756:	b082      	sub	sp, #8
 8013758:	af00      	add	r7, sp, #0
 801375a:	6078      	str	r0, [r7, #4]
 801375c:	460b      	mov	r3, r1
 801375e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8013766:	78fa      	ldrb	r2, [r7, #3]
 8013768:	4611      	mov	r1, r2
 801376a:	4618      	mov	r0, r3
 801376c:	f7f4 fb20 	bl	8007db0 <USBD_LL_IsoOUTIncomplete>
}
 8013770:	bf00      	nop
 8013772:	3708      	adds	r7, #8
 8013774:	46bd      	mov	sp, r7
 8013776:	bd80      	pop	{r7, pc}

08013778 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013778:	b580      	push	{r7, lr}
 801377a:	b082      	sub	sp, #8
 801377c:	af00      	add	r7, sp, #0
 801377e:	6078      	str	r0, [r7, #4]
 8013780:	460b      	mov	r3, r1
 8013782:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801378a:	78fa      	ldrb	r2, [r7, #3]
 801378c:	4611      	mov	r1, r2
 801378e:	4618      	mov	r0, r3
 8013790:	f7f4 fb01 	bl	8007d96 <USBD_LL_IsoINIncomplete>
}
 8013794:	bf00      	nop
 8013796:	3708      	adds	r7, #8
 8013798:	46bd      	mov	sp, r7
 801379a:	bd80      	pop	{r7, pc}

0801379c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801379c:	b580      	push	{r7, lr}
 801379e:	b082      	sub	sp, #8
 80137a0:	af00      	add	r7, sp, #0
 80137a2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80137a4:	687b      	ldr	r3, [r7, #4]
 80137a6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80137aa:	4618      	mov	r0, r3
 80137ac:	f7f4 fb0d 	bl	8007dca <USBD_LL_DevConnected>
}
 80137b0:	bf00      	nop
 80137b2:	3708      	adds	r7, #8
 80137b4:	46bd      	mov	sp, r7
 80137b6:	bd80      	pop	{r7, pc}

080137b8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80137b8:	b580      	push	{r7, lr}
 80137ba:	b082      	sub	sp, #8
 80137bc:	af00      	add	r7, sp, #0
 80137be:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80137c0:	687b      	ldr	r3, [r7, #4]
 80137c2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80137c6:	4618      	mov	r0, r3
 80137c8:	f7f4 fb0a 	bl	8007de0 <USBD_LL_DevDisconnected>
}
 80137cc:	bf00      	nop
 80137ce:	3708      	adds	r7, #8
 80137d0:	46bd      	mov	sp, r7
 80137d2:	bd80      	pop	{r7, pc}

080137d4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80137d4:	b580      	push	{r7, lr}
 80137d6:	b082      	sub	sp, #8
 80137d8:	af00      	add	r7, sp, #0
 80137da:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	781b      	ldrb	r3, [r3, #0]
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	d13e      	bne.n	8013862 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80137e4:	4a21      	ldr	r2, [pc, #132]	; (801386c <USBD_LL_Init+0x98>)
 80137e6:	687b      	ldr	r3, [r7, #4]
 80137e8:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80137ec:	687b      	ldr	r3, [r7, #4]
 80137ee:	4a1f      	ldr	r2, [pc, #124]	; (801386c <USBD_LL_Init+0x98>)
 80137f0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80137f4:	4b1d      	ldr	r3, [pc, #116]	; (801386c <USBD_LL_Init+0x98>)
 80137f6:	4a1e      	ldr	r2, [pc, #120]	; (8013870 <USBD_LL_Init+0x9c>)
 80137f8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80137fa:	4b1c      	ldr	r3, [pc, #112]	; (801386c <USBD_LL_Init+0x98>)
 80137fc:	2209      	movs	r2, #9
 80137fe:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8013800:	4b1a      	ldr	r3, [pc, #104]	; (801386c <USBD_LL_Init+0x98>)
 8013802:	2202      	movs	r2, #2
 8013804:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8013806:	4b19      	ldr	r3, [pc, #100]	; (801386c <USBD_LL_Init+0x98>)
 8013808:	2200      	movs	r2, #0
 801380a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801380c:	4b17      	ldr	r3, [pc, #92]	; (801386c <USBD_LL_Init+0x98>)
 801380e:	2202      	movs	r2, #2
 8013810:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8013812:	4b16      	ldr	r3, [pc, #88]	; (801386c <USBD_LL_Init+0x98>)
 8013814:	2200      	movs	r2, #0
 8013816:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8013818:	4b14      	ldr	r3, [pc, #80]	; (801386c <USBD_LL_Init+0x98>)
 801381a:	2200      	movs	r2, #0
 801381c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801381e:	4b13      	ldr	r3, [pc, #76]	; (801386c <USBD_LL_Init+0x98>)
 8013820:	2200      	movs	r2, #0
 8013822:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8013824:	4b11      	ldr	r3, [pc, #68]	; (801386c <USBD_LL_Init+0x98>)
 8013826:	2201      	movs	r2, #1
 8013828:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 801382a:	4b10      	ldr	r3, [pc, #64]	; (801386c <USBD_LL_Init+0x98>)
 801382c:	2201      	movs	r2, #1
 801382e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8013830:	4b0e      	ldr	r3, [pc, #56]	; (801386c <USBD_LL_Init+0x98>)
 8013832:	2200      	movs	r2, #0
 8013834:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8013836:	480d      	ldr	r0, [pc, #52]	; (801386c <USBD_LL_Init+0x98>)
 8013838:	f7ef f8ca 	bl	80029d0 <HAL_PCD_Init>
 801383c:	4603      	mov	r3, r0
 801383e:	2b00      	cmp	r3, #0
 8013840:	d001      	beq.n	8013846 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8013842:	f7ff fa9d 	bl	8012d80 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8013846:	2180      	movs	r1, #128	; 0x80
 8013848:	4808      	ldr	r0, [pc, #32]	; (801386c <USBD_LL_Init+0x98>)
 801384a:	f7f0 fa62 	bl	8003d12 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801384e:	2240      	movs	r2, #64	; 0x40
 8013850:	2100      	movs	r1, #0
 8013852:	4806      	ldr	r0, [pc, #24]	; (801386c <USBD_LL_Init+0x98>)
 8013854:	f7f0 fa16 	bl	8003c84 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8013858:	2280      	movs	r2, #128	; 0x80
 801385a:	2101      	movs	r1, #1
 801385c:	4803      	ldr	r0, [pc, #12]	; (801386c <USBD_LL_Init+0x98>)
 801385e:	f7f0 fa11 	bl	8003c84 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8013862:	2300      	movs	r3, #0
}
 8013864:	4618      	mov	r0, r3
 8013866:	3708      	adds	r7, #8
 8013868:	46bd      	mov	sp, r7
 801386a:	bd80      	pop	{r7, pc}
 801386c:	20004748 	.word	0x20004748
 8013870:	40080000 	.word	0x40080000

08013874 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8013874:	b580      	push	{r7, lr}
 8013876:	b084      	sub	sp, #16
 8013878:	af00      	add	r7, sp, #0
 801387a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801387c:	2300      	movs	r3, #0
 801387e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013880:	2300      	movs	r3, #0
 8013882:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801388a:	4618      	mov	r0, r3
 801388c:	f7ef f9c4 	bl	8002c18 <HAL_PCD_Start>
 8013890:	4603      	mov	r3, r0
 8013892:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 8013894:	7bfb      	ldrb	r3, [r7, #15]
 8013896:	4618      	mov	r0, r3
 8013898:	f000 f92e 	bl	8013af8 <USBD_Get_USB_Status>
 801389c:	4603      	mov	r3, r0
 801389e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80138a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80138a2:	4618      	mov	r0, r3
 80138a4:	3710      	adds	r7, #16
 80138a6:	46bd      	mov	sp, r7
 80138a8:	bd80      	pop	{r7, pc}

080138aa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80138aa:	b580      	push	{r7, lr}
 80138ac:	b084      	sub	sp, #16
 80138ae:	af00      	add	r7, sp, #0
 80138b0:	6078      	str	r0, [r7, #4]
 80138b2:	4608      	mov	r0, r1
 80138b4:	4611      	mov	r1, r2
 80138b6:	461a      	mov	r2, r3
 80138b8:	4603      	mov	r3, r0
 80138ba:	70fb      	strb	r3, [r7, #3]
 80138bc:	460b      	mov	r3, r1
 80138be:	70bb      	strb	r3, [r7, #2]
 80138c0:	4613      	mov	r3, r2
 80138c2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80138c4:	2300      	movs	r3, #0
 80138c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80138c8:	2300      	movs	r3, #0
 80138ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80138d2:	78bb      	ldrb	r3, [r7, #2]
 80138d4:	883a      	ldrh	r2, [r7, #0]
 80138d6:	78f9      	ldrb	r1, [r7, #3]
 80138d8:	f7ef fdc6 	bl	8003468 <HAL_PCD_EP_Open>
 80138dc:	4603      	mov	r3, r0
 80138de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80138e0:	7bfb      	ldrb	r3, [r7, #15]
 80138e2:	4618      	mov	r0, r3
 80138e4:	f000 f908 	bl	8013af8 <USBD_Get_USB_Status>
 80138e8:	4603      	mov	r3, r0
 80138ea:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80138ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80138ee:	4618      	mov	r0, r3
 80138f0:	3710      	adds	r7, #16
 80138f2:	46bd      	mov	sp, r7
 80138f4:	bd80      	pop	{r7, pc}

080138f6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80138f6:	b580      	push	{r7, lr}
 80138f8:	b084      	sub	sp, #16
 80138fa:	af00      	add	r7, sp, #0
 80138fc:	6078      	str	r0, [r7, #4]
 80138fe:	460b      	mov	r3, r1
 8013900:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013902:	2300      	movs	r3, #0
 8013904:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013906:	2300      	movs	r3, #0
 8013908:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801390a:	687b      	ldr	r3, [r7, #4]
 801390c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013910:	78fa      	ldrb	r2, [r7, #3]
 8013912:	4611      	mov	r1, r2
 8013914:	4618      	mov	r0, r3
 8013916:	f7ef fe0f 	bl	8003538 <HAL_PCD_EP_Close>
 801391a:	4603      	mov	r3, r0
 801391c:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 801391e:	7bfb      	ldrb	r3, [r7, #15]
 8013920:	4618      	mov	r0, r3
 8013922:	f000 f8e9 	bl	8013af8 <USBD_Get_USB_Status>
 8013926:	4603      	mov	r3, r0
 8013928:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 801392a:	7bbb      	ldrb	r3, [r7, #14]
}
 801392c:	4618      	mov	r0, r3
 801392e:	3710      	adds	r7, #16
 8013930:	46bd      	mov	sp, r7
 8013932:	bd80      	pop	{r7, pc}

08013934 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013934:	b580      	push	{r7, lr}
 8013936:	b084      	sub	sp, #16
 8013938:	af00      	add	r7, sp, #0
 801393a:	6078      	str	r0, [r7, #4]
 801393c:	460b      	mov	r3, r1
 801393e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013940:	2300      	movs	r3, #0
 8013942:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013944:	2300      	movs	r3, #0
 8013946:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801394e:	78fa      	ldrb	r2, [r7, #3]
 8013950:	4611      	mov	r1, r2
 8013952:	4618      	mov	r0, r3
 8013954:	f7ef fee7 	bl	8003726 <HAL_PCD_EP_SetStall>
 8013958:	4603      	mov	r3, r0
 801395a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801395c:	7bfb      	ldrb	r3, [r7, #15]
 801395e:	4618      	mov	r0, r3
 8013960:	f000 f8ca 	bl	8013af8 <USBD_Get_USB_Status>
 8013964:	4603      	mov	r3, r0
 8013966:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8013968:	7bbb      	ldrb	r3, [r7, #14]
}
 801396a:	4618      	mov	r0, r3
 801396c:	3710      	adds	r7, #16
 801396e:	46bd      	mov	sp, r7
 8013970:	bd80      	pop	{r7, pc}

08013972 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013972:	b580      	push	{r7, lr}
 8013974:	b084      	sub	sp, #16
 8013976:	af00      	add	r7, sp, #0
 8013978:	6078      	str	r0, [r7, #4]
 801397a:	460b      	mov	r3, r1
 801397c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801397e:	2300      	movs	r3, #0
 8013980:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013982:	2300      	movs	r3, #0
 8013984:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8013986:	687b      	ldr	r3, [r7, #4]
 8013988:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801398c:	78fa      	ldrb	r2, [r7, #3]
 801398e:	4611      	mov	r1, r2
 8013990:	4618      	mov	r0, r3
 8013992:	f7ef ff2c 	bl	80037ee <HAL_PCD_EP_ClrStall>
 8013996:	4603      	mov	r3, r0
 8013998:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 801399a:	7bfb      	ldrb	r3, [r7, #15]
 801399c:	4618      	mov	r0, r3
 801399e:	f000 f8ab 	bl	8013af8 <USBD_Get_USB_Status>
 80139a2:	4603      	mov	r3, r0
 80139a4:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 80139a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80139a8:	4618      	mov	r0, r3
 80139aa:	3710      	adds	r7, #16
 80139ac:	46bd      	mov	sp, r7
 80139ae:	bd80      	pop	{r7, pc}

080139b0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80139b0:	b480      	push	{r7}
 80139b2:	b085      	sub	sp, #20
 80139b4:	af00      	add	r7, sp, #0
 80139b6:	6078      	str	r0, [r7, #4]
 80139b8:	460b      	mov	r3, r1
 80139ba:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80139c2:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 80139c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80139c8:	2b00      	cmp	r3, #0
 80139ca:	da0b      	bge.n	80139e4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80139cc:	78fb      	ldrb	r3, [r7, #3]
 80139ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80139d2:	68f9      	ldr	r1, [r7, #12]
 80139d4:	4613      	mov	r3, r2
 80139d6:	00db      	lsls	r3, r3, #3
 80139d8:	1a9b      	subs	r3, r3, r2
 80139da:	009b      	lsls	r3, r3, #2
 80139dc:	440b      	add	r3, r1
 80139de:	333e      	adds	r3, #62	; 0x3e
 80139e0:	781b      	ldrb	r3, [r3, #0]
 80139e2:	e00b      	b.n	80139fc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80139e4:	78fb      	ldrb	r3, [r7, #3]
 80139e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80139ea:	68f9      	ldr	r1, [r7, #12]
 80139ec:	4613      	mov	r3, r2
 80139ee:	00db      	lsls	r3, r3, #3
 80139f0:	1a9b      	subs	r3, r3, r2
 80139f2:	009b      	lsls	r3, r3, #2
 80139f4:	440b      	add	r3, r1
 80139f6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80139fa:	781b      	ldrb	r3, [r3, #0]
  }
}
 80139fc:	4618      	mov	r0, r3
 80139fe:	3714      	adds	r7, #20
 8013a00:	46bd      	mov	sp, r7
 8013a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a06:	4770      	bx	lr

08013a08 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8013a08:	b580      	push	{r7, lr}
 8013a0a:	b084      	sub	sp, #16
 8013a0c:	af00      	add	r7, sp, #0
 8013a0e:	6078      	str	r0, [r7, #4]
 8013a10:	460b      	mov	r3, r1
 8013a12:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013a14:	2300      	movs	r3, #0
 8013a16:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013a18:	2300      	movs	r3, #0
 8013a1a:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8013a1c:	687b      	ldr	r3, [r7, #4]
 8013a1e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013a22:	78fa      	ldrb	r2, [r7, #3]
 8013a24:	4611      	mov	r1, r2
 8013a26:	4618      	mov	r0, r3
 8013a28:	f7ef fcf9 	bl	800341e <HAL_PCD_SetAddress>
 8013a2c:	4603      	mov	r3, r0
 8013a2e:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 8013a30:	7bfb      	ldrb	r3, [r7, #15]
 8013a32:	4618      	mov	r0, r3
 8013a34:	f000 f860 	bl	8013af8 <USBD_Get_USB_Status>
 8013a38:	4603      	mov	r3, r0
 8013a3a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8013a3c:	7bbb      	ldrb	r3, [r7, #14]
}
 8013a3e:	4618      	mov	r0, r3
 8013a40:	3710      	adds	r7, #16
 8013a42:	46bd      	mov	sp, r7
 8013a44:	bd80      	pop	{r7, pc}

08013a46 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8013a46:	b580      	push	{r7, lr}
 8013a48:	b086      	sub	sp, #24
 8013a4a:	af00      	add	r7, sp, #0
 8013a4c:	60f8      	str	r0, [r7, #12]
 8013a4e:	607a      	str	r2, [r7, #4]
 8013a50:	461a      	mov	r2, r3
 8013a52:	460b      	mov	r3, r1
 8013a54:	72fb      	strb	r3, [r7, #11]
 8013a56:	4613      	mov	r3, r2
 8013a58:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013a5a:	2300      	movs	r3, #0
 8013a5c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013a5e:	2300      	movs	r3, #0
 8013a60:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8013a62:	68fb      	ldr	r3, [r7, #12]
 8013a64:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8013a68:	893b      	ldrh	r3, [r7, #8]
 8013a6a:	7af9      	ldrb	r1, [r7, #11]
 8013a6c:	687a      	ldr	r2, [r7, #4]
 8013a6e:	f7ef fe10 	bl	8003692 <HAL_PCD_EP_Transmit>
 8013a72:	4603      	mov	r3, r0
 8013a74:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 8013a76:	7dfb      	ldrb	r3, [r7, #23]
 8013a78:	4618      	mov	r0, r3
 8013a7a:	f000 f83d 	bl	8013af8 <USBD_Get_USB_Status>
 8013a7e:	4603      	mov	r3, r0
 8013a80:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8013a82:	7dbb      	ldrb	r3, [r7, #22]
}
 8013a84:	4618      	mov	r0, r3
 8013a86:	3718      	adds	r7, #24
 8013a88:	46bd      	mov	sp, r7
 8013a8a:	bd80      	pop	{r7, pc}

08013a8c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8013a8c:	b580      	push	{r7, lr}
 8013a8e:	b086      	sub	sp, #24
 8013a90:	af00      	add	r7, sp, #0
 8013a92:	60f8      	str	r0, [r7, #12]
 8013a94:	607a      	str	r2, [r7, #4]
 8013a96:	461a      	mov	r2, r3
 8013a98:	460b      	mov	r3, r1
 8013a9a:	72fb      	strb	r3, [r7, #11]
 8013a9c:	4613      	mov	r3, r2
 8013a9e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013aa0:	2300      	movs	r3, #0
 8013aa2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013aa4:	2300      	movs	r3, #0
 8013aa6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8013aa8:	68fb      	ldr	r3, [r7, #12]
 8013aaa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8013aae:	893b      	ldrh	r3, [r7, #8]
 8013ab0:	7af9      	ldrb	r1, [r7, #11]
 8013ab2:	687a      	ldr	r2, [r7, #4]
 8013ab4:	f7ef fd8a 	bl	80035cc <HAL_PCD_EP_Receive>
 8013ab8:	4603      	mov	r3, r0
 8013aba:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8013abc:	7dfb      	ldrb	r3, [r7, #23]
 8013abe:	4618      	mov	r0, r3
 8013ac0:	f000 f81a 	bl	8013af8 <USBD_Get_USB_Status>
 8013ac4:	4603      	mov	r3, r0
 8013ac6:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8013ac8:	7dbb      	ldrb	r3, [r7, #22]
}
 8013aca:	4618      	mov	r0, r3
 8013acc:	3718      	adds	r7, #24
 8013ace:	46bd      	mov	sp, r7
 8013ad0:	bd80      	pop	{r7, pc}

08013ad2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013ad2:	b580      	push	{r7, lr}
 8013ad4:	b082      	sub	sp, #8
 8013ad6:	af00      	add	r7, sp, #0
 8013ad8:	6078      	str	r0, [r7, #4]
 8013ada:	460b      	mov	r3, r1
 8013adc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8013ade:	687b      	ldr	r3, [r7, #4]
 8013ae0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013ae4:	78fa      	ldrb	r2, [r7, #3]
 8013ae6:	4611      	mov	r1, r2
 8013ae8:	4618      	mov	r0, r3
 8013aea:	f7ef fdba 	bl	8003662 <HAL_PCD_EP_GetRxCount>
 8013aee:	4603      	mov	r3, r0
}
 8013af0:	4618      	mov	r0, r3
 8013af2:	3708      	adds	r7, #8
 8013af4:	46bd      	mov	sp, r7
 8013af6:	bd80      	pop	{r7, pc}

08013af8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8013af8:	b480      	push	{r7}
 8013afa:	b085      	sub	sp, #20
 8013afc:	af00      	add	r7, sp, #0
 8013afe:	4603      	mov	r3, r0
 8013b00:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013b02:	2300      	movs	r3, #0
 8013b04:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8013b06:	79fb      	ldrb	r3, [r7, #7]
 8013b08:	2b03      	cmp	r3, #3
 8013b0a:	d817      	bhi.n	8013b3c <USBD_Get_USB_Status+0x44>
 8013b0c:	a201      	add	r2, pc, #4	; (adr r2, 8013b14 <USBD_Get_USB_Status+0x1c>)
 8013b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013b12:	bf00      	nop
 8013b14:	08013b25 	.word	0x08013b25
 8013b18:	08013b2b 	.word	0x08013b2b
 8013b1c:	08013b31 	.word	0x08013b31
 8013b20:	08013b37 	.word	0x08013b37
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8013b24:	2300      	movs	r3, #0
 8013b26:	73fb      	strb	r3, [r7, #15]
    break;
 8013b28:	e00b      	b.n	8013b42 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8013b2a:	2302      	movs	r3, #2
 8013b2c:	73fb      	strb	r3, [r7, #15]
    break;
 8013b2e:	e008      	b.n	8013b42 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013b30:	2301      	movs	r3, #1
 8013b32:	73fb      	strb	r3, [r7, #15]
    break;
 8013b34:	e005      	b.n	8013b42 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8013b36:	2302      	movs	r3, #2
 8013b38:	73fb      	strb	r3, [r7, #15]
    break;
 8013b3a:	e002      	b.n	8013b42 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8013b3c:	2302      	movs	r3, #2
 8013b3e:	73fb      	strb	r3, [r7, #15]
    break;
 8013b40:	bf00      	nop
  }
  return usb_status;
 8013b42:	7bfb      	ldrb	r3, [r7, #15]
}
 8013b44:	4618      	mov	r0, r3
 8013b46:	3714      	adds	r7, #20
 8013b48:	46bd      	mov	sp, r7
 8013b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b4e:	4770      	bx	lr

08013b50 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013b50:	b480      	push	{r7}
 8013b52:	b083      	sub	sp, #12
 8013b54:	af00      	add	r7, sp, #0
 8013b56:	4603      	mov	r3, r0
 8013b58:	6039      	str	r1, [r7, #0]
 8013b5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8013b5c:	683b      	ldr	r3, [r7, #0]
 8013b5e:	2212      	movs	r2, #18
 8013b60:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8013b62:	4b03      	ldr	r3, [pc, #12]	; (8013b70 <USBD_FS_DeviceDescriptor+0x20>)
}
 8013b64:	4618      	mov	r0, r3
 8013b66:	370c      	adds	r7, #12
 8013b68:	46bd      	mov	sp, r7
 8013b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b6e:	4770      	bx	lr
 8013b70:	20000168 	.word	0x20000168

08013b74 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013b74:	b480      	push	{r7}
 8013b76:	b083      	sub	sp, #12
 8013b78:	af00      	add	r7, sp, #0
 8013b7a:	4603      	mov	r3, r0
 8013b7c:	6039      	str	r1, [r7, #0]
 8013b7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8013b80:	683b      	ldr	r3, [r7, #0]
 8013b82:	2204      	movs	r2, #4
 8013b84:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8013b86:	4b03      	ldr	r3, [pc, #12]	; (8013b94 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8013b88:	4618      	mov	r0, r3
 8013b8a:	370c      	adds	r7, #12
 8013b8c:	46bd      	mov	sp, r7
 8013b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b92:	4770      	bx	lr
 8013b94:	2000017c 	.word	0x2000017c

08013b98 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013b98:	b580      	push	{r7, lr}
 8013b9a:	b082      	sub	sp, #8
 8013b9c:	af00      	add	r7, sp, #0
 8013b9e:	4603      	mov	r3, r0
 8013ba0:	6039      	str	r1, [r7, #0]
 8013ba2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8013ba4:	79fb      	ldrb	r3, [r7, #7]
 8013ba6:	2b00      	cmp	r3, #0
 8013ba8:	d105      	bne.n	8013bb6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8013baa:	683a      	ldr	r2, [r7, #0]
 8013bac:	4907      	ldr	r1, [pc, #28]	; (8013bcc <USBD_FS_ProductStrDescriptor+0x34>)
 8013bae:	4808      	ldr	r0, [pc, #32]	; (8013bd0 <USBD_FS_ProductStrDescriptor+0x38>)
 8013bb0:	f7f4 fe5e 	bl	8008870 <USBD_GetString>
 8013bb4:	e004      	b.n	8013bc0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8013bb6:	683a      	ldr	r2, [r7, #0]
 8013bb8:	4904      	ldr	r1, [pc, #16]	; (8013bcc <USBD_FS_ProductStrDescriptor+0x34>)
 8013bba:	4805      	ldr	r0, [pc, #20]	; (8013bd0 <USBD_FS_ProductStrDescriptor+0x38>)
 8013bbc:	f7f4 fe58 	bl	8008870 <USBD_GetString>
  }
  return USBD_StrDesc;
 8013bc0:	4b02      	ldr	r3, [pc, #8]	; (8013bcc <USBD_FS_ProductStrDescriptor+0x34>)
}
 8013bc2:	4618      	mov	r0, r3
 8013bc4:	3708      	adds	r7, #8
 8013bc6:	46bd      	mov	sp, r7
 8013bc8:	bd80      	pop	{r7, pc}
 8013bca:	bf00      	nop
 8013bcc:	20004b50 	.word	0x20004b50
 8013bd0:	08016d20 	.word	0x08016d20

08013bd4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013bd4:	b580      	push	{r7, lr}
 8013bd6:	b082      	sub	sp, #8
 8013bd8:	af00      	add	r7, sp, #0
 8013bda:	4603      	mov	r3, r0
 8013bdc:	6039      	str	r1, [r7, #0]
 8013bde:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8013be0:	683a      	ldr	r2, [r7, #0]
 8013be2:	4904      	ldr	r1, [pc, #16]	; (8013bf4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8013be4:	4804      	ldr	r0, [pc, #16]	; (8013bf8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8013be6:	f7f4 fe43 	bl	8008870 <USBD_GetString>
  return USBD_StrDesc;
 8013bea:	4b02      	ldr	r3, [pc, #8]	; (8013bf4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8013bec:	4618      	mov	r0, r3
 8013bee:	3708      	adds	r7, #8
 8013bf0:	46bd      	mov	sp, r7
 8013bf2:	bd80      	pop	{r7, pc}
 8013bf4:	20004b50 	.word	0x20004b50
 8013bf8:	08016d38 	.word	0x08016d38

08013bfc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013bfc:	b580      	push	{r7, lr}
 8013bfe:	b082      	sub	sp, #8
 8013c00:	af00      	add	r7, sp, #0
 8013c02:	4603      	mov	r3, r0
 8013c04:	6039      	str	r1, [r7, #0]
 8013c06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8013c08:	683b      	ldr	r3, [r7, #0]
 8013c0a:	221a      	movs	r2, #26
 8013c0c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8013c0e:	f000 f843 	bl	8013c98 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8013c12:	4b02      	ldr	r3, [pc, #8]	; (8013c1c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8013c14:	4618      	mov	r0, r3
 8013c16:	3708      	adds	r7, #8
 8013c18:	46bd      	mov	sp, r7
 8013c1a:	bd80      	pop	{r7, pc}
 8013c1c:	20000180 	.word	0x20000180

08013c20 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013c20:	b580      	push	{r7, lr}
 8013c22:	b082      	sub	sp, #8
 8013c24:	af00      	add	r7, sp, #0
 8013c26:	4603      	mov	r3, r0
 8013c28:	6039      	str	r1, [r7, #0]
 8013c2a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8013c2c:	79fb      	ldrb	r3, [r7, #7]
 8013c2e:	2b00      	cmp	r3, #0
 8013c30:	d105      	bne.n	8013c3e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8013c32:	683a      	ldr	r2, [r7, #0]
 8013c34:	4907      	ldr	r1, [pc, #28]	; (8013c54 <USBD_FS_ConfigStrDescriptor+0x34>)
 8013c36:	4808      	ldr	r0, [pc, #32]	; (8013c58 <USBD_FS_ConfigStrDescriptor+0x38>)
 8013c38:	f7f4 fe1a 	bl	8008870 <USBD_GetString>
 8013c3c:	e004      	b.n	8013c48 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8013c3e:	683a      	ldr	r2, [r7, #0]
 8013c40:	4904      	ldr	r1, [pc, #16]	; (8013c54 <USBD_FS_ConfigStrDescriptor+0x34>)
 8013c42:	4805      	ldr	r0, [pc, #20]	; (8013c58 <USBD_FS_ConfigStrDescriptor+0x38>)
 8013c44:	f7f4 fe14 	bl	8008870 <USBD_GetString>
  }
  return USBD_StrDesc;
 8013c48:	4b02      	ldr	r3, [pc, #8]	; (8013c54 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8013c4a:	4618      	mov	r0, r3
 8013c4c:	3708      	adds	r7, #8
 8013c4e:	46bd      	mov	sp, r7
 8013c50:	bd80      	pop	{r7, pc}
 8013c52:	bf00      	nop
 8013c54:	20004b50 	.word	0x20004b50
 8013c58:	08016d4c 	.word	0x08016d4c

08013c5c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013c5c:	b580      	push	{r7, lr}
 8013c5e:	b082      	sub	sp, #8
 8013c60:	af00      	add	r7, sp, #0
 8013c62:	4603      	mov	r3, r0
 8013c64:	6039      	str	r1, [r7, #0]
 8013c66:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8013c68:	79fb      	ldrb	r3, [r7, #7]
 8013c6a:	2b00      	cmp	r3, #0
 8013c6c:	d105      	bne.n	8013c7a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8013c6e:	683a      	ldr	r2, [r7, #0]
 8013c70:	4907      	ldr	r1, [pc, #28]	; (8013c90 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8013c72:	4808      	ldr	r0, [pc, #32]	; (8013c94 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8013c74:	f7f4 fdfc 	bl	8008870 <USBD_GetString>
 8013c78:	e004      	b.n	8013c84 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8013c7a:	683a      	ldr	r2, [r7, #0]
 8013c7c:	4904      	ldr	r1, [pc, #16]	; (8013c90 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8013c7e:	4805      	ldr	r0, [pc, #20]	; (8013c94 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8013c80:	f7f4 fdf6 	bl	8008870 <USBD_GetString>
  }
  return USBD_StrDesc;
 8013c84:	4b02      	ldr	r3, [pc, #8]	; (8013c90 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8013c86:	4618      	mov	r0, r3
 8013c88:	3708      	adds	r7, #8
 8013c8a:	46bd      	mov	sp, r7
 8013c8c:	bd80      	pop	{r7, pc}
 8013c8e:	bf00      	nop
 8013c90:	20004b50 	.word	0x20004b50
 8013c94:	08016d58 	.word	0x08016d58

08013c98 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8013c98:	b580      	push	{r7, lr}
 8013c9a:	b084      	sub	sp, #16
 8013c9c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8013c9e:	4b0f      	ldr	r3, [pc, #60]	; (8013cdc <Get_SerialNum+0x44>)
 8013ca0:	681b      	ldr	r3, [r3, #0]
 8013ca2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8013ca4:	4b0e      	ldr	r3, [pc, #56]	; (8013ce0 <Get_SerialNum+0x48>)
 8013ca6:	681b      	ldr	r3, [r3, #0]
 8013ca8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8013caa:	4b0e      	ldr	r3, [pc, #56]	; (8013ce4 <Get_SerialNum+0x4c>)
 8013cac:	681b      	ldr	r3, [r3, #0]
 8013cae:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8013cb0:	68fa      	ldr	r2, [r7, #12]
 8013cb2:	687b      	ldr	r3, [r7, #4]
 8013cb4:	4413      	add	r3, r2
 8013cb6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8013cb8:	68fb      	ldr	r3, [r7, #12]
 8013cba:	2b00      	cmp	r3, #0
 8013cbc:	d009      	beq.n	8013cd2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8013cbe:	2208      	movs	r2, #8
 8013cc0:	4909      	ldr	r1, [pc, #36]	; (8013ce8 <Get_SerialNum+0x50>)
 8013cc2:	68f8      	ldr	r0, [r7, #12]
 8013cc4:	f000 f814 	bl	8013cf0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8013cc8:	2204      	movs	r2, #4
 8013cca:	4908      	ldr	r1, [pc, #32]	; (8013cec <Get_SerialNum+0x54>)
 8013ccc:	68b8      	ldr	r0, [r7, #8]
 8013cce:	f000 f80f 	bl	8013cf0 <IntToUnicode>
  }
}
 8013cd2:	bf00      	nop
 8013cd4:	3710      	adds	r7, #16
 8013cd6:	46bd      	mov	sp, r7
 8013cd8:	bd80      	pop	{r7, pc}
 8013cda:	bf00      	nop
 8013cdc:	1ff1e800 	.word	0x1ff1e800
 8013ce0:	1ff1e804 	.word	0x1ff1e804
 8013ce4:	1ff1e808 	.word	0x1ff1e808
 8013ce8:	20000182 	.word	0x20000182
 8013cec:	20000192 	.word	0x20000192

08013cf0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8013cf0:	b480      	push	{r7}
 8013cf2:	b087      	sub	sp, #28
 8013cf4:	af00      	add	r7, sp, #0
 8013cf6:	60f8      	str	r0, [r7, #12]
 8013cf8:	60b9      	str	r1, [r7, #8]
 8013cfa:	4613      	mov	r3, r2
 8013cfc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8013cfe:	2300      	movs	r3, #0
 8013d00:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8013d02:	2300      	movs	r3, #0
 8013d04:	75fb      	strb	r3, [r7, #23]
 8013d06:	e027      	b.n	8013d58 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8013d08:	68fb      	ldr	r3, [r7, #12]
 8013d0a:	0f1b      	lsrs	r3, r3, #28
 8013d0c:	2b09      	cmp	r3, #9
 8013d0e:	d80b      	bhi.n	8013d28 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8013d10:	68fb      	ldr	r3, [r7, #12]
 8013d12:	0f1b      	lsrs	r3, r3, #28
 8013d14:	b2da      	uxtb	r2, r3
 8013d16:	7dfb      	ldrb	r3, [r7, #23]
 8013d18:	005b      	lsls	r3, r3, #1
 8013d1a:	4619      	mov	r1, r3
 8013d1c:	68bb      	ldr	r3, [r7, #8]
 8013d1e:	440b      	add	r3, r1
 8013d20:	3230      	adds	r2, #48	; 0x30
 8013d22:	b2d2      	uxtb	r2, r2
 8013d24:	701a      	strb	r2, [r3, #0]
 8013d26:	e00a      	b.n	8013d3e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8013d28:	68fb      	ldr	r3, [r7, #12]
 8013d2a:	0f1b      	lsrs	r3, r3, #28
 8013d2c:	b2da      	uxtb	r2, r3
 8013d2e:	7dfb      	ldrb	r3, [r7, #23]
 8013d30:	005b      	lsls	r3, r3, #1
 8013d32:	4619      	mov	r1, r3
 8013d34:	68bb      	ldr	r3, [r7, #8]
 8013d36:	440b      	add	r3, r1
 8013d38:	3237      	adds	r2, #55	; 0x37
 8013d3a:	b2d2      	uxtb	r2, r2
 8013d3c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8013d3e:	68fb      	ldr	r3, [r7, #12]
 8013d40:	011b      	lsls	r3, r3, #4
 8013d42:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8013d44:	7dfb      	ldrb	r3, [r7, #23]
 8013d46:	005b      	lsls	r3, r3, #1
 8013d48:	3301      	adds	r3, #1
 8013d4a:	68ba      	ldr	r2, [r7, #8]
 8013d4c:	4413      	add	r3, r2
 8013d4e:	2200      	movs	r2, #0
 8013d50:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8013d52:	7dfb      	ldrb	r3, [r7, #23]
 8013d54:	3301      	adds	r3, #1
 8013d56:	75fb      	strb	r3, [r7, #23]
 8013d58:	7dfa      	ldrb	r2, [r7, #23]
 8013d5a:	79fb      	ldrb	r3, [r7, #7]
 8013d5c:	429a      	cmp	r2, r3
 8013d5e:	d3d3      	bcc.n	8013d08 <IntToUnicode+0x18>
  }
}
 8013d60:	bf00      	nop
 8013d62:	371c      	adds	r7, #28
 8013d64:	46bd      	mov	sp, r7
 8013d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d6a:	4770      	bx	lr

08013d6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8013d6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8013da4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8013d70:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8013d72:	e003      	b.n	8013d7c <LoopCopyDataInit>

08013d74 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8013d74:	4b0c      	ldr	r3, [pc, #48]	; (8013da8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8013d76:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8013d78:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8013d7a:	3104      	adds	r1, #4

08013d7c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8013d7c:	480b      	ldr	r0, [pc, #44]	; (8013dac <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8013d7e:	4b0c      	ldr	r3, [pc, #48]	; (8013db0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8013d80:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8013d82:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8013d84:	d3f6      	bcc.n	8013d74 <CopyDataInit>
  ldr  r2, =_sbss
 8013d86:	4a0b      	ldr	r2, [pc, #44]	; (8013db4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8013d88:	e002      	b.n	8013d90 <LoopFillZerobss>

08013d8a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8013d8a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8013d8c:	f842 3b04 	str.w	r3, [r2], #4

08013d90 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8013d90:	4b09      	ldr	r3, [pc, #36]	; (8013db8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8013d92:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8013d94:	d3f9      	bcc.n	8013d8a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8013d96:	f7ec faf3 	bl	8000380 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8013d9a:	f000 f811 	bl	8013dc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8013d9e:	f7fe fedf 	bl	8012b60 <main>
  bx  lr    
 8013da2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8013da4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8013da8:	08016f08 	.word	0x08016f08
  ldr  r0, =_sdata
 8013dac:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8013db0:	20000200 	.word	0x20000200
  ldr  r2, =_sbss
 8013db4:	20000200 	.word	0x20000200
  ldr  r3, = _ebss
 8013db8:	20004d54 	.word	0x20004d54

08013dbc <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8013dbc:	e7fe      	b.n	8013dbc <ADC3_IRQHandler>
	...

08013dc0 <__libc_init_array>:
 8013dc0:	b570      	push	{r4, r5, r6, lr}
 8013dc2:	4e0d      	ldr	r6, [pc, #52]	; (8013df8 <__libc_init_array+0x38>)
 8013dc4:	4c0d      	ldr	r4, [pc, #52]	; (8013dfc <__libc_init_array+0x3c>)
 8013dc6:	1ba4      	subs	r4, r4, r6
 8013dc8:	10a4      	asrs	r4, r4, #2
 8013dca:	2500      	movs	r5, #0
 8013dcc:	42a5      	cmp	r5, r4
 8013dce:	d109      	bne.n	8013de4 <__libc_init_array+0x24>
 8013dd0:	4e0b      	ldr	r6, [pc, #44]	; (8013e00 <__libc_init_array+0x40>)
 8013dd2:	4c0c      	ldr	r4, [pc, #48]	; (8013e04 <__libc_init_array+0x44>)
 8013dd4:	f000 ff92 	bl	8014cfc <_init>
 8013dd8:	1ba4      	subs	r4, r4, r6
 8013dda:	10a4      	asrs	r4, r4, #2
 8013ddc:	2500      	movs	r5, #0
 8013dde:	42a5      	cmp	r5, r4
 8013de0:	d105      	bne.n	8013dee <__libc_init_array+0x2e>
 8013de2:	bd70      	pop	{r4, r5, r6, pc}
 8013de4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8013de8:	4798      	blx	r3
 8013dea:	3501      	adds	r5, #1
 8013dec:	e7ee      	b.n	8013dcc <__libc_init_array+0xc>
 8013dee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8013df2:	4798      	blx	r3
 8013df4:	3501      	adds	r5, #1
 8013df6:	e7f2      	b.n	8013dde <__libc_init_array+0x1e>
 8013df8:	08016f00 	.word	0x08016f00
 8013dfc:	08016f00 	.word	0x08016f00
 8013e00:	08016f00 	.word	0x08016f00
 8013e04:	08016f04 	.word	0x08016f04

08013e08 <malloc>:
 8013e08:	4b02      	ldr	r3, [pc, #8]	; (8013e14 <malloc+0xc>)
 8013e0a:	4601      	mov	r1, r0
 8013e0c:	6818      	ldr	r0, [r3, #0]
 8013e0e:	f000 b87b 	b.w	8013f08 <_malloc_r>
 8013e12:	bf00      	nop
 8013e14:	2000019c 	.word	0x2000019c

08013e18 <free>:
 8013e18:	4b02      	ldr	r3, [pc, #8]	; (8013e24 <free+0xc>)
 8013e1a:	4601      	mov	r1, r0
 8013e1c:	6818      	ldr	r0, [r3, #0]
 8013e1e:	f000 b825 	b.w	8013e6c <_free_r>
 8013e22:	bf00      	nop
 8013e24:	2000019c 	.word	0x2000019c

08013e28 <memcmp>:
 8013e28:	b530      	push	{r4, r5, lr}
 8013e2a:	2400      	movs	r4, #0
 8013e2c:	42a2      	cmp	r2, r4
 8013e2e:	d101      	bne.n	8013e34 <memcmp+0xc>
 8013e30:	2000      	movs	r0, #0
 8013e32:	e007      	b.n	8013e44 <memcmp+0x1c>
 8013e34:	5d03      	ldrb	r3, [r0, r4]
 8013e36:	3401      	adds	r4, #1
 8013e38:	190d      	adds	r5, r1, r4
 8013e3a:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8013e3e:	42ab      	cmp	r3, r5
 8013e40:	d0f4      	beq.n	8013e2c <memcmp+0x4>
 8013e42:	1b58      	subs	r0, r3, r5
 8013e44:	bd30      	pop	{r4, r5, pc}

08013e46 <memcpy>:
 8013e46:	b510      	push	{r4, lr}
 8013e48:	1e43      	subs	r3, r0, #1
 8013e4a:	440a      	add	r2, r1
 8013e4c:	4291      	cmp	r1, r2
 8013e4e:	d100      	bne.n	8013e52 <memcpy+0xc>
 8013e50:	bd10      	pop	{r4, pc}
 8013e52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013e56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013e5a:	e7f7      	b.n	8013e4c <memcpy+0x6>

08013e5c <memset>:
 8013e5c:	4402      	add	r2, r0
 8013e5e:	4603      	mov	r3, r0
 8013e60:	4293      	cmp	r3, r2
 8013e62:	d100      	bne.n	8013e66 <memset+0xa>
 8013e64:	4770      	bx	lr
 8013e66:	f803 1b01 	strb.w	r1, [r3], #1
 8013e6a:	e7f9      	b.n	8013e60 <memset+0x4>

08013e6c <_free_r>:
 8013e6c:	b538      	push	{r3, r4, r5, lr}
 8013e6e:	4605      	mov	r5, r0
 8013e70:	2900      	cmp	r1, #0
 8013e72:	d045      	beq.n	8013f00 <_free_r+0x94>
 8013e74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013e78:	1f0c      	subs	r4, r1, #4
 8013e7a:	2b00      	cmp	r3, #0
 8013e7c:	bfb8      	it	lt
 8013e7e:	18e4      	addlt	r4, r4, r3
 8013e80:	f000 fbc6 	bl	8014610 <__malloc_lock>
 8013e84:	4a1f      	ldr	r2, [pc, #124]	; (8013f04 <_free_r+0x98>)
 8013e86:	6813      	ldr	r3, [r2, #0]
 8013e88:	4610      	mov	r0, r2
 8013e8a:	b933      	cbnz	r3, 8013e9a <_free_r+0x2e>
 8013e8c:	6063      	str	r3, [r4, #4]
 8013e8e:	6014      	str	r4, [r2, #0]
 8013e90:	4628      	mov	r0, r5
 8013e92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013e96:	f000 bbbc 	b.w	8014612 <__malloc_unlock>
 8013e9a:	42a3      	cmp	r3, r4
 8013e9c:	d90c      	bls.n	8013eb8 <_free_r+0x4c>
 8013e9e:	6821      	ldr	r1, [r4, #0]
 8013ea0:	1862      	adds	r2, r4, r1
 8013ea2:	4293      	cmp	r3, r2
 8013ea4:	bf04      	itt	eq
 8013ea6:	681a      	ldreq	r2, [r3, #0]
 8013ea8:	685b      	ldreq	r3, [r3, #4]
 8013eaa:	6063      	str	r3, [r4, #4]
 8013eac:	bf04      	itt	eq
 8013eae:	1852      	addeq	r2, r2, r1
 8013eb0:	6022      	streq	r2, [r4, #0]
 8013eb2:	6004      	str	r4, [r0, #0]
 8013eb4:	e7ec      	b.n	8013e90 <_free_r+0x24>
 8013eb6:	4613      	mov	r3, r2
 8013eb8:	685a      	ldr	r2, [r3, #4]
 8013eba:	b10a      	cbz	r2, 8013ec0 <_free_r+0x54>
 8013ebc:	42a2      	cmp	r2, r4
 8013ebe:	d9fa      	bls.n	8013eb6 <_free_r+0x4a>
 8013ec0:	6819      	ldr	r1, [r3, #0]
 8013ec2:	1858      	adds	r0, r3, r1
 8013ec4:	42a0      	cmp	r0, r4
 8013ec6:	d10b      	bne.n	8013ee0 <_free_r+0x74>
 8013ec8:	6820      	ldr	r0, [r4, #0]
 8013eca:	4401      	add	r1, r0
 8013ecc:	1858      	adds	r0, r3, r1
 8013ece:	4282      	cmp	r2, r0
 8013ed0:	6019      	str	r1, [r3, #0]
 8013ed2:	d1dd      	bne.n	8013e90 <_free_r+0x24>
 8013ed4:	6810      	ldr	r0, [r2, #0]
 8013ed6:	6852      	ldr	r2, [r2, #4]
 8013ed8:	605a      	str	r2, [r3, #4]
 8013eda:	4401      	add	r1, r0
 8013edc:	6019      	str	r1, [r3, #0]
 8013ede:	e7d7      	b.n	8013e90 <_free_r+0x24>
 8013ee0:	d902      	bls.n	8013ee8 <_free_r+0x7c>
 8013ee2:	230c      	movs	r3, #12
 8013ee4:	602b      	str	r3, [r5, #0]
 8013ee6:	e7d3      	b.n	8013e90 <_free_r+0x24>
 8013ee8:	6820      	ldr	r0, [r4, #0]
 8013eea:	1821      	adds	r1, r4, r0
 8013eec:	428a      	cmp	r2, r1
 8013eee:	bf04      	itt	eq
 8013ef0:	6811      	ldreq	r1, [r2, #0]
 8013ef2:	6852      	ldreq	r2, [r2, #4]
 8013ef4:	6062      	str	r2, [r4, #4]
 8013ef6:	bf04      	itt	eq
 8013ef8:	1809      	addeq	r1, r1, r0
 8013efa:	6021      	streq	r1, [r4, #0]
 8013efc:	605c      	str	r4, [r3, #4]
 8013efe:	e7c7      	b.n	8013e90 <_free_r+0x24>
 8013f00:	bd38      	pop	{r3, r4, r5, pc}
 8013f02:	bf00      	nop
 8013f04:	2000039c 	.word	0x2000039c

08013f08 <_malloc_r>:
 8013f08:	b570      	push	{r4, r5, r6, lr}
 8013f0a:	1ccd      	adds	r5, r1, #3
 8013f0c:	f025 0503 	bic.w	r5, r5, #3
 8013f10:	3508      	adds	r5, #8
 8013f12:	2d0c      	cmp	r5, #12
 8013f14:	bf38      	it	cc
 8013f16:	250c      	movcc	r5, #12
 8013f18:	2d00      	cmp	r5, #0
 8013f1a:	4606      	mov	r6, r0
 8013f1c:	db01      	blt.n	8013f22 <_malloc_r+0x1a>
 8013f1e:	42a9      	cmp	r1, r5
 8013f20:	d903      	bls.n	8013f2a <_malloc_r+0x22>
 8013f22:	230c      	movs	r3, #12
 8013f24:	6033      	str	r3, [r6, #0]
 8013f26:	2000      	movs	r0, #0
 8013f28:	bd70      	pop	{r4, r5, r6, pc}
 8013f2a:	f000 fb71 	bl	8014610 <__malloc_lock>
 8013f2e:	4a21      	ldr	r2, [pc, #132]	; (8013fb4 <_malloc_r+0xac>)
 8013f30:	6814      	ldr	r4, [r2, #0]
 8013f32:	4621      	mov	r1, r4
 8013f34:	b991      	cbnz	r1, 8013f5c <_malloc_r+0x54>
 8013f36:	4c20      	ldr	r4, [pc, #128]	; (8013fb8 <_malloc_r+0xb0>)
 8013f38:	6823      	ldr	r3, [r4, #0]
 8013f3a:	b91b      	cbnz	r3, 8013f44 <_malloc_r+0x3c>
 8013f3c:	4630      	mov	r0, r6
 8013f3e:	f000 f8b9 	bl	80140b4 <_sbrk_r>
 8013f42:	6020      	str	r0, [r4, #0]
 8013f44:	4629      	mov	r1, r5
 8013f46:	4630      	mov	r0, r6
 8013f48:	f000 f8b4 	bl	80140b4 <_sbrk_r>
 8013f4c:	1c43      	adds	r3, r0, #1
 8013f4e:	d124      	bne.n	8013f9a <_malloc_r+0x92>
 8013f50:	230c      	movs	r3, #12
 8013f52:	6033      	str	r3, [r6, #0]
 8013f54:	4630      	mov	r0, r6
 8013f56:	f000 fb5c 	bl	8014612 <__malloc_unlock>
 8013f5a:	e7e4      	b.n	8013f26 <_malloc_r+0x1e>
 8013f5c:	680b      	ldr	r3, [r1, #0]
 8013f5e:	1b5b      	subs	r3, r3, r5
 8013f60:	d418      	bmi.n	8013f94 <_malloc_r+0x8c>
 8013f62:	2b0b      	cmp	r3, #11
 8013f64:	d90f      	bls.n	8013f86 <_malloc_r+0x7e>
 8013f66:	600b      	str	r3, [r1, #0]
 8013f68:	50cd      	str	r5, [r1, r3]
 8013f6a:	18cc      	adds	r4, r1, r3
 8013f6c:	4630      	mov	r0, r6
 8013f6e:	f000 fb50 	bl	8014612 <__malloc_unlock>
 8013f72:	f104 000b 	add.w	r0, r4, #11
 8013f76:	1d23      	adds	r3, r4, #4
 8013f78:	f020 0007 	bic.w	r0, r0, #7
 8013f7c:	1ac3      	subs	r3, r0, r3
 8013f7e:	d0d3      	beq.n	8013f28 <_malloc_r+0x20>
 8013f80:	425a      	negs	r2, r3
 8013f82:	50e2      	str	r2, [r4, r3]
 8013f84:	e7d0      	b.n	8013f28 <_malloc_r+0x20>
 8013f86:	428c      	cmp	r4, r1
 8013f88:	684b      	ldr	r3, [r1, #4]
 8013f8a:	bf16      	itet	ne
 8013f8c:	6063      	strne	r3, [r4, #4]
 8013f8e:	6013      	streq	r3, [r2, #0]
 8013f90:	460c      	movne	r4, r1
 8013f92:	e7eb      	b.n	8013f6c <_malloc_r+0x64>
 8013f94:	460c      	mov	r4, r1
 8013f96:	6849      	ldr	r1, [r1, #4]
 8013f98:	e7cc      	b.n	8013f34 <_malloc_r+0x2c>
 8013f9a:	1cc4      	adds	r4, r0, #3
 8013f9c:	f024 0403 	bic.w	r4, r4, #3
 8013fa0:	42a0      	cmp	r0, r4
 8013fa2:	d005      	beq.n	8013fb0 <_malloc_r+0xa8>
 8013fa4:	1a21      	subs	r1, r4, r0
 8013fa6:	4630      	mov	r0, r6
 8013fa8:	f000 f884 	bl	80140b4 <_sbrk_r>
 8013fac:	3001      	adds	r0, #1
 8013fae:	d0cf      	beq.n	8013f50 <_malloc_r+0x48>
 8013fb0:	6025      	str	r5, [r4, #0]
 8013fb2:	e7db      	b.n	8013f6c <_malloc_r+0x64>
 8013fb4:	2000039c 	.word	0x2000039c
 8013fb8:	200003a0 	.word	0x200003a0

08013fbc <iprintf>:
 8013fbc:	b40f      	push	{r0, r1, r2, r3}
 8013fbe:	4b0a      	ldr	r3, [pc, #40]	; (8013fe8 <iprintf+0x2c>)
 8013fc0:	b513      	push	{r0, r1, r4, lr}
 8013fc2:	681c      	ldr	r4, [r3, #0]
 8013fc4:	b124      	cbz	r4, 8013fd0 <iprintf+0x14>
 8013fc6:	69a3      	ldr	r3, [r4, #24]
 8013fc8:	b913      	cbnz	r3, 8013fd0 <iprintf+0x14>
 8013fca:	4620      	mov	r0, r4
 8013fcc:	f000 fa32 	bl	8014434 <__sinit>
 8013fd0:	ab05      	add	r3, sp, #20
 8013fd2:	9a04      	ldr	r2, [sp, #16]
 8013fd4:	68a1      	ldr	r1, [r4, #8]
 8013fd6:	9301      	str	r3, [sp, #4]
 8013fd8:	4620      	mov	r0, r4
 8013fda:	f000 fb45 	bl	8014668 <_vfiprintf_r>
 8013fde:	b002      	add	sp, #8
 8013fe0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013fe4:	b004      	add	sp, #16
 8013fe6:	4770      	bx	lr
 8013fe8:	2000019c 	.word	0x2000019c

08013fec <_puts_r>:
 8013fec:	b570      	push	{r4, r5, r6, lr}
 8013fee:	460e      	mov	r6, r1
 8013ff0:	4605      	mov	r5, r0
 8013ff2:	b118      	cbz	r0, 8013ffc <_puts_r+0x10>
 8013ff4:	6983      	ldr	r3, [r0, #24]
 8013ff6:	b90b      	cbnz	r3, 8013ffc <_puts_r+0x10>
 8013ff8:	f000 fa1c 	bl	8014434 <__sinit>
 8013ffc:	69ab      	ldr	r3, [r5, #24]
 8013ffe:	68ac      	ldr	r4, [r5, #8]
 8014000:	b913      	cbnz	r3, 8014008 <_puts_r+0x1c>
 8014002:	4628      	mov	r0, r5
 8014004:	f000 fa16 	bl	8014434 <__sinit>
 8014008:	4b23      	ldr	r3, [pc, #140]	; (8014098 <_puts_r+0xac>)
 801400a:	429c      	cmp	r4, r3
 801400c:	d117      	bne.n	801403e <_puts_r+0x52>
 801400e:	686c      	ldr	r4, [r5, #4]
 8014010:	89a3      	ldrh	r3, [r4, #12]
 8014012:	071b      	lsls	r3, r3, #28
 8014014:	d51d      	bpl.n	8014052 <_puts_r+0x66>
 8014016:	6923      	ldr	r3, [r4, #16]
 8014018:	b1db      	cbz	r3, 8014052 <_puts_r+0x66>
 801401a:	3e01      	subs	r6, #1
 801401c:	68a3      	ldr	r3, [r4, #8]
 801401e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8014022:	3b01      	subs	r3, #1
 8014024:	60a3      	str	r3, [r4, #8]
 8014026:	b9e9      	cbnz	r1, 8014064 <_puts_r+0x78>
 8014028:	2b00      	cmp	r3, #0
 801402a:	da2e      	bge.n	801408a <_puts_r+0x9e>
 801402c:	4622      	mov	r2, r4
 801402e:	210a      	movs	r1, #10
 8014030:	4628      	mov	r0, r5
 8014032:	f000 f84f 	bl	80140d4 <__swbuf_r>
 8014036:	3001      	adds	r0, #1
 8014038:	d011      	beq.n	801405e <_puts_r+0x72>
 801403a:	200a      	movs	r0, #10
 801403c:	e011      	b.n	8014062 <_puts_r+0x76>
 801403e:	4b17      	ldr	r3, [pc, #92]	; (801409c <_puts_r+0xb0>)
 8014040:	429c      	cmp	r4, r3
 8014042:	d101      	bne.n	8014048 <_puts_r+0x5c>
 8014044:	68ac      	ldr	r4, [r5, #8]
 8014046:	e7e3      	b.n	8014010 <_puts_r+0x24>
 8014048:	4b15      	ldr	r3, [pc, #84]	; (80140a0 <_puts_r+0xb4>)
 801404a:	429c      	cmp	r4, r3
 801404c:	bf08      	it	eq
 801404e:	68ec      	ldreq	r4, [r5, #12]
 8014050:	e7de      	b.n	8014010 <_puts_r+0x24>
 8014052:	4621      	mov	r1, r4
 8014054:	4628      	mov	r0, r5
 8014056:	f000 f88f 	bl	8014178 <__swsetup_r>
 801405a:	2800      	cmp	r0, #0
 801405c:	d0dd      	beq.n	801401a <_puts_r+0x2e>
 801405e:	f04f 30ff 	mov.w	r0, #4294967295
 8014062:	bd70      	pop	{r4, r5, r6, pc}
 8014064:	2b00      	cmp	r3, #0
 8014066:	da04      	bge.n	8014072 <_puts_r+0x86>
 8014068:	69a2      	ldr	r2, [r4, #24]
 801406a:	429a      	cmp	r2, r3
 801406c:	dc06      	bgt.n	801407c <_puts_r+0x90>
 801406e:	290a      	cmp	r1, #10
 8014070:	d004      	beq.n	801407c <_puts_r+0x90>
 8014072:	6823      	ldr	r3, [r4, #0]
 8014074:	1c5a      	adds	r2, r3, #1
 8014076:	6022      	str	r2, [r4, #0]
 8014078:	7019      	strb	r1, [r3, #0]
 801407a:	e7cf      	b.n	801401c <_puts_r+0x30>
 801407c:	4622      	mov	r2, r4
 801407e:	4628      	mov	r0, r5
 8014080:	f000 f828 	bl	80140d4 <__swbuf_r>
 8014084:	3001      	adds	r0, #1
 8014086:	d1c9      	bne.n	801401c <_puts_r+0x30>
 8014088:	e7e9      	b.n	801405e <_puts_r+0x72>
 801408a:	6823      	ldr	r3, [r4, #0]
 801408c:	200a      	movs	r0, #10
 801408e:	1c5a      	adds	r2, r3, #1
 8014090:	6022      	str	r2, [r4, #0]
 8014092:	7018      	strb	r0, [r3, #0]
 8014094:	e7e5      	b.n	8014062 <_puts_r+0x76>
 8014096:	bf00      	nop
 8014098:	08016e8c 	.word	0x08016e8c
 801409c:	08016eac 	.word	0x08016eac
 80140a0:	08016e6c 	.word	0x08016e6c

080140a4 <puts>:
 80140a4:	4b02      	ldr	r3, [pc, #8]	; (80140b0 <puts+0xc>)
 80140a6:	4601      	mov	r1, r0
 80140a8:	6818      	ldr	r0, [r3, #0]
 80140aa:	f7ff bf9f 	b.w	8013fec <_puts_r>
 80140ae:	bf00      	nop
 80140b0:	2000019c 	.word	0x2000019c

080140b4 <_sbrk_r>:
 80140b4:	b538      	push	{r3, r4, r5, lr}
 80140b6:	4c06      	ldr	r4, [pc, #24]	; (80140d0 <_sbrk_r+0x1c>)
 80140b8:	2300      	movs	r3, #0
 80140ba:	4605      	mov	r5, r0
 80140bc:	4608      	mov	r0, r1
 80140be:	6023      	str	r3, [r4, #0]
 80140c0:	f7fe ff26 	bl	8012f10 <_sbrk>
 80140c4:	1c43      	adds	r3, r0, #1
 80140c6:	d102      	bne.n	80140ce <_sbrk_r+0x1a>
 80140c8:	6823      	ldr	r3, [r4, #0]
 80140ca:	b103      	cbz	r3, 80140ce <_sbrk_r+0x1a>
 80140cc:	602b      	str	r3, [r5, #0]
 80140ce:	bd38      	pop	{r3, r4, r5, pc}
 80140d0:	20004d50 	.word	0x20004d50

080140d4 <__swbuf_r>:
 80140d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80140d6:	460e      	mov	r6, r1
 80140d8:	4614      	mov	r4, r2
 80140da:	4605      	mov	r5, r0
 80140dc:	b118      	cbz	r0, 80140e6 <__swbuf_r+0x12>
 80140de:	6983      	ldr	r3, [r0, #24]
 80140e0:	b90b      	cbnz	r3, 80140e6 <__swbuf_r+0x12>
 80140e2:	f000 f9a7 	bl	8014434 <__sinit>
 80140e6:	4b21      	ldr	r3, [pc, #132]	; (801416c <__swbuf_r+0x98>)
 80140e8:	429c      	cmp	r4, r3
 80140ea:	d12a      	bne.n	8014142 <__swbuf_r+0x6e>
 80140ec:	686c      	ldr	r4, [r5, #4]
 80140ee:	69a3      	ldr	r3, [r4, #24]
 80140f0:	60a3      	str	r3, [r4, #8]
 80140f2:	89a3      	ldrh	r3, [r4, #12]
 80140f4:	071a      	lsls	r2, r3, #28
 80140f6:	d52e      	bpl.n	8014156 <__swbuf_r+0x82>
 80140f8:	6923      	ldr	r3, [r4, #16]
 80140fa:	b363      	cbz	r3, 8014156 <__swbuf_r+0x82>
 80140fc:	6923      	ldr	r3, [r4, #16]
 80140fe:	6820      	ldr	r0, [r4, #0]
 8014100:	1ac0      	subs	r0, r0, r3
 8014102:	6963      	ldr	r3, [r4, #20]
 8014104:	b2f6      	uxtb	r6, r6
 8014106:	4283      	cmp	r3, r0
 8014108:	4637      	mov	r7, r6
 801410a:	dc04      	bgt.n	8014116 <__swbuf_r+0x42>
 801410c:	4621      	mov	r1, r4
 801410e:	4628      	mov	r0, r5
 8014110:	f000 f926 	bl	8014360 <_fflush_r>
 8014114:	bb28      	cbnz	r0, 8014162 <__swbuf_r+0x8e>
 8014116:	68a3      	ldr	r3, [r4, #8]
 8014118:	3b01      	subs	r3, #1
 801411a:	60a3      	str	r3, [r4, #8]
 801411c:	6823      	ldr	r3, [r4, #0]
 801411e:	1c5a      	adds	r2, r3, #1
 8014120:	6022      	str	r2, [r4, #0]
 8014122:	701e      	strb	r6, [r3, #0]
 8014124:	6963      	ldr	r3, [r4, #20]
 8014126:	3001      	adds	r0, #1
 8014128:	4283      	cmp	r3, r0
 801412a:	d004      	beq.n	8014136 <__swbuf_r+0x62>
 801412c:	89a3      	ldrh	r3, [r4, #12]
 801412e:	07db      	lsls	r3, r3, #31
 8014130:	d519      	bpl.n	8014166 <__swbuf_r+0x92>
 8014132:	2e0a      	cmp	r6, #10
 8014134:	d117      	bne.n	8014166 <__swbuf_r+0x92>
 8014136:	4621      	mov	r1, r4
 8014138:	4628      	mov	r0, r5
 801413a:	f000 f911 	bl	8014360 <_fflush_r>
 801413e:	b190      	cbz	r0, 8014166 <__swbuf_r+0x92>
 8014140:	e00f      	b.n	8014162 <__swbuf_r+0x8e>
 8014142:	4b0b      	ldr	r3, [pc, #44]	; (8014170 <__swbuf_r+0x9c>)
 8014144:	429c      	cmp	r4, r3
 8014146:	d101      	bne.n	801414c <__swbuf_r+0x78>
 8014148:	68ac      	ldr	r4, [r5, #8]
 801414a:	e7d0      	b.n	80140ee <__swbuf_r+0x1a>
 801414c:	4b09      	ldr	r3, [pc, #36]	; (8014174 <__swbuf_r+0xa0>)
 801414e:	429c      	cmp	r4, r3
 8014150:	bf08      	it	eq
 8014152:	68ec      	ldreq	r4, [r5, #12]
 8014154:	e7cb      	b.n	80140ee <__swbuf_r+0x1a>
 8014156:	4621      	mov	r1, r4
 8014158:	4628      	mov	r0, r5
 801415a:	f000 f80d 	bl	8014178 <__swsetup_r>
 801415e:	2800      	cmp	r0, #0
 8014160:	d0cc      	beq.n	80140fc <__swbuf_r+0x28>
 8014162:	f04f 37ff 	mov.w	r7, #4294967295
 8014166:	4638      	mov	r0, r7
 8014168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801416a:	bf00      	nop
 801416c:	08016e8c 	.word	0x08016e8c
 8014170:	08016eac 	.word	0x08016eac
 8014174:	08016e6c 	.word	0x08016e6c

08014178 <__swsetup_r>:
 8014178:	4b32      	ldr	r3, [pc, #200]	; (8014244 <__swsetup_r+0xcc>)
 801417a:	b570      	push	{r4, r5, r6, lr}
 801417c:	681d      	ldr	r5, [r3, #0]
 801417e:	4606      	mov	r6, r0
 8014180:	460c      	mov	r4, r1
 8014182:	b125      	cbz	r5, 801418e <__swsetup_r+0x16>
 8014184:	69ab      	ldr	r3, [r5, #24]
 8014186:	b913      	cbnz	r3, 801418e <__swsetup_r+0x16>
 8014188:	4628      	mov	r0, r5
 801418a:	f000 f953 	bl	8014434 <__sinit>
 801418e:	4b2e      	ldr	r3, [pc, #184]	; (8014248 <__swsetup_r+0xd0>)
 8014190:	429c      	cmp	r4, r3
 8014192:	d10f      	bne.n	80141b4 <__swsetup_r+0x3c>
 8014194:	686c      	ldr	r4, [r5, #4]
 8014196:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801419a:	b29a      	uxth	r2, r3
 801419c:	0715      	lsls	r5, r2, #28
 801419e:	d42c      	bmi.n	80141fa <__swsetup_r+0x82>
 80141a0:	06d0      	lsls	r0, r2, #27
 80141a2:	d411      	bmi.n	80141c8 <__swsetup_r+0x50>
 80141a4:	2209      	movs	r2, #9
 80141a6:	6032      	str	r2, [r6, #0]
 80141a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80141ac:	81a3      	strh	r3, [r4, #12]
 80141ae:	f04f 30ff 	mov.w	r0, #4294967295
 80141b2:	e03e      	b.n	8014232 <__swsetup_r+0xba>
 80141b4:	4b25      	ldr	r3, [pc, #148]	; (801424c <__swsetup_r+0xd4>)
 80141b6:	429c      	cmp	r4, r3
 80141b8:	d101      	bne.n	80141be <__swsetup_r+0x46>
 80141ba:	68ac      	ldr	r4, [r5, #8]
 80141bc:	e7eb      	b.n	8014196 <__swsetup_r+0x1e>
 80141be:	4b24      	ldr	r3, [pc, #144]	; (8014250 <__swsetup_r+0xd8>)
 80141c0:	429c      	cmp	r4, r3
 80141c2:	bf08      	it	eq
 80141c4:	68ec      	ldreq	r4, [r5, #12]
 80141c6:	e7e6      	b.n	8014196 <__swsetup_r+0x1e>
 80141c8:	0751      	lsls	r1, r2, #29
 80141ca:	d512      	bpl.n	80141f2 <__swsetup_r+0x7a>
 80141cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80141ce:	b141      	cbz	r1, 80141e2 <__swsetup_r+0x6a>
 80141d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80141d4:	4299      	cmp	r1, r3
 80141d6:	d002      	beq.n	80141de <__swsetup_r+0x66>
 80141d8:	4630      	mov	r0, r6
 80141da:	f7ff fe47 	bl	8013e6c <_free_r>
 80141de:	2300      	movs	r3, #0
 80141e0:	6363      	str	r3, [r4, #52]	; 0x34
 80141e2:	89a3      	ldrh	r3, [r4, #12]
 80141e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80141e8:	81a3      	strh	r3, [r4, #12]
 80141ea:	2300      	movs	r3, #0
 80141ec:	6063      	str	r3, [r4, #4]
 80141ee:	6923      	ldr	r3, [r4, #16]
 80141f0:	6023      	str	r3, [r4, #0]
 80141f2:	89a3      	ldrh	r3, [r4, #12]
 80141f4:	f043 0308 	orr.w	r3, r3, #8
 80141f8:	81a3      	strh	r3, [r4, #12]
 80141fa:	6923      	ldr	r3, [r4, #16]
 80141fc:	b94b      	cbnz	r3, 8014212 <__swsetup_r+0x9a>
 80141fe:	89a3      	ldrh	r3, [r4, #12]
 8014200:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014204:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014208:	d003      	beq.n	8014212 <__swsetup_r+0x9a>
 801420a:	4621      	mov	r1, r4
 801420c:	4630      	mov	r0, r6
 801420e:	f000 f9bf 	bl	8014590 <__smakebuf_r>
 8014212:	89a2      	ldrh	r2, [r4, #12]
 8014214:	f012 0301 	ands.w	r3, r2, #1
 8014218:	d00c      	beq.n	8014234 <__swsetup_r+0xbc>
 801421a:	2300      	movs	r3, #0
 801421c:	60a3      	str	r3, [r4, #8]
 801421e:	6963      	ldr	r3, [r4, #20]
 8014220:	425b      	negs	r3, r3
 8014222:	61a3      	str	r3, [r4, #24]
 8014224:	6923      	ldr	r3, [r4, #16]
 8014226:	b953      	cbnz	r3, 801423e <__swsetup_r+0xc6>
 8014228:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801422c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8014230:	d1ba      	bne.n	80141a8 <__swsetup_r+0x30>
 8014232:	bd70      	pop	{r4, r5, r6, pc}
 8014234:	0792      	lsls	r2, r2, #30
 8014236:	bf58      	it	pl
 8014238:	6963      	ldrpl	r3, [r4, #20]
 801423a:	60a3      	str	r3, [r4, #8]
 801423c:	e7f2      	b.n	8014224 <__swsetup_r+0xac>
 801423e:	2000      	movs	r0, #0
 8014240:	e7f7      	b.n	8014232 <__swsetup_r+0xba>
 8014242:	bf00      	nop
 8014244:	2000019c 	.word	0x2000019c
 8014248:	08016e8c 	.word	0x08016e8c
 801424c:	08016eac 	.word	0x08016eac
 8014250:	08016e6c 	.word	0x08016e6c

08014254 <__sflush_r>:
 8014254:	898a      	ldrh	r2, [r1, #12]
 8014256:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801425a:	4605      	mov	r5, r0
 801425c:	0710      	lsls	r0, r2, #28
 801425e:	460c      	mov	r4, r1
 8014260:	d458      	bmi.n	8014314 <__sflush_r+0xc0>
 8014262:	684b      	ldr	r3, [r1, #4]
 8014264:	2b00      	cmp	r3, #0
 8014266:	dc05      	bgt.n	8014274 <__sflush_r+0x20>
 8014268:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801426a:	2b00      	cmp	r3, #0
 801426c:	dc02      	bgt.n	8014274 <__sflush_r+0x20>
 801426e:	2000      	movs	r0, #0
 8014270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014274:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014276:	2e00      	cmp	r6, #0
 8014278:	d0f9      	beq.n	801426e <__sflush_r+0x1a>
 801427a:	2300      	movs	r3, #0
 801427c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014280:	682f      	ldr	r7, [r5, #0]
 8014282:	6a21      	ldr	r1, [r4, #32]
 8014284:	602b      	str	r3, [r5, #0]
 8014286:	d032      	beq.n	80142ee <__sflush_r+0x9a>
 8014288:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801428a:	89a3      	ldrh	r3, [r4, #12]
 801428c:	075a      	lsls	r2, r3, #29
 801428e:	d505      	bpl.n	801429c <__sflush_r+0x48>
 8014290:	6863      	ldr	r3, [r4, #4]
 8014292:	1ac0      	subs	r0, r0, r3
 8014294:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014296:	b10b      	cbz	r3, 801429c <__sflush_r+0x48>
 8014298:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801429a:	1ac0      	subs	r0, r0, r3
 801429c:	2300      	movs	r3, #0
 801429e:	4602      	mov	r2, r0
 80142a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80142a2:	6a21      	ldr	r1, [r4, #32]
 80142a4:	4628      	mov	r0, r5
 80142a6:	47b0      	blx	r6
 80142a8:	1c43      	adds	r3, r0, #1
 80142aa:	89a3      	ldrh	r3, [r4, #12]
 80142ac:	d106      	bne.n	80142bc <__sflush_r+0x68>
 80142ae:	6829      	ldr	r1, [r5, #0]
 80142b0:	291d      	cmp	r1, #29
 80142b2:	d848      	bhi.n	8014346 <__sflush_r+0xf2>
 80142b4:	4a29      	ldr	r2, [pc, #164]	; (801435c <__sflush_r+0x108>)
 80142b6:	40ca      	lsrs	r2, r1
 80142b8:	07d6      	lsls	r6, r2, #31
 80142ba:	d544      	bpl.n	8014346 <__sflush_r+0xf2>
 80142bc:	2200      	movs	r2, #0
 80142be:	6062      	str	r2, [r4, #4]
 80142c0:	04d9      	lsls	r1, r3, #19
 80142c2:	6922      	ldr	r2, [r4, #16]
 80142c4:	6022      	str	r2, [r4, #0]
 80142c6:	d504      	bpl.n	80142d2 <__sflush_r+0x7e>
 80142c8:	1c42      	adds	r2, r0, #1
 80142ca:	d101      	bne.n	80142d0 <__sflush_r+0x7c>
 80142cc:	682b      	ldr	r3, [r5, #0]
 80142ce:	b903      	cbnz	r3, 80142d2 <__sflush_r+0x7e>
 80142d0:	6560      	str	r0, [r4, #84]	; 0x54
 80142d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80142d4:	602f      	str	r7, [r5, #0]
 80142d6:	2900      	cmp	r1, #0
 80142d8:	d0c9      	beq.n	801426e <__sflush_r+0x1a>
 80142da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80142de:	4299      	cmp	r1, r3
 80142e0:	d002      	beq.n	80142e8 <__sflush_r+0x94>
 80142e2:	4628      	mov	r0, r5
 80142e4:	f7ff fdc2 	bl	8013e6c <_free_r>
 80142e8:	2000      	movs	r0, #0
 80142ea:	6360      	str	r0, [r4, #52]	; 0x34
 80142ec:	e7c0      	b.n	8014270 <__sflush_r+0x1c>
 80142ee:	2301      	movs	r3, #1
 80142f0:	4628      	mov	r0, r5
 80142f2:	47b0      	blx	r6
 80142f4:	1c41      	adds	r1, r0, #1
 80142f6:	d1c8      	bne.n	801428a <__sflush_r+0x36>
 80142f8:	682b      	ldr	r3, [r5, #0]
 80142fa:	2b00      	cmp	r3, #0
 80142fc:	d0c5      	beq.n	801428a <__sflush_r+0x36>
 80142fe:	2b1d      	cmp	r3, #29
 8014300:	d001      	beq.n	8014306 <__sflush_r+0xb2>
 8014302:	2b16      	cmp	r3, #22
 8014304:	d101      	bne.n	801430a <__sflush_r+0xb6>
 8014306:	602f      	str	r7, [r5, #0]
 8014308:	e7b1      	b.n	801426e <__sflush_r+0x1a>
 801430a:	89a3      	ldrh	r3, [r4, #12]
 801430c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014310:	81a3      	strh	r3, [r4, #12]
 8014312:	e7ad      	b.n	8014270 <__sflush_r+0x1c>
 8014314:	690f      	ldr	r7, [r1, #16]
 8014316:	2f00      	cmp	r7, #0
 8014318:	d0a9      	beq.n	801426e <__sflush_r+0x1a>
 801431a:	0793      	lsls	r3, r2, #30
 801431c:	680e      	ldr	r6, [r1, #0]
 801431e:	bf08      	it	eq
 8014320:	694b      	ldreq	r3, [r1, #20]
 8014322:	600f      	str	r7, [r1, #0]
 8014324:	bf18      	it	ne
 8014326:	2300      	movne	r3, #0
 8014328:	eba6 0807 	sub.w	r8, r6, r7
 801432c:	608b      	str	r3, [r1, #8]
 801432e:	f1b8 0f00 	cmp.w	r8, #0
 8014332:	dd9c      	ble.n	801426e <__sflush_r+0x1a>
 8014334:	4643      	mov	r3, r8
 8014336:	463a      	mov	r2, r7
 8014338:	6a21      	ldr	r1, [r4, #32]
 801433a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801433c:	4628      	mov	r0, r5
 801433e:	47b0      	blx	r6
 8014340:	2800      	cmp	r0, #0
 8014342:	dc06      	bgt.n	8014352 <__sflush_r+0xfe>
 8014344:	89a3      	ldrh	r3, [r4, #12]
 8014346:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801434a:	81a3      	strh	r3, [r4, #12]
 801434c:	f04f 30ff 	mov.w	r0, #4294967295
 8014350:	e78e      	b.n	8014270 <__sflush_r+0x1c>
 8014352:	4407      	add	r7, r0
 8014354:	eba8 0800 	sub.w	r8, r8, r0
 8014358:	e7e9      	b.n	801432e <__sflush_r+0xda>
 801435a:	bf00      	nop
 801435c:	20400001 	.word	0x20400001

08014360 <_fflush_r>:
 8014360:	b538      	push	{r3, r4, r5, lr}
 8014362:	690b      	ldr	r3, [r1, #16]
 8014364:	4605      	mov	r5, r0
 8014366:	460c      	mov	r4, r1
 8014368:	b1db      	cbz	r3, 80143a2 <_fflush_r+0x42>
 801436a:	b118      	cbz	r0, 8014374 <_fflush_r+0x14>
 801436c:	6983      	ldr	r3, [r0, #24]
 801436e:	b90b      	cbnz	r3, 8014374 <_fflush_r+0x14>
 8014370:	f000 f860 	bl	8014434 <__sinit>
 8014374:	4b0c      	ldr	r3, [pc, #48]	; (80143a8 <_fflush_r+0x48>)
 8014376:	429c      	cmp	r4, r3
 8014378:	d109      	bne.n	801438e <_fflush_r+0x2e>
 801437a:	686c      	ldr	r4, [r5, #4]
 801437c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014380:	b17b      	cbz	r3, 80143a2 <_fflush_r+0x42>
 8014382:	4621      	mov	r1, r4
 8014384:	4628      	mov	r0, r5
 8014386:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801438a:	f7ff bf63 	b.w	8014254 <__sflush_r>
 801438e:	4b07      	ldr	r3, [pc, #28]	; (80143ac <_fflush_r+0x4c>)
 8014390:	429c      	cmp	r4, r3
 8014392:	d101      	bne.n	8014398 <_fflush_r+0x38>
 8014394:	68ac      	ldr	r4, [r5, #8]
 8014396:	e7f1      	b.n	801437c <_fflush_r+0x1c>
 8014398:	4b05      	ldr	r3, [pc, #20]	; (80143b0 <_fflush_r+0x50>)
 801439a:	429c      	cmp	r4, r3
 801439c:	bf08      	it	eq
 801439e:	68ec      	ldreq	r4, [r5, #12]
 80143a0:	e7ec      	b.n	801437c <_fflush_r+0x1c>
 80143a2:	2000      	movs	r0, #0
 80143a4:	bd38      	pop	{r3, r4, r5, pc}
 80143a6:	bf00      	nop
 80143a8:	08016e8c 	.word	0x08016e8c
 80143ac:	08016eac 	.word	0x08016eac
 80143b0:	08016e6c 	.word	0x08016e6c

080143b4 <std>:
 80143b4:	2300      	movs	r3, #0
 80143b6:	b510      	push	{r4, lr}
 80143b8:	4604      	mov	r4, r0
 80143ba:	e9c0 3300 	strd	r3, r3, [r0]
 80143be:	6083      	str	r3, [r0, #8]
 80143c0:	8181      	strh	r1, [r0, #12]
 80143c2:	6643      	str	r3, [r0, #100]	; 0x64
 80143c4:	81c2      	strh	r2, [r0, #14]
 80143c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80143ca:	6183      	str	r3, [r0, #24]
 80143cc:	4619      	mov	r1, r3
 80143ce:	2208      	movs	r2, #8
 80143d0:	305c      	adds	r0, #92	; 0x5c
 80143d2:	f7ff fd43 	bl	8013e5c <memset>
 80143d6:	4b05      	ldr	r3, [pc, #20]	; (80143ec <std+0x38>)
 80143d8:	6263      	str	r3, [r4, #36]	; 0x24
 80143da:	4b05      	ldr	r3, [pc, #20]	; (80143f0 <std+0x3c>)
 80143dc:	62a3      	str	r3, [r4, #40]	; 0x28
 80143de:	4b05      	ldr	r3, [pc, #20]	; (80143f4 <std+0x40>)
 80143e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80143e2:	4b05      	ldr	r3, [pc, #20]	; (80143f8 <std+0x44>)
 80143e4:	6224      	str	r4, [r4, #32]
 80143e6:	6323      	str	r3, [r4, #48]	; 0x30
 80143e8:	bd10      	pop	{r4, pc}
 80143ea:	bf00      	nop
 80143ec:	08014ba5 	.word	0x08014ba5
 80143f0:	08014bc7 	.word	0x08014bc7
 80143f4:	08014bff 	.word	0x08014bff
 80143f8:	08014c23 	.word	0x08014c23

080143fc <_cleanup_r>:
 80143fc:	4901      	ldr	r1, [pc, #4]	; (8014404 <_cleanup_r+0x8>)
 80143fe:	f000 b885 	b.w	801450c <_fwalk_reent>
 8014402:	bf00      	nop
 8014404:	08014361 	.word	0x08014361

08014408 <__sfmoreglue>:
 8014408:	b570      	push	{r4, r5, r6, lr}
 801440a:	1e4a      	subs	r2, r1, #1
 801440c:	2568      	movs	r5, #104	; 0x68
 801440e:	4355      	muls	r5, r2
 8014410:	460e      	mov	r6, r1
 8014412:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8014416:	f7ff fd77 	bl	8013f08 <_malloc_r>
 801441a:	4604      	mov	r4, r0
 801441c:	b140      	cbz	r0, 8014430 <__sfmoreglue+0x28>
 801441e:	2100      	movs	r1, #0
 8014420:	e9c0 1600 	strd	r1, r6, [r0]
 8014424:	300c      	adds	r0, #12
 8014426:	60a0      	str	r0, [r4, #8]
 8014428:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801442c:	f7ff fd16 	bl	8013e5c <memset>
 8014430:	4620      	mov	r0, r4
 8014432:	bd70      	pop	{r4, r5, r6, pc}

08014434 <__sinit>:
 8014434:	6983      	ldr	r3, [r0, #24]
 8014436:	b510      	push	{r4, lr}
 8014438:	4604      	mov	r4, r0
 801443a:	bb33      	cbnz	r3, 801448a <__sinit+0x56>
 801443c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8014440:	6503      	str	r3, [r0, #80]	; 0x50
 8014442:	4b12      	ldr	r3, [pc, #72]	; (801448c <__sinit+0x58>)
 8014444:	4a12      	ldr	r2, [pc, #72]	; (8014490 <__sinit+0x5c>)
 8014446:	681b      	ldr	r3, [r3, #0]
 8014448:	6282      	str	r2, [r0, #40]	; 0x28
 801444a:	4298      	cmp	r0, r3
 801444c:	bf04      	itt	eq
 801444e:	2301      	moveq	r3, #1
 8014450:	6183      	streq	r3, [r0, #24]
 8014452:	f000 f81f 	bl	8014494 <__sfp>
 8014456:	6060      	str	r0, [r4, #4]
 8014458:	4620      	mov	r0, r4
 801445a:	f000 f81b 	bl	8014494 <__sfp>
 801445e:	60a0      	str	r0, [r4, #8]
 8014460:	4620      	mov	r0, r4
 8014462:	f000 f817 	bl	8014494 <__sfp>
 8014466:	2200      	movs	r2, #0
 8014468:	60e0      	str	r0, [r4, #12]
 801446a:	2104      	movs	r1, #4
 801446c:	6860      	ldr	r0, [r4, #4]
 801446e:	f7ff ffa1 	bl	80143b4 <std>
 8014472:	2201      	movs	r2, #1
 8014474:	2109      	movs	r1, #9
 8014476:	68a0      	ldr	r0, [r4, #8]
 8014478:	f7ff ff9c 	bl	80143b4 <std>
 801447c:	2202      	movs	r2, #2
 801447e:	2112      	movs	r1, #18
 8014480:	68e0      	ldr	r0, [r4, #12]
 8014482:	f7ff ff97 	bl	80143b4 <std>
 8014486:	2301      	movs	r3, #1
 8014488:	61a3      	str	r3, [r4, #24]
 801448a:	bd10      	pop	{r4, pc}
 801448c:	08016e68 	.word	0x08016e68
 8014490:	080143fd 	.word	0x080143fd

08014494 <__sfp>:
 8014494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014496:	4b1b      	ldr	r3, [pc, #108]	; (8014504 <__sfp+0x70>)
 8014498:	681e      	ldr	r6, [r3, #0]
 801449a:	69b3      	ldr	r3, [r6, #24]
 801449c:	4607      	mov	r7, r0
 801449e:	b913      	cbnz	r3, 80144a6 <__sfp+0x12>
 80144a0:	4630      	mov	r0, r6
 80144a2:	f7ff ffc7 	bl	8014434 <__sinit>
 80144a6:	3648      	adds	r6, #72	; 0x48
 80144a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80144ac:	3b01      	subs	r3, #1
 80144ae:	d503      	bpl.n	80144b8 <__sfp+0x24>
 80144b0:	6833      	ldr	r3, [r6, #0]
 80144b2:	b133      	cbz	r3, 80144c2 <__sfp+0x2e>
 80144b4:	6836      	ldr	r6, [r6, #0]
 80144b6:	e7f7      	b.n	80144a8 <__sfp+0x14>
 80144b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80144bc:	b16d      	cbz	r5, 80144da <__sfp+0x46>
 80144be:	3468      	adds	r4, #104	; 0x68
 80144c0:	e7f4      	b.n	80144ac <__sfp+0x18>
 80144c2:	2104      	movs	r1, #4
 80144c4:	4638      	mov	r0, r7
 80144c6:	f7ff ff9f 	bl	8014408 <__sfmoreglue>
 80144ca:	6030      	str	r0, [r6, #0]
 80144cc:	2800      	cmp	r0, #0
 80144ce:	d1f1      	bne.n	80144b4 <__sfp+0x20>
 80144d0:	230c      	movs	r3, #12
 80144d2:	603b      	str	r3, [r7, #0]
 80144d4:	4604      	mov	r4, r0
 80144d6:	4620      	mov	r0, r4
 80144d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80144da:	4b0b      	ldr	r3, [pc, #44]	; (8014508 <__sfp+0x74>)
 80144dc:	6665      	str	r5, [r4, #100]	; 0x64
 80144de:	e9c4 5500 	strd	r5, r5, [r4]
 80144e2:	60a5      	str	r5, [r4, #8]
 80144e4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80144e8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80144ec:	2208      	movs	r2, #8
 80144ee:	4629      	mov	r1, r5
 80144f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80144f4:	f7ff fcb2 	bl	8013e5c <memset>
 80144f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80144fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8014500:	e7e9      	b.n	80144d6 <__sfp+0x42>
 8014502:	bf00      	nop
 8014504:	08016e68 	.word	0x08016e68
 8014508:	ffff0001 	.word	0xffff0001

0801450c <_fwalk_reent>:
 801450c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014510:	4680      	mov	r8, r0
 8014512:	4689      	mov	r9, r1
 8014514:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014518:	2600      	movs	r6, #0
 801451a:	b914      	cbnz	r4, 8014522 <_fwalk_reent+0x16>
 801451c:	4630      	mov	r0, r6
 801451e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014522:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8014526:	3f01      	subs	r7, #1
 8014528:	d501      	bpl.n	801452e <_fwalk_reent+0x22>
 801452a:	6824      	ldr	r4, [r4, #0]
 801452c:	e7f5      	b.n	801451a <_fwalk_reent+0xe>
 801452e:	89ab      	ldrh	r3, [r5, #12]
 8014530:	2b01      	cmp	r3, #1
 8014532:	d907      	bls.n	8014544 <_fwalk_reent+0x38>
 8014534:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014538:	3301      	adds	r3, #1
 801453a:	d003      	beq.n	8014544 <_fwalk_reent+0x38>
 801453c:	4629      	mov	r1, r5
 801453e:	4640      	mov	r0, r8
 8014540:	47c8      	blx	r9
 8014542:	4306      	orrs	r6, r0
 8014544:	3568      	adds	r5, #104	; 0x68
 8014546:	e7ee      	b.n	8014526 <_fwalk_reent+0x1a>

08014548 <__swhatbuf_r>:
 8014548:	b570      	push	{r4, r5, r6, lr}
 801454a:	460e      	mov	r6, r1
 801454c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014550:	2900      	cmp	r1, #0
 8014552:	b096      	sub	sp, #88	; 0x58
 8014554:	4614      	mov	r4, r2
 8014556:	461d      	mov	r5, r3
 8014558:	da07      	bge.n	801456a <__swhatbuf_r+0x22>
 801455a:	2300      	movs	r3, #0
 801455c:	602b      	str	r3, [r5, #0]
 801455e:	89b3      	ldrh	r3, [r6, #12]
 8014560:	061a      	lsls	r2, r3, #24
 8014562:	d410      	bmi.n	8014586 <__swhatbuf_r+0x3e>
 8014564:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014568:	e00e      	b.n	8014588 <__swhatbuf_r+0x40>
 801456a:	466a      	mov	r2, sp
 801456c:	f000 fb80 	bl	8014c70 <_fstat_r>
 8014570:	2800      	cmp	r0, #0
 8014572:	dbf2      	blt.n	801455a <__swhatbuf_r+0x12>
 8014574:	9a01      	ldr	r2, [sp, #4]
 8014576:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801457a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801457e:	425a      	negs	r2, r3
 8014580:	415a      	adcs	r2, r3
 8014582:	602a      	str	r2, [r5, #0]
 8014584:	e7ee      	b.n	8014564 <__swhatbuf_r+0x1c>
 8014586:	2340      	movs	r3, #64	; 0x40
 8014588:	2000      	movs	r0, #0
 801458a:	6023      	str	r3, [r4, #0]
 801458c:	b016      	add	sp, #88	; 0x58
 801458e:	bd70      	pop	{r4, r5, r6, pc}

08014590 <__smakebuf_r>:
 8014590:	898b      	ldrh	r3, [r1, #12]
 8014592:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014594:	079d      	lsls	r5, r3, #30
 8014596:	4606      	mov	r6, r0
 8014598:	460c      	mov	r4, r1
 801459a:	d507      	bpl.n	80145ac <__smakebuf_r+0x1c>
 801459c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80145a0:	6023      	str	r3, [r4, #0]
 80145a2:	6123      	str	r3, [r4, #16]
 80145a4:	2301      	movs	r3, #1
 80145a6:	6163      	str	r3, [r4, #20]
 80145a8:	b002      	add	sp, #8
 80145aa:	bd70      	pop	{r4, r5, r6, pc}
 80145ac:	ab01      	add	r3, sp, #4
 80145ae:	466a      	mov	r2, sp
 80145b0:	f7ff ffca 	bl	8014548 <__swhatbuf_r>
 80145b4:	9900      	ldr	r1, [sp, #0]
 80145b6:	4605      	mov	r5, r0
 80145b8:	4630      	mov	r0, r6
 80145ba:	f7ff fca5 	bl	8013f08 <_malloc_r>
 80145be:	b948      	cbnz	r0, 80145d4 <__smakebuf_r+0x44>
 80145c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80145c4:	059a      	lsls	r2, r3, #22
 80145c6:	d4ef      	bmi.n	80145a8 <__smakebuf_r+0x18>
 80145c8:	f023 0303 	bic.w	r3, r3, #3
 80145cc:	f043 0302 	orr.w	r3, r3, #2
 80145d0:	81a3      	strh	r3, [r4, #12]
 80145d2:	e7e3      	b.n	801459c <__smakebuf_r+0xc>
 80145d4:	4b0d      	ldr	r3, [pc, #52]	; (801460c <__smakebuf_r+0x7c>)
 80145d6:	62b3      	str	r3, [r6, #40]	; 0x28
 80145d8:	89a3      	ldrh	r3, [r4, #12]
 80145da:	6020      	str	r0, [r4, #0]
 80145dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80145e0:	81a3      	strh	r3, [r4, #12]
 80145e2:	9b00      	ldr	r3, [sp, #0]
 80145e4:	6163      	str	r3, [r4, #20]
 80145e6:	9b01      	ldr	r3, [sp, #4]
 80145e8:	6120      	str	r0, [r4, #16]
 80145ea:	b15b      	cbz	r3, 8014604 <__smakebuf_r+0x74>
 80145ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80145f0:	4630      	mov	r0, r6
 80145f2:	f000 fb4f 	bl	8014c94 <_isatty_r>
 80145f6:	b128      	cbz	r0, 8014604 <__smakebuf_r+0x74>
 80145f8:	89a3      	ldrh	r3, [r4, #12]
 80145fa:	f023 0303 	bic.w	r3, r3, #3
 80145fe:	f043 0301 	orr.w	r3, r3, #1
 8014602:	81a3      	strh	r3, [r4, #12]
 8014604:	89a3      	ldrh	r3, [r4, #12]
 8014606:	431d      	orrs	r5, r3
 8014608:	81a5      	strh	r5, [r4, #12]
 801460a:	e7cd      	b.n	80145a8 <__smakebuf_r+0x18>
 801460c:	080143fd 	.word	0x080143fd

08014610 <__malloc_lock>:
 8014610:	4770      	bx	lr

08014612 <__malloc_unlock>:
 8014612:	4770      	bx	lr

08014614 <__sfputc_r>:
 8014614:	6893      	ldr	r3, [r2, #8]
 8014616:	3b01      	subs	r3, #1
 8014618:	2b00      	cmp	r3, #0
 801461a:	b410      	push	{r4}
 801461c:	6093      	str	r3, [r2, #8]
 801461e:	da08      	bge.n	8014632 <__sfputc_r+0x1e>
 8014620:	6994      	ldr	r4, [r2, #24]
 8014622:	42a3      	cmp	r3, r4
 8014624:	db01      	blt.n	801462a <__sfputc_r+0x16>
 8014626:	290a      	cmp	r1, #10
 8014628:	d103      	bne.n	8014632 <__sfputc_r+0x1e>
 801462a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801462e:	f7ff bd51 	b.w	80140d4 <__swbuf_r>
 8014632:	6813      	ldr	r3, [r2, #0]
 8014634:	1c58      	adds	r0, r3, #1
 8014636:	6010      	str	r0, [r2, #0]
 8014638:	7019      	strb	r1, [r3, #0]
 801463a:	4608      	mov	r0, r1
 801463c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014640:	4770      	bx	lr

08014642 <__sfputs_r>:
 8014642:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014644:	4606      	mov	r6, r0
 8014646:	460f      	mov	r7, r1
 8014648:	4614      	mov	r4, r2
 801464a:	18d5      	adds	r5, r2, r3
 801464c:	42ac      	cmp	r4, r5
 801464e:	d101      	bne.n	8014654 <__sfputs_r+0x12>
 8014650:	2000      	movs	r0, #0
 8014652:	e007      	b.n	8014664 <__sfputs_r+0x22>
 8014654:	463a      	mov	r2, r7
 8014656:	f814 1b01 	ldrb.w	r1, [r4], #1
 801465a:	4630      	mov	r0, r6
 801465c:	f7ff ffda 	bl	8014614 <__sfputc_r>
 8014660:	1c43      	adds	r3, r0, #1
 8014662:	d1f3      	bne.n	801464c <__sfputs_r+0xa>
 8014664:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014668 <_vfiprintf_r>:
 8014668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801466c:	460c      	mov	r4, r1
 801466e:	b09d      	sub	sp, #116	; 0x74
 8014670:	4617      	mov	r7, r2
 8014672:	461d      	mov	r5, r3
 8014674:	4606      	mov	r6, r0
 8014676:	b118      	cbz	r0, 8014680 <_vfiprintf_r+0x18>
 8014678:	6983      	ldr	r3, [r0, #24]
 801467a:	b90b      	cbnz	r3, 8014680 <_vfiprintf_r+0x18>
 801467c:	f7ff feda 	bl	8014434 <__sinit>
 8014680:	4b7c      	ldr	r3, [pc, #496]	; (8014874 <_vfiprintf_r+0x20c>)
 8014682:	429c      	cmp	r4, r3
 8014684:	d158      	bne.n	8014738 <_vfiprintf_r+0xd0>
 8014686:	6874      	ldr	r4, [r6, #4]
 8014688:	89a3      	ldrh	r3, [r4, #12]
 801468a:	0718      	lsls	r0, r3, #28
 801468c:	d55e      	bpl.n	801474c <_vfiprintf_r+0xe4>
 801468e:	6923      	ldr	r3, [r4, #16]
 8014690:	2b00      	cmp	r3, #0
 8014692:	d05b      	beq.n	801474c <_vfiprintf_r+0xe4>
 8014694:	2300      	movs	r3, #0
 8014696:	9309      	str	r3, [sp, #36]	; 0x24
 8014698:	2320      	movs	r3, #32
 801469a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801469e:	2330      	movs	r3, #48	; 0x30
 80146a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80146a4:	9503      	str	r5, [sp, #12]
 80146a6:	f04f 0b01 	mov.w	fp, #1
 80146aa:	46b8      	mov	r8, r7
 80146ac:	4645      	mov	r5, r8
 80146ae:	f815 3b01 	ldrb.w	r3, [r5], #1
 80146b2:	b10b      	cbz	r3, 80146b8 <_vfiprintf_r+0x50>
 80146b4:	2b25      	cmp	r3, #37	; 0x25
 80146b6:	d154      	bne.n	8014762 <_vfiprintf_r+0xfa>
 80146b8:	ebb8 0a07 	subs.w	sl, r8, r7
 80146bc:	d00b      	beq.n	80146d6 <_vfiprintf_r+0x6e>
 80146be:	4653      	mov	r3, sl
 80146c0:	463a      	mov	r2, r7
 80146c2:	4621      	mov	r1, r4
 80146c4:	4630      	mov	r0, r6
 80146c6:	f7ff ffbc 	bl	8014642 <__sfputs_r>
 80146ca:	3001      	adds	r0, #1
 80146cc:	f000 80c2 	beq.w	8014854 <_vfiprintf_r+0x1ec>
 80146d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80146d2:	4453      	add	r3, sl
 80146d4:	9309      	str	r3, [sp, #36]	; 0x24
 80146d6:	f898 3000 	ldrb.w	r3, [r8]
 80146da:	2b00      	cmp	r3, #0
 80146dc:	f000 80ba 	beq.w	8014854 <_vfiprintf_r+0x1ec>
 80146e0:	2300      	movs	r3, #0
 80146e2:	f04f 32ff 	mov.w	r2, #4294967295
 80146e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80146ea:	9304      	str	r3, [sp, #16]
 80146ec:	9307      	str	r3, [sp, #28]
 80146ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80146f2:	931a      	str	r3, [sp, #104]	; 0x68
 80146f4:	46a8      	mov	r8, r5
 80146f6:	2205      	movs	r2, #5
 80146f8:	f818 1b01 	ldrb.w	r1, [r8], #1
 80146fc:	485e      	ldr	r0, [pc, #376]	; (8014878 <_vfiprintf_r+0x210>)
 80146fe:	f7eb fdef 	bl	80002e0 <memchr>
 8014702:	9b04      	ldr	r3, [sp, #16]
 8014704:	bb78      	cbnz	r0, 8014766 <_vfiprintf_r+0xfe>
 8014706:	06d9      	lsls	r1, r3, #27
 8014708:	bf44      	itt	mi
 801470a:	2220      	movmi	r2, #32
 801470c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014710:	071a      	lsls	r2, r3, #28
 8014712:	bf44      	itt	mi
 8014714:	222b      	movmi	r2, #43	; 0x2b
 8014716:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801471a:	782a      	ldrb	r2, [r5, #0]
 801471c:	2a2a      	cmp	r2, #42	; 0x2a
 801471e:	d02a      	beq.n	8014776 <_vfiprintf_r+0x10e>
 8014720:	9a07      	ldr	r2, [sp, #28]
 8014722:	46a8      	mov	r8, r5
 8014724:	2000      	movs	r0, #0
 8014726:	250a      	movs	r5, #10
 8014728:	4641      	mov	r1, r8
 801472a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801472e:	3b30      	subs	r3, #48	; 0x30
 8014730:	2b09      	cmp	r3, #9
 8014732:	d969      	bls.n	8014808 <_vfiprintf_r+0x1a0>
 8014734:	b360      	cbz	r0, 8014790 <_vfiprintf_r+0x128>
 8014736:	e024      	b.n	8014782 <_vfiprintf_r+0x11a>
 8014738:	4b50      	ldr	r3, [pc, #320]	; (801487c <_vfiprintf_r+0x214>)
 801473a:	429c      	cmp	r4, r3
 801473c:	d101      	bne.n	8014742 <_vfiprintf_r+0xda>
 801473e:	68b4      	ldr	r4, [r6, #8]
 8014740:	e7a2      	b.n	8014688 <_vfiprintf_r+0x20>
 8014742:	4b4f      	ldr	r3, [pc, #316]	; (8014880 <_vfiprintf_r+0x218>)
 8014744:	429c      	cmp	r4, r3
 8014746:	bf08      	it	eq
 8014748:	68f4      	ldreq	r4, [r6, #12]
 801474a:	e79d      	b.n	8014688 <_vfiprintf_r+0x20>
 801474c:	4621      	mov	r1, r4
 801474e:	4630      	mov	r0, r6
 8014750:	f7ff fd12 	bl	8014178 <__swsetup_r>
 8014754:	2800      	cmp	r0, #0
 8014756:	d09d      	beq.n	8014694 <_vfiprintf_r+0x2c>
 8014758:	f04f 30ff 	mov.w	r0, #4294967295
 801475c:	b01d      	add	sp, #116	; 0x74
 801475e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014762:	46a8      	mov	r8, r5
 8014764:	e7a2      	b.n	80146ac <_vfiprintf_r+0x44>
 8014766:	4a44      	ldr	r2, [pc, #272]	; (8014878 <_vfiprintf_r+0x210>)
 8014768:	1a80      	subs	r0, r0, r2
 801476a:	fa0b f000 	lsl.w	r0, fp, r0
 801476e:	4318      	orrs	r0, r3
 8014770:	9004      	str	r0, [sp, #16]
 8014772:	4645      	mov	r5, r8
 8014774:	e7be      	b.n	80146f4 <_vfiprintf_r+0x8c>
 8014776:	9a03      	ldr	r2, [sp, #12]
 8014778:	1d11      	adds	r1, r2, #4
 801477a:	6812      	ldr	r2, [r2, #0]
 801477c:	9103      	str	r1, [sp, #12]
 801477e:	2a00      	cmp	r2, #0
 8014780:	db01      	blt.n	8014786 <_vfiprintf_r+0x11e>
 8014782:	9207      	str	r2, [sp, #28]
 8014784:	e004      	b.n	8014790 <_vfiprintf_r+0x128>
 8014786:	4252      	negs	r2, r2
 8014788:	f043 0302 	orr.w	r3, r3, #2
 801478c:	9207      	str	r2, [sp, #28]
 801478e:	9304      	str	r3, [sp, #16]
 8014790:	f898 3000 	ldrb.w	r3, [r8]
 8014794:	2b2e      	cmp	r3, #46	; 0x2e
 8014796:	d10e      	bne.n	80147b6 <_vfiprintf_r+0x14e>
 8014798:	f898 3001 	ldrb.w	r3, [r8, #1]
 801479c:	2b2a      	cmp	r3, #42	; 0x2a
 801479e:	d138      	bne.n	8014812 <_vfiprintf_r+0x1aa>
 80147a0:	9b03      	ldr	r3, [sp, #12]
 80147a2:	1d1a      	adds	r2, r3, #4
 80147a4:	681b      	ldr	r3, [r3, #0]
 80147a6:	9203      	str	r2, [sp, #12]
 80147a8:	2b00      	cmp	r3, #0
 80147aa:	bfb8      	it	lt
 80147ac:	f04f 33ff 	movlt.w	r3, #4294967295
 80147b0:	f108 0802 	add.w	r8, r8, #2
 80147b4:	9305      	str	r3, [sp, #20]
 80147b6:	4d33      	ldr	r5, [pc, #204]	; (8014884 <_vfiprintf_r+0x21c>)
 80147b8:	f898 1000 	ldrb.w	r1, [r8]
 80147bc:	2203      	movs	r2, #3
 80147be:	4628      	mov	r0, r5
 80147c0:	f7eb fd8e 	bl	80002e0 <memchr>
 80147c4:	b140      	cbz	r0, 80147d8 <_vfiprintf_r+0x170>
 80147c6:	2340      	movs	r3, #64	; 0x40
 80147c8:	1b40      	subs	r0, r0, r5
 80147ca:	fa03 f000 	lsl.w	r0, r3, r0
 80147ce:	9b04      	ldr	r3, [sp, #16]
 80147d0:	4303      	orrs	r3, r0
 80147d2:	f108 0801 	add.w	r8, r8, #1
 80147d6:	9304      	str	r3, [sp, #16]
 80147d8:	f898 1000 	ldrb.w	r1, [r8]
 80147dc:	482a      	ldr	r0, [pc, #168]	; (8014888 <_vfiprintf_r+0x220>)
 80147de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80147e2:	2206      	movs	r2, #6
 80147e4:	f108 0701 	add.w	r7, r8, #1
 80147e8:	f7eb fd7a 	bl	80002e0 <memchr>
 80147ec:	2800      	cmp	r0, #0
 80147ee:	d037      	beq.n	8014860 <_vfiprintf_r+0x1f8>
 80147f0:	4b26      	ldr	r3, [pc, #152]	; (801488c <_vfiprintf_r+0x224>)
 80147f2:	bb1b      	cbnz	r3, 801483c <_vfiprintf_r+0x1d4>
 80147f4:	9b03      	ldr	r3, [sp, #12]
 80147f6:	3307      	adds	r3, #7
 80147f8:	f023 0307 	bic.w	r3, r3, #7
 80147fc:	3308      	adds	r3, #8
 80147fe:	9303      	str	r3, [sp, #12]
 8014800:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014802:	444b      	add	r3, r9
 8014804:	9309      	str	r3, [sp, #36]	; 0x24
 8014806:	e750      	b.n	80146aa <_vfiprintf_r+0x42>
 8014808:	fb05 3202 	mla	r2, r5, r2, r3
 801480c:	2001      	movs	r0, #1
 801480e:	4688      	mov	r8, r1
 8014810:	e78a      	b.n	8014728 <_vfiprintf_r+0xc0>
 8014812:	2300      	movs	r3, #0
 8014814:	f108 0801 	add.w	r8, r8, #1
 8014818:	9305      	str	r3, [sp, #20]
 801481a:	4619      	mov	r1, r3
 801481c:	250a      	movs	r5, #10
 801481e:	4640      	mov	r0, r8
 8014820:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014824:	3a30      	subs	r2, #48	; 0x30
 8014826:	2a09      	cmp	r2, #9
 8014828:	d903      	bls.n	8014832 <_vfiprintf_r+0x1ca>
 801482a:	2b00      	cmp	r3, #0
 801482c:	d0c3      	beq.n	80147b6 <_vfiprintf_r+0x14e>
 801482e:	9105      	str	r1, [sp, #20]
 8014830:	e7c1      	b.n	80147b6 <_vfiprintf_r+0x14e>
 8014832:	fb05 2101 	mla	r1, r5, r1, r2
 8014836:	2301      	movs	r3, #1
 8014838:	4680      	mov	r8, r0
 801483a:	e7f0      	b.n	801481e <_vfiprintf_r+0x1b6>
 801483c:	ab03      	add	r3, sp, #12
 801483e:	9300      	str	r3, [sp, #0]
 8014840:	4622      	mov	r2, r4
 8014842:	4b13      	ldr	r3, [pc, #76]	; (8014890 <_vfiprintf_r+0x228>)
 8014844:	a904      	add	r1, sp, #16
 8014846:	4630      	mov	r0, r6
 8014848:	f3af 8000 	nop.w
 801484c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8014850:	4681      	mov	r9, r0
 8014852:	d1d5      	bne.n	8014800 <_vfiprintf_r+0x198>
 8014854:	89a3      	ldrh	r3, [r4, #12]
 8014856:	065b      	lsls	r3, r3, #25
 8014858:	f53f af7e 	bmi.w	8014758 <_vfiprintf_r+0xf0>
 801485c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801485e:	e77d      	b.n	801475c <_vfiprintf_r+0xf4>
 8014860:	ab03      	add	r3, sp, #12
 8014862:	9300      	str	r3, [sp, #0]
 8014864:	4622      	mov	r2, r4
 8014866:	4b0a      	ldr	r3, [pc, #40]	; (8014890 <_vfiprintf_r+0x228>)
 8014868:	a904      	add	r1, sp, #16
 801486a:	4630      	mov	r0, r6
 801486c:	f000 f888 	bl	8014980 <_printf_i>
 8014870:	e7ec      	b.n	801484c <_vfiprintf_r+0x1e4>
 8014872:	bf00      	nop
 8014874:	08016e8c 	.word	0x08016e8c
 8014878:	08016ecc 	.word	0x08016ecc
 801487c:	08016eac 	.word	0x08016eac
 8014880:	08016e6c 	.word	0x08016e6c
 8014884:	08016ed2 	.word	0x08016ed2
 8014888:	08016ed6 	.word	0x08016ed6
 801488c:	00000000 	.word	0x00000000
 8014890:	08014643 	.word	0x08014643

08014894 <_printf_common>:
 8014894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014898:	4691      	mov	r9, r2
 801489a:	461f      	mov	r7, r3
 801489c:	688a      	ldr	r2, [r1, #8]
 801489e:	690b      	ldr	r3, [r1, #16]
 80148a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80148a4:	4293      	cmp	r3, r2
 80148a6:	bfb8      	it	lt
 80148a8:	4613      	movlt	r3, r2
 80148aa:	f8c9 3000 	str.w	r3, [r9]
 80148ae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80148b2:	4606      	mov	r6, r0
 80148b4:	460c      	mov	r4, r1
 80148b6:	b112      	cbz	r2, 80148be <_printf_common+0x2a>
 80148b8:	3301      	adds	r3, #1
 80148ba:	f8c9 3000 	str.w	r3, [r9]
 80148be:	6823      	ldr	r3, [r4, #0]
 80148c0:	0699      	lsls	r1, r3, #26
 80148c2:	bf42      	ittt	mi
 80148c4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80148c8:	3302      	addmi	r3, #2
 80148ca:	f8c9 3000 	strmi.w	r3, [r9]
 80148ce:	6825      	ldr	r5, [r4, #0]
 80148d0:	f015 0506 	ands.w	r5, r5, #6
 80148d4:	d107      	bne.n	80148e6 <_printf_common+0x52>
 80148d6:	f104 0a19 	add.w	sl, r4, #25
 80148da:	68e3      	ldr	r3, [r4, #12]
 80148dc:	f8d9 2000 	ldr.w	r2, [r9]
 80148e0:	1a9b      	subs	r3, r3, r2
 80148e2:	42ab      	cmp	r3, r5
 80148e4:	dc28      	bgt.n	8014938 <_printf_common+0xa4>
 80148e6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80148ea:	6822      	ldr	r2, [r4, #0]
 80148ec:	3300      	adds	r3, #0
 80148ee:	bf18      	it	ne
 80148f0:	2301      	movne	r3, #1
 80148f2:	0692      	lsls	r2, r2, #26
 80148f4:	d42d      	bmi.n	8014952 <_printf_common+0xbe>
 80148f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80148fa:	4639      	mov	r1, r7
 80148fc:	4630      	mov	r0, r6
 80148fe:	47c0      	blx	r8
 8014900:	3001      	adds	r0, #1
 8014902:	d020      	beq.n	8014946 <_printf_common+0xb2>
 8014904:	6823      	ldr	r3, [r4, #0]
 8014906:	68e5      	ldr	r5, [r4, #12]
 8014908:	f8d9 2000 	ldr.w	r2, [r9]
 801490c:	f003 0306 	and.w	r3, r3, #6
 8014910:	2b04      	cmp	r3, #4
 8014912:	bf08      	it	eq
 8014914:	1aad      	subeq	r5, r5, r2
 8014916:	68a3      	ldr	r3, [r4, #8]
 8014918:	6922      	ldr	r2, [r4, #16]
 801491a:	bf0c      	ite	eq
 801491c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014920:	2500      	movne	r5, #0
 8014922:	4293      	cmp	r3, r2
 8014924:	bfc4      	itt	gt
 8014926:	1a9b      	subgt	r3, r3, r2
 8014928:	18ed      	addgt	r5, r5, r3
 801492a:	f04f 0900 	mov.w	r9, #0
 801492e:	341a      	adds	r4, #26
 8014930:	454d      	cmp	r5, r9
 8014932:	d11a      	bne.n	801496a <_printf_common+0xd6>
 8014934:	2000      	movs	r0, #0
 8014936:	e008      	b.n	801494a <_printf_common+0xb6>
 8014938:	2301      	movs	r3, #1
 801493a:	4652      	mov	r2, sl
 801493c:	4639      	mov	r1, r7
 801493e:	4630      	mov	r0, r6
 8014940:	47c0      	blx	r8
 8014942:	3001      	adds	r0, #1
 8014944:	d103      	bne.n	801494e <_printf_common+0xba>
 8014946:	f04f 30ff 	mov.w	r0, #4294967295
 801494a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801494e:	3501      	adds	r5, #1
 8014950:	e7c3      	b.n	80148da <_printf_common+0x46>
 8014952:	18e1      	adds	r1, r4, r3
 8014954:	1c5a      	adds	r2, r3, #1
 8014956:	2030      	movs	r0, #48	; 0x30
 8014958:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801495c:	4422      	add	r2, r4
 801495e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014962:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014966:	3302      	adds	r3, #2
 8014968:	e7c5      	b.n	80148f6 <_printf_common+0x62>
 801496a:	2301      	movs	r3, #1
 801496c:	4622      	mov	r2, r4
 801496e:	4639      	mov	r1, r7
 8014970:	4630      	mov	r0, r6
 8014972:	47c0      	blx	r8
 8014974:	3001      	adds	r0, #1
 8014976:	d0e6      	beq.n	8014946 <_printf_common+0xb2>
 8014978:	f109 0901 	add.w	r9, r9, #1
 801497c:	e7d8      	b.n	8014930 <_printf_common+0x9c>
	...

08014980 <_printf_i>:
 8014980:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014984:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8014988:	460c      	mov	r4, r1
 801498a:	7e09      	ldrb	r1, [r1, #24]
 801498c:	b085      	sub	sp, #20
 801498e:	296e      	cmp	r1, #110	; 0x6e
 8014990:	4617      	mov	r7, r2
 8014992:	4606      	mov	r6, r0
 8014994:	4698      	mov	r8, r3
 8014996:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014998:	f000 80b3 	beq.w	8014b02 <_printf_i+0x182>
 801499c:	d822      	bhi.n	80149e4 <_printf_i+0x64>
 801499e:	2963      	cmp	r1, #99	; 0x63
 80149a0:	d036      	beq.n	8014a10 <_printf_i+0x90>
 80149a2:	d80a      	bhi.n	80149ba <_printf_i+0x3a>
 80149a4:	2900      	cmp	r1, #0
 80149a6:	f000 80b9 	beq.w	8014b1c <_printf_i+0x19c>
 80149aa:	2958      	cmp	r1, #88	; 0x58
 80149ac:	f000 8083 	beq.w	8014ab6 <_printf_i+0x136>
 80149b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80149b4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80149b8:	e032      	b.n	8014a20 <_printf_i+0xa0>
 80149ba:	2964      	cmp	r1, #100	; 0x64
 80149bc:	d001      	beq.n	80149c2 <_printf_i+0x42>
 80149be:	2969      	cmp	r1, #105	; 0x69
 80149c0:	d1f6      	bne.n	80149b0 <_printf_i+0x30>
 80149c2:	6820      	ldr	r0, [r4, #0]
 80149c4:	6813      	ldr	r3, [r2, #0]
 80149c6:	0605      	lsls	r5, r0, #24
 80149c8:	f103 0104 	add.w	r1, r3, #4
 80149cc:	d52a      	bpl.n	8014a24 <_printf_i+0xa4>
 80149ce:	681b      	ldr	r3, [r3, #0]
 80149d0:	6011      	str	r1, [r2, #0]
 80149d2:	2b00      	cmp	r3, #0
 80149d4:	da03      	bge.n	80149de <_printf_i+0x5e>
 80149d6:	222d      	movs	r2, #45	; 0x2d
 80149d8:	425b      	negs	r3, r3
 80149da:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80149de:	486f      	ldr	r0, [pc, #444]	; (8014b9c <_printf_i+0x21c>)
 80149e0:	220a      	movs	r2, #10
 80149e2:	e039      	b.n	8014a58 <_printf_i+0xd8>
 80149e4:	2973      	cmp	r1, #115	; 0x73
 80149e6:	f000 809d 	beq.w	8014b24 <_printf_i+0x1a4>
 80149ea:	d808      	bhi.n	80149fe <_printf_i+0x7e>
 80149ec:	296f      	cmp	r1, #111	; 0x6f
 80149ee:	d020      	beq.n	8014a32 <_printf_i+0xb2>
 80149f0:	2970      	cmp	r1, #112	; 0x70
 80149f2:	d1dd      	bne.n	80149b0 <_printf_i+0x30>
 80149f4:	6823      	ldr	r3, [r4, #0]
 80149f6:	f043 0320 	orr.w	r3, r3, #32
 80149fa:	6023      	str	r3, [r4, #0]
 80149fc:	e003      	b.n	8014a06 <_printf_i+0x86>
 80149fe:	2975      	cmp	r1, #117	; 0x75
 8014a00:	d017      	beq.n	8014a32 <_printf_i+0xb2>
 8014a02:	2978      	cmp	r1, #120	; 0x78
 8014a04:	d1d4      	bne.n	80149b0 <_printf_i+0x30>
 8014a06:	2378      	movs	r3, #120	; 0x78
 8014a08:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8014a0c:	4864      	ldr	r0, [pc, #400]	; (8014ba0 <_printf_i+0x220>)
 8014a0e:	e055      	b.n	8014abc <_printf_i+0x13c>
 8014a10:	6813      	ldr	r3, [r2, #0]
 8014a12:	1d19      	adds	r1, r3, #4
 8014a14:	681b      	ldr	r3, [r3, #0]
 8014a16:	6011      	str	r1, [r2, #0]
 8014a18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014a1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014a20:	2301      	movs	r3, #1
 8014a22:	e08c      	b.n	8014b3e <_printf_i+0x1be>
 8014a24:	681b      	ldr	r3, [r3, #0]
 8014a26:	6011      	str	r1, [r2, #0]
 8014a28:	f010 0f40 	tst.w	r0, #64	; 0x40
 8014a2c:	bf18      	it	ne
 8014a2e:	b21b      	sxthne	r3, r3
 8014a30:	e7cf      	b.n	80149d2 <_printf_i+0x52>
 8014a32:	6813      	ldr	r3, [r2, #0]
 8014a34:	6825      	ldr	r5, [r4, #0]
 8014a36:	1d18      	adds	r0, r3, #4
 8014a38:	6010      	str	r0, [r2, #0]
 8014a3a:	0628      	lsls	r0, r5, #24
 8014a3c:	d501      	bpl.n	8014a42 <_printf_i+0xc2>
 8014a3e:	681b      	ldr	r3, [r3, #0]
 8014a40:	e002      	b.n	8014a48 <_printf_i+0xc8>
 8014a42:	0668      	lsls	r0, r5, #25
 8014a44:	d5fb      	bpl.n	8014a3e <_printf_i+0xbe>
 8014a46:	881b      	ldrh	r3, [r3, #0]
 8014a48:	4854      	ldr	r0, [pc, #336]	; (8014b9c <_printf_i+0x21c>)
 8014a4a:	296f      	cmp	r1, #111	; 0x6f
 8014a4c:	bf14      	ite	ne
 8014a4e:	220a      	movne	r2, #10
 8014a50:	2208      	moveq	r2, #8
 8014a52:	2100      	movs	r1, #0
 8014a54:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014a58:	6865      	ldr	r5, [r4, #4]
 8014a5a:	60a5      	str	r5, [r4, #8]
 8014a5c:	2d00      	cmp	r5, #0
 8014a5e:	f2c0 8095 	blt.w	8014b8c <_printf_i+0x20c>
 8014a62:	6821      	ldr	r1, [r4, #0]
 8014a64:	f021 0104 	bic.w	r1, r1, #4
 8014a68:	6021      	str	r1, [r4, #0]
 8014a6a:	2b00      	cmp	r3, #0
 8014a6c:	d13d      	bne.n	8014aea <_printf_i+0x16a>
 8014a6e:	2d00      	cmp	r5, #0
 8014a70:	f040 808e 	bne.w	8014b90 <_printf_i+0x210>
 8014a74:	4665      	mov	r5, ip
 8014a76:	2a08      	cmp	r2, #8
 8014a78:	d10b      	bne.n	8014a92 <_printf_i+0x112>
 8014a7a:	6823      	ldr	r3, [r4, #0]
 8014a7c:	07db      	lsls	r3, r3, #31
 8014a7e:	d508      	bpl.n	8014a92 <_printf_i+0x112>
 8014a80:	6923      	ldr	r3, [r4, #16]
 8014a82:	6862      	ldr	r2, [r4, #4]
 8014a84:	429a      	cmp	r2, r3
 8014a86:	bfde      	ittt	le
 8014a88:	2330      	movle	r3, #48	; 0x30
 8014a8a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014a8e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8014a92:	ebac 0305 	sub.w	r3, ip, r5
 8014a96:	6123      	str	r3, [r4, #16]
 8014a98:	f8cd 8000 	str.w	r8, [sp]
 8014a9c:	463b      	mov	r3, r7
 8014a9e:	aa03      	add	r2, sp, #12
 8014aa0:	4621      	mov	r1, r4
 8014aa2:	4630      	mov	r0, r6
 8014aa4:	f7ff fef6 	bl	8014894 <_printf_common>
 8014aa8:	3001      	adds	r0, #1
 8014aaa:	d14d      	bne.n	8014b48 <_printf_i+0x1c8>
 8014aac:	f04f 30ff 	mov.w	r0, #4294967295
 8014ab0:	b005      	add	sp, #20
 8014ab2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014ab6:	4839      	ldr	r0, [pc, #228]	; (8014b9c <_printf_i+0x21c>)
 8014ab8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8014abc:	6813      	ldr	r3, [r2, #0]
 8014abe:	6821      	ldr	r1, [r4, #0]
 8014ac0:	1d1d      	adds	r5, r3, #4
 8014ac2:	681b      	ldr	r3, [r3, #0]
 8014ac4:	6015      	str	r5, [r2, #0]
 8014ac6:	060a      	lsls	r2, r1, #24
 8014ac8:	d50b      	bpl.n	8014ae2 <_printf_i+0x162>
 8014aca:	07ca      	lsls	r2, r1, #31
 8014acc:	bf44      	itt	mi
 8014ace:	f041 0120 	orrmi.w	r1, r1, #32
 8014ad2:	6021      	strmi	r1, [r4, #0]
 8014ad4:	b91b      	cbnz	r3, 8014ade <_printf_i+0x15e>
 8014ad6:	6822      	ldr	r2, [r4, #0]
 8014ad8:	f022 0220 	bic.w	r2, r2, #32
 8014adc:	6022      	str	r2, [r4, #0]
 8014ade:	2210      	movs	r2, #16
 8014ae0:	e7b7      	b.n	8014a52 <_printf_i+0xd2>
 8014ae2:	064d      	lsls	r5, r1, #25
 8014ae4:	bf48      	it	mi
 8014ae6:	b29b      	uxthmi	r3, r3
 8014ae8:	e7ef      	b.n	8014aca <_printf_i+0x14a>
 8014aea:	4665      	mov	r5, ip
 8014aec:	fbb3 f1f2 	udiv	r1, r3, r2
 8014af0:	fb02 3311 	mls	r3, r2, r1, r3
 8014af4:	5cc3      	ldrb	r3, [r0, r3]
 8014af6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8014afa:	460b      	mov	r3, r1
 8014afc:	2900      	cmp	r1, #0
 8014afe:	d1f5      	bne.n	8014aec <_printf_i+0x16c>
 8014b00:	e7b9      	b.n	8014a76 <_printf_i+0xf6>
 8014b02:	6813      	ldr	r3, [r2, #0]
 8014b04:	6825      	ldr	r5, [r4, #0]
 8014b06:	6961      	ldr	r1, [r4, #20]
 8014b08:	1d18      	adds	r0, r3, #4
 8014b0a:	6010      	str	r0, [r2, #0]
 8014b0c:	0628      	lsls	r0, r5, #24
 8014b0e:	681b      	ldr	r3, [r3, #0]
 8014b10:	d501      	bpl.n	8014b16 <_printf_i+0x196>
 8014b12:	6019      	str	r1, [r3, #0]
 8014b14:	e002      	b.n	8014b1c <_printf_i+0x19c>
 8014b16:	066a      	lsls	r2, r5, #25
 8014b18:	d5fb      	bpl.n	8014b12 <_printf_i+0x192>
 8014b1a:	8019      	strh	r1, [r3, #0]
 8014b1c:	2300      	movs	r3, #0
 8014b1e:	6123      	str	r3, [r4, #16]
 8014b20:	4665      	mov	r5, ip
 8014b22:	e7b9      	b.n	8014a98 <_printf_i+0x118>
 8014b24:	6813      	ldr	r3, [r2, #0]
 8014b26:	1d19      	adds	r1, r3, #4
 8014b28:	6011      	str	r1, [r2, #0]
 8014b2a:	681d      	ldr	r5, [r3, #0]
 8014b2c:	6862      	ldr	r2, [r4, #4]
 8014b2e:	2100      	movs	r1, #0
 8014b30:	4628      	mov	r0, r5
 8014b32:	f7eb fbd5 	bl	80002e0 <memchr>
 8014b36:	b108      	cbz	r0, 8014b3c <_printf_i+0x1bc>
 8014b38:	1b40      	subs	r0, r0, r5
 8014b3a:	6060      	str	r0, [r4, #4]
 8014b3c:	6863      	ldr	r3, [r4, #4]
 8014b3e:	6123      	str	r3, [r4, #16]
 8014b40:	2300      	movs	r3, #0
 8014b42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014b46:	e7a7      	b.n	8014a98 <_printf_i+0x118>
 8014b48:	6923      	ldr	r3, [r4, #16]
 8014b4a:	462a      	mov	r2, r5
 8014b4c:	4639      	mov	r1, r7
 8014b4e:	4630      	mov	r0, r6
 8014b50:	47c0      	blx	r8
 8014b52:	3001      	adds	r0, #1
 8014b54:	d0aa      	beq.n	8014aac <_printf_i+0x12c>
 8014b56:	6823      	ldr	r3, [r4, #0]
 8014b58:	079b      	lsls	r3, r3, #30
 8014b5a:	d413      	bmi.n	8014b84 <_printf_i+0x204>
 8014b5c:	68e0      	ldr	r0, [r4, #12]
 8014b5e:	9b03      	ldr	r3, [sp, #12]
 8014b60:	4298      	cmp	r0, r3
 8014b62:	bfb8      	it	lt
 8014b64:	4618      	movlt	r0, r3
 8014b66:	e7a3      	b.n	8014ab0 <_printf_i+0x130>
 8014b68:	2301      	movs	r3, #1
 8014b6a:	464a      	mov	r2, r9
 8014b6c:	4639      	mov	r1, r7
 8014b6e:	4630      	mov	r0, r6
 8014b70:	47c0      	blx	r8
 8014b72:	3001      	adds	r0, #1
 8014b74:	d09a      	beq.n	8014aac <_printf_i+0x12c>
 8014b76:	3501      	adds	r5, #1
 8014b78:	68e3      	ldr	r3, [r4, #12]
 8014b7a:	9a03      	ldr	r2, [sp, #12]
 8014b7c:	1a9b      	subs	r3, r3, r2
 8014b7e:	42ab      	cmp	r3, r5
 8014b80:	dcf2      	bgt.n	8014b68 <_printf_i+0x1e8>
 8014b82:	e7eb      	b.n	8014b5c <_printf_i+0x1dc>
 8014b84:	2500      	movs	r5, #0
 8014b86:	f104 0919 	add.w	r9, r4, #25
 8014b8a:	e7f5      	b.n	8014b78 <_printf_i+0x1f8>
 8014b8c:	2b00      	cmp	r3, #0
 8014b8e:	d1ac      	bne.n	8014aea <_printf_i+0x16a>
 8014b90:	7803      	ldrb	r3, [r0, #0]
 8014b92:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014b96:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014b9a:	e76c      	b.n	8014a76 <_printf_i+0xf6>
 8014b9c:	08016edd 	.word	0x08016edd
 8014ba0:	08016eee 	.word	0x08016eee

08014ba4 <__sread>:
 8014ba4:	b510      	push	{r4, lr}
 8014ba6:	460c      	mov	r4, r1
 8014ba8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014bac:	f000 f894 	bl	8014cd8 <_read_r>
 8014bb0:	2800      	cmp	r0, #0
 8014bb2:	bfab      	itete	ge
 8014bb4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014bb6:	89a3      	ldrhlt	r3, [r4, #12]
 8014bb8:	181b      	addge	r3, r3, r0
 8014bba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014bbe:	bfac      	ite	ge
 8014bc0:	6563      	strge	r3, [r4, #84]	; 0x54
 8014bc2:	81a3      	strhlt	r3, [r4, #12]
 8014bc4:	bd10      	pop	{r4, pc}

08014bc6 <__swrite>:
 8014bc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014bca:	461f      	mov	r7, r3
 8014bcc:	898b      	ldrh	r3, [r1, #12]
 8014bce:	05db      	lsls	r3, r3, #23
 8014bd0:	4605      	mov	r5, r0
 8014bd2:	460c      	mov	r4, r1
 8014bd4:	4616      	mov	r6, r2
 8014bd6:	d505      	bpl.n	8014be4 <__swrite+0x1e>
 8014bd8:	2302      	movs	r3, #2
 8014bda:	2200      	movs	r2, #0
 8014bdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014be0:	f000 f868 	bl	8014cb4 <_lseek_r>
 8014be4:	89a3      	ldrh	r3, [r4, #12]
 8014be6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014bea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014bee:	81a3      	strh	r3, [r4, #12]
 8014bf0:	4632      	mov	r2, r6
 8014bf2:	463b      	mov	r3, r7
 8014bf4:	4628      	mov	r0, r5
 8014bf6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014bfa:	f000 b817 	b.w	8014c2c <_write_r>

08014bfe <__sseek>:
 8014bfe:	b510      	push	{r4, lr}
 8014c00:	460c      	mov	r4, r1
 8014c02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014c06:	f000 f855 	bl	8014cb4 <_lseek_r>
 8014c0a:	1c43      	adds	r3, r0, #1
 8014c0c:	89a3      	ldrh	r3, [r4, #12]
 8014c0e:	bf15      	itete	ne
 8014c10:	6560      	strne	r0, [r4, #84]	; 0x54
 8014c12:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014c16:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014c1a:	81a3      	strheq	r3, [r4, #12]
 8014c1c:	bf18      	it	ne
 8014c1e:	81a3      	strhne	r3, [r4, #12]
 8014c20:	bd10      	pop	{r4, pc}

08014c22 <__sclose>:
 8014c22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014c26:	f000 b813 	b.w	8014c50 <_close_r>
	...

08014c2c <_write_r>:
 8014c2c:	b538      	push	{r3, r4, r5, lr}
 8014c2e:	4c07      	ldr	r4, [pc, #28]	; (8014c4c <_write_r+0x20>)
 8014c30:	4605      	mov	r5, r0
 8014c32:	4608      	mov	r0, r1
 8014c34:	4611      	mov	r1, r2
 8014c36:	2200      	movs	r2, #0
 8014c38:	6022      	str	r2, [r4, #0]
 8014c3a:	461a      	mov	r2, r3
 8014c3c:	f7fe f917 	bl	8012e6e <_write>
 8014c40:	1c43      	adds	r3, r0, #1
 8014c42:	d102      	bne.n	8014c4a <_write_r+0x1e>
 8014c44:	6823      	ldr	r3, [r4, #0]
 8014c46:	b103      	cbz	r3, 8014c4a <_write_r+0x1e>
 8014c48:	602b      	str	r3, [r5, #0]
 8014c4a:	bd38      	pop	{r3, r4, r5, pc}
 8014c4c:	20004d50 	.word	0x20004d50

08014c50 <_close_r>:
 8014c50:	b538      	push	{r3, r4, r5, lr}
 8014c52:	4c06      	ldr	r4, [pc, #24]	; (8014c6c <_close_r+0x1c>)
 8014c54:	2300      	movs	r3, #0
 8014c56:	4605      	mov	r5, r0
 8014c58:	4608      	mov	r0, r1
 8014c5a:	6023      	str	r3, [r4, #0]
 8014c5c:	f7fe f923 	bl	8012ea6 <_close>
 8014c60:	1c43      	adds	r3, r0, #1
 8014c62:	d102      	bne.n	8014c6a <_close_r+0x1a>
 8014c64:	6823      	ldr	r3, [r4, #0]
 8014c66:	b103      	cbz	r3, 8014c6a <_close_r+0x1a>
 8014c68:	602b      	str	r3, [r5, #0]
 8014c6a:	bd38      	pop	{r3, r4, r5, pc}
 8014c6c:	20004d50 	.word	0x20004d50

08014c70 <_fstat_r>:
 8014c70:	b538      	push	{r3, r4, r5, lr}
 8014c72:	4c07      	ldr	r4, [pc, #28]	; (8014c90 <_fstat_r+0x20>)
 8014c74:	2300      	movs	r3, #0
 8014c76:	4605      	mov	r5, r0
 8014c78:	4608      	mov	r0, r1
 8014c7a:	4611      	mov	r1, r2
 8014c7c:	6023      	str	r3, [r4, #0]
 8014c7e:	f7fe f91e 	bl	8012ebe <_fstat>
 8014c82:	1c43      	adds	r3, r0, #1
 8014c84:	d102      	bne.n	8014c8c <_fstat_r+0x1c>
 8014c86:	6823      	ldr	r3, [r4, #0]
 8014c88:	b103      	cbz	r3, 8014c8c <_fstat_r+0x1c>
 8014c8a:	602b      	str	r3, [r5, #0]
 8014c8c:	bd38      	pop	{r3, r4, r5, pc}
 8014c8e:	bf00      	nop
 8014c90:	20004d50 	.word	0x20004d50

08014c94 <_isatty_r>:
 8014c94:	b538      	push	{r3, r4, r5, lr}
 8014c96:	4c06      	ldr	r4, [pc, #24]	; (8014cb0 <_isatty_r+0x1c>)
 8014c98:	2300      	movs	r3, #0
 8014c9a:	4605      	mov	r5, r0
 8014c9c:	4608      	mov	r0, r1
 8014c9e:	6023      	str	r3, [r4, #0]
 8014ca0:	f7fe f91d 	bl	8012ede <_isatty>
 8014ca4:	1c43      	adds	r3, r0, #1
 8014ca6:	d102      	bne.n	8014cae <_isatty_r+0x1a>
 8014ca8:	6823      	ldr	r3, [r4, #0]
 8014caa:	b103      	cbz	r3, 8014cae <_isatty_r+0x1a>
 8014cac:	602b      	str	r3, [r5, #0]
 8014cae:	bd38      	pop	{r3, r4, r5, pc}
 8014cb0:	20004d50 	.word	0x20004d50

08014cb4 <_lseek_r>:
 8014cb4:	b538      	push	{r3, r4, r5, lr}
 8014cb6:	4c07      	ldr	r4, [pc, #28]	; (8014cd4 <_lseek_r+0x20>)
 8014cb8:	4605      	mov	r5, r0
 8014cba:	4608      	mov	r0, r1
 8014cbc:	4611      	mov	r1, r2
 8014cbe:	2200      	movs	r2, #0
 8014cc0:	6022      	str	r2, [r4, #0]
 8014cc2:	461a      	mov	r2, r3
 8014cc4:	f7fe f916 	bl	8012ef4 <_lseek>
 8014cc8:	1c43      	adds	r3, r0, #1
 8014cca:	d102      	bne.n	8014cd2 <_lseek_r+0x1e>
 8014ccc:	6823      	ldr	r3, [r4, #0]
 8014cce:	b103      	cbz	r3, 8014cd2 <_lseek_r+0x1e>
 8014cd0:	602b      	str	r3, [r5, #0]
 8014cd2:	bd38      	pop	{r3, r4, r5, pc}
 8014cd4:	20004d50 	.word	0x20004d50

08014cd8 <_read_r>:
 8014cd8:	b538      	push	{r3, r4, r5, lr}
 8014cda:	4c07      	ldr	r4, [pc, #28]	; (8014cf8 <_read_r+0x20>)
 8014cdc:	4605      	mov	r5, r0
 8014cde:	4608      	mov	r0, r1
 8014ce0:	4611      	mov	r1, r2
 8014ce2:	2200      	movs	r2, #0
 8014ce4:	6022      	str	r2, [r4, #0]
 8014ce6:	461a      	mov	r2, r3
 8014ce8:	f7fe f8a4 	bl	8012e34 <_read>
 8014cec:	1c43      	adds	r3, r0, #1
 8014cee:	d102      	bne.n	8014cf6 <_read_r+0x1e>
 8014cf0:	6823      	ldr	r3, [r4, #0]
 8014cf2:	b103      	cbz	r3, 8014cf6 <_read_r+0x1e>
 8014cf4:	602b      	str	r3, [r5, #0]
 8014cf6:	bd38      	pop	{r3, r4, r5, pc}
 8014cf8:	20004d50 	.word	0x20004d50

08014cfc <_init>:
 8014cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014cfe:	bf00      	nop
 8014d00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014d02:	bc08      	pop	{r3}
 8014d04:	469e      	mov	lr, r3
 8014d06:	4770      	bx	lr

08014d08 <_fini>:
 8014d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d0a:	bf00      	nop
 8014d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014d0e:	bc08      	pop	{r3}
 8014d10:	469e      	mov	lr, r3
 8014d12:	4770      	bx	lr
